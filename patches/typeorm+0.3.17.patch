diff --git a/node_modules/typeorm/README.md b/node_modules/typeorm/README.md
index 07c47d0..93a242b 100644
--- a/node_modules/typeorm/README.md
+++ b/node_modules/typeorm/README.md
@@ -25,13 +25,13 @@ that can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeS
 and can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8).
 Its goal is to always support the latest JavaScript features and provide additional features
 that help you to develop any kind of application that uses databases - from
-small applications with a few tables to large scale enterprise applications
+small applications with a few tables to large-scale enterprise applications
 with multiple databases.
 
 TypeORM supports both [Active Record](./docs/active-record-data-mapper.md#what-is-the-active-record-pattern) and [Data Mapper](./docs/active-record-data-mapper.md#what-is-the-data-mapper-pattern) patterns,
 unlike all other JavaScript ORMs currently in existence,
-which means you can write high quality, loosely coupled, scalable,
-maintainable applications the most productive way.
+which means you can write high-quality, loosely coupled, scalable,
+maintainable applications in the most productive way.
 
 TypeORM is highly influenced by other ORMs, such as [Hibernate](http://hibernate.org/orm/),
 [Doctrine](http://www.doctrine-project.org/) and [Entity Framework](https://www.asp.net/entity-framework).
@@ -43,10 +43,10 @@ TypeORM is highly influenced by other ORMs, such as [Hibernate](http://hibernate
 -   Database-specific column types.
 -   Entity manager.
 -   Repositories and custom repositories.
--   Clean object relational model.
+-   Clean object-relational model.
 -   Associations (relations).
 -   Eager and lazy relations.
--   Uni-directional, bi-directional and self-referenced relations.
+-   Uni-directional, bi-directional, and self-referenced relations.
 -   Supports multiple inheritance patterns.
 -   Cascades.
 -   Indices.
@@ -55,7 +55,7 @@ TypeORM is highly influenced by other ORMs, such as [Hibernate](http://hibernate
 -   Connection pooling.
 -   Replication.
 -   Using multiple database instances.
--   Working with multiple databases types.
+-   Working with multiple database types.
 -   Cross-database and cross-schema queries.
 -   Elegant-syntax, flexible and powerful QueryBuilder.
 -   Left and inner joins.
@@ -71,7 +71,7 @@ TypeORM is highly influenced by other ORMs, such as [Hibernate](http://hibernate
 -   Works in NodeJS / Browser / Ionic / Cordova / React Native / NativeScript / Expo / Electron platforms.
 -   TypeScript and JavaScript support.
 -   ESM and CommonJS support.
--   Produced code is performant, flexible, clean and maintainable.
+-   Produced code is performant, flexible, clean, and maintainable.
 -   Follows all possible best practices.
 -   CLI.
 
@@ -361,7 +361,7 @@ This guide will show you how to set up TypeORM from scratch and make it do what
 
 ### Create a model
 
-Working with a database starts from creating tables.
+Working with a database starts with creating tables.
 How do you tell TypeORM to create a database table?
 The answer is - through the models.
 Your models in your app are your database tables.
@@ -409,7 +409,7 @@ export class Photo {
 
 Now, a database table will be created for the `Photo` entity and we'll be able to work with it anywhere in our app.
 We have created a database table, however, what table can exist without columns?
-Let's create few columns in our database table.
+Let's create a few columns in our database table.
 
 ### Adding table columns
 
@@ -441,7 +441,7 @@ export class Photo {
 }
 ```
 
-Now `id`, `name`, `description`, `filename`, `views` and `isPublished` columns will be added to the `photo` table.
+Now `id`, `name`, `description`, `filename`, `views`, and `isPublished` columns will be added to the `photo` table.
 Column types in the database are inferred from the property types you used, e.g.
 `number` will be converted into `integer`, `string` into `varchar`, `boolean` into `bool`, etc.
 But you can use any column type your database supports by explicitly specifying a column type into the `@Column` decorator.
@@ -515,7 +515,7 @@ export class Photo {
 Next, let's fix our data types. By default, the string is mapped to a varchar(255)-like type (depending on the database type).
 The number is mapped to an integer-like type (depending on the database type).
 We don't want all our columns to be limited varchars or integers.
-Let's setup correct data types:
+Let's setup the correct data types:
 
 ```javascript
 import { Entity, Column, PrimaryGeneratedColumn } from "typeorm"
@@ -569,7 +569,7 @@ const AppDataSource = new DataSource({
     logging: false,
 })
 
-// to initialize initial connection with the database, register all entities
+// to initialize the initial connection with the database, register all entities
 // and "synchronize" database schema, call "initialize()" method of a newly created database
 // once in your application bootstrap
 AppDataSource.initialize()
@@ -583,7 +583,7 @@ We are using Postgres in this example, but you can use any other supported datab
 To use another database, simply change the `type` in the options to the database type you are using:
 `mysql`, `mariadb`, `postgres`, `cockroachdb`, `sqlite`, `mssql`, `oracle`, `sap`, `spanner`, `cordova`, `nativescript`, `react-native`,
 `expo`, or `mongodb`.
-Also make sure to use your own host, port, username, password and database settings.
+Also make sure to use your own host, port, username, password, and database settings.
 
 We added our Photo entity to the list of entities for this data source.
 Each entity you are using in your connection must be listed there.
@@ -815,7 +815,7 @@ If you run the app, you'll see a newly generated table, and it will contain a co
 
 ### Save a one-to-one relation
 
-Now let's save a photo, its metadata and attach them to each other.
+Now let's save a photo, and its metadata and attach them to each other.
 
 ```javascript
 import { Photo } from "./entity/Photo"
@@ -954,7 +954,7 @@ export class Photo {
 
 Now let's load our photo and its photo metadata in a single query.
 There are two ways to do it - using `find*` methods or using `QueryBuilder` functionality.
-Let's use `find*` methods first.
+Let's use `find*` method first.
 `find*` methods allow you to specify an object with the `FindOneOptions` / `FindManyOptions` interface.
 
 ```javascript
@@ -1008,7 +1008,7 @@ export class Photo {
 }
 ```
 
-Using `cascade` allows us not to separately save photo and separately save metadata objects now.
+Using `cascade` allows us not to separately save photos and separately save metadata objects now.
 Now we can simply save a photo object, and the metadata object will be saved automatically because of cascade options.
 
 ```javascript
@@ -1040,7 +1040,7 @@ await photoRepository.save(photo)
 console.log("Photo is saved, photo metadata is saved too.")
 ```
 
-Notice that we now set the photo's `metadata` property, instead of the metadata's `photo` property as before. The `cascade` feature only works if you connect the photo to its metadata from the photo's side. If you set the metadata's side, the metadata would not be saved automatically.
+Notice that we now set the photo's `metadata` property, instead of the metadata's `photo` property as before. The `cascade` feature only works if you connect the photo to its metadata from the photo's side. If you set the metadata side, the metadata would not be saved automatically.
 
 ### Creating a many-to-one / one-to-many relation
 
@@ -1090,7 +1090,7 @@ export class Photo {
 }
 ```
 
-In many-to-one / one-to-many relation, the owner side is always many-to-one.
+In many-to-one / one-to-many relations, the owner side is always many-to-one.
 It means that the class that uses `@ManyToOne` will store the id of the related object.
 
 After you run the application, the ORM will create the `author` table:
@@ -1181,7 +1181,7 @@ const options: DataSourceOptions = {
 }
 ```
 
-Now let's insert albums and photos to our database:
+Now let's insert albums and photos into our database:
 
 ```javascript
 import { AppDataSource } from "./index"
@@ -1257,7 +1257,7 @@ This query selects all published photos with "My" or "Mishka" names.
 It will select results from position 5 (pagination offset)
 and will select only 10 results (pagination limit).
 The selection result will be ordered by id in descending order.
-The photo's albums will be left joined and their metadata will be inner joined.
+The photo albums will be left joined and their metadata will be inner joined.
 
 You'll use the query builder in your application a lot.
 Learn more about QueryBuilder [here](./docs/select-query-builder.md).
@@ -1266,7 +1266,7 @@ Learn more about QueryBuilder [here](./docs/select-query-builder.md).
 
 Take a look at the samples in [sample](https://github.com/typeorm/typeorm/tree/master/sample) for examples of usage.
 
-There are a few repositories which you can clone and start with:
+There are a few repositories that you can clone and start with:
 
 -   [Example how to use TypeORM with TypeScript](https://github.com/typeorm/typescript-example)
 -   [Example how to use TypeORM with JavaScript](https://github.com/typeorm/javascript-example)
@@ -1291,7 +1291,7 @@ There are several extensions that simplify working with TypeORM and integrating
 -   [TypeORM + GraphQL framework](https://github.com/vesper-framework/vesper)
 -   [TypeORM integration](https://github.com/typeorm/typeorm-typedi-extensions) with [TypeDI](https://github.com/pleerock/typedi)
 -   [TypeORM integration](https://github.com/typeorm/typeorm-routing-controllers-extensions) with [routing-controllers](https://github.com/pleerock/routing-controllers)
--   Models generation from existing database - [typeorm-model-generator](https://github.com/Kononnable/typeorm-model-generator)
+-   Models generation from the existing database - [typeorm-model-generator](https://github.com/Kononnable/typeorm-model-generator)
 -   Fixtures loader - [typeorm-fixtures-cli](https://github.com/RobinCK/typeorm-fixtures)
 -   ER Diagram generator - [typeorm-uml](https://github.com/eugene-manuilov/typeorm-uml/)
 -   another ER Diagram generator - [erdia](https://www.npmjs.com/package/erdia/)
@@ -1302,7 +1302,7 @@ There are several extensions that simplify working with TypeORM and integrating
 
 ## Contributing
 
-Learn about contribution [here](https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md) and how to setup your development environment [here](https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md).
+Learn about contribution [here](https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md) and how to set up your development environment [here](https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md).
 
 This project exists thanks to all the people who contribute:
 
diff --git a/node_modules/typeorm/browser/cache/QueryResultCache.d.ts b/node_modules/typeorm/browser/cache/QueryResultCache.d.ts
index 222f82c..9a0aca4 100644
--- a/node_modules/typeorm/browser/cache/QueryResultCache.d.ts
+++ b/node_modules/typeorm/browser/cache/QueryResultCache.d.ts
@@ -1,5 +1,5 @@
-import { QueryResultCacheOptions } from "./QueryResultCacheOptions";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { QueryResultCacheOptions } from "typeorm/browser/cache/QueryResultCacheOptions";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * Implementations of this interface provide different strategies to cache query builder results.
  */
diff --git a/node_modules/typeorm/browser/cli-ts-node-commonjs.js b/node_modules/typeorm/browser/cli-ts-node-commonjs.js
old mode 100755
new mode 100644
diff --git a/node_modules/typeorm/browser/cli-ts-node-esm.js b/node_modules/typeorm/browser/cli-ts-node-esm.js
old mode 100755
new mode 100644
diff --git a/node_modules/typeorm/browser/common/EntityTarget.d.ts b/node_modules/typeorm/browser/common/EntityTarget.d.ts
index c763f4f..a11789b 100644
--- a/node_modules/typeorm/browser/common/EntityTarget.d.ts
+++ b/node_modules/typeorm/browser/common/EntityTarget.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "./ObjectType";
-import { EntitySchema } from "..";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { EntitySchema } from "typeorm/browser";
 /**
  * Entity target.
  */
diff --git a/node_modules/typeorm/browser/connection/BaseConnectionOptions.d.ts b/node_modules/typeorm/browser/connection/BaseConnectionOptions.d.ts
index 1f5c661..19733f9 100644
--- a/node_modules/typeorm/browser/connection/BaseConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/connection/BaseConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * BaseConnectionOptions is set of connection options shared by all database types.
  *
diff --git a/node_modules/typeorm/browser/connection/Connection.d.ts b/node_modules/typeorm/browser/connection/Connection.d.ts
index ca4e268..8d9f78e 100644
--- a/node_modules/typeorm/browser/connection/Connection.d.ts
+++ b/node_modules/typeorm/browser/connection/Connection.d.ts
@@ -1,4 +1,4 @@
-import { DataSource } from "../data-source/DataSource";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
 /**
  * Connection is a single database ORM connection to a specific database.
  * Its not required to be a database connection, depend on database type it can create connection pool.
diff --git a/node_modules/typeorm/browser/connection/ConnectionManager.d.ts b/node_modules/typeorm/browser/connection/ConnectionManager.d.ts
index ca873ba..4e427b1 100644
--- a/node_modules/typeorm/browser/connection/ConnectionManager.d.ts
+++ b/node_modules/typeorm/browser/connection/ConnectionManager.d.ts
@@ -1,5 +1,5 @@
-import { DataSource } from "../data-source/DataSource";
-import { DataSourceOptions } from "../data-source/DataSourceOptions";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { DataSourceOptions } from "typeorm/browser/data-source/DataSourceOptions";
 /**
  * ConnectionManager is used to store and manage multiple orm connections.
  * It also provides useful factory methods to simplify connection creation.
diff --git a/node_modules/typeorm/browser/connection/ConnectionOptions.d.ts b/node_modules/typeorm/browser/connection/ConnectionOptions.d.ts
index 1119187..9f3b11a 100644
--- a/node_modules/typeorm/browser/connection/ConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/connection/ConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { DataSourceOptions } from "../data-source/DataSourceOptions";
+import { DataSourceOptions } from "typeorm/browser/data-source/DataSourceOptions";
 /**
  * ConnectionOptions is an interface with settings and options for specific connection.
  * Options contain database and other connection-related settings.
diff --git a/node_modules/typeorm/browser/connection/ConnectionOptionsReader.d.ts b/node_modules/typeorm/browser/connection/ConnectionOptionsReader.d.ts
index 2b1708c..b7f5d7e 100644
--- a/node_modules/typeorm/browser/connection/ConnectionOptionsReader.d.ts
+++ b/node_modules/typeorm/browser/connection/ConnectionOptionsReader.d.ts
@@ -1,4 +1,4 @@
-import { DataSourceOptions } from "../data-source/DataSourceOptions";
+import { DataSourceOptions } from "typeorm/browser/data-source/DataSourceOptions";
 /**
  * Reads connection options from the ormconfig.
  */
diff --git a/node_modules/typeorm/browser/data-source/BaseDataSourceOptions.d.ts b/node_modules/typeorm/browser/data-source/BaseDataSourceOptions.d.ts
index 1592f5b..6c25a25 100644
--- a/node_modules/typeorm/browser/data-source/BaseDataSourceOptions.d.ts
+++ b/node_modules/typeorm/browser/data-source/BaseDataSourceOptions.d.ts
@@ -1,11 +1,11 @@
-import { EntitySchema } from "../entity-schema/EntitySchema";
-import { LoggerOptions } from "../logger/LoggerOptions";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { DatabaseType } from "../driver/types/DatabaseType";
-import { Logger } from "../logger/Logger";
-import { DataSource } from "../data-source/DataSource";
-import { QueryResultCache } from "../cache/QueryResultCache";
-import { MixedList } from "../common/MixedList";
+import { EntitySchema } from "typeorm/browser/entity-schema/EntitySchema";
+import { LoggerOptions } from "typeorm/browser/logger/LoggerOptions";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { DatabaseType } from "typeorm/browser/driver/types/DatabaseType";
+import { Logger } from "typeorm/browser/logger/Logger";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryResultCache } from "typeorm/browser/cache/QueryResultCache";
+import { MixedList } from "typeorm/browser/common/MixedList";
 /**
  * BaseDataSourceOptions is set of DataSourceOptions shared by all database types.
  */
diff --git a/node_modules/typeorm/browser/data-source/DataSource.d.ts b/node_modules/typeorm/browser/data-source/DataSource.d.ts
index ae58161..ee65bc3 100644
--- a/node_modules/typeorm/browser/data-source/DataSource.d.ts
+++ b/node_modules/typeorm/browser/data-source/DataSource.d.ts
@@ -1,27 +1,27 @@
-import { Driver } from "../driver/Driver";
-import { Repository } from "../repository/Repository";
-import { EntitySubscriberInterface } from "../subscriber/EntitySubscriberInterface";
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectType } from "../common/ObjectType";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { TreeRepository } from "../repository/TreeRepository";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { Logger } from "../logger/Logger";
-import { MigrationInterface } from "../migration/MigrationInterface";
-import { Migration } from "../migration/Migration";
-import { MongoRepository } from "../repository/MongoRepository";
-import { MongoEntityManager } from "../entity-manager/MongoEntityManager";
-import { DataSourceOptions } from "./DataSourceOptions";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { QueryResultCache } from "../cache/QueryResultCache";
-import { SqljsEntityManager } from "../entity-manager/SqljsEntityManager";
-import { RelationLoader } from "../query-builder/RelationLoader";
-import { IsolationLevel } from "../driver/types/IsolationLevel";
-import { ReplicationMode } from "../driver/types/ReplicationMode";
-import { RelationIdLoader } from "../query-builder/RelationIdLoader";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { Driver } from "typeorm/browser/driver/Driver";
+import { Repository } from "typeorm/browser/repository/Repository";
+import { EntitySubscriberInterface } from "typeorm/browser/subscriber/EntitySubscriberInterface";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { TreeRepository } from "typeorm/browser/repository/TreeRepository";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { Logger } from "typeorm/browser/logger/Logger";
+import { MigrationInterface } from "typeorm/browser/migration/MigrationInterface";
+import { Migration } from "typeorm/browser/migration/Migration";
+import { MongoRepository } from "typeorm/browser/repository/MongoRepository";
+import { MongoEntityManager } from "typeorm/browser/entity-manager/MongoEntityManager";
+import { DataSourceOptions } from "typeorm/browser/data-source/DataSourceOptions";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { QueryResultCache } from "typeorm/browser/cache/QueryResultCache";
+import { SqljsEntityManager } from "typeorm/browser/entity-manager/SqljsEntityManager";
+import { RelationLoader } from "typeorm/browser/query-builder/RelationLoader";
+import { IsolationLevel } from "typeorm/browser/driver/types/IsolationLevel";
+import { ReplicationMode } from "typeorm/browser/driver/types/ReplicationMode";
+import { RelationIdLoader } from "typeorm/browser/query-builder/RelationIdLoader";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * DataSource is a pre-defined connection configuration to a specific database.
  * You can have multiple data sources connected (with multiple connections in it),
diff --git a/node_modules/typeorm/browser/data-source/DataSource.js b/node_modules/typeorm/browser/data-source/DataSource.js
index ac597a6..6c86e61 100644
--- a/node_modules/typeorm/browser/data-source/DataSource.js
+++ b/node_modules/typeorm/browser/data-source/DataSource.js
@@ -5,6 +5,7 @@ import { EntityMetadataValidator } from "../metadata-builder/EntityMetadataValid
 import { EntityManagerFactory } from "../entity-manager/EntityManagerFactory";
 import { DriverFactory } from "../driver/DriverFactory";
 import { ConnectionMetadataBuilder } from "../connection/ConnectionMetadataBuilder";
+import { registerQueryBuilders } from "../query-builder";
 import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
 import { LoggerFactory } from "../logger/LoggerFactory";
 import { QueryResultCacheFactory } from "../cache/QueryResultCacheFactory";
@@ -13,6 +14,7 @@ import { ObjectUtils } from "../util/ObjectUtils";
 import { RelationIdLoader } from "../query-builder/RelationIdLoader";
 import { DriverUtils } from "../driver/DriverUtils";
 import { InstanceChecker } from "../util/InstanceChecker";
+registerQueryBuilders();
 /**
  * DataSource is a pre-defined connection configuration to a specific database.
  * You can have multiple data sources connected (with multiple connections in it),
diff --git a/node_modules/typeorm/browser/data-source/DataSource.js.map b/node_modules/typeorm/browser/data-source/DataSource.js.map
index 66d15fc..a78fa04 100644
--- a/node_modules/typeorm/browser/data-source/DataSource.js.map
+++ b/node_modules/typeorm/browser/data-source/DataSource.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/data-source/DataSource.ts"],"names":[],"mappings":"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","file":"DataSource.js","sourcesContent":["import { Driver } from \"../driver/Driver\"\nimport { Repository } from \"../repository/Repository\"\nimport { EntitySubscriberInterface } from \"../subscriber/EntitySubscriberInterface\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\"\nimport {\n    CannotConnectAlreadyConnectedError,\n    CannotExecuteNotConnectedError,\n    EntityMetadataNotFoundError,\n    QueryRunnerProviderAlreadyReleasedError,\n    TypeORMError,\n} from \"../error\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { Logger } from \"../logger/Logger\"\nimport { MigrationInterface } from \"../migration/MigrationInterface\"\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\"\nimport { Migration } from \"../migration/Migration\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\"\nimport { DataSourceOptions } from \"./DataSourceOptions\"\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\"\nimport { DriverFactory } from \"../driver/DriverFactory\"\nimport { ConnectionMetadataBuilder } from \"../connection/ConnectionMetadataBuilder\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { LoggerFactory } from \"../logger/LoggerFactory\"\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\"\nimport { QueryResultCache } from \"../cache/QueryResultCache\"\nimport { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\"\nimport { RelationLoader } from \"../query-builder/RelationLoader\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ReplicationMode } from \"../driver/types/ReplicationMode\"\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\n\n/**\n * DataSource is a pre-defined connection configuration to a specific database.\n * You can have multiple data sources connected (with multiple connections in it),\n * connected to multiple databases in your application.\n *\n * Before, it was called `Connection`, but now `Connection` is deprecated\n * because `Connection` isn't the best name for what it's actually is.\n */\nexport class DataSource {\n    readonly \"@instanceof\" = Symbol.for(\"DataSource\")\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     *\n     * @deprecated we don't need names anymore since we are going to drop all related methods relying on this property.\n     */\n    readonly name: string\n\n    /**\n     * Connection options.\n     */\n    readonly options: DataSourceOptions\n\n    /**\n     * Indicates if DataSource is initialized or not.\n     */\n    readonly isInitialized: boolean\n\n    /**\n     * Database driver used by this connection.\n     */\n    driver: Driver\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    namingStrategy: NamingStrategyInterface\n\n    /**\n     * Name for the metadata table\n     */\n    readonly metadataTableName: string\n\n    /**\n     * Logger used to log orm events.\n     */\n    logger: Logger\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = []\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     * This is a copy of #.entityMetadatas property -> used for more performant searches.\n     */\n    readonly entityMetadatasMap = new Map<EntityTarget<any>, EntityMetadata>()\n\n    /**\n     * Used to work with query result cache.\n     */\n    queryResultCache?: QueryResultCache\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader\n\n    readonly relationIdLoader: RelationIdLoader\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DataSourceOptions) {\n        this.name = options.name || \"default\"\n        this.options = options\n        this.logger = new LoggerFactory().create(\n            this.options.logger,\n            this.options.logging,\n        )\n        this.driver = new DriverFactory().create(this)\n        this.manager = this.createEntityManager()\n        this.namingStrategy =\n            options.namingStrategy || new DefaultNamingStrategy()\n        this.metadataTableName = options.metadataTableName || \"typeorm_metadata\"\n        this.queryResultCache = options.cache\n            ? new QueryResultCacheFactory(this).create()\n            : undefined\n        this.relationLoader = new RelationLoader(this)\n        this.relationIdLoader = new RelationIdLoader(this)\n        this.isInitialized = false\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     Indicates if DataSource is initialized or not.\n     *\n     * @deprecated use .isInitialized instead\n     */\n    get isConnected() {\n        return this.isInitialized\n    }\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(\n                `MongoEntityManager is only available for MongoDB databases.`,\n            )\n\n        return this.manager as MongoEntityManager\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!InstanceChecker.isSqljsEntityManager(this.manager))\n            throw new TypeORMError(\n                `SqljsEntityManager is only available for Sqljs databases.`,\n            )\n\n        return this.manager\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates current connection options with provided options.\n     */\n    setOptions(options: Partial<DataSourceOptions>): this {\n        Object.assign(this.options, options)\n\n        if (options.logger || options.logging) {\n            this.logger = new LoggerFactory().create(\n                options.logger || this.options.logger,\n                options.logging || this.options.logging,\n            )\n        }\n\n        if (options.namingStrategy) {\n            this.namingStrategy = options.namingStrategy\n        }\n\n        if (options.cache) {\n            this.queryResultCache = new QueryResultCacheFactory(this).create()\n        }\n\n        // todo: we must update the database in the driver as well, if it was set by setOptions method\n        //  in the future we need to refactor the code and remove \"database\" from the driver, and instead\n        //  use database (and options) from a single place - data source.\n        if (options.database) {\n            this.driver.database = DriverUtils.buildDriverOptions(\n                this.options,\n            ).database\n        }\n\n        // todo: need to take a look if we need to update schema and other \"poor\" properties\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async initialize(): Promise<this> {\n        if (this.isInitialized)\n            throw new CannotConnectAlreadyConnectedError(this.name)\n\n        // connect to the database via its driver\n        await this.driver.connect()\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache) await this.queryResultCache.connect()\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isInitialized: true })\n\n        try {\n            // build all metadatas registered in the current connection\n            await this.buildMetadatas()\n\n            await this.driver.afterConnect()\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema) await this.dropDatabase()\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({\n                    transaction: this.options.migrationsTransactionMode,\n                })\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize) await this.synchronize()\n        } catch (error) {\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.destroy()\n            throw error\n        }\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     *\n     * @deprecated use .initialize method instead\n     */\n    async connect(): Promise<this> {\n        return this.initialize()\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async destroy(): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        await this.driver.disconnect()\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache) await this.queryResultCache.disconnect()\n\n        ObjectUtils.assign(this, { isInitialized: false })\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     *\n     * @deprecated use .destroy method instead\n     */\n    async close(): Promise<void> {\n        return this.destroy()\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        if (dropBeforeSync) await this.dropDatabase()\n\n        const schemaBuilder = this.driver.createSchemaBuilder()\n        await schemaBuilder.build()\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner()\n        try {\n            if (\n                this.driver.options.type === \"mssql\" ||\n                DriverUtils.isMySQLFamily(this.driver) ||\n                this.driver.options.type === \"aurora-mysql\" ||\n                DriverUtils.isSQLiteFamily(this.driver)\n            ) {\n                const databases: string[] = []\n                this.entityMetadatas.forEach((metadata) => {\n                    if (\n                        metadata.database &&\n                        databases.indexOf(metadata.database) === -1\n                    )\n                        databases.push(metadata.database)\n                })\n                if (databases.length === 0 && this.driver.database) {\n                    databases.push(this.driver.database)\n                }\n\n                if (databases.length === 0) {\n                    await queryRunner.clearDatabase()\n                } else {\n                    for (const database of databases) {\n                        await queryRunner.clearDatabase(database)\n                    }\n                }\n            } else {\n                await queryRunner.clearDatabase()\n            }\n        } finally {\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<Migration[]> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        const successMigrations =\n            await migrationExecutor.executePendingMigrations()\n        return successMigrations\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        await migrationExecutor.undoLastMigration()\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isInitialized) {\n            throw new CannotExecuteNotConnectedError(this.name)\n        }\n        const migrationExecutor = new MigrationExecutor(this)\n        return await migrationExecutor.showMigrations()\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target)\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target)\n        if (!metadata) throw new EntityMetadataNotFoundError(target)\n\n        return metadata\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        return this.manager.getRepository(target)\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target)\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        if (!(this.driver.options.type === \"mongodb\"))\n            throw new TypeORMError(\n                `You can use getMongoRepository only for MongoDB connections.`,\n            )\n\n        return this.manager.getRepository(target) as any\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend function to create a custom repository\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository)\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any,\n        )\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ): Promise<T> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner()\n\n        try {\n            return await usedQueryRunner.query(query, parameters) // await is needed here because we are using finally\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release()\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n\n        if (alias) {\n            alias = DriverUtils.buildAlias(this.driver, undefined, alias)\n            const metadata = this.getMetadata(\n                entityOrRunner as EntityTarget<Entity>,\n            )\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias)\n        } else {\n            return new SelectQueryBuilder(\n                this,\n                entityOrRunner as QueryRunner | undefined,\n            )\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode)\n        const manager = this.createEntityManager(queryRunner)\n        Object.assign(queryRunner, { manager: manager })\n        return queryRunner\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(\n        entityTarget: EntityTarget<any>,\n        relationPropertyPath: string,\n    ) {\n        const relationMetadata =\n            this.getMetadata(entityTarget).findRelationWithPropertyPath(\n                relationPropertyPath,\n            )\n        if (!relationMetadata)\n            throw new TypeORMError(\n                `Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`,\n            )\n        if (!relationMetadata.isManyToMany)\n            throw new TypeORMError(\n                `Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                    `You can use this method only on many-to-many relations.`,\n            )\n\n        return relationMetadata.junctionEntityMetadata\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(\n        target: EntityTarget<any>,\n    ): EntityMetadata | undefined {\n        const metadataFromMap = this.entityMetadatasMap.get(target)\n        if (metadataFromMap) return metadataFromMap\n\n        for (let [_, metadata] of this.entityMetadatasMap) {\n            if (\n                InstanceChecker.isEntitySchema(target) &&\n                metadata.name === target.options.name\n            ) {\n                return metadata\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target ||\n                        metadata.tableName === target\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n            if (\n                ObjectUtils.isObjectWithName(target) &&\n                typeof target.name === \"string\"\n            ) {\n                if (target.name.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target.name) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target.name ||\n                        metadata.tableName === target.name\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected async buildMetadatas(): Promise<void> {\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this)\n        const entityMetadataValidator = new EntityMetadataValidator()\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const flattenedSubscribers = ObjectUtils.mixedListToArray(\n            this.options.subscribers || [],\n        )\n        const subscribers = await connectionMetadataBuilder.buildSubscribers(\n            flattenedSubscribers,\n        )\n        ObjectUtils.assign(this, { subscribers: subscribers })\n\n        // build entity metadatas\n        const flattenedEntities = ObjectUtils.mixedListToArray(\n            this.options.entities || [],\n        )\n        const entityMetadatas =\n            await connectionMetadataBuilder.buildEntityMetadatas(\n                flattenedEntities,\n            )\n        ObjectUtils.assign(this, {\n            entityMetadatas: entityMetadatas,\n            entityMetadatasMap: new Map(\n                entityMetadatas.map((metadata) => [metadata.target, metadata]),\n            ),\n        })\n\n        // create migration instances\n        const flattenedMigrations = ObjectUtils.mixedListToArray(\n            this.options.migrations || [],\n        )\n        const migrations = await connectionMetadataBuilder.buildMigrations(\n            flattenedMigrations,\n        )\n        ObjectUtils.assign(this, { migrations: migrations })\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(\n            this.entityMetadatas.filter(\n                (metadata) => metadata.tableType !== \"view\",\n            ),\n            this.driver,\n        )\n\n        // set current data source to the entities\n        for (let entityMetadata of entityMetadatas) {\n            if (\n                InstanceChecker.isBaseEntityConstructor(entityMetadata.target)\n            ) {\n                entityMetadata.target.useDataSource(this)\n            }\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/data-source/DataSource.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,qBAAqB,EAAE,MAAM,0CAA0C,CAAA;AAChF,OAAO,EACH,kCAAkC,EAClC,8BAA8B,EAC9B,2BAA2B,EAC3B,uCAAuC,EACvC,YAAY,GACf,MAAM,UAAU,CAAA;AAMjB,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAA;AAIlE,OAAO,EAAE,uBAAuB,EAAE,MAAM,6CAA6C,CAAA;AAErF,OAAO,EAAE,oBAAoB,EAAE,MAAM,wCAAwC,CAAA;AAC7E,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAA;AACvD,OAAO,EAAE,yBAAyB,EAAE,MAAM,yCAAyC,CAAA;AAEnF,OAAO,EAAE,qBAAqB,EAAC,MAAM,kBAAkB,CAAA;AACvD,OAAO,EAAE,kBAAkB,EAAE,MAAM,qCAAqC,CAAA;AACxE,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAA;AACvD,OAAO,EAAE,uBAAuB,EAAE,MAAM,kCAAkC,CAAA;AAG1E,OAAO,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAA;AAChE,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AAGjD,OAAO,EAAE,gBAAgB,EAAE,MAAM,mCAAmC,CAAA;AACpE,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AACnD,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAGzD,qBAAqB,EAAE,CAAA;AAEvB;;;;;;;GAOG;AACH,MAAM,OAAO,UAAU;IAkFnB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAA0B;QArF7B,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;QAgDjD;;WAEG;QACM,eAAU,GAAyB,EAAE,CAAA;QAE9C;;WAEG;QACM,gBAAW,GAAqC,EAAE,CAAA;QAE3D;;WAEG;QACM,oBAAe,GAAqB,EAAE,CAAA;QAE/C;;;WAGG;QACM,uBAAkB,GAAG,IAAI,GAAG,EAAqC,CAAA;QAmBtE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,IAAI,SAAS,CAAA;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;QACtB,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC,MAAM,CACpC,IAAI,CAAC,OAAO,CAAC,MAAM,EACnB,IAAI,CAAC,OAAO,CAAC,OAAO,CACvB,CAAA;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QAC9C,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;QACzC,IAAI,CAAC,cAAc;YACf,OAAO,CAAC,cAAc,IAAI,IAAI,qBAAqB,EAAE,CAAA;QACzD,IAAI,CAAC,iBAAiB,GAAG,OAAO,CAAC,iBAAiB,IAAI,kBAAkB,CAAA;QACxE,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,KAAK;YACjC,CAAC,CAAC,IAAI,uBAAuB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE;YAC5C,CAAC,CAAC,SAAS,CAAA;QACf,IAAI,CAAC,cAAc,GAAG,IAAI,cAAc,CAAC,IAAI,CAAC,CAAA;QAC9C,IAAI,CAAC,gBAAgB,GAAG,IAAI,gBAAgB,CAAC,IAAI,CAAC,CAAA;QAClD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;IAC9B,CAAC;IAED,4EAA4E;IAC5E,mBAAmB;IACnB,4EAA4E;IAE5E;;;;OAIG;IACH,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,aAAa,CAAA;IAC7B,CAAC;IAED;;;;;OAKG;IACH,IAAI,YAAY;QACZ,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC;YACnD,MAAM,IAAI,YAAY,CAClB,6DAA6D,CAChE,CAAA;QAEL,OAAO,IAAI,CAAC,OAA6B,CAAA;IAC7C,CAAC;IAED;;;;OAIG;IACH,IAAI,YAAY;QACZ,IAAI,CAAC,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC;YACnD,MAAM,IAAI,YAAY,CAClB,2DAA2D,CAC9D,CAAA;QAEL,OAAO,IAAI,CAAC,OAAO,CAAA;IACvB,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAC5E;;OAEG;IACH,UAAU,CAAC,OAAmC;QAC1C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;QAEpC,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,OAAO,EAAE;YACnC,IAAI,CAAC,MAAM,GAAG,IAAI,aAAa,EAAE,CAAC,MAAM,CACpC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EACrC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAC1C,CAAA;SACJ;QAED,IAAI,OAAO,CAAC,cAAc,EAAE;YACxB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;SAC/C;QAED,IAAI,OAAO,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,gBAAgB,GAAG,IAAI,uBAAuB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAA;SACrE;QAED,8FAA8F;QAC9F,iGAAiG;QACjG,iEAAiE;QACjE,IAAI,OAAO,CAAC,QAAQ,EAAE;YAClB,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,WAAW,CAAC,kBAAkB,CACjD,IAAI,CAAC,OAAO,CACf,CAAC,QAAQ,CAAA;SACb;QAED,oFAAoF;QAEpF,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,UAAU;QACZ,IAAI,IAAI,CAAC,aAAa;YAClB,MAAM,IAAI,kCAAkC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAE3D,yCAAyC;QACzC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAA;QAE3B,6DAA6D;QAC7D,IAAI,IAAI,CAAC,gBAAgB;YAAE,MAAM,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAA;QAEhE,kDAAkD;QAClD,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAA;QAEjD,IAAI;YACA,2DAA2D;YAC3D,MAAM,IAAI,CAAC,cAAc,EAAE,CAAA;YAE3B,MAAM,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAA;YAEhC,yDAAyD;YACzD,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU;gBAAE,MAAM,IAAI,CAAC,YAAY,EAAE,CAAA;YAEtD,wDAAwD;YACxD,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa;gBAC1B,MAAM,IAAI,CAAC,aAAa,CAAC;oBACrB,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,yBAAyB;iBACtD,CAAC,CAAA;YAEN,wDAAwD;YACxD,IAAI,IAAI,CAAC,OAAO,CAAC,WAAW;gBAAE,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;SACzD;QAAC,OAAO,KAAK,EAAE;YACZ,qGAAqG;YACrG,gCAAgC;YAChC,MAAM,IAAI,CAAC,OAAO,EAAE,CAAA;YACpB,MAAM,KAAK,CAAA;SACd;QAED,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;;;;;;OAOG;IACH,KAAK,CAAC,OAAO;QACT,OAAO,IAAI,CAAC,UAAU,EAAE,CAAA;IAC5B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,IAAI,CAAC,aAAa;YACnB,MAAM,IAAI,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEvD,MAAM,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAA;QAE9B,mEAAmE;QACnE,IAAI,IAAI,CAAC,gBAAgB;YAAE,MAAM,IAAI,CAAC,gBAAgB,CAAC,UAAU,EAAE,CAAA;QAEnE,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,aAAa,EAAE,KAAK,EAAE,CAAC,CAAA;IACtD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,KAAK;QACP,OAAO,IAAI,CAAC,OAAO,EAAE,CAAA;IACzB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,WAAW,CAAC,iBAA0B,KAAK;QAC7C,IAAI,CAAC,IAAI,CAAC,aAAa;YACnB,MAAM,IAAI,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEvD,IAAI,cAAc;YAAE,MAAM,IAAI,CAAC,YAAY,EAAE,CAAA;QAE7C,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,mBAAmB,EAAE,CAAA;QACvD,MAAM,aAAa,CAAC,KAAK,EAAE,CAAA;IAC/B,CAAC;IAED;;;;OAIG;IACH,cAAc;IACd,KAAK,CAAC,YAAY;QACd,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAA;QAC5C,IAAI;YACA,IACI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO;gBACpC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC;gBACtC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,cAAc;gBAC3C,WAAW,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EACzC;gBACE,MAAM,SAAS,GAAa,EAAE,CAAA;gBAC9B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;oBACtC,IACI,QAAQ,CAAC,QAAQ;wBACjB,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBAE3C,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;gBACzC,CAAC,CAAC,CAAA;gBACF,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAChD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;iBACvC;gBAED,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,MAAM,WAAW,CAAC,aAAa,EAAE,CAAA;iBACpC;qBAAM;oBACH,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;wBAC9B,MAAM,WAAW,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;qBAC5C;iBACJ;aACJ;iBAAM;gBACH,MAAM,WAAW,CAAC,aAAa,EAAE,CAAA;aACpC;SACJ;gBAAS;YACN,MAAM,WAAW,CAAC,OAAO,EAAE,CAAA;SAC9B;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,aAAa,CAAC,OAGnB;QACG,IAAI,CAAC,IAAI,CAAC,aAAa;YACnB,MAAM,IAAI,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEvD,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAA;QACrD,iBAAiB,CAAC,WAAW;YACzB,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,KAAK,CAAA;QAC7C,iBAAiB,CAAC,IAAI,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,CAAA;QAE3D,MAAM,iBAAiB,GACnB,MAAM,iBAAiB,CAAC,wBAAwB,EAAE,CAAA;QACtD,OAAO,iBAAiB,CAAA;IAC5B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,iBAAiB,CAAC,OAGvB;QACG,IAAI,CAAC,IAAI,CAAC,aAAa;YACnB,MAAM,IAAI,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEvD,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAA;QACrD,iBAAiB,CAAC,WAAW;YACzB,CAAC,OAAO,IAAI,OAAO,CAAC,WAAW,CAAC,IAAI,KAAK,CAAA;QAC7C,iBAAiB,CAAC,IAAI,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,KAAK,CAAA;QAE3D,MAAM,iBAAiB,CAAC,iBAAiB,EAAE,CAAA;IAC/C,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,cAAc;QAChB,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE;YACrB,MAAM,IAAI,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACtD;QACD,MAAM,iBAAiB,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,CAAA;QACrD,OAAO,MAAM,iBAAiB,CAAC,cAAc,EAAE,CAAA;IACnD,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,MAAyB;QACjC,OAAO,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;IACtC,CAAC;IAED;;OAEG;IACH,WAAW,CAAC,MAAyB;QACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;QAC1C,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,2BAA2B,CAAC,MAAM,CAAC,CAAA;QAE5D,OAAO,QAAQ,CAAA;IACnB,CAAC;IAED;;OAEG;IACH,aAAa,CACT,MAA4B;QAE5B,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAC,CAAA;IAC7C,CAAC;IAED;;;OAGG;IACH,iBAAiB,CACb,MAA4B;QAE5B,OAAO,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;IACjD,CAAC;IAED;;;OAGG;IACH,kBAAkB,CACd,MAA4B;QAE5B,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC;YACzC,MAAM,IAAI,YAAY,CAClB,8DAA8D,CACjE,CAAA;QAEL,OAAO,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,MAAM,CAAQ,CAAA;IACpD,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAI,gBAA+B;QAClD,OAAO,IAAI,CAAC,OAAO,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAA;IAC7D,CAAC;IAaD,KAAK,CAAC,WAAW,CACb,2BAEoD,EACpD,qBAAoE;QAEpE,OAAO,IAAI,CAAC,OAAO,CAAC,WAAW,CAC3B,2BAAkC,EAClC,qBAA4B,CAC/B,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK,CACP,KAAa,EACb,UAAkB,EAClB,WAAyB;QAEzB,IAAI,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC;YAClD,MAAM,IAAI,YAAY,CAAC,sCAAsC,CAAC,CAAA;QAElE,IAAI,WAAW,IAAI,WAAW,CAAC,UAAU;YACrC,MAAM,IAAI,uCAAuC,EAAE,CAAA;QAEvD,MAAM,eAAe,GAAG,WAAW,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAA;QAE/D,IAAI;YACA,OAAO,MAAM,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA,CAAC,oDAAoD;SAC7G;gBAAS;YACN,IAAI,CAAC,WAAW;gBAAE,MAAM,eAAe,CAAC,OAAO,EAAE,CAAA;SACpD;IACL,CAAC;IAgBD;;OAEG;IACH,kBAAkB,CACd,cAAmD,EACnD,KAAc,EACd,WAAyB;QAEzB,IAAI,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC;YAClD,MAAM,IAAI,YAAY,CAAC,4CAA4C,CAAC,CAAA;QAExE,IAAI,KAAK,EAAE;YACP,KAAK,GAAG,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,CAAA;YAC7D,MAAM,QAAQ,GAAG,IAAI,CAAC,WAAW,CAC7B,cAAsC,CACzC,CAAA;YACD,OAAO,IAAI,kBAAkB,CAAC,IAAI,EAAE,WAAW,CAAC;iBAC3C,MAAM,CAAC,KAAK,CAAC;iBACb,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,KAAK,CAAC,CAAA;SACpC;aAAM;YACH,OAAO,IAAI,kBAAkB,CACzB,IAAI,EACJ,cAAyC,CAC5C,CAAA;SACJ;IACL,CAAC;IAED;;;;;;;;;OASG;IACH,iBAAiB,CAAC,OAAwB,QAAQ;QAC9C,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAA;QACvD,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,CAAC,WAAW,CAAC,CAAA;QACrD,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAA;QAChD,OAAO,WAAW,CAAA;IACtB,CAAC;IAED;;OAEG;IACH,qBAAqB,CACjB,YAA+B,EAC/B,oBAA4B;QAE5B,MAAM,gBAAgB,GAClB,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,4BAA4B,CACvD,oBAAoB,CACvB,CAAA;QACL,IAAI,CAAC,gBAAgB;YACjB,MAAM,IAAI,YAAY,CAClB,aAAa,oBAAoB,sBAAsB,YAAY,UAAU,CAChF,CAAA;QACL,IAAI,CAAC,gBAAgB,CAAC,YAAY;YAC9B,MAAM,IAAI,YAAY,CAClB,aAAa,YAAY,IAAI,oBAAoB,8CAA8C;gBAC3F,yDAAyD,CAChE,CAAA;QAEL,OAAO,gBAAgB,CAAC,sBAAsB,CAAA;IAClD,CAAC;IAED;;OAEG;IACH,mBAAmB,CAAC,WAAyB;QACzC,OAAO,IAAI,oBAAoB,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,CAAC,CAAA;IAC/D,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;OAEG;IACO,YAAY,CAClB,MAAyB;QAEzB,MAAM,eAAe,GAAG,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QAC3D,IAAI,eAAe;YAAE,OAAO,eAAe,CAAA;QAE3C,KAAK,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC/C,IACI,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC;gBACtC,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,OAAO,CAAC,IAAI,EACvC;gBACE,OAAO,QAAQ,CAAA;aAClB;YACD,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;gBAC5B,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC5B,IAAI,QAAQ,CAAC,SAAS,KAAK,MAAM,EAAE;wBAC/B,OAAO,QAAQ,CAAA;qBAClB;iBACJ;qBAAM;oBACH,IACI,QAAQ,CAAC,IAAI,KAAK,MAAM;wBACxB,QAAQ,CAAC,SAAS,KAAK,MAAM,EAC/B;wBACE,OAAO,QAAQ,CAAA;qBAClB;iBACJ;aACJ;YACD,IACI,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC;gBACpC,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,EACjC;gBACE,IAAI,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;oBACjC,IAAI,QAAQ,CAAC,SAAS,KAAK,MAAM,CAAC,IAAI,EAAE;wBACpC,OAAO,QAAQ,CAAA;qBAClB;iBACJ;qBAAM;oBACH,IACI,QAAQ,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI;wBAC7B,QAAQ,CAAC,SAAS,KAAK,MAAM,CAAC,IAAI,EACpC;wBACE,OAAO,QAAQ,CAAA;qBAClB;iBACJ;aACJ;SACJ;QAED,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,cAAc;QAC1B,MAAM,yBAAyB,GAAG,IAAI,yBAAyB,CAAC,IAAI,CAAC,CAAA;QACrE,MAAM,uBAAuB,GAAG,IAAI,uBAAuB,EAAE,CAAA;QAE7D,wIAAwI;QACxI,MAAM,oBAAoB,GAAG,WAAW,CAAC,gBAAgB,CACrD,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,EAAE,CACjC,CAAA;QACD,MAAM,WAAW,GAAG,MAAM,yBAAyB,CAAC,gBAAgB,CAChE,oBAAoB,CACvB,CAAA;QACD,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,WAAW,EAAE,CAAC,CAAA;QAEtD,yBAAyB;QACzB,MAAM,iBAAiB,GAAG,WAAW,CAAC,gBAAgB,CAClD,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,EAAE,CAC9B,CAAA;QACD,MAAM,eAAe,GACjB,MAAM,yBAAyB,CAAC,oBAAoB,CAChD,iBAAiB,CACpB,CAAA;QACL,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE;YACrB,eAAe,EAAE,eAAe;YAChC,kBAAkB,EAAE,IAAI,GAAG,CACvB,eAAe,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CACjE;SACJ,CAAC,CAAA;QAEF,6BAA6B;QAC7B,MAAM,mBAAmB,GAAG,WAAW,CAAC,gBAAgB,CACpD,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,EAAE,CAChC,CAAA;QACD,MAAM,UAAU,GAAG,MAAM,yBAAyB,CAAC,eAAe,CAC9D,mBAAmB,CACtB,CAAA;QACD,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC,CAAA;QAEpD,iGAAiG;QACjG,uBAAuB,CAAC,YAAY,CAChC,IAAI,CAAC,eAAe,CAAC,MAAM,CACvB,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,SAAS,KAAK,MAAM,CAC9C,EACD,IAAI,CAAC,MAAM,CACd,CAAA;QAED,0CAA0C;QAC1C,KAAK,IAAI,cAAc,IAAI,eAAe,EAAE;YACxC,IACI,eAAe,CAAC,uBAAuB,CAAC,cAAc,CAAC,MAAM,CAAC,EAChE;gBACE,cAAc,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;aAC5C;SACJ;IACL,CAAC;CACJ","file":"DataSource.js","sourcesContent":["import { Driver } from \"../driver/Driver\"\nimport { Repository } from \"../repository/Repository\"\nimport { EntitySubscriberInterface } from \"../subscriber/EntitySubscriberInterface\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\"\nimport {\n    CannotConnectAlreadyConnectedError,\n    CannotExecuteNotConnectedError,\n    EntityMetadataNotFoundError,\n    QueryRunnerProviderAlreadyReleasedError,\n    TypeORMError,\n} from \"../error\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { Logger } from \"../logger/Logger\"\nimport { MigrationInterface } from \"../migration/MigrationInterface\"\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\"\nimport { Migration } from \"../migration/Migration\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\"\nimport { DataSourceOptions } from \"./DataSourceOptions\"\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\"\nimport { DriverFactory } from \"../driver/DriverFactory\"\nimport { ConnectionMetadataBuilder } from \"../connection/ConnectionMetadataBuilder\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { registerQueryBuilders} from \"../query-builder\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { LoggerFactory } from \"../logger/LoggerFactory\"\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\"\nimport { QueryResultCache } from \"../cache/QueryResultCache\"\nimport { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\"\nimport { RelationLoader } from \"../query-builder/RelationLoader\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ReplicationMode } from \"../driver/types/ReplicationMode\"\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\n\nregisterQueryBuilders()\n\n/**\n * DataSource is a pre-defined connection configuration to a specific database.\n * You can have multiple data sources connected (with multiple connections in it),\n * connected to multiple databases in your application.\n *\n * Before, it was called `Connection`, but now `Connection` is deprecated\n * because `Connection` isn't the best name for what it's actually is.\n */\nexport class DataSource {\n    readonly \"@instanceof\" = Symbol.for(\"DataSource\")\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     *\n     * @deprecated we don't need names anymore since we are going to drop all related methods relying on this property.\n     */\n    readonly name: string\n\n    /**\n     * Connection options.\n     */\n    readonly options: DataSourceOptions\n\n    /**\n     * Indicates if DataSource is initialized or not.\n     */\n    readonly isInitialized: boolean\n\n    /**\n     * Database driver used by this connection.\n     */\n    driver: Driver\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    namingStrategy: NamingStrategyInterface\n\n    /**\n     * Name for the metadata table\n     */\n    readonly metadataTableName: string\n\n    /**\n     * Logger used to log orm events.\n     */\n    logger: Logger\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = []\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     * This is a copy of #.entityMetadatas property -> used for more performant searches.\n     */\n    readonly entityMetadatasMap = new Map<EntityTarget<any>, EntityMetadata>()\n\n    /**\n     * Used to work with query result cache.\n     */\n    queryResultCache?: QueryResultCache\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader\n\n    readonly relationIdLoader: RelationIdLoader\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DataSourceOptions) {\n        this.name = options.name || \"default\"\n        this.options = options\n        this.logger = new LoggerFactory().create(\n            this.options.logger,\n            this.options.logging,\n        )\n        this.driver = new DriverFactory().create(this)\n        this.manager = this.createEntityManager()\n        this.namingStrategy =\n            options.namingStrategy || new DefaultNamingStrategy()\n        this.metadataTableName = options.metadataTableName || \"typeorm_metadata\"\n        this.queryResultCache = options.cache\n            ? new QueryResultCacheFactory(this).create()\n            : undefined\n        this.relationLoader = new RelationLoader(this)\n        this.relationIdLoader = new RelationIdLoader(this)\n        this.isInitialized = false\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     Indicates if DataSource is initialized or not.\n     *\n     * @deprecated use .isInitialized instead\n     */\n    get isConnected() {\n        return this.isInitialized\n    }\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(\n                `MongoEntityManager is only available for MongoDB databases.`,\n            )\n\n        return this.manager as MongoEntityManager\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!InstanceChecker.isSqljsEntityManager(this.manager))\n            throw new TypeORMError(\n                `SqljsEntityManager is only available for Sqljs databases.`,\n            )\n\n        return this.manager\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates current connection options with provided options.\n     */\n    setOptions(options: Partial<DataSourceOptions>): this {\n        Object.assign(this.options, options)\n\n        if (options.logger || options.logging) {\n            this.logger = new LoggerFactory().create(\n                options.logger || this.options.logger,\n                options.logging || this.options.logging,\n            )\n        }\n\n        if (options.namingStrategy) {\n            this.namingStrategy = options.namingStrategy\n        }\n\n        if (options.cache) {\n            this.queryResultCache = new QueryResultCacheFactory(this).create()\n        }\n\n        // todo: we must update the database in the driver as well, if it was set by setOptions method\n        //  in the future we need to refactor the code and remove \"database\" from the driver, and instead\n        //  use database (and options) from a single place - data source.\n        if (options.database) {\n            this.driver.database = DriverUtils.buildDriverOptions(\n                this.options,\n            ).database\n        }\n\n        // todo: need to take a look if we need to update schema and other \"poor\" properties\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async initialize(): Promise<this> {\n        if (this.isInitialized)\n            throw new CannotConnectAlreadyConnectedError(this.name)\n\n        // connect to the database via its driver\n        await this.driver.connect()\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache) await this.queryResultCache.connect()\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isInitialized: true })\n\n        try {\n            // build all metadatas registered in the current connection\n            await this.buildMetadatas()\n\n            await this.driver.afterConnect()\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema) await this.dropDatabase()\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({\n                    transaction: this.options.migrationsTransactionMode,\n                })\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize) await this.synchronize()\n        } catch (error) {\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.destroy()\n            throw error\n        }\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     *\n     * @deprecated use .initialize method instead\n     */\n    async connect(): Promise<this> {\n        return this.initialize()\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async destroy(): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        await this.driver.disconnect()\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache) await this.queryResultCache.disconnect()\n\n        ObjectUtils.assign(this, { isInitialized: false })\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     *\n     * @deprecated use .destroy method instead\n     */\n    async close(): Promise<void> {\n        return this.destroy()\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        if (dropBeforeSync) await this.dropDatabase()\n\n        const schemaBuilder = this.driver.createSchemaBuilder()\n        await schemaBuilder.build()\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner()\n        try {\n            if (\n                this.driver.options.type === \"mssql\" ||\n                DriverUtils.isMySQLFamily(this.driver) ||\n                this.driver.options.type === \"aurora-mysql\" ||\n                DriverUtils.isSQLiteFamily(this.driver)\n            ) {\n                const databases: string[] = []\n                this.entityMetadatas.forEach((metadata) => {\n                    if (\n                        metadata.database &&\n                        databases.indexOf(metadata.database) === -1\n                    )\n                        databases.push(metadata.database)\n                })\n                if (databases.length === 0 && this.driver.database) {\n                    databases.push(this.driver.database)\n                }\n\n                if (databases.length === 0) {\n                    await queryRunner.clearDatabase()\n                } else {\n                    for (const database of databases) {\n                        await queryRunner.clearDatabase(database)\n                    }\n                }\n            } else {\n                await queryRunner.clearDatabase()\n            }\n        } finally {\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<Migration[]> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        const successMigrations =\n            await migrationExecutor.executePendingMigrations()\n        return successMigrations\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        await migrationExecutor.undoLastMigration()\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isInitialized) {\n            throw new CannotExecuteNotConnectedError(this.name)\n        }\n        const migrationExecutor = new MigrationExecutor(this)\n        return await migrationExecutor.showMigrations()\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target)\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target)\n        if (!metadata) throw new EntityMetadataNotFoundError(target)\n\n        return metadata\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        return this.manager.getRepository(target)\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target)\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        if (!(this.driver.options.type === \"mongodb\"))\n            throw new TypeORMError(\n                `You can use getMongoRepository only for MongoDB connections.`,\n            )\n\n        return this.manager.getRepository(target) as any\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend function to create a custom repository\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository)\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any,\n        )\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ): Promise<T> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner()\n\n        try {\n            return await usedQueryRunner.query(query, parameters) // await is needed here because we are using finally\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release()\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n\n        if (alias) {\n            alias = DriverUtils.buildAlias(this.driver, undefined, alias)\n            const metadata = this.getMetadata(\n                entityOrRunner as EntityTarget<Entity>,\n            )\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias)\n        } else {\n            return new SelectQueryBuilder(\n                this,\n                entityOrRunner as QueryRunner | undefined,\n            )\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode)\n        const manager = this.createEntityManager(queryRunner)\n        Object.assign(queryRunner, { manager: manager })\n        return queryRunner\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(\n        entityTarget: EntityTarget<any>,\n        relationPropertyPath: string,\n    ) {\n        const relationMetadata =\n            this.getMetadata(entityTarget).findRelationWithPropertyPath(\n                relationPropertyPath,\n            )\n        if (!relationMetadata)\n            throw new TypeORMError(\n                `Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`,\n            )\n        if (!relationMetadata.isManyToMany)\n            throw new TypeORMError(\n                `Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                    `You can use this method only on many-to-many relations.`,\n            )\n\n        return relationMetadata.junctionEntityMetadata\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(\n        target: EntityTarget<any>,\n    ): EntityMetadata | undefined {\n        const metadataFromMap = this.entityMetadatasMap.get(target)\n        if (metadataFromMap) return metadataFromMap\n\n        for (let [_, metadata] of this.entityMetadatasMap) {\n            if (\n                InstanceChecker.isEntitySchema(target) &&\n                metadata.name === target.options.name\n            ) {\n                return metadata\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target ||\n                        metadata.tableName === target\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n            if (\n                ObjectUtils.isObjectWithName(target) &&\n                typeof target.name === \"string\"\n            ) {\n                if (target.name.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target.name) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target.name ||\n                        metadata.tableName === target.name\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected async buildMetadatas(): Promise<void> {\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this)\n        const entityMetadataValidator = new EntityMetadataValidator()\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const flattenedSubscribers = ObjectUtils.mixedListToArray(\n            this.options.subscribers || [],\n        )\n        const subscribers = await connectionMetadataBuilder.buildSubscribers(\n            flattenedSubscribers,\n        )\n        ObjectUtils.assign(this, { subscribers: subscribers })\n\n        // build entity metadatas\n        const flattenedEntities = ObjectUtils.mixedListToArray(\n            this.options.entities || [],\n        )\n        const entityMetadatas =\n            await connectionMetadataBuilder.buildEntityMetadatas(\n                flattenedEntities,\n            )\n        ObjectUtils.assign(this, {\n            entityMetadatas: entityMetadatas,\n            entityMetadatasMap: new Map(\n                entityMetadatas.map((metadata) => [metadata.target, metadata]),\n            ),\n        })\n\n        // create migration instances\n        const flattenedMigrations = ObjectUtils.mixedListToArray(\n            this.options.migrations || [],\n        )\n        const migrations = await connectionMetadataBuilder.buildMigrations(\n            flattenedMigrations,\n        )\n        ObjectUtils.assign(this, { migrations: migrations })\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(\n            this.entityMetadatas.filter(\n                (metadata) => metadata.tableType !== \"view\",\n            ),\n            this.driver,\n        )\n\n        // set current data source to the entities\n        for (let entityMetadata of entityMetadatas) {\n            if (\n                InstanceChecker.isBaseEntityConstructor(entityMetadata.target)\n            ) {\n                entityMetadata.target.useDataSource(this)\n            }\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/data-source/DataSourceOptions.d.ts b/node_modules/typeorm/browser/data-source/DataSourceOptions.d.ts
index 9c6f2e8..0c0369c 100644
--- a/node_modules/typeorm/browser/data-source/DataSourceOptions.d.ts
+++ b/node_modules/typeorm/browser/data-source/DataSourceOptions.d.ts
@@ -1,21 +1,21 @@
-import { CockroachConnectionOptions } from "../driver/cockroachdb/CockroachConnectionOptions";
-import { MysqlConnectionOptions } from "../driver/mysql/MysqlConnectionOptions";
-import { PostgresConnectionOptions } from "../driver/postgres/PostgresConnectionOptions";
-import { SqliteConnectionOptions } from "../driver/sqlite/SqliteConnectionOptions";
-import { SqlServerConnectionOptions } from "../driver/sqlserver/SqlServerConnectionOptions";
-import { OracleConnectionOptions } from "../driver/oracle/OracleConnectionOptions";
-import { MongoConnectionOptions } from "../driver/mongodb/MongoConnectionOptions";
-import { CordovaConnectionOptions } from "../driver/cordova/CordovaConnectionOptions";
-import { SqljsConnectionOptions } from "../driver/sqljs/SqljsConnectionOptions";
-import { ReactNativeConnectionOptions } from "../driver/react-native/ReactNativeConnectionOptions";
-import { NativescriptConnectionOptions } from "../driver/nativescript/NativescriptConnectionOptions";
-import { ExpoConnectionOptions } from "../driver/expo/ExpoConnectionOptions";
-import { AuroraMysqlConnectionOptions } from "../driver/aurora-mysql/AuroraMysqlConnectionOptions";
-import { SapConnectionOptions } from "../driver/sap/SapConnectionOptions";
-import { AuroraPostgresConnectionOptions } from "../driver/aurora-postgres/AuroraPostgresConnectionOptions";
-import { BetterSqlite3ConnectionOptions } from "../driver/better-sqlite3/BetterSqlite3ConnectionOptions";
-import { CapacitorConnectionOptions } from "../driver/capacitor/CapacitorConnectionOptions";
-import { SpannerConnectionOptions } from "../driver/spanner/SpannerConnectionOptions";
+import { CockroachConnectionOptions } from "typeorm/browser/driver/cockroachdb/CockroachConnectionOptions";
+import { MysqlConnectionOptions } from "typeorm/browser/driver/mysql/MysqlConnectionOptions";
+import { PostgresConnectionOptions } from "typeorm/browser/driver/postgres/PostgresConnectionOptions";
+import { SqliteConnectionOptions } from "typeorm/browser/driver/sqlite/SqliteConnectionOptions";
+import { SqlServerConnectionOptions } from "typeorm/browser/driver/sqlserver/SqlServerConnectionOptions";
+import { OracleConnectionOptions } from "typeorm/browser/driver/oracle/OracleConnectionOptions";
+import { MongoConnectionOptions } from "typeorm/browser/driver/mongodb/MongoConnectionOptions";
+import { CordovaConnectionOptions } from "typeorm/browser/driver/cordova/CordovaConnectionOptions";
+import { SqljsConnectionOptions } from "typeorm/browser/driver/sqljs/SqljsConnectionOptions";
+import { ReactNativeConnectionOptions } from "typeorm/browser/driver/react-native/ReactNativeConnectionOptions";
+import { NativescriptConnectionOptions } from "typeorm/browser/driver/nativescript/NativescriptConnectionOptions";
+import { ExpoConnectionOptions } from "typeorm/browser/driver/expo/ExpoConnectionOptions";
+import { AuroraMysqlConnectionOptions } from "typeorm/browser/driver/aurora-mysql/AuroraMysqlConnectionOptions";
+import { SapConnectionOptions } from "typeorm/browser/driver/sap/SapConnectionOptions";
+import { AuroraPostgresConnectionOptions } from "typeorm/browser/driver/aurora-postgres/AuroraPostgresConnectionOptions";
+import { BetterSqlite3ConnectionOptions } from "typeorm/browser/driver/better-sqlite3/BetterSqlite3ConnectionOptions";
+import { CapacitorConnectionOptions } from "typeorm/browser/driver/capacitor/CapacitorConnectionOptions";
+import { SpannerConnectionOptions } from "typeorm/browser/driver/spanner/SpannerConnectionOptions";
 /**
  * DataSourceOptions is an interface with settings and options for specific DataSource.
  */
diff --git a/node_modules/typeorm/browser/data-source/index.d.ts b/node_modules/typeorm/browser/data-source/index.d.ts
index b1da1b5..1795a19 100644
--- a/node_modules/typeorm/browser/data-source/index.d.ts
+++ b/node_modules/typeorm/browser/data-source/index.d.ts
@@ -1,2 +1,2 @@
-export * from "./DataSource";
-export * from "./DataSourceOptions";
+export * from "typeorm/browser/data-source/DataSource";
+export * from "typeorm/browser/data-source/DataSourceOptions";
diff --git a/node_modules/typeorm/browser/decorator/EntityRepository.d.ts b/node_modules/typeorm/browser/decorator/EntityRepository.d.ts
index 09c291a..8f52fb2 100644
--- a/node_modules/typeorm/browser/decorator/EntityRepository.d.ts
+++ b/node_modules/typeorm/browser/decorator/EntityRepository.d.ts
@@ -1,4 +1,4 @@
-import { EntitySchema } from "../entity-schema/EntitySchema";
+import { EntitySchema } from "typeorm/browser/entity-schema/EntitySchema";
 /**
  * Used to declare a class as a custom repository.
  * Custom repository can manage some specific entity or just be generic.
diff --git a/node_modules/typeorm/browser/decorator/Index.d.ts b/node_modules/typeorm/browser/decorator/Index.d.ts
index fee1900..e2f6ea3 100644
--- a/node_modules/typeorm/browser/decorator/Index.d.ts
+++ b/node_modules/typeorm/browser/decorator/Index.d.ts
@@ -1,4 +1,4 @@
-import { IndexOptions } from "./options/IndexOptions";
+import { IndexOptions } from "typeorm/browser/decorator/options/IndexOptions";
 /**
  * Creates a database index.
  * Can be used on entity property or on entity.
diff --git a/node_modules/typeorm/browser/decorator/Unique.d.ts b/node_modules/typeorm/browser/decorator/Unique.d.ts
index fbe272e..a09b1f5 100644
--- a/node_modules/typeorm/browser/decorator/Unique.d.ts
+++ b/node_modules/typeorm/browser/decorator/Unique.d.ts
@@ -1,4 +1,4 @@
-import { UniqueOptions } from "./options/UniqueOptions";
+import { UniqueOptions } from "typeorm/browser/decorator/options/UniqueOptions";
 /**
  * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.
  */
diff --git a/node_modules/typeorm/browser/decorator/columns/Column.d.ts b/node_modules/typeorm/browser/decorator/columns/Column.d.ts
index 294e878..9360a1e 100644
--- a/node_modules/typeorm/browser/decorator/columns/Column.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/Column.d.ts
@@ -1,13 +1,13 @@
-import { SimpleColumnType, SpatialColumnType, WithLengthColumnType, WithPrecisionColumnType, WithWidthColumnType } from "../../driver/types/ColumnTypes";
-import { ColumnCommonOptions } from "../options/ColumnCommonOptions";
-import { SpatialColumnOptions } from "../options/SpatialColumnOptions";
-import { ColumnWithLengthOptions } from "../options/ColumnWithLengthOptions";
-import { ColumnNumericOptions } from "../options/ColumnNumericOptions";
-import { ColumnEnumOptions } from "../options/ColumnEnumOptions";
-import { ColumnEmbeddedOptions } from "../options/ColumnEmbeddedOptions";
-import { ColumnHstoreOptions } from "../options/ColumnHstoreOptions";
-import { ColumnWithWidthOptions } from "../options/ColumnWithWidthOptions";
-import { ColumnOptions } from "../options/ColumnOptions";
+import { SimpleColumnType, SpatialColumnType, WithLengthColumnType, WithPrecisionColumnType, WithWidthColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { ColumnCommonOptions } from "typeorm/browser/decorator/options/ColumnCommonOptions";
+import { SpatialColumnOptions } from "typeorm/browser/decorator/options/SpatialColumnOptions";
+import { ColumnWithLengthOptions } from "typeorm/browser/decorator/options/ColumnWithLengthOptions";
+import { ColumnNumericOptions } from "typeorm/browser/decorator/options/ColumnNumericOptions";
+import { ColumnEnumOptions } from "typeorm/browser/decorator/options/ColumnEnumOptions";
+import { ColumnEmbeddedOptions } from "typeorm/browser/decorator/options/ColumnEmbeddedOptions";
+import { ColumnHstoreOptions } from "typeorm/browser/decorator/options/ColumnHstoreOptions";
+import { ColumnWithWidthOptions } from "typeorm/browser/decorator/options/ColumnWithWidthOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this
  * decorator will be persisted to the database when entity be saved.
diff --git a/node_modules/typeorm/browser/decorator/columns/CreateDateColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/CreateDateColumn.d.ts
index ff4f277..a7e1f77 100644
--- a/node_modules/typeorm/browser/decorator/columns/CreateDateColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/CreateDateColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * This column will store a creation date of the inserted object.
  * Creation date is generated and inserted only once,
diff --git a/node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.d.ts
index 9132a7c..1624752 100644
--- a/node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/DeleteDateColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * This column will store a delete date of the soft-deleted object.
  * This date is being updated each time you soft-delete the object.
diff --git a/node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.d.ts
index faa53b6..fea6ae3 100644
--- a/node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/ObjectIdColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * Special type of column that is available only for MongoDB database.
  * Marks your entity's column to be an object id.
diff --git a/node_modules/typeorm/browser/decorator/columns/PrimaryColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/PrimaryColumn.d.ts
index eb4bc28..f35f4f5 100644
--- a/node_modules/typeorm/browser/decorator/columns/PrimaryColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/PrimaryColumn.d.ts
@@ -1,5 +1,5 @@
-import { ColumnOptions } from "../options/ColumnOptions";
-import { ColumnType } from "../../driver/types/ColumnTypes";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
 /**
  * Describes all primary key column's options.
  * If specified, the nullable field must be set to false.
diff --git a/node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.d.ts
index 74a08a1..48ed9f5 100644
--- a/node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/PrimaryGeneratedColumn.d.ts
@@ -1,6 +1,6 @@
-import { PrimaryGeneratedColumnNumericOptions } from "../options/PrimaryGeneratedColumnNumericOptions";
-import { PrimaryGeneratedColumnUUIDOptions } from "../options/PrimaryGeneratedColumnUUIDOptions";
-import { PrimaryGeneratedColumnIdentityOptions } from "../options/PrimaryGeneratedColumnIdentityOptions";
+import { PrimaryGeneratedColumnNumericOptions } from "typeorm/browser/decorator/options/PrimaryGeneratedColumnNumericOptions";
+import { PrimaryGeneratedColumnUUIDOptions } from "typeorm/browser/decorator/options/PrimaryGeneratedColumnUUIDOptions";
+import { PrimaryGeneratedColumnIdentityOptions } from "typeorm/browser/decorator/options/PrimaryGeneratedColumnIdentityOptions";
 /**
  * Column decorator is used to mark a specific class property as a table column.
  */
diff --git a/node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.d.ts
index 242b4e4..8613bdd 100644
--- a/node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/UpdateDateColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * This column will store an update date of the updated object.
  * This date is being updated each time you persist the object.
diff --git a/node_modules/typeorm/browser/decorator/columns/VersionColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/VersionColumn.d.ts
index 112b394..4d6f441 100644
--- a/node_modules/typeorm/browser/decorator/columns/VersionColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/VersionColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * This column will store a number - version of the entity.
  * Every time your entity will be persisted, this number will be increased by one -
diff --git a/node_modules/typeorm/browser/decorator/columns/ViewColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/ViewColumn.d.ts
index 2d6d66e..eb6ad47 100644
--- a/node_modules/typeorm/browser/decorator/columns/ViewColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/ViewColumn.d.ts
@@ -1,4 +1,4 @@
-import { ViewColumnOptions } from "../options/ViewColumnOptions";
+import { ViewColumnOptions } from "typeorm/browser/decorator/options/ViewColumnOptions";
 /**
  * ViewColumn decorator is used to mark a specific class property as a view column.
  */
diff --git a/node_modules/typeorm/browser/decorator/columns/VirtualColumn.d.ts b/node_modules/typeorm/browser/decorator/columns/VirtualColumn.d.ts
index 4b67aeb..da3e90a 100644
--- a/node_modules/typeorm/browser/decorator/columns/VirtualColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/columns/VirtualColumn.d.ts
@@ -1,5 +1,5 @@
-import { ColumnType } from "../../driver/types/ColumnTypes";
-import { VirtualColumnOptions } from "../options/VirtualColumnOptions";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { VirtualColumnOptions } from "typeorm/browser/decorator/options/VirtualColumnOptions";
 /**
  * VirtualColumn decorator is used to mark a specific class property as a Virtual column.
  */
diff --git a/node_modules/typeorm/browser/decorator/entity-view/ViewEntity.d.ts b/node_modules/typeorm/browser/decorator/entity-view/ViewEntity.d.ts
index 343a9d0..e4d816b 100644
--- a/node_modules/typeorm/browser/decorator/entity-view/ViewEntity.d.ts
+++ b/node_modules/typeorm/browser/decorator/entity-view/ViewEntity.d.ts
@@ -1,4 +1,4 @@
-import { ViewEntityOptions } from "../options/ViewEntityOptions";
+import { ViewEntityOptions } from "typeorm/browser/decorator/options/ViewEntityOptions";
 /**
  * This decorator is used to mark classes that will be an entity view.
  * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
diff --git a/node_modules/typeorm/browser/decorator/entity/Entity.d.ts b/node_modules/typeorm/browser/decorator/entity/Entity.d.ts
index 956bb0b..5cec6b8 100644
--- a/node_modules/typeorm/browser/decorator/entity/Entity.d.ts
+++ b/node_modules/typeorm/browser/decorator/entity/Entity.d.ts
@@ -1,4 +1,4 @@
-import { EntityOptions } from "../options/EntityOptions";
+import { EntityOptions } from "typeorm/browser/decorator/options/EntityOptions";
 /**
  * This decorator is used to mark classes that will be an entity (table or document depend on database type).
  * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
diff --git a/node_modules/typeorm/browser/decorator/entity/TableInheritance.d.ts b/node_modules/typeorm/browser/decorator/entity/TableInheritance.d.ts
index 8e2ea9a..c42b825 100644
--- a/node_modules/typeorm/browser/decorator/entity/TableInheritance.d.ts
+++ b/node_modules/typeorm/browser/decorator/entity/TableInheritance.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * Sets for entity to use table inheritance pattern.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/ColumnCommonOptions.d.ts b/node_modules/typeorm/browser/decorator/options/ColumnCommonOptions.d.ts
index 6b14d41..c634a7f 100644
--- a/node_modules/typeorm/browser/decorator/options/ColumnCommonOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/ColumnCommonOptions.d.ts
@@ -1,4 +1,4 @@
-import { ValueTransformer } from "./ValueTransformer";
+import { ValueTransformer } from "typeorm/browser/decorator/options/ValueTransformer";
 /**
  * Column options specific to all column types.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/ColumnOptions.d.ts b/node_modules/typeorm/browser/decorator/options/ColumnOptions.d.ts
index eeb8cc5..fce4992 100644
--- a/node_modules/typeorm/browser/decorator/options/ColumnOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/ColumnOptions.d.ts
@@ -1,6 +1,6 @@
-import { ColumnType } from "../../driver/types/ColumnTypes";
-import { ValueTransformer } from "./ValueTransformer";
-import { ColumnCommonOptions } from "./ColumnCommonOptions";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { ValueTransformer } from "typeorm/browser/decorator/options/ValueTransformer";
+import { ColumnCommonOptions } from "typeorm/browser/decorator/options/ColumnCommonOptions";
 /**
  * Describes all column's options.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/EntityOptions.d.ts b/node_modules/typeorm/browser/decorator/options/EntityOptions.d.ts
index 1b42ee8..ba7ee99 100644
--- a/node_modules/typeorm/browser/decorator/options/EntityOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/EntityOptions.d.ts
@@ -1,4 +1,4 @@
-import { OrderByCondition } from "../../find-options/OrderByCondition";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
 /**
  * Describes all entity's options.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/JoinTableMultipleColumnsOptions.d.ts b/node_modules/typeorm/browser/decorator/options/JoinTableMultipleColumnsOptions.d.ts
index 50cd769..e65f6b9 100644
--- a/node_modules/typeorm/browser/decorator/options/JoinTableMultipleColumnsOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/JoinTableMultipleColumnsOptions.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnOptions } from "./JoinColumnOptions";
+import { JoinColumnOptions } from "typeorm/browser/decorator/options/JoinColumnOptions";
 /**
  * Describes all join table with multiple column options.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/JoinTableOptions.d.ts b/node_modules/typeorm/browser/decorator/options/JoinTableOptions.d.ts
index 6a15184..2b51dc9 100644
--- a/node_modules/typeorm/browser/decorator/options/JoinTableOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/JoinTableOptions.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnOptions } from "./JoinColumnOptions";
+import { JoinColumnOptions } from "typeorm/browser/decorator/options/JoinColumnOptions";
 /**
  * Describes join table options.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts b/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts
index 06ded11..35ac2dc 100644
--- a/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts
@@ -1,4 +1,4 @@
-import { PrimaryGeneratedColumnType } from "../../driver/types/ColumnTypes";
+import { PrimaryGeneratedColumnType } from "typeorm/browser/driver/types/ColumnTypes";
 /**
  * Describes all options for PrimaryGeneratedColumn decorator with identity generation strategy.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts b/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts
index b68c8b8..1b0f2b9 100644
--- a/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts
@@ -1,4 +1,4 @@
-import { PrimaryGeneratedColumnType } from "../../driver/types/ColumnTypes";
+import { PrimaryGeneratedColumnType } from "typeorm/browser/driver/types/ColumnTypes";
 /**
  * Describes all options for PrimaryGeneratedColumn decorator with numeric generation strategy.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/RelationOptions.d.ts b/node_modules/typeorm/browser/decorator/options/RelationOptions.d.ts
index b6ca2f4..29b9ad7 100644
--- a/node_modules/typeorm/browser/decorator/options/RelationOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/RelationOptions.d.ts
@@ -1,6 +1,6 @@
-import { DeferrableType } from "../../metadata/types/DeferrableType";
-import { OnDeleteType } from "../../metadata/types/OnDeleteType";
-import { OnUpdateType } from "../../metadata/types/OnUpdateType";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
+import { OnDeleteType } from "typeorm/browser/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/browser/metadata/types/OnUpdateType";
 /**
  * Describes all relation's options.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/SpatialColumnOptions.d.ts b/node_modules/typeorm/browser/decorator/options/SpatialColumnOptions.d.ts
index 6d0c7b7..5e64d47 100644
--- a/node_modules/typeorm/browser/decorator/options/SpatialColumnOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/SpatialColumnOptions.d.ts
@@ -1,4 +1,4 @@
-import { Geometry } from "../../driver/types/GeoJsonTypes";
+import { Geometry } from "typeorm/browser/driver/types/GeoJsonTypes";
 /**
  * Options for spatial columns.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/UniqueOptions.d.ts b/node_modules/typeorm/browser/decorator/options/UniqueOptions.d.ts
index 377af4d..1d249fe 100644
--- a/node_modules/typeorm/browser/decorator/options/UniqueOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/UniqueOptions.d.ts
@@ -1,4 +1,4 @@
-import { DeferrableType } from "../../metadata/types/DeferrableType";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
 /**
  * Describes all unique options.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/ViewColumnOptions.d.ts b/node_modules/typeorm/browser/decorator/options/ViewColumnOptions.d.ts
index bf2fa4f..317fa26 100644
--- a/node_modules/typeorm/browser/decorator/options/ViewColumnOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/ViewColumnOptions.d.ts
@@ -1,4 +1,4 @@
-import { ValueTransformer } from "./ValueTransformer";
+import { ValueTransformer } from "typeorm/browser/decorator/options/ValueTransformer";
 /**
  * Describes all view column's options.
  */
diff --git a/node_modules/typeorm/browser/decorator/options/ViewEntityOptions.d.ts b/node_modules/typeorm/browser/decorator/options/ViewEntityOptions.d.ts
index df90c18..273b735 100644
--- a/node_modules/typeorm/browser/decorator/options/ViewEntityOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/ViewEntityOptions.d.ts
@@ -1,7 +1,7 @@
 /**
  * Describes all entity view's options.
  */
-import { DataSource, SelectQueryBuilder } from "../..";
+import { DataSource, SelectQueryBuilder } from "typeorm/browser";
 export interface ViewEntityOptions {
     /**
      * View name.
diff --git a/node_modules/typeorm/browser/decorator/options/VirtualColumnOptions.d.ts b/node_modules/typeorm/browser/decorator/options/VirtualColumnOptions.d.ts
index 271d6d0..611a03c 100644
--- a/node_modules/typeorm/browser/decorator/options/VirtualColumnOptions.d.ts
+++ b/node_modules/typeorm/browser/decorator/options/VirtualColumnOptions.d.ts
@@ -1,5 +1,5 @@
-import { ColumnType } from "../../driver/types/ColumnTypes";
-import { ValueTransformer } from "./ValueTransformer";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { ValueTransformer } from "typeorm/browser/decorator/options/ValueTransformer";
 /**
  * Describes all calculated column's options.
  */
diff --git a/node_modules/typeorm/browser/decorator/relations/JoinColumn.d.ts b/node_modules/typeorm/browser/decorator/relations/JoinColumn.d.ts
index 48049a6..2c85039 100644
--- a/node_modules/typeorm/browser/decorator/relations/JoinColumn.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/JoinColumn.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnOptions } from "../options/JoinColumnOptions";
+import { JoinColumnOptions } from "typeorm/browser/decorator/options/JoinColumnOptions";
 /**
  * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.
  * It also can be used on both one-to-one and many-to-one relations to specify custom column name
diff --git a/node_modules/typeorm/browser/decorator/relations/JoinTable.d.ts b/node_modules/typeorm/browser/decorator/relations/JoinTable.d.ts
index 1768f34..1d77b39 100644
--- a/node_modules/typeorm/browser/decorator/relations/JoinTable.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/JoinTable.d.ts
@@ -1,5 +1,5 @@
-import { JoinTableMultipleColumnsOptions } from "../options/JoinTableMultipleColumnsOptions";
-import { JoinTableOptions } from "../options/JoinTableOptions";
+import { JoinTableMultipleColumnsOptions } from "typeorm/browser/decorator/options/JoinTableMultipleColumnsOptions";
+import { JoinTableOptions } from "typeorm/browser/decorator/options/JoinTableOptions";
 /**
  * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.
  * Its also used to set a custom junction table's name, column names and referenced columns.
diff --git a/node_modules/typeorm/browser/decorator/relations/ManyToMany.d.ts b/node_modules/typeorm/browser/decorator/relations/ManyToMany.d.ts
index a6fc15c..2b15047 100644
--- a/node_modules/typeorm/browser/decorator/relations/ManyToMany.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/ManyToMany.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { RelationOptions } from "typeorm/browser/decorator/options/RelationOptions";
 /**
  * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have
  * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage
diff --git a/node_modules/typeorm/browser/decorator/relations/ManyToOne.d.ts b/node_modules/typeorm/browser/decorator/relations/ManyToOne.d.ts
index 3c10708..d9768b7 100644
--- a/node_modules/typeorm/browser/decorator/relations/ManyToOne.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/ManyToOne.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { RelationOptions } from "typeorm/browser/decorator/options/RelationOptions";
 /**
  * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but
  * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of
diff --git a/node_modules/typeorm/browser/decorator/relations/OneToMany.d.ts b/node_modules/typeorm/browser/decorator/relations/OneToMany.d.ts
index 7fa9d3b..c4cae1a 100644
--- a/node_modules/typeorm/browser/decorator/relations/OneToMany.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/OneToMany.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { RelationOptions } from "typeorm/browser/decorator/options/RelationOptions";
 /**
  * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,
  * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its
diff --git a/node_modules/typeorm/browser/decorator/relations/OneToOne.d.ts b/node_modules/typeorm/browser/decorator/relations/OneToOne.d.ts
index 8bd386e..3c4ef36 100644
--- a/node_modules/typeorm/browser/decorator/relations/OneToOne.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/OneToOne.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { RelationOptions } from "typeorm/browser/decorator/options/RelationOptions";
 /**
  * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.
  * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.
diff --git a/node_modules/typeorm/browser/decorator/relations/RelationCount.d.ts b/node_modules/typeorm/browser/decorator/relations/RelationCount.d.ts
index 686c7fb..01f7be3 100644
--- a/node_modules/typeorm/browser/decorator/relations/RelationCount.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/RelationCount.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Holds a number of children in the closure table of the column.
  *
diff --git a/node_modules/typeorm/browser/decorator/relations/RelationId.d.ts b/node_modules/typeorm/browser/decorator/relations/RelationId.d.ts
index 064f2fd..bc6f504 100644
--- a/node_modules/typeorm/browser/decorator/relations/RelationId.d.ts
+++ b/node_modules/typeorm/browser/decorator/relations/RelationId.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Special decorator used to extract relation id into separate entity property.
  *
diff --git a/node_modules/typeorm/browser/decorator/tree/Tree.d.ts b/node_modules/typeorm/browser/decorator/tree/Tree.d.ts
index aae1467..be03d85 100644
--- a/node_modules/typeorm/browser/decorator/tree/Tree.d.ts
+++ b/node_modules/typeorm/browser/decorator/tree/Tree.d.ts
@@ -1,5 +1,5 @@
-import { TreeType } from "../../metadata/types/TreeTypes";
-import { ClosureTreeOptions } from "../../metadata/types/ClosureTreeOptions";
+import { TreeType } from "typeorm/browser/metadata/types/TreeTypes";
+import { ClosureTreeOptions } from "typeorm/browser/metadata/types/ClosureTreeOptions";
 /**
  * Marks entity to work like a tree.
  * Tree pattern that will be used for the tree entity should be specified.
diff --git a/node_modules/typeorm/browser/decorator/tree/TreeParent.d.ts b/node_modules/typeorm/browser/decorator/tree/TreeParent.d.ts
index faa0a12..f4be491 100644
--- a/node_modules/typeorm/browser/decorator/tree/TreeParent.d.ts
+++ b/node_modules/typeorm/browser/decorator/tree/TreeParent.d.ts
@@ -1,4 +1,4 @@
-import { OnDeleteType } from "../../metadata/types/OnDeleteType";
+import { OnDeleteType } from "typeorm/browser/metadata/types/OnDeleteType";
 /**
  * Marks a entity property as a parent of the tree.
  * "Tree parent" indicates who owns (is a parent) of this entity in tree structure.
diff --git a/node_modules/typeorm/browser/driver/Driver.d.ts b/node_modules/typeorm/browser/driver/Driver.d.ts
index 58b159f..830633f 100644
--- a/node_modules/typeorm/browser/driver/Driver.d.ts
+++ b/node_modules/typeorm/browser/driver/Driver.d.ts
@@ -1,21 +1,21 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnType } from "./types/ColumnTypes";
-import { CteCapabilities } from "./types/CteCapabilities";
-import { MappedColumnTypes } from "./types/MappedColumnTypes";
-import { SchemaBuilder } from "../schema-builder/SchemaBuilder";
-import { DataTypeDefaults } from "./types/DataTypeDefaults";
-import { BaseDataSourceOptions } from "../data-source/BaseDataSourceOptions";
-import { TableColumn } from "../schema-builder/table/TableColumn";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { ReplicationMode } from "./types/ReplicationMode";
-import { Table } from "../schema-builder/table/Table";
-import { View } from "../schema-builder/view/View";
-import { TableForeignKey } from "../schema-builder/table/TableForeignKey";
-import { UpsertType } from "./types/UpsertType";
-import { OnDeleteType } from "../metadata/types/OnDeleteType";
-import { OnUpdateType } from "../metadata/types/OnUpdateType";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { CteCapabilities } from "typeorm/browser/driver/types/CteCapabilities";
+import { MappedColumnTypes } from "typeorm/browser/driver/types/MappedColumnTypes";
+import { SchemaBuilder } from "typeorm/browser/schema-builder/SchemaBuilder";
+import { DataTypeDefaults } from "typeorm/browser/driver/types/DataTypeDefaults";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { TableColumn } from "typeorm/browser/schema-builder/table/TableColumn";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { ReplicationMode } from "typeorm/browser/driver/types/ReplicationMode";
+import { Table } from "typeorm/browser/schema-builder/table/Table";
+import { View } from "typeorm/browser/schema-builder/view/View";
+import { TableForeignKey } from "typeorm/browser/schema-builder/table/TableForeignKey";
+import { UpsertType } from "typeorm/browser/driver/types/UpsertType";
+import { OnDeleteType } from "typeorm/browser/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/browser/metadata/types/OnUpdateType";
 export type ReturningType = "insert" | "update" | "delete";
 /**
  * Driver organizes TypeORM communication with specific database management system.
diff --git a/node_modules/typeorm/browser/driver/DriverUtils.js b/node_modules/typeorm/browser/driver/DriverUtils.js
index 59d0160..d11e548 100644
--- a/node_modules/typeorm/browser/driver/DriverUtils.js
+++ b/node_modules/typeorm/browser/driver/DriverUtils.js
@@ -90,11 +90,8 @@ export class DriverUtils {
      * @return An alias that is no longer than the divers max alias length.
      */
     static buildAlias({ maxAliasLength }, buildOptions, ...alias) {
-        const newAlias = alias.length === 1
-            ? alias[0]
-            : alias.join(buildOptions && buildOptions.joiner
-                ? buildOptions.joiner
-                : "_");
+        const joiner = buildOptions && buildOptions.joiner ? buildOptions.joiner : "_";
+        let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner);
         if (maxAliasLength &&
             maxAliasLength > 0 &&
             newAlias.length > maxAliasLength) {
diff --git a/node_modules/typeorm/browser/driver/DriverUtils.js.map b/node_modules/typeorm/browser/driver/DriverUtils.js.map
index 3c006d8..79c0c07 100644
--- a/node_modules/typeorm/browser/driver/DriverUtils.js.map
+++ b/node_modules/typeorm/browser/driver/DriverUtils.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import { Driver } from \"./Driver\"\nimport { hash, shorten } from \"../util/StringUtils\"\nimport { VersionUtils } from \"../util/VersionUtils\"\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver: Driver): boolean {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type)\n    }\n\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver: Driver): boolean {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\n    }\n\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\n        return (\n            driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version)\n        )\n    }\n\n    static isPostgresFamily(driver: Driver): boolean {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(\n            driver.options.type,\n        )\n    }\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\n                [key: string]: any\n            }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\n                options.url,\n            ) as { [key: string]: any }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | undefined,\n        ...alias: string[]\n    ): string {\n        const newAlias =\n            alias.length === 1\n                ? alias[0]\n                : alias.join(\n                      buildOptions && buildOptions.joiner\n                          ? buildOptions.joiner\n                          : \"_\",\n                  )\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength\n        ) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias)\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength })\n        }\n\n        return newAlias\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions)\n            buildOptions = { shorten: false, joiner: \"_\" }\n        } else {\n            buildOptions = Object.assign(\n                { shorten: false, joiner: \"_\" },\n                buildOptions,\n            )\n        }\n        return this.buildAlias(\n            { maxAliasLength } as Driver,\n            buildOptions,\n            ...alias,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n        const [host, port] = hostAndPort.split(\":\")\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        let afterQuestionMark = \"\"\n        let host = undefined\n        let port = undefined\n        let hostReplicaSet = undefined\n        let replicaSet = undefined\n\n        let optionsObject: any = {}\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(\n                afterBase.indexOf(\"?\") + 1,\n                afterBase.length,\n            )\n\n            const optionsList = afterQuestionMark.split(\"&\")\n            let optionKey: string\n            let optionValue: string\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0]\n                optionValue = optionItem.split(\"=\")[1]\n                optionsObject[optionKey] = optionValue\n            })\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"]\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort\n        } else {\n            ;[host, port] = hostAndPort.split(\":\")\n        }\n\n        let connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value\n        }\n\n        return connectionUrl\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import { Driver } from \"./Driver\"\nimport { hash, shorten } from \"../util/StringUtils\"\nimport { VersionUtils } from \"../util/VersionUtils\"\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver: Driver): boolean {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type)\n    }\n\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver: Driver): boolean {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\n    }\n\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\n        return (\n            driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version)\n        )\n    }\n\n    static isPostgresFamily(driver: Driver): boolean {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(\n            driver.options.type,\n        )\n    }\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\n                [key: string]: any\n            }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\n                options.url,\n            ) as { [key: string]: any }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | undefined,\n        ...alias: string[]\n    ): string {\n        const joiner =\n            buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\"\n\n        let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner)\n\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength\n        ) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias)\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength })\n        }\n\n        return newAlias\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions)\n            buildOptions = { shorten: false, joiner: \"_\" }\n        } else {\n            buildOptions = Object.assign(\n                { shorten: false, joiner: \"_\" },\n                buildOptions,\n            )\n        }\n        return this.buildAlias(\n            { maxAliasLength } as Driver,\n            buildOptions,\n            ...alias,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n        const [host, port] = hostAndPort.split(\":\")\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        let afterQuestionMark = \"\"\n        let host = undefined\n        let port = undefined\n        let hostReplicaSet = undefined\n        let replicaSet = undefined\n\n        let optionsObject: any = {}\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(\n                afterBase.indexOf(\"?\") + 1,\n                afterBase.length,\n            )\n\n            const optionsList = afterQuestionMark.split(\"&\")\n            let optionKey: string\n            let optionValue: string\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0]\n                optionValue = optionItem.split(\"=\")[1]\n                optionsObject[optionKey] = optionValue\n            })\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"]\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort\n        } else {\n            ;[host, port] = hostAndPort.split(\":\")\n        }\n\n        let connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value\n        }\n\n        return connectionUrl\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/driver/SqlInMemory.d.ts b/node_modules/typeorm/browser/driver/SqlInMemory.d.ts
index f87f391..52e3f86 100644
--- a/node_modules/typeorm/browser/driver/SqlInMemory.d.ts
+++ b/node_modules/typeorm/browser/driver/SqlInMemory.d.ts
@@ -1,4 +1,4 @@
-import { Query } from "./Query";
+import { Query } from "typeorm/browser/driver/Query";
 /**
  * This class stores up and down queries needed for migrations functionality.
  */
diff --git a/node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts
index fbcc022..31aa620 100644
--- a/node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { AuroraMysqlConnectionCredentialsOptions } from "./AuroraMysqlConnectionCredentialsOptions";
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { AuroraMysqlConnectionCredentialsOptions } from "typeorm/browser/driver/aurora-mysql/AuroraMysqlConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * MySQL specific connection options.
  *
diff --git a/node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts
index 8f55291..58f8ded 100644
--- a/node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Postgres-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts
index e64e3d7..9acc652 100644
--- a/node_modules/typeorm/browser/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/capacitor/CapacitorConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/capacitor/CapacitorConnectionOptions.d.ts
index 79c9244..40ac61a 100644
--- a/node_modules/typeorm/browser/driver/capacitor/CapacitorConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/capacitor/CapacitorConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/cockroachdb/CockroachConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/cockroachdb/CockroachConnectionOptions.d.ts
index 47c0ba4..a227677 100644
--- a/node_modules/typeorm/browser/driver/cockroachdb/CockroachConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/cockroachdb/CockroachConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { CockroachConnectionCredentialsOptions } from "./CockroachConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { CockroachConnectionCredentialsOptions } from "typeorm/browser/driver/cockroachdb/CockroachConnectionCredentialsOptions";
 /**
  * Cockroachdb-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/cordova/CordovaConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/cordova/CordovaConnectionOptions.d.ts
index 224a205..8fb4bd4 100644
--- a/node_modules/typeorm/browser/driver/cordova/CordovaConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/cordova/CordovaConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/expo/ExpoConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/expo/ExpoConnectionOptions.d.ts
index f388566..9a213de 100644
--- a/node_modules/typeorm/browser/driver/expo/ExpoConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/expo/ExpoConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/mongodb/MongoConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/mongodb/MongoConnectionOptions.d.ts
index dbe27a0..2896f7e 100644
--- a/node_modules/typeorm/browser/driver/mongodb/MongoConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/mongodb/MongoConnectionOptions.d.ts
@@ -1,6 +1,6 @@
 
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { ReadPreference } from "./typings";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { ReadPreference } from "typeorm/browser/driver/mongodb/typings";
 /**
  * MongoDB specific connection options.
  * Synced with http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html
diff --git a/node_modules/typeorm/browser/driver/mongodb/MongoQueryRunner.d.ts b/node_modules/typeorm/browser/driver/mongodb/MongoQueryRunner.d.ts
index ca66d10..24a43e2 100644
--- a/node_modules/typeorm/browser/driver/mongodb/MongoQueryRunner.d.ts
+++ b/node_modules/typeorm/browser/driver/mongodb/MongoQueryRunner.d.ts
@@ -1,20 +1,20 @@
 
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { TableColumn } from "../../schema-builder/table/TableColumn";
-import { Table } from "../../schema-builder/table/Table";
-import { TableForeignKey } from "../../schema-builder/table/TableForeignKey";
-import { TableIndex } from "../../schema-builder/table/TableIndex";
-import { View } from "../../schema-builder/view/View";
-import { ReadStream } from "../../platform/PlatformTools";
-import { MongoEntityManager } from "../../entity-manager/MongoEntityManager";
-import { SqlInMemory } from "../SqlInMemory";
-import { TableUnique } from "../../schema-builder/table/TableUnique";
-import { Broadcaster } from "../../subscriber/Broadcaster";
-import { TableCheck } from "../../schema-builder/table/TableCheck";
-import { TableExclusion } from "../../schema-builder/table/TableExclusion";
-import { BulkWriteResult, AggregationCursor, MongoClient, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, CountDocumentsOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions } from "../../driver/mongodb/typings";
-import { DataSource } from "../../data-source/DataSource";
-import { ReplicationMode } from "../types/ReplicationMode";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { TableColumn } from "typeorm/browser/schema-builder/table/TableColumn";
+import { Table } from "typeorm/browser/schema-builder/table/Table";
+import { TableForeignKey } from "typeorm/browser/schema-builder/table/TableForeignKey";
+import { TableIndex } from "typeorm/browser/schema-builder/table/TableIndex";
+import { View } from "typeorm/browser/schema-builder/view/View";
+import { ReadStream } from "typeorm/browser/platform/PlatformTools";
+import { MongoEntityManager } from "typeorm/browser/entity-manager/MongoEntityManager";
+import { SqlInMemory } from "typeorm/browser/driver/SqlInMemory";
+import { TableUnique } from "typeorm/browser/schema-builder/table/TableUnique";
+import { Broadcaster } from "typeorm/browser/subscriber/Broadcaster";
+import { TableCheck } from "typeorm/browser/schema-builder/table/TableCheck";
+import { TableExclusion } from "typeorm/browser/schema-builder/table/TableExclusion";
+import { BulkWriteResult, AggregationCursor, MongoClient, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, CountDocumentsOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions } from "typeorm/browser/driver/mongodb/typings";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { ReplicationMode } from "typeorm/browser/driver/types/ReplicationMode";
 /**
  * Runs queries on a single MongoDB connection.
  */
diff --git a/node_modules/typeorm/browser/driver/mongodb/typings.d.ts b/node_modules/typeorm/browser/driver/mongodb/typings.d.ts
index d53149b..12f6a06 100644
--- a/node_modules/typeorm/browser/driver/mongodb/typings.d.ts
+++ b/node_modules/typeorm/browser/driver/mongodb/typings.d.ts
@@ -6,14 +6,14 @@
 
 
 
-import { BSON, BSONRegExp, BSONSymbol, BSONType, Binary, Code, DBRef, Decimal128, DeserializeOptions, Document, Double, Int32, Long, MaxKey, MinKey, ObjectId, ObjectIdLike, SerializeOptions, Timestamp, deserialize, serialize } from "./bson.typings";
+import { BSON, BSONRegExp, BSONSymbol, BSONType, Binary, Code, DBRef, Decimal128, DeserializeOptions, Document, Double, Int32, Long, MaxKey, MinKey, ObjectId, ObjectIdLike, SerializeOptions, Timestamp, deserialize, serialize } from "typeorm/browser/driver/mongodb/bson.typings";
 import type { ConnectionOptions as ConnectionOptions_2 } from "tls";
 import type { Socket } from "net";
 import type { SrvRecord } from "dns";
 import type { TcpNetConnectOpts } from "net";
 import type { TLSSocket } from "tls";
 import type { TLSSocketOptions } from "tls";
-import { Readable, EventEmitter } from "../../platform/PlatformTools";
+import { Readable, EventEmitter } from "typeorm/browser/platform/PlatformTools";
 /** @public */
 export declare abstract class AbstractCursor<TSchema = any, CursorEvents extends AbstractCursorEvents = AbstractCursorEvents> extends TypedEventEmitter<CursorEvents> {
     /** @event */
diff --git a/node_modules/typeorm/browser/driver/mysql/MysqlConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/mysql/MysqlConnectionOptions.d.ts
index 04ff775..027d763 100644
--- a/node_modules/typeorm/browser/driver/mysql/MysqlConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/mysql/MysqlConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { MysqlConnectionCredentialsOptions } from "./MysqlConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { MysqlConnectionCredentialsOptions } from "typeorm/browser/driver/mysql/MysqlConnectionCredentialsOptions";
 /**
  * MySQL specific connection options.
  *
diff --git a/node_modules/typeorm/browser/driver/nativescript/NativescriptConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/nativescript/NativescriptConnectionOptions.d.ts
index 90acf42..a1141fd 100644
--- a/node_modules/typeorm/browser/driver/nativescript/NativescriptConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/nativescript/NativescriptConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * NativeScript-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/oracle/OracleConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/oracle/OracleConnectionOptions.d.ts
index 4f729ef..cfac2a4 100644
--- a/node_modules/typeorm/browser/driver/oracle/OracleConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/oracle/OracleConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { OracleConnectionCredentialsOptions } from "./OracleConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { OracleConnectionCredentialsOptions } from "typeorm/browser/driver/oracle/OracleConnectionCredentialsOptions";
 /**
  * Oracle-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/postgres/PostgresConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/postgres/PostgresConnectionOptions.d.ts
index 185afd4..77aa7b4 100644
--- a/node_modules/typeorm/browser/driver/postgres/PostgresConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/postgres/PostgresConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { PostgresConnectionCredentialsOptions } from "./PostgresConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { PostgresConnectionCredentialsOptions } from "typeorm/browser/driver/postgres/PostgresConnectionCredentialsOptions";
 /**
  * Postgres-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts
index 8004ebe..3bf9c00 100644
--- a/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/react-native/ReactNativeConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/sap/SapConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/sap/SapConnectionOptions.d.ts
index 651ab85..2f73f8c 100644
--- a/node_modules/typeorm/browser/driver/sap/SapConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/sap/SapConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { SapConnectionCredentialsOptions } from "./SapConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { SapConnectionCredentialsOptions } from "typeorm/browser/driver/sap/SapConnectionCredentialsOptions";
 /**
  * SAP Hana specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/sap/SapDriver.js b/node_modules/typeorm/browser/driver/sap/SapDriver.js
index 5cd6f9d..c9a4ed6 100644
--- a/node_modules/typeorm/browser/driver/sap/SapDriver.js
+++ b/node_modules/typeorm/browser/driver/sap/SapDriver.js
@@ -1,5 +1,5 @@
-import { TypeORMError, } from "../..";
 import { DriverPackageNotInstalledError } from "../../error/DriverPackageNotInstalledError";
+import { TypeORMError } from "../../error/TypeORMError";
 import { PlatformTools } from "../../platform/PlatformTools";
 import { RdbmsSchemaBuilder } from "../../schema-builder/RdbmsSchemaBuilder";
 import { ApplyValueTransformers } from "../../util/ApplyValueTransformers";
diff --git a/node_modules/typeorm/browser/driver/sap/SapDriver.js.map b/node_modules/typeorm/browser/driver/sap/SapDriver.js.map
index 270c815..05ea3b7 100644
--- a/node_modules/typeorm/browser/driver/sap/SapDriver.js.map
+++ b/node_modules/typeorm/browser/driver/sap/SapDriver.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/driver/sap/SapDriver.ts"],"names":[],"mappings":"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","file":"SapDriver.js","sourcesContent":["import {\n    ColumnType,\n    DataSource,\n    EntityMetadata,\n    ObjectLiteral,\n    Table,\n    TableColumn,\n    TableForeignKey,\n    TypeORMError,\n} from \"../..\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Driver } from \"../Driver\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { SapConnectionOptions } from \"./SapConnectionOptions\"\nimport { SapQueryRunner } from \"./SapQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\n\n/**\n * Organizes communication with SAP Hana DBMS.\n *\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\n */\nexport class SapDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Hana Pool instance.\n     */\n    client: any\n\n    /**\n     * Pool for master database.\n     */\n    master: any\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SapConnectionOptions\n\n    /**\n     * Database name used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Schema name used to perform all write queries.\n     */\n    schema?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"simple\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"int\",\n        \"integer\",\n        \"bigint\",\n        \"smalldecimal\",\n        \"decimal\",\n        \"dec\",\n        \"real\",\n        \"double\",\n        \"float\",\n        \"date\",\n        \"time\",\n        \"seconddate\",\n        \"timestamp\",\n        \"boolean\",\n        \"char\",\n        \"nchar\",\n        \"varchar\",\n        \"nvarchar\",\n        \"text\",\n        \"alphanum\",\n        \"shorttext\",\n        \"array\",\n        \"varbinary\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"st_geometry\",\n        \"st_point\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = []\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\"st_geometry\", \"st_point\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"varchar\",\n        \"nvarchar\",\n        \"alphanum\",\n        \"shorttext\",\n        \"varbinary\",\n    ]\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"nvarchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"integer\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"integer\",\n        cacheQuery: \"nvarchar(5000)\" as any,\n        cacheResult: \"text\",\n        metadataType: \"nvarchar\",\n        metadataDatabase: \"nvarchar\",\n        metadataSchema: \"nvarchar\",\n        metadataTable: \"nvarchar\",\n        metadataName: \"nvarchar\",\n        metadataValue: \"nvarchar(5000)\" as any,\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        char: { length: 1 },\n        nchar: { length: 1 },\n        varchar: { length: 255 },\n        nvarchar: { length: 255 },\n        shorttext: { length: 255 },\n        varbinary: { length: 255 },\n        decimal: { precision: 18, scale: 0 },\n    }\n\n    /**\n     * Max length allowed by SAP HANA for aliases (identifiers).\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\n     */\n    maxAliasLength = 128\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n    }\n\n    dummyTableName = `SYS.DUMMY`\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as SapConnectionOptions\n        this.loadDependencies()\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        // HANA connection info\n        const dbParams = {\n            hostName: this.options.host,\n            port: this.options.port,\n            userName: this.options.username,\n            password: this.options.password,\n            ...this.options.extra,\n        }\n\n        if (this.options.database) dbParams.databaseName = this.options.database\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt\n        if (this.options.sslValidateCertificate)\n            dbParams.validateCertificate = this.options.sslValidateCertificate\n        if (this.options.key) dbParams.key = this.options.key\n        if (this.options.cert) dbParams.cert = this.options.cert\n        if (this.options.ca) dbParams.ca = this.options.ca\n\n        // pool options\n        const options: any = {\n            min:\n                this.options.pool && this.options.pool.min\n                    ? this.options.pool.min\n                    : 1,\n            max:\n                this.options.pool && this.options.pool.max\n                    ? this.options.pool.max\n                    : 10,\n        }\n\n        if (this.options.pool && this.options.pool.checkInterval)\n            options.checkInterval = this.options.pool.checkInterval\n        if (this.options.pool && this.options.pool.maxWaitingRequests)\n            options.maxWaitingRequests = this.options.pool.maxWaitingRequests\n        if (this.options.pool && this.options.pool.requestTimeout)\n            options.requestTimeout = this.options.pool.requestTimeout\n        if (this.options.pool && this.options.pool.idleTimeout)\n            options.idleTimeout = this.options.pool.idleTimeout\n\n        const { logger } = this.connection\n\n        const poolErrorHandler =\n            options.poolErrorHandler ||\n            ((error: any) =>\n                logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`))\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler)\n\n        // create the pool\n        this.master = this.client.createPool(dbParams, options)\n\n        if (!this.database || !this.schema) {\n            const queryRunner = await this.createQueryRunner(\"master\")\n\n            if (!this.database) {\n                this.database = await queryRunner.getCurrentDatabase()\n            }\n\n            if (!this.schema) {\n                this.schema = await queryRunner.getCurrentSchema()\n            }\n\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        const promise = this.master.clear()\n        this.master = undefined\n        return promise\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SapQueryRunner(this, mode)\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                if (nativeParameters[key] instanceof Date)\n                    return DateUtils.mixedDateToDatetimeString(\n                        nativeParameters[key],\n                        true,\n                    )\n\n                return nativeParameters[key]\n            },\n        )\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                let value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                }\n\n                if (value instanceof Date) {\n                    return DateUtils.mixedDateToDatetimeString(value, true)\n                }\n\n                escapedParameters.push(value)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`\n    }\n\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        let tablePath = [tableName]\n\n        if (schema) {\n            tablePath.unshift(schema)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = this.schema\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        return {\n            database: driverDatabase,\n            schema: (parts.length > 1 ? parts[0] : undefined) || driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value)\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date\n        ) {\n            return DateUtils.mixedDateToDatetimeString(value, true)\n        } else if (columnMetadata.type === \"seconddate\") {\n            return DateUtils.mixedDateToDatetimeString(value, false)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value)\n        } else if (columnMetadata.isArray) {\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"seconddate\" ||\n            columnMetadata.type === Date\n        ) {\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\"\n        } else if (column.type === String) {\n            return \"nvarchar\"\n        } else if (column.type === Date) {\n            return \"timestamp\"\n        } else if (column.type === Boolean) {\n            return \"boolean\"\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\"\n        } else if (column.type === \"uuid\") {\n            return \"nvarchar\"\n        } else if (\n            column.type === \"simple-array\" ||\n            column.type === \"simple-json\"\n        ) {\n            return \"text\"\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"true\" : \"false\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(\n            (idx) =>\n                idx.isUnique &&\n                idx.columns.length === 1 &&\n                idx.columns[0] === column,\n        )\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n\n        if (column.generationStrategy === \"uuid\") return \"36\"\n\n        switch (column.type) {\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"shorttext\":\n            case String:\n                return \"255\"\n            case \"alphanum\":\n                return \"127\"\n            case \"varbinary\":\n                return \"255\"\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += `(${column.precision},${column.scale})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += `(${column.precision})`\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        if (!this.master) {\n            throw new TypeORMError(\"Driver not Connected\")\n        }\n\n        return this.master.getConnection()\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.obtainMasterConnection()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult\n                ) {\n                    value = insertResult\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                    //     value = generatedColumn.getEntityValue(uuidMap);\n                }\n\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            const normalizeDefault = this.normalizeDefault(columnMetadata)\n            const hanaNullComapatibleDefault =\n                normalizeDefault == null ? undefined : normalizeDefault\n\n            return (\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                (columnMetadata.length &&\n                    tableColumn.length !==\n                        this.getColumnLength(columnMetadata)) ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                (!tableColumn.isGenerated &&\n                    hanaNullComapatibleDefault !== tableColumn.default) || // we included check for generated here, because generated columns already can have default values\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n            )\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\"\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const client = this.options.driver || PlatformTools.load(\"hdb-pool\")\n            this.client = client\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\")\n        }\n\n        try {\n            if (!this.options.hanaClientDriver) {\n                PlatformTools.load(\"@sap/hana-client\")\n            }\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\n                \"SAP Hana\",\n                \"@sap/hana-client\",\n            )\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/driver/sap/SapDriver.ts"],"names":[],"mappings":"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","file":"SapDriver.js","sourcesContent":["import {\n    ColumnType,\n    DataSource,\n    EntityMetadata,\n    ObjectLiteral,\n    Table,\n    TableColumn,\n    TableForeignKey,\n} from \"../..\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { TypeORMError } from \"../../error/TypeORMError\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Driver } from \"../Driver\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { SapConnectionOptions } from \"./SapConnectionOptions\"\nimport { SapQueryRunner } from \"./SapQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\n\n/**\n * Organizes communication with SAP Hana DBMS.\n *\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\n */\nexport class SapDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Hana Pool instance.\n     */\n    client: any\n\n    /**\n     * Pool for master database.\n     */\n    master: any\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SapConnectionOptions\n\n    /**\n     * Database name used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Schema name used to perform all write queries.\n     */\n    schema?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"simple\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"int\",\n        \"integer\",\n        \"bigint\",\n        \"smalldecimal\",\n        \"decimal\",\n        \"dec\",\n        \"real\",\n        \"double\",\n        \"float\",\n        \"date\",\n        \"time\",\n        \"seconddate\",\n        \"timestamp\",\n        \"boolean\",\n        \"char\",\n        \"nchar\",\n        \"varchar\",\n        \"nvarchar\",\n        \"text\",\n        \"alphanum\",\n        \"shorttext\",\n        \"array\",\n        \"varbinary\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"st_geometry\",\n        \"st_point\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = []\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\"st_geometry\", \"st_point\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"varchar\",\n        \"nvarchar\",\n        \"alphanum\",\n        \"shorttext\",\n        \"varbinary\",\n    ]\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"nvarchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"integer\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"integer\",\n        cacheQuery: \"nvarchar(5000)\" as any,\n        cacheResult: \"text\",\n        metadataType: \"nvarchar\",\n        metadataDatabase: \"nvarchar\",\n        metadataSchema: \"nvarchar\",\n        metadataTable: \"nvarchar\",\n        metadataName: \"nvarchar\",\n        metadataValue: \"nvarchar(5000)\" as any,\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        char: { length: 1 },\n        nchar: { length: 1 },\n        varchar: { length: 255 },\n        nvarchar: { length: 255 },\n        shorttext: { length: 255 },\n        varbinary: { length: 255 },\n        decimal: { precision: 18, scale: 0 },\n    }\n\n    /**\n     * Max length allowed by SAP HANA for aliases (identifiers).\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\n     */\n    maxAliasLength = 128\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n    }\n\n    dummyTableName = `SYS.DUMMY`\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as SapConnectionOptions\n        this.loadDependencies()\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        // HANA connection info\n        const dbParams = {\n            hostName: this.options.host,\n            port: this.options.port,\n            userName: this.options.username,\n            password: this.options.password,\n            ...this.options.extra,\n        }\n\n        if (this.options.database) dbParams.databaseName = this.options.database\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt\n        if (this.options.sslValidateCertificate)\n            dbParams.validateCertificate = this.options.sslValidateCertificate\n        if (this.options.key) dbParams.key = this.options.key\n        if (this.options.cert) dbParams.cert = this.options.cert\n        if (this.options.ca) dbParams.ca = this.options.ca\n\n        // pool options\n        const options: any = {\n            min:\n                this.options.pool && this.options.pool.min\n                    ? this.options.pool.min\n                    : 1,\n            max:\n                this.options.pool && this.options.pool.max\n                    ? this.options.pool.max\n                    : 10,\n        }\n\n        if (this.options.pool && this.options.pool.checkInterval)\n            options.checkInterval = this.options.pool.checkInterval\n        if (this.options.pool && this.options.pool.maxWaitingRequests)\n            options.maxWaitingRequests = this.options.pool.maxWaitingRequests\n        if (this.options.pool && this.options.pool.requestTimeout)\n            options.requestTimeout = this.options.pool.requestTimeout\n        if (this.options.pool && this.options.pool.idleTimeout)\n            options.idleTimeout = this.options.pool.idleTimeout\n\n        const { logger } = this.connection\n\n        const poolErrorHandler =\n            options.poolErrorHandler ||\n            ((error: any) =>\n                logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`))\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler)\n\n        // create the pool\n        this.master = this.client.createPool(dbParams, options)\n\n        if (!this.database || !this.schema) {\n            const queryRunner = await this.createQueryRunner(\"master\")\n\n            if (!this.database) {\n                this.database = await queryRunner.getCurrentDatabase()\n            }\n\n            if (!this.schema) {\n                this.schema = await queryRunner.getCurrentSchema()\n            }\n\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        const promise = this.master.clear()\n        this.master = undefined\n        return promise\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SapQueryRunner(this, mode)\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                if (nativeParameters[key] instanceof Date)\n                    return DateUtils.mixedDateToDatetimeString(\n                        nativeParameters[key],\n                        true,\n                    )\n\n                return nativeParameters[key]\n            },\n        )\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                let value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                }\n\n                if (value instanceof Date) {\n                    return DateUtils.mixedDateToDatetimeString(value, true)\n                }\n\n                escapedParameters.push(value)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`\n    }\n\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        let tablePath = [tableName]\n\n        if (schema) {\n            tablePath.unshift(schema)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = this.schema\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        return {\n            database: driverDatabase,\n            schema: (parts.length > 1 ? parts[0] : undefined) || driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value)\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date\n        ) {\n            return DateUtils.mixedDateToDatetimeString(value, true)\n        } else if (columnMetadata.type === \"seconddate\") {\n            return DateUtils.mixedDateToDatetimeString(value, false)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value)\n        } else if (columnMetadata.isArray) {\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"seconddate\" ||\n            columnMetadata.type === Date\n        ) {\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\"\n        } else if (column.type === String) {\n            return \"nvarchar\"\n        } else if (column.type === Date) {\n            return \"timestamp\"\n        } else if (column.type === Boolean) {\n            return \"boolean\"\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\"\n        } else if (column.type === \"uuid\") {\n            return \"nvarchar\"\n        } else if (\n            column.type === \"simple-array\" ||\n            column.type === \"simple-json\"\n        ) {\n            return \"text\"\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"true\" : \"false\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(\n            (idx) =>\n                idx.isUnique &&\n                idx.columns.length === 1 &&\n                idx.columns[0] === column,\n        )\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n\n        if (column.generationStrategy === \"uuid\") return \"36\"\n\n        switch (column.type) {\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"shorttext\":\n            case String:\n                return \"255\"\n            case \"alphanum\":\n                return \"127\"\n            case \"varbinary\":\n                return \"255\"\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += `(${column.precision},${column.scale})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += `(${column.precision})`\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        if (!this.master) {\n            throw new TypeORMError(\"Driver not Connected\")\n        }\n\n        return this.master.getConnection()\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.obtainMasterConnection()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult\n                ) {\n                    value = insertResult\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                    //     value = generatedColumn.getEntityValue(uuidMap);\n                }\n\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            const normalizeDefault = this.normalizeDefault(columnMetadata)\n            const hanaNullComapatibleDefault =\n                normalizeDefault == null ? undefined : normalizeDefault\n\n            return (\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                (columnMetadata.length &&\n                    tableColumn.length !==\n                        this.getColumnLength(columnMetadata)) ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                (!tableColumn.isGenerated &&\n                    hanaNullComapatibleDefault !== tableColumn.default) || // we included check for generated here, because generated columns already can have default values\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n            )\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\"\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const client = this.options.driver || PlatformTools.load(\"hdb-pool\")\n            this.client = client\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\")\n        }\n\n        try {\n            if (!this.options.hanaClientDriver) {\n                PlatformTools.load(\"@sap/hana-client\")\n            }\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\n                \"SAP Hana\",\n                \"@sap/hana-client\",\n            )\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/driver/spanner/SpannerConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/spanner/SpannerConnectionOptions.d.ts
index fc7fa1c..d565058 100644
--- a/node_modules/typeorm/browser/driver/spanner/SpannerConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/spanner/SpannerConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseConnectionOptions } from "../../connection/BaseConnectionOptions";
-import { SpannerConnectionCredentialsOptions } from "./SpannerConnectionCredentialsOptions";
+import { BaseConnectionOptions } from "typeorm/browser/connection/BaseConnectionOptions";
+import { SpannerConnectionCredentialsOptions } from "typeorm/browser/driver/spanner/SpannerConnectionCredentialsOptions";
 /**
  * Spanner specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/sqlite/SqliteConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/sqlite/SqliteConnectionOptions.d.ts
index c21a3d2..09e976d 100644
--- a/node_modules/typeorm/browser/driver/sqlite/SqliteConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/sqlite/SqliteConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/sqljs/SqljsConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/sqljs/SqljsConnectionOptions.d.ts
index b540a6e..4df42ff 100644
--- a/node_modules/typeorm/browser/driver/sqljs/SqljsConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/sqljs/SqljsConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
 /**
  * Sql.js-specific connection options.
  */
diff --git a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts
index 80fb038..57a651d 100644
--- a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts
@@ -1,11 +1,12 @@
-import { DefaultAuthentication } from "./authentication/DefaultAuthentication";
-import { AzureActiveDirectoryAccessTokenAuthentication } from "./authentication/AzureActiveDirectoryAccessTokenAuthentication";
-import { AzureActiveDirectoryMsiAppServiceAuthentication } from "./authentication/AzureActiveDirectoryMsiAppServiceAuthentication";
-import { AzureActiveDirectoryMsiVmAuthentication } from "./authentication/AzureActiveDirectoryMsiVmAuthentication";
-import { AzureActiveDirectoryPasswordAuthentication } from "./authentication/AzureActiveDirectoryPasswordAuthentication";
-import { AzureActiveDirectoryServicePrincipalSecret } from "./authentication/AzureActiveDirectoryServicePrincipalSecret";
-import { NtlmAuthentication } from "./authentication/NtlmAuthentication";
-export type SqlServerConnectionCredentialsAuthenticationOptions = DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryServicePrincipalSecret;
+import { DefaultAuthentication } from "typeorm/browser/driver/sqlserver/authentication/DefaultAuthentication";
+import { AzureActiveDirectoryAccessTokenAuthentication } from "typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryAccessTokenAuthentication";
+import { AzureActiveDirectoryDefaultAuthentication } from "typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication";
+import { AzureActiveDirectoryMsiAppServiceAuthentication } from "typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryMsiAppServiceAuthentication";
+import { AzureActiveDirectoryMsiVmAuthentication } from "typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryMsiVmAuthentication";
+import { AzureActiveDirectoryPasswordAuthentication } from "typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryPasswordAuthentication";
+import { AzureActiveDirectoryServicePrincipalSecret } from "typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryServicePrincipalSecret";
+import { NtlmAuthentication } from "typeorm/browser/driver/sqlserver/authentication/NtlmAuthentication";
+export type SqlServerConnectionCredentialsAuthenticationOptions = DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryDefaultAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryServicePrincipalSecret;
 /**
  * SqlServer specific connection credential options.
  */
diff --git a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map
index 4f343ee..cc23866 100644
--- a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map
+++ b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerConnectionCredentialsOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionCredentialsOptions.js","sourcesContent":["import { DefaultAuthentication } from \"./authentication/DefaultAuthentication\"\nimport { AzureActiveDirectoryAccessTokenAuthentication } from \"./authentication/AzureActiveDirectoryAccessTokenAuthentication\"\nimport { AzureActiveDirectoryMsiAppServiceAuthentication } from \"./authentication/AzureActiveDirectoryMsiAppServiceAuthentication\"\nimport { AzureActiveDirectoryMsiVmAuthentication } from \"./authentication/AzureActiveDirectoryMsiVmAuthentication\"\nimport { AzureActiveDirectoryPasswordAuthentication } from \"./authentication/AzureActiveDirectoryPasswordAuthentication\"\nimport { AzureActiveDirectoryServicePrincipalSecret } from \"./authentication/AzureActiveDirectoryServicePrincipalSecret\"\nimport { NtlmAuthentication } from \"./authentication/NtlmAuthentication\"\n\nexport type SqlServerConnectionCredentialsAuthenticationOptions =\n    | DefaultAuthentication\n    | NtlmAuthentication\n    | AzureActiveDirectoryAccessTokenAuthentication\n    | AzureActiveDirectoryMsiAppServiceAuthentication\n    | AzureActiveDirectoryMsiVmAuthentication\n    | AzureActiveDirectoryPasswordAuthentication\n    | AzureActiveDirectoryServicePrincipalSecret\n\n/**\n * SqlServer specific connection credential options.\n */\nexport interface SqlServerConnectionCredentialsOptions {\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string\n\n    /**\n     * Database host.\n     */\n    readonly host?: string\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string\n\n    /**\n     * Database username.\n     */\n    readonly username?: string\n\n    /**\n     * Database password.\n     */\n    readonly password?: string\n\n    /**\n     * Authentication settings\n     * It overrides username and password, when passed.\n     */\n    readonly authentication?: SqlServerConnectionCredentialsAuthenticationOptions\n\n    /**\n     * Once you set domain, driver will connect to SQL Server using domain login.\n     * @see SqlServerConnectionCredentialsOptions.authentication\n     * @see NtlmAuthentication\n     * @deprecated\n     */\n    readonly domain?: string\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerConnectionCredentialsOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionCredentialsOptions.js","sourcesContent":["import { DefaultAuthentication } from \"./authentication/DefaultAuthentication\"\nimport { AzureActiveDirectoryAccessTokenAuthentication } from \"./authentication/AzureActiveDirectoryAccessTokenAuthentication\"\nimport { AzureActiveDirectoryDefaultAuthentication } from \"./authentication/AzureActiveDirectoryDefaultAuthentication\"\nimport { AzureActiveDirectoryMsiAppServiceAuthentication } from \"./authentication/AzureActiveDirectoryMsiAppServiceAuthentication\"\nimport { AzureActiveDirectoryMsiVmAuthentication } from \"./authentication/AzureActiveDirectoryMsiVmAuthentication\"\nimport { AzureActiveDirectoryPasswordAuthentication } from \"./authentication/AzureActiveDirectoryPasswordAuthentication\"\nimport { AzureActiveDirectoryServicePrincipalSecret } from \"./authentication/AzureActiveDirectoryServicePrincipalSecret\"\nimport { NtlmAuthentication } from \"./authentication/NtlmAuthentication\"\n\nexport type SqlServerConnectionCredentialsAuthenticationOptions =\n    | DefaultAuthentication\n    | NtlmAuthentication\n    | AzureActiveDirectoryAccessTokenAuthentication\n    | AzureActiveDirectoryDefaultAuthentication\n    | AzureActiveDirectoryMsiAppServiceAuthentication\n    | AzureActiveDirectoryMsiVmAuthentication\n    | AzureActiveDirectoryPasswordAuthentication\n    | AzureActiveDirectoryServicePrincipalSecret\n\n/**\n * SqlServer specific connection credential options.\n */\nexport interface SqlServerConnectionCredentialsOptions {\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string\n\n    /**\n     * Database host.\n     */\n    readonly host?: string\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string\n\n    /**\n     * Database username.\n     */\n    readonly username?: string\n\n    /**\n     * Database password.\n     */\n    readonly password?: string\n\n    /**\n     * Authentication settings\n     * It overrides username and password, when passed.\n     */\n    readonly authentication?: SqlServerConnectionCredentialsAuthenticationOptions\n\n    /**\n     * Once you set domain, driver will connect to SQL Server using domain login.\n     * @see SqlServerConnectionCredentialsOptions.authentication\n     * @see NtlmAuthentication\n     * @deprecated\n     */\n    readonly domain?: string\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.d.ts b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.d.ts
index d63741b..63c7ce8 100644
--- a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.d.ts
+++ b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { SqlServerConnectionCredentialsOptions } from "./SqlServerConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/browser/data-source/BaseDataSourceOptions";
+import { SqlServerConnectionCredentialsOptions } from "typeorm/browser/driver/sqlserver/SqlServerConnectionCredentialsOptions";
 /**
  * Microsoft Sql Server specific connection options.
  */
@@ -148,6 +148,11 @@ export interface SqlServerConnectionOptions extends BaseDataSourceOptions, SqlSe
          * A boolean, controlling whatever to disable RETURNING / OUTPUT statements.
          */
         readonly disableOutputReturning?: boolean;
+        /**
+         * A boolean, controlling whether MssqlParameter types char, varchar, and text are converted to their unicode equivalents, nchar, nvarchar, and ntext.
+         * (default: false, meaning that char/varchar/text parameters will be converted to nchar/nvarchar/ntext)
+         */
+        readonly disableAsciiToUnicodeParamConversion?: boolean;
         /**
          * Debug options
          */
diff --git a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.js.map b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.js.map
index 7a680e3..32bb8ab 100644
--- a/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.js.map
+++ b/node_modules/typeorm/browser/driver/sqlserver/SqlServerConnectionOptions.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerConnectionOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionOptions.js","sourcesContent":["import { BaseDataSourceOptions } from \"../../data-source/BaseDataSourceOptions\"\nimport { SqlServerConnectionCredentialsOptions } from \"./SqlServerConnectionCredentialsOptions\"\n\n/**\n * Microsoft Sql Server specific connection options.\n */\nexport interface SqlServerConnectionOptions\n    extends BaseDataSourceOptions,\n        SqlServerConnectionCredentialsOptions {\n    /**\n     * Database type.\n     */\n    readonly type: \"mssql\"\n\n    /**\n     * Connection timeout in ms (default: 15000).\n     */\n    readonly connectionTimeout?: number\n\n    /**\n     * Request timeout in ms (default: 15000). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second.\n     */\n    readonly requestTimeout?: number\n\n    /**\n     * Stream recordsets/rows instead of returning them all at once as an argument of callback (default: false).\n     * You can also enable streaming for each request independently (request.stream = true).\n     * Always set to true if you plan to work with large amount of rows.\n     */\n    readonly stream?: boolean\n\n    /**\n     * Database schema.\n     */\n    readonly schema?: string\n\n    /**\n     * The driver object\n     * This defaults to `require(\"mssql\")`\n     */\n    readonly driver?: any\n\n    /**\n     * An optional object/dictionary with the any of the properties\n     */\n    readonly pool?: {\n        /**\n         * Maximum number of resources to create at any given time. (default=1)\n         */\n        readonly max?: number\n\n        /**\n         * Minimum number of resources to keep in pool at any given time. If this is set >= max, the pool will silently\n         * set the min to equal max. (default=0)\n         */\n        readonly min?: number\n\n        /**\n         * Maximum number of queued requests allowed, additional acquire calls will be callback with an err in a future\n         * cycle of the event loop.\n         */\n        readonly maxWaitingClients?: number\n\n        /**\n         * Should the pool validate resources before giving them to clients. Requires that either factory.validate or\n         * factory.validateAsync to be specified\n         */\n        readonly testOnBorrow?: boolean\n\n        /**\n         * Max milliseconds an acquire call will wait for a resource before timing out. (default no limit), if supplied should non-zero positive integer.\n         */\n        readonly acquireTimeoutMillis?: number\n\n        /**\n         * If true the oldest resources will be first to be allocated. If false the most recently released resources will\n         * be the first to be allocated. This in effect turns the pool's behaviour from a queue into a stack. boolean,\n         * (default true)\n         */\n        readonly fifo?: boolean\n\n        /**\n         * Int between 1 and x - if set, borrowers can specify their relative priority in the queue if no resources\n         * are available. see example. (default 1)\n         */\n        readonly priorityRange?: number\n\n        /**\n         * How often to run eviction checks. Default: 0 (does not run).\n         */\n        readonly evictionRunIntervalMillis?: number\n\n        /**\n         * Number of resources to check each eviction run. Default: 3.\n         */\n        readonly numTestsPerRun?: number\n\n        /**\n         * Amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object\n         * evictor (if any), with the extra condition that at least \"min idle\" object instances remain in the pool.\n         * Default -1 (nothing can get evicted)\n         */\n        readonly softIdleTimeoutMillis?: number\n\n        /**\n         * The minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due\n         * to idle time. Supercedes softIdleTimeoutMillis Default: 30000\n         */\n        readonly idleTimeoutMillis?: number\n\n        /*\n         * Function handling errors thrown by drivers pool.\n         * Defaults to logging error with `warn` level.\n         */\n        readonly errorHandler?: (err: any) => any\n    }\n\n    /**\n     * Extra options\n     */\n    readonly options?: {\n        /**\n         * The named instance to connect to\n         */\n        readonly instanceName?: string\n\n        /**\n         * By default, if the database requestion by options.database cannot be accessed, the connection will fail with\n         * an error. However, if options.fallbackToDefaultDb is set to true, then the user's default database will\n         * be used instead (Default: false).\n         */\n        readonly fallbackToDefaultDb?: boolean\n\n        /**\n         * If true, SET ANSI_NULL_DFLT_ON ON will be set in the initial sql. This means new columns will be nullable by\n         * default. See the T-SQL documentation for more details. (Default: true).\n         */\n        readonly enableAnsiNullDefault?: boolean\n\n        /**\n         * The number of milliseconds before the attempt to connect is considered failed (default: 15000).\n         */\n        readonly connectTimeout?: number\n\n        /**\n         * The number of milliseconds before the cancel (abort) of a request is considered failed (default: 5000).\n         */\n        readonly cancelTimeout?: number\n\n        /**\n         * The size of TDS packets (subject to negotiation with the server). Should be a power of 2. (default: 4096).\n         */\n        readonly packetSize?: number\n\n        /**\n         * A boolean determining whether to pass time values in UTC or local time. (default: false).\n         */\n        readonly useUTC?: boolean\n\n        /**\n         * A boolean determining whether to rollback a transaction automatically if any error is encountered during\n         * the given transaction's execution. This sets the value for SET XACT_ABORT during the initial SQL phase\n         * of a connection (documentation).\n         */\n        readonly abortTransactionOnError?: boolean\n\n        /**\n         * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n         */\n        readonly localAddress?: string\n\n        /**\n         * A boolean determining whether to return rows as arrays or key-value collections. (default: false).\n         */\n        readonly useColumnNames?: boolean\n\n        /**\n         * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n         * (true) or not. This value is ignored if you provide a columnNameReplacer. (default: false).\n         */\n        readonly camelCaseColumns?: boolean\n\n        /**\n         * A boolean, controlling whatever to disable RETURNING / OUTPUT statements.\n         */\n        readonly disableOutputReturning?: boolean\n\n        /**\n         * Debug options\n         */\n        readonly debug?: {\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet details\n             * (default: false).\n             */\n            readonly packet?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet data details\n             * (default: false).\n             */\n            readonly data?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet payload details\n             * (default: false).\n             */\n            readonly payload?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing token stream tokens\n             * (default: false).\n             */\n            readonly token?: boolean\n        }\n\n        /**\n         * The default isolation level that transactions will be run with. The isolation levels are available\n         * from require('tedious').ISOLATION_LEVEL. (default: READ_COMMITTED).\n         */\n        readonly isolation?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * The default isolation level for new connections. All out-of-transaction queries are executed with this\n         * setting. The isolation levels are available from require('tedious').ISOLATION_LEVEL .\n         */\n        readonly connectionIsolationLevel?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * A boolean, determining whether the connection will request read only access from a SQL Server\n         * Availability Group. For more information, see here. (default: false).\n         */\n        readonly readOnlyIntent?: boolean\n\n        /**\n         * A boolean determining whether or not the connection will be encrypted. Set to true if you're on\n         * Windows Azure. (default: true).\n         */\n        readonly encrypt?: boolean\n\n        /**\n         * When encryption is used, an object may be supplied that will be used for the first argument when calling\n         * tls.createSecurePair (default: {}).\n         */\n        readonly cryptoCredentialsDetails?: any\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' done* events. See done, doneInProc and\n         * doneProc. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnDone?: boolean\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' completion callback. See new Request. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnRequestCompletion?: boolean\n\n        /**\n         * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n         * The versions are available from require('tedious').TDS_VERSION. (default: 7_4).\n         */\n        readonly tdsVersion?: string\n\n        /**\n         * A boolean, that when true will abort a query when an overflow or divide-by-zero error occurs during query execution.\n         */\n        readonly enableArithAbort?: boolean\n\n        /**\n         * Application name used for identifying a specific application in profiling, logging or tracing tools of SQL Server.\n         * (default: node-mssql)\n         */\n        readonly appName?: string\n\n        /**\n         * A boolean, controlling whether encryption occurs if there is no verifiable server certificate.\n         * (default: false)\n         */\n        readonly trustServerCertificate?: boolean\n    }\n\n    /**\n     * Replication setup.\n     */\n    readonly replication?: {\n        /**\n         * Master server used by orm to perform writes.\n         */\n        readonly master: SqlServerConnectionCredentialsOptions\n\n        /**\n         * List of read-from severs (slaves).\n         */\n        readonly slaves: SqlServerConnectionCredentialsOptions[]\n    }\n\n    readonly poolSize?: never\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerConnectionOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionOptions.js","sourcesContent":["import { BaseDataSourceOptions } from \"../../data-source/BaseDataSourceOptions\"\nimport { SqlServerConnectionCredentialsOptions } from \"./SqlServerConnectionCredentialsOptions\"\n\n/**\n * Microsoft Sql Server specific connection options.\n */\nexport interface SqlServerConnectionOptions\n    extends BaseDataSourceOptions,\n        SqlServerConnectionCredentialsOptions {\n    /**\n     * Database type.\n     */\n    readonly type: \"mssql\"\n\n    /**\n     * Connection timeout in ms (default: 15000).\n     */\n    readonly connectionTimeout?: number\n\n    /**\n     * Request timeout in ms (default: 15000). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second.\n     */\n    readonly requestTimeout?: number\n\n    /**\n     * Stream recordsets/rows instead of returning them all at once as an argument of callback (default: false).\n     * You can also enable streaming for each request independently (request.stream = true).\n     * Always set to true if you plan to work with large amount of rows.\n     */\n    readonly stream?: boolean\n\n    /**\n     * Database schema.\n     */\n    readonly schema?: string\n\n    /**\n     * The driver object\n     * This defaults to `require(\"mssql\")`\n     */\n    readonly driver?: any\n\n    /**\n     * An optional object/dictionary with the any of the properties\n     */\n    readonly pool?: {\n        /**\n         * Maximum number of resources to create at any given time. (default=1)\n         */\n        readonly max?: number\n\n        /**\n         * Minimum number of resources to keep in pool at any given time. If this is set >= max, the pool will silently\n         * set the min to equal max. (default=0)\n         */\n        readonly min?: number\n\n        /**\n         * Maximum number of queued requests allowed, additional acquire calls will be callback with an err in a future\n         * cycle of the event loop.\n         */\n        readonly maxWaitingClients?: number\n\n        /**\n         * Should the pool validate resources before giving them to clients. Requires that either factory.validate or\n         * factory.validateAsync to be specified\n         */\n        readonly testOnBorrow?: boolean\n\n        /**\n         * Max milliseconds an acquire call will wait for a resource before timing out. (default no limit), if supplied should non-zero positive integer.\n         */\n        readonly acquireTimeoutMillis?: number\n\n        /**\n         * If true the oldest resources will be first to be allocated. If false the most recently released resources will\n         * be the first to be allocated. This in effect turns the pool's behaviour from a queue into a stack. boolean,\n         * (default true)\n         */\n        readonly fifo?: boolean\n\n        /**\n         * Int between 1 and x - if set, borrowers can specify their relative priority in the queue if no resources\n         * are available. see example. (default 1)\n         */\n        readonly priorityRange?: number\n\n        /**\n         * How often to run eviction checks. Default: 0 (does not run).\n         */\n        readonly evictionRunIntervalMillis?: number\n\n        /**\n         * Number of resources to check each eviction run. Default: 3.\n         */\n        readonly numTestsPerRun?: number\n\n        /**\n         * Amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object\n         * evictor (if any), with the extra condition that at least \"min idle\" object instances remain in the pool.\n         * Default -1 (nothing can get evicted)\n         */\n        readonly softIdleTimeoutMillis?: number\n\n        /**\n         * The minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due\n         * to idle time. Supercedes softIdleTimeoutMillis Default: 30000\n         */\n        readonly idleTimeoutMillis?: number\n\n        /*\n         * Function handling errors thrown by drivers pool.\n         * Defaults to logging error with `warn` level.\n         */\n        readonly errorHandler?: (err: any) => any\n    }\n\n    /**\n     * Extra options\n     */\n    readonly options?: {\n        /**\n         * The named instance to connect to\n         */\n        readonly instanceName?: string\n\n        /**\n         * By default, if the database requestion by options.database cannot be accessed, the connection will fail with\n         * an error. However, if options.fallbackToDefaultDb is set to true, then the user's default database will\n         * be used instead (Default: false).\n         */\n        readonly fallbackToDefaultDb?: boolean\n\n        /**\n         * If true, SET ANSI_NULL_DFLT_ON ON will be set in the initial sql. This means new columns will be nullable by\n         * default. See the T-SQL documentation for more details. (Default: true).\n         */\n        readonly enableAnsiNullDefault?: boolean\n\n        /**\n         * The number of milliseconds before the attempt to connect is considered failed (default: 15000).\n         */\n        readonly connectTimeout?: number\n\n        /**\n         * The number of milliseconds before the cancel (abort) of a request is considered failed (default: 5000).\n         */\n        readonly cancelTimeout?: number\n\n        /**\n         * The size of TDS packets (subject to negotiation with the server). Should be a power of 2. (default: 4096).\n         */\n        readonly packetSize?: number\n\n        /**\n         * A boolean determining whether to pass time values in UTC or local time. (default: false).\n         */\n        readonly useUTC?: boolean\n\n        /**\n         * A boolean determining whether to rollback a transaction automatically if any error is encountered during\n         * the given transaction's execution. This sets the value for SET XACT_ABORT during the initial SQL phase\n         * of a connection (documentation).\n         */\n        readonly abortTransactionOnError?: boolean\n\n        /**\n         * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n         */\n        readonly localAddress?: string\n\n        /**\n         * A boolean determining whether to return rows as arrays or key-value collections. (default: false).\n         */\n        readonly useColumnNames?: boolean\n\n        /**\n         * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n         * (true) or not. This value is ignored if you provide a columnNameReplacer. (default: false).\n         */\n        readonly camelCaseColumns?: boolean\n\n        /**\n         * A boolean, controlling whatever to disable RETURNING / OUTPUT statements.\n         */\n        readonly disableOutputReturning?: boolean\n\n        /**\n         * A boolean, controlling whether MssqlParameter types char, varchar, and text are converted to their unicode equivalents, nchar, nvarchar, and ntext.\n         * (default: false, meaning that char/varchar/text parameters will be converted to nchar/nvarchar/ntext)\n         */\n        readonly disableAsciiToUnicodeParamConversion?: boolean\n\n        /**\n         * Debug options\n         */\n        readonly debug?: {\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet details\n             * (default: false).\n             */\n            readonly packet?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet data details\n             * (default: false).\n             */\n            readonly data?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet payload details\n             * (default: false).\n             */\n            readonly payload?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing token stream tokens\n             * (default: false).\n             */\n            readonly token?: boolean\n        }\n\n        /**\n         * The default isolation level that transactions will be run with. The isolation levels are available\n         * from require('tedious').ISOLATION_LEVEL. (default: READ_COMMITTED).\n         */\n        readonly isolation?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * The default isolation level for new connections. All out-of-transaction queries are executed with this\n         * setting. The isolation levels are available from require('tedious').ISOLATION_LEVEL .\n         */\n        readonly connectionIsolationLevel?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * A boolean, determining whether the connection will request read only access from a SQL Server\n         * Availability Group. For more information, see here. (default: false).\n         */\n        readonly readOnlyIntent?: boolean\n\n        /**\n         * A boolean determining whether or not the connection will be encrypted. Set to true if you're on\n         * Windows Azure. (default: true).\n         */\n        readonly encrypt?: boolean\n\n        /**\n         * When encryption is used, an object may be supplied that will be used for the first argument when calling\n         * tls.createSecurePair (default: {}).\n         */\n        readonly cryptoCredentialsDetails?: any\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' done* events. See done, doneInProc and\n         * doneProc. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnDone?: boolean\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' completion callback. See new Request. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnRequestCompletion?: boolean\n\n        /**\n         * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n         * The versions are available from require('tedious').TDS_VERSION. (default: 7_4).\n         */\n        readonly tdsVersion?: string\n\n        /**\n         * A boolean, that when true will abort a query when an overflow or divide-by-zero error occurs during query execution.\n         */\n        readonly enableArithAbort?: boolean\n\n        /**\n         * Application name used for identifying a specific application in profiling, logging or tracing tools of SQL Server.\n         * (default: node-mssql)\n         */\n        readonly appName?: string\n\n        /**\n         * A boolean, controlling whether encryption occurs if there is no verifiable server certificate.\n         * (default: false)\n         */\n        readonly trustServerCertificate?: boolean\n    }\n\n    /**\n     * Replication setup.\n     */\n    readonly replication?: {\n        /**\n         * Master server used by orm to perform writes.\n         */\n        readonly master: SqlServerConnectionCredentialsOptions\n\n        /**\n         * List of read-from severs (slaves).\n         */\n        readonly slaves: SqlServerConnectionCredentialsOptions[]\n    }\n\n    readonly poolSize?: never\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js b/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js
index 125ae18..97ff8b5 100644
--- a/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js
+++ b/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js
@@ -2368,6 +2368,7 @@ export class SqlServerQueryRunner extends BaseQueryRunner {
      * Converts MssqlParameter into real mssql parameter type.
      */
     mssqlParameterToNativeParameter(parameter) {
+        var _a, _b, _c;
         switch (this.driver.normalizeType({ type: parameter.type })) {
             case "bit":
                 return this.driver.mssql.Bit;
@@ -2392,12 +2393,24 @@ export class SqlServerQueryRunner extends BaseQueryRunner {
             case "tinyint":
                 return this.driver.mssql.TinyInt;
             case "char":
+                if ((_a = this.driver.options.options) === null || _a === void 0 ? void 0 : _a.disableAsciiToUnicodeParamConversion) {
+                    return this.driver.mssql.Char(...parameter.params);
+                }
+                return this.driver.mssql.NChar(...parameter.params);
             case "nchar":
                 return this.driver.mssql.NChar(...parameter.params);
             case "text":
+                if ((_b = this.driver.options.options) === null || _b === void 0 ? void 0 : _b.disableAsciiToUnicodeParamConversion) {
+                    return this.driver.mssql.Text;
+                }
+                return this.driver.mssql.Ntext;
             case "ntext":
                 return this.driver.mssql.Ntext;
             case "varchar":
+                if ((_c = this.driver.options.options) === null || _c === void 0 ? void 0 : _c.disableAsciiToUnicodeParamConversion) {
+                    return this.driver.mssql.VarChar(...parameter.params);
+                }
+                return this.driver.mssql.NVarChar(...parameter.params);
             case "nvarchar":
                 return this.driver.mssql.NVarChar(...parameter.params);
             case "xml":
diff --git a/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js.map b/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js.map
index f61dbbf..203445f 100644
--- a/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js.map
+++ b/node_modules/typeorm/browser/driver/sqlserver/SqlServerQueryRunner.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Query } from \"../Query\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { MssqlParameter } from \"./MssqlParameter\"\nimport { SqlServerDriver } from \"./SqlServerDriver\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryLock } from \"../../query-runner/QueryLock\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner\n    extends BaseQueryRunner\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private lock: QueryLock = new QueryLock()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n        this.mode = mode\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n        await new Promise<void>(async (ok, fail) => {\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false\n                    return fail(err)\n                }\n                ok()\n            }\n\n            if (this.transactionDepth === 0) {\n                const pool = await (this.mode === \"slave\"\n                    ? this.driver.obtainSlaveConnection()\n                    : this.driver.obtainMasterConnection())\n                this.databaseConnection = pool.transaction()\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\")\n                if (isolationLevel) {\n                    this.databaseConnection.begin(\n                        this.convertIsolationLevel(isolationLevel),\n                        transactionCallback,\n                    )\n                    this.connection.logger.logQuery(\n                        \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\n                    )\n                } else {\n                    this.databaseConnection.begin(transactionCallback)\n                }\n            } else {\n                await this.query(\n                    `SAVE TRANSACTION typeorm_${this.transactionDepth}`,\n                )\n                ok()\n            }\n            this.transactionDepth += 1\n        })\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth === 1) {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.commit(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"COMMIT\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n        this.transactionDepth -= 1\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TRANSACTION typeorm_${this.transactionDepth - 1}`,\n            )\n            this.transactionDepth -= 1\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.rollback(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"ROLLBACK\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        try {\n            this.driver.connection.logger.logQuery(query, parameters, this)\n            const pool = await (this.mode === \"slave\"\n                ? this.driver.obtainSlaveConnection()\n                : this.driver.obtainMasterConnection())\n            const request = new this.driver.mssql.Request(\n                this.isTransactionActive ? this.databaseConnection : pool,\n            )\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    const parameterName = index.toString()\n                    if (InstanceChecker.isMssqlParameter(parameter)) {\n                        const mssqlParameter =\n                            this.mssqlParameterToNativeParameter(parameter)\n                        if (mssqlParameter) {\n                            request.input(\n                                parameterName,\n                                mssqlParameter,\n                                parameter.value,\n                            )\n                        } else {\n                            request.input(parameterName, parameter.value)\n                        }\n                    } else {\n                        request.input(parameterName, parameter)\n                    }\n                })\n            }\n            const queryStartTime = +new Date()\n\n            const raw = await new Promise<any>((ok, fail) => {\n                request.query(query, (err: any, raw: any) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime =\n                        this.driver.options.maxQueryExecutionTime\n                    const queryEndTime = +new Date()\n                    const queryExecutionTime = queryEndTime - queryStartTime\n                    if (\n                        maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime\n                    ) {\n                        this.driver.connection.logger.logQuerySlow(\n                            queryExecutionTime,\n                            query,\n                            parameters,\n                            this,\n                        )\n                    }\n\n                    if (err) {\n                        fail(new QueryFailedError(query, parameters, err))\n                    }\n\n                    ok(raw)\n                })\n            })\n\n            const result = new QueryResult()\n\n            if (raw?.hasOwnProperty(\"recordset\")) {\n                result.records = raw.recordset\n            }\n\n            if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                result.affected = raw.rowsAffected[0]\n            }\n\n            const queryType = query.slice(0, query.indexOf(\" \"))\n            switch (queryType) {\n                case \"DELETE\":\n                    // for DELETE query additionally return number of affected rows\n                    result.raw = [raw.recordset, raw.rowsAffected[0]]\n                    break\n                default:\n                    result.raw = raw.recordset\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            throw err\n        } finally {\n            release()\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        const pool = await (this.mode === \"slave\"\n            ? this.driver.obtainSlaveConnection()\n            : this.driver.obtainMasterConnection())\n        const request = new this.driver.mssql.Request(\n            this.isTransactionActive ? this.databaseConnection : pool,\n        )\n        if (parameters && parameters.length) {\n            parameters.forEach((parameter, index) => {\n                const parameterName = index.toString()\n                if (InstanceChecker.isMssqlParameter(parameter)) {\n                    request.input(\n                        parameterName,\n                        this.mssqlParameterToNativeParameter(parameter),\n                        parameter.value,\n                    )\n                } else {\n                    request.input(parameterName, parameter)\n                }\n            })\n        }\n\n        request.query(query)\n\n        const streamRequest = request.toReadableStream()\n\n        streamRequest.on(\"error\", (err: any) => {\n            release()\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n        })\n\n        streamRequest.on(\"end\", () => {\n            release()\n        })\n\n        if (onEnd) {\n            streamRequest.on(\"end\", onEnd)\n        }\n\n        if (onError) {\n            streamRequest.on(\"error\", onError)\n        }\n\n        return streamRequest\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`)\n        return results.map((result) => result[\"DATABASE_NAME\"])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database\n            ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"`\n            : `SELECT * FROM \"sys\".\"schemas\"`\n        const results: ObjectLiteral[] = await this.query(query)\n        return results.map((result) => result[\"name\"])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT DB_ID('${database}') as \"db_id\"`,\n        )\n        const dbId = result[0][\"db_id\"]\n        return !!dbId\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`)\n        return currentDBQuery[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT SCHEMA_ID('${schema}') as \"schema_id\"`,\n        )\n        const schemaId = result[0][\"schema_id\"]\n        return !!schemaId\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(\n            `SELECT SCHEMA_NAME() AS \"schema_name\"`,\n        )\n        return currentSchemaQuery[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}' AND \"COLUMN_NAME\" = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const up = ifNotExist\n            ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"`\n            : `CREATE DATABASE \"${database}\"`\n        const down = `DROP DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist\n            ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"`\n            : `DROP DATABASE \"${database}\"`\n        const down = `CREATE DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END`\n                : `CREATE SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END`\n                : `CREATE SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END`\n                : `DROP SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END`\n                : `DROP SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(table, index))\n            })\n        }\n\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(await this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        let newTable = oldTable.clone()\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string | undefined = undefined\n        let schemaName: string | undefined = undefined\n        let oldTableName: string = oldTable.name\n        const splittedName = oldTable.name.split(\".\")\n        if (splittedName.length === 3) {\n            dbName = splittedName[0]\n            oldTableName = splittedName[2]\n            if (splittedName[1] !== \"\") schemaName = splittedName[1]\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0]\n            oldTableName = splittedName[1]\n        }\n\n        newTable.name = this.driver.buildTableName(\n            newTableName,\n            schemaName,\n            dbName,\n        )\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase()\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n        }\n\n        // rename table\n        upQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    oldTable,\n                )}\", \"${newTableName}\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    newTable,\n                )}\", \"${oldTableName}\"`,\n            ),\n        )\n\n        // rename primary key constraint\n        if (\n            newTable.primaryColumns.length > 0 &&\n            !newTable.primaryColumns[0].primaryKeyConstraintName\n        ) {\n            const columnNames = newTable.primaryColumns.map(\n                (column) => column.name,\n            )\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                oldTable,\n                columnNames,\n            )\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\n                newTable,\n                columnNames,\n            )\n\n            // rename primary constraint\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${oldPkName}\", \"${newPkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newPkName}\", \"${oldPkName}\"`,\n                ),\n            )\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    oldTable,\n                    unique.columnNames,\n                )\n\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName) return\n\n            // build new constraint name\n            const newUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    newTable,\n                    unique.columnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        unique.name\n                    }\", \"${newUniqueName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newUniqueName}\", \"${unique.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            unique.name = newUniqueName\n        })\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(\n                oldTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName) return\n\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        index.name\n                    }\", \"${newIndexName}\", \"INDEX\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                ),\n            )\n\n            // replace constraint name\n            index.name = newIndexName\n        })\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    oldTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName) return\n\n            // build new constraint name\n            const newForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    newTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        foreignKey.name!,\n                        schemaName,\n                        dbName,\n                    )}\", \"${newForeignKeyName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        newForeignKeyName,\n                        schemaName,\n                        dbName,\n                    )}\", \"${foreignKey.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName\n        })\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    true,\n                )}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = primaryColumns[0].primaryKeyConstraintName\n                    ? primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          primaryColumns.map((column) => column.name),\n                      )\n\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \")\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n            }\n\n            primaryColumns.push(column)\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(table, columnIndex))\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    [column.name],\n                ),\n                columnNames: [column.name],\n            })\n            clonedTable.uniques.push(uniqueConstraint)\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\" UNIQUE (\"${column.name}\")`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\"`,\n                ),\n            )\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find(\n                  (column) => column.name === oldTableColumnOrName,\n              )\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            newColumn.type !== oldColumn.type ||\n            newColumn.length !== oldColumn.length ||\n            newColumn.asExpression !== oldColumn.asExpression ||\n            newColumn.generatedType !== oldColumn.generatedType\n        ) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // we need database name and schema name to rename FK constraints\n                let dbName: string | undefined = undefined\n                let schemaName: string | undefined = undefined\n                const splittedName = table.name.split(\".\")\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0]\n                    if (splittedName[1] !== \"\") schemaName = splittedName[1]\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0]\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase()\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`))\n                    downQueries.push(new Query(`USE \"${currentDB}\"`))\n                }\n\n                // rename the column\n                upQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            oldColumn.name\n                        }\", \"${newColumn.name}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            newColumn.name\n                        }\", \"${oldColumn.name}\"`,\n                    ),\n                )\n\n                // rename column primary key constraint\n                if (\n                    oldColumn.isPrimary === true &&\n                    !oldColumn.primaryKeyConstraintName\n                ) {\n                    const primaryColumns = clonedTable.primaryColumns\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(\n                        (column) => column.name,\n                    )\n                    const oldPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\n                    columnNames.push(newColumn.name)\n\n                    // build new primary constraint name\n                    const newPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // rename primary constraint\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${oldPkName}\", \"${newPkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newPkName}\", \"${oldPkName}\"`,\n                        ),\n                    )\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    const oldIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // Skip renaming if Index has user defined constraint name\n                    if (index.name !== oldIndexName) return\n\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    index.columnNames.push(newColumn.name)\n                    const newIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${index.name}\", \"${newIndexName}\", \"INDEX\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    index.name = newIndexName\n                })\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        const foreignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // Skip renaming if foreign key has user defined constraint name\n                        if (foreignKey.name !== foreignKeyName) return\n\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1,\n                        )\n                        foreignKey.columnNames.push(newColumn.name)\n                        const newForeignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // build queries\n                        upQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    foreignKey.name!,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${newForeignKeyName}\"`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    newForeignKeyName,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${foreignKey.name}\"`,\n                            ),\n                        )\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName\n                    })\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach((check) => {\n                    // build new constraint name\n                    check.columnNames!.splice(\n                        check.columnNames!.indexOf(oldColumn.name),\n                        1,\n                    )\n                    check.columnNames!.push(newColumn.name)\n                    const newCheckName =\n                        this.connection.namingStrategy.checkConstraintName(\n                            clonedTable,\n                            check.expression!,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${check.name}\", \"${newCheckName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newCheckName}\", \"${check.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    check.name = newCheckName\n                })\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    const oldUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // Skip renaming if Unique has user defined constraint name\n                    if (unique.name !== oldUniqueName) return\n\n                    // build new constraint name\n                    unique.columnNames.splice(\n                        unique.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    unique.columnNames.push(newColumn.name)\n                    const newUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${unique.name}\", \"${newUniqueName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newUniqueName}\", \"${unique.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    unique.name = newUniqueName\n                })\n\n                // rename default constraints\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const oldDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    const newDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${oldDefaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${newDefaultName}\"`,\n                        ),\n                    )\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`))\n                    downQueries.push(new Query(`USE \"${dbName}\"`))\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name,\n                )\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name\n                oldColumn.name = newColumn.name\n            }\n\n            if (\n                this.isColumnChanged(oldColumn, newColumn, false, false, false)\n            ) {\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            newColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            oldColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n\n            if (this.isEnumChanged(oldColumn, newColumn)) {\n                const oldExpression = this.getEnumExpression(oldColumn)\n                const oldCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        oldExpression,\n                        true,\n                    ),\n                    expression: oldExpression,\n                })\n\n                const newExpression = this.getEnumExpression(newColumn)\n                const newCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        newExpression,\n                        true,\n                    ),\n                    expression: newExpression,\n                })\n\n                upQueries.push(this.dropCheckConstraintSql(table, oldCheck))\n                upQueries.push(this.createCheckConstraintSql(table, newCheck))\n\n                downQueries.push(this.dropCheckConstraintSql(table, newCheck))\n                downQueries.push(this.createCheckConstraintSql(table, oldCheck))\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn)\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = true\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name,\n                    )\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1,\n                    )\n\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = false\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = primaryColumns[0]\n                            .primaryKeyConstraintName\n                            ? primaryColumns[0].primaryKeyConstraintName\n                            : this.connection.namingStrategy.primaryKeyName(\n                                  clonedTable,\n                                  primaryColumns.map((column) => column.name),\n                              )\n\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \")\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} DROP CONSTRAINT \"${pkName}\"`,\n                            ),\n                        )\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(\n                            table,\n                            [newColumn.name],\n                        ),\n                        columnNames: [newColumn.name],\n                    })\n                    clonedTable.uniques.push(uniqueConstraint)\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\n                        ),\n                    )\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(\n                        (unique) => {\n                            return (\n                                unique.columnNames.length === 1 &&\n                                !!unique.columnNames.find(\n                                    (columnName) =>\n                                        columnName === newColumn.name,\n                                )\n                            )\n                        },\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\n                        1,\n                    )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${oldColumn.name}\"`,\n                        ),\n                    )\n                }\n\n                if (\n                    newColumn.default !== null &&\n                    newColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                newColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries)\n            this.replaceCachedTable(table, clonedTable)\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = column.primaryKeyConstraintName\n                ? column.primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      clonedTable.primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name)\n            tableColumn!.isPrimary = false\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = clonedTable.primaryColumns[0]\n                    .primaryKeyConstraintName\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          clonedTable.primaryColumns.map(\n                              (column) => column.name,\n                          ),\n                      )\n\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \")\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.dropIndexSql(table, columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name,\n        )\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1,\n            )\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(\n            (unique) =>\n                unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name,\n        )\n        if (columnUnique) {\n            clonedTable.uniques.splice(\n                clonedTable.uniques.indexOf(columnUnique),\n                1,\n            )\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\n            downQueries.push(\n                this.createUniqueConstraintSql(table, columnUnique),\n            )\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                        column.default\n                    } FOR \"${column.name}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    false,\n                )}`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n        const down = this.dropPrimaryKeySql(clonedTable)\n\n        await this.executeQueries(up, down)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const columnNames = columns.map((column) => column.name)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns\n        if (primaryColumns.length > 0) {\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n                ),\n            )\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true))\n\n        const pkName = primaryColumns[0].primaryKeyConstraintName\n            ? primaryColumns[0].primaryKeyConstraintName\n            : this.connection.namingStrategy.primaryKeyName(\n                  clonedTable,\n                  columnNames,\n              )\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP CONSTRAINT \"${pkName}\"`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(\n        tableOrName: Table | string,\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const up = this.dropPrimaryKeySql(table)\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name),\n            constraintName,\n        )\n        await this.executeQueries(up, down)\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    uniqueConstraint.columnNames,\n                )\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.addUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.createUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName)\n        if (!uniqueConstraint)\n            throw new TypeORMError(\n                `Supplied unique constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.removeUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    checkConstraint.expression!,\n                )\n\n        const up = this.createCheckConstraintSql(table, checkConstraint)\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.addCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\n        const down = this.createCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.removeCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const metadata = this.connection.hasMetadata(table.name)\n            ? this.connection.getMetadata(table.name)\n            : undefined\n\n        if (\n            metadata &&\n            metadata.treeParentRelation &&\n            metadata.treeParentRelation!.isTreeParent &&\n            metadata.foreignKeys.find(\n                (foreignKey) => foreignKey.onDelete !== \"NO ACTION\",\n            )\n        )\n            throw new TypeORMError(\n                \"SqlServer does not support options in TreeParent.\",\n            )\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index was not found in table ${table.name}`,\n            )\n\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(table, index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database)\n            if (!isDatabaseExist) return Promise.resolve()\n        }\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`\n            const allViewsResults: ObjectLiteral[] = await this.query(\n                allViewsSql,\n            )\n\n            await Promise.all(\n                allViewsResults.map((viewResult) => {\n                    // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                    const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`\n                    return this.query(dropTableSql)\n                }),\n            )\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n            const allTablesResults: ObjectLiteral[] = await this.query(\n                allTablesSql,\n            )\n\n            if (allTablesResults.length > 0) {\n                const tablesByCatalog: {\n                    [key: string]: {\n                        TABLE_NAME: string\n                        TABLE_SCHEMA: string\n                    }[]\n                } = allTablesResults.reduce(\n                    (c, { TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME }) => {\n                        c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                        c[TABLE_CATALOG].push({ TABLE_SCHEMA, TABLE_NAME })\n                        return c\n                    },\n                    {},\n                )\n\n                const foreignKeysSql = Object.entries(tablesByCatalog)\n                    .map(([TABLE_CATALOG, tables]) => {\n                        const conditions = tables\n                            .map(({ TABLE_SCHEMA, TABLE_NAME }) => {\n                                return `(\"fk\".\"referenced_object_id\" = OBJECT_ID('\"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\"'))`\n                            })\n                            .join(\" OR \")\n\n                        return `\n                        SELECT DISTINCT '${TABLE_CATALOG}' AS                                              \"TABLE_CATALOG\",\n                                        OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\",\n                                                           DB_ID('${TABLE_CATALOG}')) AS                   \"TABLE_SCHEMA\",\n                                        OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${TABLE_CATALOG}')) AS \"TABLE_NAME\",\n                                        \"fk\".\"name\" AS                                                     \"CONSTRAINT_NAME\"\n                        FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" AS \"fk\"\n                        WHERE (${conditions})\n                    `\n                    })\n                    .join(\" UNION ALL \")\n\n                const foreignKeys: {\n                    TABLE_CATALOG: string\n                    TABLE_SCHEMA: string\n                    TABLE_NAME: string\n                    CONSTRAINT_NAME: string\n                }[] = await this.query(foreignKeysSql)\n\n                await Promise.all(\n                    foreignKeys.map(\n                        async ({\n                            TABLE_CATALOG,\n                            TABLE_SCHEMA,\n                            TABLE_NAME,\n                            CONSTRAINT_NAME,\n                        }) => {\n                            // Disable the constraint first.\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `NOCHECK CONSTRAINT \"${CONSTRAINT_NAME}\"`,\n                            )\n\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `DROP CONSTRAINT \"${CONSTRAINT_NAME}\" -- FROM CLEAR`,\n                            )\n                        },\n                    ),\n                )\n\n                await Promise.all(\n                    allTablesResults.map((tablesResult) => {\n                        if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                            // don't try to drop temporary tables\n                            return\n                        }\n\n                        const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`\n                        return this.query(dropTableSql)\n                    }),\n                )\n            }\n\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewPaths?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewPaths) {\n            viewPaths = []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbNames = viewPaths\n            .map((viewPath) => this.driver.parseTableName(viewPath).database)\n            .filter((database) => database)\n\n        if (\n            this.driver.database &&\n            !dbNames.find((dbName) => dbName === this.driver.database)\n        )\n            dbNames.push(this.driver.database)\n\n        const viewsCondition = viewPaths\n            .map((viewPath) => {\n                let { schema, tableName: name } =\n                    this.driver.parseTableName(viewPath)\n\n                if (!schema) {\n                    schema = currentSchema\n                }\n                return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`\n            })\n            .join(\" OR \")\n\n        const query = dbNames\n            .map((dbName) => {\n                return (\n                    `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(\n                        this.getTypeormMetadataTableName(),\n                    )} \"t\" ` +\n                    `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = '${\n                        MetadataTableType.VIEW\n                    }' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const view = new View()\n            const db =\n                dbView[\"TABLE_CATALOG\"] === currentDatabase\n                    ? undefined\n                    : dbView[\"TABLE_CATALOG\"]\n            const schema =\n                dbView[\"schema\"] === currentSchema &&\n                !this.driver.options.schema\n                    ? undefined\n                    : dbView[\"schema\"]\n            view.database = dbView[\"TABLE_CATALOG\"]\n            view.schema = dbView[\"schema\"]\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db)\n            view.expression = dbView[\"value\"]\n            return view\n        })\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbTables: {\n            TABLE_CATALOG: string\n            TABLE_SCHEMA: string\n            TABLE_NAME: string\n        }[] = []\n\n        if (!tableNames) {\n            const databasesSql =\n                `SELECT DISTINCT \"name\" ` +\n                `FROM \"master\".\"dbo\".\"sysdatabases\" ` +\n                `WHERE \"name\" NOT IN ('master', 'model', 'msdb')`\n            const dbDatabases: { name: string }[] = await this.query(\n                databasesSql,\n            )\n\n            const tablesSql = dbDatabases\n                .map(({ name }) => {\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${name}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                      \"TABLE_TYPE\" = 'BASE TABLE'\n                      AND\n                      \"TABLE_CATALOG\" = '${name}'\n                      AND\n                      ISNULL(Objectproperty(Object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), 'IsMSShipped'), 0) = 0\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tableNamesByCatalog = tableNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .reduce((c, { database, ...other }) => {\n                    database = database || currentDatabase\n                    c[database] = c[database] || []\n                    c[database].push({\n                        schema: other.schema || currentSchema,\n                        tableName: other.tableName,\n                    })\n                    return c\n                }, {} as { [key: string]: { schema: string; tableName: string }[] })\n\n            const tablesSql = Object.entries(tableNamesByCatalog)\n                .map(([database, tables]) => {\n                    const tablesCondition = tables\n                        .map(({ schema, tableName }) => {\n                            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${tableName}')`\n                        })\n                        .join(\" OR \")\n\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                          \"TABLE_TYPE\" = 'BASE TABLE' AND\n                          \"TABLE_CATALOG\" = '${database}' AND\n                          ${tablesCondition}\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        const dbTablesByCatalog = dbTables.reduce(\n            (c, { TABLE_CATALOG, ...other }) => {\n                c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                c[TABLE_CATALOG].push(other)\n                return c\n            },\n            {} as {\n                [key: string]: { TABLE_NAME: string; TABLE_SCHEMA: string }[]\n            },\n        )\n\n        const columnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const condition = tables\n                    .map(\n                        ({ TABLE_SCHEMA, TABLE_NAME }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\"OR\")\n\n                return (\n                    `SELECT \"COLUMNS\".*, \"cc\".\"is_persisted\", \"cc\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `LEFT JOIN \"sys\".\"computed_columns\" \"cc\" ON COL_NAME(\"cc\".\"object_id\", \"cc\".\"column_id\") = \"column_name\" ` +\n                    `WHERE (${condition})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const constraintsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"columnUsages\".\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"columnUsages\".\"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ` +\n                    `ON ` +\n                    `\"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" AND ` +\n                    `\"tableConstraints\".\"TABLE_SCHEMA\" = \"columnUsages\".\"TABLE_SCHEMA\" AND ` +\n                    `\"tableConstraints\".\"TABLE_NAME\" = \"columnUsages\".\"TABLE_NAME\" ` +\n                    `LEFT JOIN \"${TABLE_CATALOG}\".\"sys\".\"check_constraints\" \"chk\" ` +\n                    `ON ` +\n                    `\"chk\".\"object_id\" = OBJECT_ID(\"columnUsages\".\"TABLE_CATALOG\" + '.' + \"columnUsages\".\"TABLE_SCHEMA\" + '.' + \"columnUsages\".\"CONSTRAINT_NAME\") ` +\n                    `WHERE ` +\n                    `(${conditions}) AND ` +\n                    `\"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const foreignKeysSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s1\".\"name\" = '${TABLE_SCHEMA}' AND \"t1\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                    `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `WHERE (${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const identityColumnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `WHERE ` +\n                    `EXISTS(SELECT 1 FROM \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"S\" WHERE OBJECT_ID(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\") = \"S\".\"OBJECT_ID\" AND \"COLUMN_NAME\" = \"S\".\"NAME\" AND \"S\".\"is_identity\" = 1) AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`\n\n        const indicesSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s\".\"name\" = '${TABLE_SCHEMA}' AND \"t\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"indexes\" \"ind\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                    `WHERE ` +\n                    `\"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0 AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const [\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ])\n\n        // create table schemas for loaded tables\n        return await Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n\n                const getSchemaFromKey = (dbObject: any, key: string) => {\n                    return dbObject[key] === currentSchema &&\n                        (!this.driver.options.schema ||\n                            this.driver.options.schema === currentSchema)\n                        ? undefined\n                        : dbObject[key]\n                }\n\n                // We do not need to join schema and database names, when db or schema is by default.\n                const db =\n                    dbTable[\"TABLE_CATALOG\"] === currentDatabase\n                        ? undefined\n                        : dbTable[\"TABLE_CATALOG\"]\n                const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\")\n                table.database = dbTable[\"TABLE_CATALOG\"]\n                table.schema = dbTable[\"TABLE_SCHEMA\"]\n                table.name = this.driver.buildTableName(\n                    dbTable[\"TABLE_NAME\"],\n                    schema,\n                    db,\n                )\n\n                const defaultCollation = dbCollations.find(\n                    (dbCollation) =>\n                        dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"],\n                )!\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns\n                        .filter(\n                            (dbColumn) =>\n                                dbColumn[\"TABLE_NAME\"] ===\n                                    dbTable[\"TABLE_NAME\"] &&\n                                dbColumn[\"TABLE_SCHEMA\"] ===\n                                    dbTable[\"TABLE_SCHEMA\"] &&\n                                dbColumn[\"TABLE_CATALOG\"] ===\n                                    dbTable[\"TABLE_CATALOG\"],\n                        )\n                        .map(async (dbColumn) => {\n                            const columnConstraints = dbConstraints.filter(\n                                (dbConstraint) =>\n                                    dbConstraint[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    dbConstraint[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    dbConstraint[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    dbConstraint[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const uniqueConstraints = columnConstraints.filter(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                            )\n                            const isConstraintComposite =\n                                uniqueConstraints.every((uniqueConstraint) => {\n                                    return dbConstraints.some(\n                                        (dbConstraint) =>\n                                            dbConstraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"UNIQUE\" &&\n                                            dbConstraint[\"CONSTRAINT_NAME\"] ===\n                                                uniqueConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ] &&\n                                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            dbConstraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"],\n                                    )\n                                })\n\n                            const isGenerated = !!dbIdentityColumns.find(\n                                (column) =>\n                                    column[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    column[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    column[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    column[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const tableColumn = new TableColumn()\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n                            tableColumn.type =\n                                dbColumn[\"DATA_TYPE\"].toLowerCase()\n\n                            // check only columns that have length property\n                            if (\n                                this.driver.withLengthColumnTypes.indexOf(\n                                    tableColumn.type as ColumnType,\n                                ) !== -1 &&\n                                dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]\n                            ) {\n                                const length =\n                                    dbColumn[\n                                        \"CHARACTER_MAXIMUM_LENGTH\"\n                                    ].toString()\n                                if (length === \"-1\") {\n                                    tableColumn.length = \"MAX\"\n                                } else {\n                                    tableColumn.length =\n                                        !this.isDefaultColumnLength(\n                                            table,\n                                            tableColumn,\n                                            length,\n                                        )\n                                            ? length\n                                            : \"\"\n                                }\n                            }\n\n                            if (\n                                tableColumn.type === \"decimal\" ||\n                                tableColumn.type === \"numeric\"\n                            ) {\n                                if (\n                                    dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_PRECISION\"],\n                                    )\n                                )\n                                    tableColumn.precision =\n                                        dbColumn[\"NUMERIC_PRECISION\"]\n                                if (\n                                    dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                                    !this.isDefaultColumnScale(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_SCALE\"],\n                                    )\n                                )\n                                    tableColumn.scale =\n                                        dbColumn[\"NUMERIC_SCALE\"]\n                            }\n\n                            if (tableColumn.type === \"nvarchar\") {\n                                // Check if this is an enum\n                                const columnCheckConstraints =\n                                    columnConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                            \"CHECK\",\n                                    )\n                                if (columnCheckConstraints.length) {\n                                    // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                                    for (const checkConstraint of columnCheckConstraints) {\n                                        if (\n                                            this.isEnumCheckConstraint(\n                                                checkConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ],\n                                            )\n                                        ) {\n                                            // This is an enum constraint, make column into an enum\n                                            tableColumn.enum = []\n                                            const enumValueRegexp = new RegExp(\n                                                \"\\\\[\" +\n                                                    tableColumn.name +\n                                                    \"\\\\]='([^']+)'\",\n                                                \"g\",\n                                            )\n                                            let result\n                                            while (\n                                                (result = enumValueRegexp.exec(\n                                                    checkConstraint[\n                                                        \"definition\"\n                                                    ],\n                                                )) !== null\n                                            ) {\n                                                tableColumn.enum.unshift(\n                                                    result[1],\n                                                )\n                                            }\n                                            // Skip other column constraints\n                                            break\n                                        }\n                                    }\n                                }\n                            }\n\n                            const primaryConstraint = columnConstraints.find(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] ===\n                                    \"PRIMARY KEY\",\n                            )\n                            if (primaryConstraint) {\n                                tableColumn.isPrimary = true\n                                // find another columns involved in primary key constraint\n                                const anotherPrimaryConstraints =\n                                    dbConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"TABLE_NAME\"] ===\n                                                dbColumn[\"TABLE_NAME\"] &&\n                                            constraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            constraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            constraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"] &&\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"PRIMARY KEY\",\n                                    )\n\n                                // collect all column names\n                                const columnNames =\n                                    anotherPrimaryConstraints.map(\n                                        (constraint) =>\n                                            constraint[\"COLUMN_NAME\"],\n                                    )\n                                columnNames.push(dbColumn[\"COLUMN_NAME\"])\n\n                                // build default primary key constraint name\n                                const pkName =\n                                    this.connection.namingStrategy.primaryKeyName(\n                                        table,\n                                        columnNames,\n                                    )\n\n                                // if primary key has user-defined constraint name, write it in table column\n                                if (\n                                    primaryConstraint[\"CONSTRAINT_NAME\"] !==\n                                    pkName\n                                ) {\n                                    tableColumn.primaryKeyConstraintName =\n                                        primaryConstraint[\"CONSTRAINT_NAME\"]\n                                }\n                            }\n\n                            tableColumn.default =\n                                dbColumn[\"COLUMN_DEFAULT\"] !== null &&\n                                dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                                    ? this.removeParenthesisFromDefault(\n                                          dbColumn[\"COLUMN_DEFAULT\"],\n                                      )\n                                    : undefined\n                            tableColumn.isNullable =\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\n                            tableColumn.isUnique =\n                                uniqueConstraints.length > 0 &&\n                                !isConstraintComposite\n                            tableColumn.isGenerated = isGenerated\n                            if (isGenerated)\n                                tableColumn.generationStrategy = \"increment\"\n                            if (tableColumn.default === \"newsequentialid()\") {\n                                tableColumn.isGenerated = true\n                                tableColumn.generationStrategy = \"uuid\"\n                                tableColumn.default = undefined\n                            }\n\n                            // todo: unable to get default charset\n                            // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                            if (dbColumn[\"COLLATION_NAME\"])\n                                tableColumn.collation =\n                                    dbColumn[\"COLLATION_NAME\"] ===\n                                    defaultCollation[\"COLLATION_NAME\"]\n                                        ? undefined\n                                        : dbColumn[\"COLLATION_NAME\"]\n\n                            if (\n                                tableColumn.type === \"datetime2\" ||\n                                tableColumn.type === \"time\" ||\n                                tableColumn.type === \"datetimeoffset\"\n                            ) {\n                                tableColumn.precision =\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATETIME_PRECISION\"],\n                                    )\n                                        ? dbColumn[\"DATETIME_PRECISION\"]\n                                        : undefined\n                            }\n\n                            if (\n                                dbColumn[\"is_persisted\"] !== null &&\n                                dbColumn[\"is_persisted\"] !== undefined &&\n                                dbColumn[\"definition\"]\n                            ) {\n                                tableColumn.generatedType =\n                                    dbColumn[\"is_persisted\"] === true\n                                        ? \"STORED\"\n                                        : \"VIRTUAL\"\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                                const asExpressionQuery =\n                                    await this.selectTypeormMetadataSql({\n                                        database: dbTable[\"TABLE_CATALOG\"],\n                                        schema: dbTable[\"TABLE_SCHEMA\"],\n                                        table: dbTable[\"TABLE_NAME\"],\n                                        type: MetadataTableType.GENERATED_COLUMN,\n                                        name: tableColumn.name,\n                                    })\n\n                                const results = await this.query(\n                                    asExpressionQuery.query,\n                                    asExpressionQuery.parameters,\n                                )\n                                if (results[0] && results[0].value) {\n                                    tableColumn.asExpression = results[0].value\n                                } else {\n                                    tableColumn.asExpression = \"\"\n                                }\n                            }\n\n                            return tableColumn\n                        }),\n                )\n\n                // find unique constraints of table, group them by constraint name and build TableUnique.\n                const tableUniqueConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.uniques = tableUniqueConstraints.map((constraint) => {\n                    const uniques = dbConstraints.filter(\n                        (dbC) =>\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                            constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableUnique({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\n                    })\n                })\n\n                // find check constraints of table, group them by constraint name and build TableCheck.\n                const tableCheckConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.checks = tableCheckConstraints\n                    .filter(\n                        (constraint) =>\n                            !this.isEnumCheckConstraint(\n                                constraint[\"CONSTRAINT_NAME\"],\n                            ),\n                    )\n                    .map((constraint) => {\n                        const checks = dbConstraints.filter(\n                            (dbC) =>\n                                dbC[\"CONSTRAINT_NAME\"] ===\n                                constraint[\"CONSTRAINT_NAME\"],\n                        )\n                        return new TableCheck({\n                            name: constraint[\"CONSTRAINT_NAME\"],\n                            columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                            expression: constraint[\"definition\"],\n                        })\n                    })\n\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys.filter(\n                        (dbForeignKey) =>\n                            dbForeignKey[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbForeignKey[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbForeignKey[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbForeignKey) => dbForeignKey[\"FK_NAME\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (dbForeignKey) => {\n                        const foreignKeys = dbForeignKeys.filter(\n                            (dbFk) =>\n                                dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"],\n                        )\n\n                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                        const db =\n                            dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase\n                                ? undefined\n                                : dbForeignKey[\"TABLE_CATALOG\"]\n                        const schema = getSchemaFromKey(\n                            dbForeignKey,\n                            \"REF_SCHEMA\",\n                        )\n                        const referencedTableName = this.driver.buildTableName(\n                            dbForeignKey[\"REF_TABLE\"],\n                            schema,\n                            db,\n                        )\n\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"FK_NAME\"],\n                            columnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\n                            ),\n                            referencedDatabase: dbForeignKey[\"TABLE_CATALOG\"],\n                            referencedSchema: dbForeignKey[\"REF_SCHEMA\"],\n                            referencedTableName: referencedTableName,\n                            referencedColumnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"REF_COLUMN\"],\n                            ),\n                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                        })\n                    },\n                )\n\n                // find index constraints of table, group them by constraint name and build TableIndex.\n                const tableIndexConstraints = OrmUtils.uniq(\n                    dbIndices.filter(\n                        (dbIndex) =>\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbIndex[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbIndex[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\n                )\n\n                table.indices = tableIndexConstraints.map((constraint) => {\n                    const indices = dbIndices.filter((index) => {\n                        return (\n                            index[\"TABLE_CATALOG\"] ===\n                                constraint[\"TABLE_CATALOG\"] &&\n                            index[\"TABLE_SCHEMA\"] ===\n                                constraint[\"TABLE_SCHEMA\"] &&\n                            index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                            index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\n                        )\n                    })\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: constraint[\"INDEX_NAME\"],\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                        isUnique: constraint[\"IS_UNIQUE\"],\n                        where: constraint[\"CONDITION\"],\n                    })\n                })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) =>\n                this.buildCreateColumnSql(table, column, false, true),\n            )\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name,\n                )\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                        }),\n                    )\n            })\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              table,\n                              unique.columnNames,\n                          )\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${uniquesSql}`\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n\n                    let constraint = `CONSTRAINT \"${\n                        fk.name\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\n\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      table,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `)`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n    ): Query {\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}`\n            : `DROP TABLE ${this.escapePath(tableOrName)}`\n        return new Query(query)\n    }\n\n    protected createViewSql(view: View): Query {\n        const parsedName = this.driver.parseTableName(view)\n\n        // Can't use `escapePath` here because `CREATE VIEW` does not accept database names.\n        const viewIdentifier = parsedName.schema\n            ? `\"${parsedName.schema}\".\"${parsedName.tableName}\"`\n            : `\"${parsedName.tableName}\"`\n\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view.expression}`,\n            )\n        } else {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view\n                    .expression(this.connection)\n                    .getQuery()}`,\n            )\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(view)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`)\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(\n        viewOrPath: View | string,\n    ): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(viewOrPath)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n        })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\n                index.name\n            }\" ON ${this.escapePath(table)} (${columns}) ${\n                index.where ? \"WHERE \" + index.where : \"\"\n            }`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(\n        table: Table,\n        indexOrName: TableIndex | string,\n    ): Query {\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(\n            `DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`,\n        )\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(\n        table: Table,\n        columnNames: string[],\n        constraintName?: string,\n    ): Query {\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\n        )\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map((column) => column.name)\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\n        )\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(\n        table: Table,\n        uniqueConstraint: TableUnique,\n    ): Query {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                uniqueConstraint.name\n            }\" UNIQUE (${columnNames})`,\n        )\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(\n        table: Table,\n        uniqueOrName: TableUnique | string,\n    ): Query {\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName.name\n            : uniqueOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\n        )\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck,\n    ): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                checkConstraint.name\n            }\" CHECK (${checkConstraint.expression})`,\n        )\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string,\n    ): Query {\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName.name\n            : checkOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${checkName}\"`,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\")\n        let sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                foreignKey.name\n            }\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )}(${referencedColumnNames})`\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\n            foreignKeyOrName,\n        )\n            ? foreignKeyOrName.name\n            : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\n        )\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        const { database, schema, tableName } =\n            this.driver.parseTableName(target)\n\n        if (database && database !== this.driver.database) {\n            if (schema && schema !== this.driver.searchSchema) {\n                return `\"${database}\".\"${schema}\".\"${tableName}\"`\n            }\n\n            return `\"${database}\"..\"${tableName}\"`\n        }\n\n        if (schema && schema !== this.driver.searchSchema) {\n            return `\"${schema}\".\"${tableName}\"`\n        }\n\n        return `\"${tableName}\"`\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(\n        fkName: string,\n        schemaName: string | undefined,\n        dbName: string | undefined,\n    ): string {\n        let joinedFkName = fkName\n        if (schemaName && schemaName !== this.driver.searchSchema)\n            joinedFkName = schemaName + \".\" + joinedFkName\n        if (dbName && dbName !== this.driver.database)\n            joinedFkName = dbName + \".\" + joinedFkName\n\n        return joinedFkName\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\") return defaultValue\n        const normalizedDefault = defaultValue.substr(\n            1,\n            defaultValue.lastIndexOf(\")\") - 1,\n        )\n        return this.removeParenthesisFromDefault(normalizedDefault)\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(\n        table: Table,\n        column: TableColumn,\n        skipIdentity: boolean,\n        createDefault: boolean,\n        skipEnum?: boolean,\n    ) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(\n            column,\n        )}`\n\n        if (!skipEnum && column.enum) {\n            const expression = this.getEnumExpression(column)\n            const checkName =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    expression,\n                    true,\n                )\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`\n        }\n\n        if (column.collation) c += \" COLLATE \" + column.collation\n\n        if (column.asExpression) {\n            c += ` AS (${column.asExpression})`\n            if (column.generatedType === \"STORED\") {\n                c += ` PERSISTED`\n\n                // NOT NULL can be specified for computed columns only if PERSISTED is also specified\n                if (column.isNullable !== true) c += \" NOT NULL\"\n            }\n        } else {\n            if (column.isNullable !== true) c += \" NOT NULL\"\n        }\n\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\" &&\n            !skipIdentity\n        )\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\"\n\n        if (\n            column.default !== undefined &&\n            column.default !== null &&\n            createDefault\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`\n        }\n\n        if (\n            column.isGenerated &&\n            column.generationStrategy === \"uuid\" &&\n            !column.default\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`\n        }\n        return c\n    }\n\n    private getEnumExpression(column: TableColumn) {\n        if (!column.enum) {\n            throw new Error(`Enum is not defined in column ${column.name}`)\n        }\n        return (\n            column.name +\n            \" IN (\" +\n            column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\n            \")\"\n        )\n    }\n\n    protected isEnumCheckConstraint(name: string): boolean {\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit\n            case \"bigint\":\n                return this.driver.mssql.BigInt\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params)\n            case \"float\":\n                return this.driver.mssql.Float\n            case \"int\":\n                return this.driver.mssql.Int\n            case \"money\":\n                return this.driver.mssql.Money\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params)\n            case \"smallint\":\n                return this.driver.mssql.SmallInt\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney\n            case \"real\":\n                return this.driver.mssql.Real\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt\n            case \"char\":\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"text\":\n            case \"ntext\":\n                return this.driver.mssql.Ntext\n            case \"varchar\":\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"xml\":\n                return this.driver.mssql.Xml\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params)\n            case \"date\":\n                return this.driver.mssql.Date\n            case \"datetime\":\n                return this.driver.mssql.DateTime\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params)\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params)\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier\n            case \"variant\":\n                return this.driver.mssql.Variant\n            case \"binary\":\n                return this.driver.mssql.Binary\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params)\n            case \"image\":\n                return this.driver.mssql.Image\n            case \"udt\":\n                return this.driver.mssql.UDT\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Query } from \"../Query\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { MssqlParameter } from \"./MssqlParameter\"\nimport { SqlServerDriver } from \"./SqlServerDriver\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryLock } from \"../../query-runner/QueryLock\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner\n    extends BaseQueryRunner\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private lock: QueryLock = new QueryLock()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n        this.mode = mode\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n        await new Promise<void>(async (ok, fail) => {\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false\n                    return fail(err)\n                }\n                ok()\n            }\n\n            if (this.transactionDepth === 0) {\n                const pool = await (this.mode === \"slave\"\n                    ? this.driver.obtainSlaveConnection()\n                    : this.driver.obtainMasterConnection())\n                this.databaseConnection = pool.transaction()\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\")\n                if (isolationLevel) {\n                    this.databaseConnection.begin(\n                        this.convertIsolationLevel(isolationLevel),\n                        transactionCallback,\n                    )\n                    this.connection.logger.logQuery(\n                        \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\n                    )\n                } else {\n                    this.databaseConnection.begin(transactionCallback)\n                }\n            } else {\n                await this.query(\n                    `SAVE TRANSACTION typeorm_${this.transactionDepth}`,\n                )\n                ok()\n            }\n            this.transactionDepth += 1\n        })\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth === 1) {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.commit(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"COMMIT\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n        this.transactionDepth -= 1\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TRANSACTION typeorm_${this.transactionDepth - 1}`,\n            )\n            this.transactionDepth -= 1\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.rollback(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"ROLLBACK\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        try {\n            this.driver.connection.logger.logQuery(query, parameters, this)\n            const pool = await (this.mode === \"slave\"\n                ? this.driver.obtainSlaveConnection()\n                : this.driver.obtainMasterConnection())\n            const request = new this.driver.mssql.Request(\n                this.isTransactionActive ? this.databaseConnection : pool,\n            )\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    const parameterName = index.toString()\n                    if (InstanceChecker.isMssqlParameter(parameter)) {\n                        const mssqlParameter =\n                            this.mssqlParameterToNativeParameter(parameter)\n                        if (mssqlParameter) {\n                            request.input(\n                                parameterName,\n                                mssqlParameter,\n                                parameter.value,\n                            )\n                        } else {\n                            request.input(parameterName, parameter.value)\n                        }\n                    } else {\n                        request.input(parameterName, parameter)\n                    }\n                })\n            }\n            const queryStartTime = +new Date()\n\n            const raw = await new Promise<any>((ok, fail) => {\n                request.query(query, (err: any, raw: any) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime =\n                        this.driver.options.maxQueryExecutionTime\n                    const queryEndTime = +new Date()\n                    const queryExecutionTime = queryEndTime - queryStartTime\n                    if (\n                        maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime\n                    ) {\n                        this.driver.connection.logger.logQuerySlow(\n                            queryExecutionTime,\n                            query,\n                            parameters,\n                            this,\n                        )\n                    }\n\n                    if (err) {\n                        fail(new QueryFailedError(query, parameters, err))\n                    }\n\n                    ok(raw)\n                })\n            })\n\n            const result = new QueryResult()\n\n            if (raw?.hasOwnProperty(\"recordset\")) {\n                result.records = raw.recordset\n            }\n\n            if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                result.affected = raw.rowsAffected[0]\n            }\n\n            const queryType = query.slice(0, query.indexOf(\" \"))\n            switch (queryType) {\n                case \"DELETE\":\n                    // for DELETE query additionally return number of affected rows\n                    result.raw = [raw.recordset, raw.rowsAffected[0]]\n                    break\n                default:\n                    result.raw = raw.recordset\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            throw err\n        } finally {\n            release()\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        const pool = await (this.mode === \"slave\"\n            ? this.driver.obtainSlaveConnection()\n            : this.driver.obtainMasterConnection())\n        const request = new this.driver.mssql.Request(\n            this.isTransactionActive ? this.databaseConnection : pool,\n        )\n        if (parameters && parameters.length) {\n            parameters.forEach((parameter, index) => {\n                const parameterName = index.toString()\n                if (InstanceChecker.isMssqlParameter(parameter)) {\n                    request.input(\n                        parameterName,\n                        this.mssqlParameterToNativeParameter(parameter),\n                        parameter.value,\n                    )\n                } else {\n                    request.input(parameterName, parameter)\n                }\n            })\n        }\n\n        request.query(query)\n\n        const streamRequest = request.toReadableStream()\n\n        streamRequest.on(\"error\", (err: any) => {\n            release()\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n        })\n\n        streamRequest.on(\"end\", () => {\n            release()\n        })\n\n        if (onEnd) {\n            streamRequest.on(\"end\", onEnd)\n        }\n\n        if (onError) {\n            streamRequest.on(\"error\", onError)\n        }\n\n        return streamRequest\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`)\n        return results.map((result) => result[\"DATABASE_NAME\"])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database\n            ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"`\n            : `SELECT * FROM \"sys\".\"schemas\"`\n        const results: ObjectLiteral[] = await this.query(query)\n        return results.map((result) => result[\"name\"])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT DB_ID('${database}') as \"db_id\"`,\n        )\n        const dbId = result[0][\"db_id\"]\n        return !!dbId\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`)\n        return currentDBQuery[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT SCHEMA_ID('${schema}') as \"schema_id\"`,\n        )\n        const schemaId = result[0][\"schema_id\"]\n        return !!schemaId\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(\n            `SELECT SCHEMA_NAME() AS \"schema_name\"`,\n        )\n        return currentSchemaQuery[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}' AND \"COLUMN_NAME\" = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const up = ifNotExist\n            ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"`\n            : `CREATE DATABASE \"${database}\"`\n        const down = `DROP DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist\n            ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"`\n            : `DROP DATABASE \"${database}\"`\n        const down = `CREATE DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END`\n                : `CREATE SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END`\n                : `CREATE SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END`\n                : `DROP SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END`\n                : `DROP SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(table, index))\n            })\n        }\n\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(await this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        let newTable = oldTable.clone()\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string | undefined = undefined\n        let schemaName: string | undefined = undefined\n        let oldTableName: string = oldTable.name\n        const splittedName = oldTable.name.split(\".\")\n        if (splittedName.length === 3) {\n            dbName = splittedName[0]\n            oldTableName = splittedName[2]\n            if (splittedName[1] !== \"\") schemaName = splittedName[1]\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0]\n            oldTableName = splittedName[1]\n        }\n\n        newTable.name = this.driver.buildTableName(\n            newTableName,\n            schemaName,\n            dbName,\n        )\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase()\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n        }\n\n        // rename table\n        upQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    oldTable,\n                )}\", \"${newTableName}\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    newTable,\n                )}\", \"${oldTableName}\"`,\n            ),\n        )\n\n        // rename primary key constraint\n        if (\n            newTable.primaryColumns.length > 0 &&\n            !newTable.primaryColumns[0].primaryKeyConstraintName\n        ) {\n            const columnNames = newTable.primaryColumns.map(\n                (column) => column.name,\n            )\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                oldTable,\n                columnNames,\n            )\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\n                newTable,\n                columnNames,\n            )\n\n            // rename primary constraint\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${oldPkName}\", \"${newPkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newPkName}\", \"${oldPkName}\"`,\n                ),\n            )\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    oldTable,\n                    unique.columnNames,\n                )\n\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName) return\n\n            // build new constraint name\n            const newUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    newTable,\n                    unique.columnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        unique.name\n                    }\", \"${newUniqueName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newUniqueName}\", \"${unique.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            unique.name = newUniqueName\n        })\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(\n                oldTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName) return\n\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        index.name\n                    }\", \"${newIndexName}\", \"INDEX\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                ),\n            )\n\n            // replace constraint name\n            index.name = newIndexName\n        })\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    oldTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName) return\n\n            // build new constraint name\n            const newForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    newTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        foreignKey.name!,\n                        schemaName,\n                        dbName,\n                    )}\", \"${newForeignKeyName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        newForeignKeyName,\n                        schemaName,\n                        dbName,\n                    )}\", \"${foreignKey.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName\n        })\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    true,\n                )}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = primaryColumns[0].primaryKeyConstraintName\n                    ? primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          primaryColumns.map((column) => column.name),\n                      )\n\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \")\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n            }\n\n            primaryColumns.push(column)\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(table, columnIndex))\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    [column.name],\n                ),\n                columnNames: [column.name],\n            })\n            clonedTable.uniques.push(uniqueConstraint)\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\" UNIQUE (\"${column.name}\")`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\"`,\n                ),\n            )\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find(\n                  (column) => column.name === oldTableColumnOrName,\n              )\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            newColumn.type !== oldColumn.type ||\n            newColumn.length !== oldColumn.length ||\n            newColumn.asExpression !== oldColumn.asExpression ||\n            newColumn.generatedType !== oldColumn.generatedType\n        ) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // we need database name and schema name to rename FK constraints\n                let dbName: string | undefined = undefined\n                let schemaName: string | undefined = undefined\n                const splittedName = table.name.split(\".\")\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0]\n                    if (splittedName[1] !== \"\") schemaName = splittedName[1]\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0]\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase()\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`))\n                    downQueries.push(new Query(`USE \"${currentDB}\"`))\n                }\n\n                // rename the column\n                upQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            oldColumn.name\n                        }\", \"${newColumn.name}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            newColumn.name\n                        }\", \"${oldColumn.name}\"`,\n                    ),\n                )\n\n                // rename column primary key constraint\n                if (\n                    oldColumn.isPrimary === true &&\n                    !oldColumn.primaryKeyConstraintName\n                ) {\n                    const primaryColumns = clonedTable.primaryColumns\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(\n                        (column) => column.name,\n                    )\n                    const oldPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\n                    columnNames.push(newColumn.name)\n\n                    // build new primary constraint name\n                    const newPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // rename primary constraint\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${oldPkName}\", \"${newPkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newPkName}\", \"${oldPkName}\"`,\n                        ),\n                    )\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    const oldIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // Skip renaming if Index has user defined constraint name\n                    if (index.name !== oldIndexName) return\n\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    index.columnNames.push(newColumn.name)\n                    const newIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${index.name}\", \"${newIndexName}\", \"INDEX\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    index.name = newIndexName\n                })\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        const foreignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // Skip renaming if foreign key has user defined constraint name\n                        if (foreignKey.name !== foreignKeyName) return\n\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1,\n                        )\n                        foreignKey.columnNames.push(newColumn.name)\n                        const newForeignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // build queries\n                        upQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    foreignKey.name!,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${newForeignKeyName}\"`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    newForeignKeyName,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${foreignKey.name}\"`,\n                            ),\n                        )\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName\n                    })\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach((check) => {\n                    // build new constraint name\n                    check.columnNames!.splice(\n                        check.columnNames!.indexOf(oldColumn.name),\n                        1,\n                    )\n                    check.columnNames!.push(newColumn.name)\n                    const newCheckName =\n                        this.connection.namingStrategy.checkConstraintName(\n                            clonedTable,\n                            check.expression!,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${check.name}\", \"${newCheckName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newCheckName}\", \"${check.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    check.name = newCheckName\n                })\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    const oldUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // Skip renaming if Unique has user defined constraint name\n                    if (unique.name !== oldUniqueName) return\n\n                    // build new constraint name\n                    unique.columnNames.splice(\n                        unique.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    unique.columnNames.push(newColumn.name)\n                    const newUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${unique.name}\", \"${newUniqueName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newUniqueName}\", \"${unique.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    unique.name = newUniqueName\n                })\n\n                // rename default constraints\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const oldDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    const newDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${oldDefaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${newDefaultName}\"`,\n                        ),\n                    )\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`))\n                    downQueries.push(new Query(`USE \"${dbName}\"`))\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name,\n                )\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name\n                oldColumn.name = newColumn.name\n            }\n\n            if (\n                this.isColumnChanged(oldColumn, newColumn, false, false, false)\n            ) {\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            newColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            oldColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n\n            if (this.isEnumChanged(oldColumn, newColumn)) {\n                const oldExpression = this.getEnumExpression(oldColumn)\n                const oldCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        oldExpression,\n                        true,\n                    ),\n                    expression: oldExpression,\n                })\n\n                const newExpression = this.getEnumExpression(newColumn)\n                const newCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        newExpression,\n                        true,\n                    ),\n                    expression: newExpression,\n                })\n\n                upQueries.push(this.dropCheckConstraintSql(table, oldCheck))\n                upQueries.push(this.createCheckConstraintSql(table, newCheck))\n\n                downQueries.push(this.dropCheckConstraintSql(table, newCheck))\n                downQueries.push(this.createCheckConstraintSql(table, oldCheck))\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn)\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = true\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name,\n                    )\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1,\n                    )\n\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = false\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = primaryColumns[0]\n                            .primaryKeyConstraintName\n                            ? primaryColumns[0].primaryKeyConstraintName\n                            : this.connection.namingStrategy.primaryKeyName(\n                                  clonedTable,\n                                  primaryColumns.map((column) => column.name),\n                              )\n\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \")\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} DROP CONSTRAINT \"${pkName}\"`,\n                            ),\n                        )\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(\n                            table,\n                            [newColumn.name],\n                        ),\n                        columnNames: [newColumn.name],\n                    })\n                    clonedTable.uniques.push(uniqueConstraint)\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\n                        ),\n                    )\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(\n                        (unique) => {\n                            return (\n                                unique.columnNames.length === 1 &&\n                                !!unique.columnNames.find(\n                                    (columnName) =>\n                                        columnName === newColumn.name,\n                                )\n                            )\n                        },\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\n                        1,\n                    )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${oldColumn.name}\"`,\n                        ),\n                    )\n                }\n\n                if (\n                    newColumn.default !== null &&\n                    newColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                newColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries)\n            this.replaceCachedTable(table, clonedTable)\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = column.primaryKeyConstraintName\n                ? column.primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      clonedTable.primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name)\n            tableColumn!.isPrimary = false\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = clonedTable.primaryColumns[0]\n                    .primaryKeyConstraintName\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          clonedTable.primaryColumns.map(\n                              (column) => column.name,\n                          ),\n                      )\n\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \")\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.dropIndexSql(table, columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name,\n        )\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1,\n            )\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(\n            (unique) =>\n                unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name,\n        )\n        if (columnUnique) {\n            clonedTable.uniques.splice(\n                clonedTable.uniques.indexOf(columnUnique),\n                1,\n            )\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\n            downQueries.push(\n                this.createUniqueConstraintSql(table, columnUnique),\n            )\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                        column.default\n                    } FOR \"${column.name}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    false,\n                )}`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n        const down = this.dropPrimaryKeySql(clonedTable)\n\n        await this.executeQueries(up, down)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const columnNames = columns.map((column) => column.name)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns\n        if (primaryColumns.length > 0) {\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n                ),\n            )\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true))\n\n        const pkName = primaryColumns[0].primaryKeyConstraintName\n            ? primaryColumns[0].primaryKeyConstraintName\n            : this.connection.namingStrategy.primaryKeyName(\n                  clonedTable,\n                  columnNames,\n              )\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP CONSTRAINT \"${pkName}\"`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(\n        tableOrName: Table | string,\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const up = this.dropPrimaryKeySql(table)\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name),\n            constraintName,\n        )\n        await this.executeQueries(up, down)\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    uniqueConstraint.columnNames,\n                )\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.addUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.createUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName)\n        if (!uniqueConstraint)\n            throw new TypeORMError(\n                `Supplied unique constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.removeUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    checkConstraint.expression!,\n                )\n\n        const up = this.createCheckConstraintSql(table, checkConstraint)\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.addCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\n        const down = this.createCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.removeCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const metadata = this.connection.hasMetadata(table.name)\n            ? this.connection.getMetadata(table.name)\n            : undefined\n\n        if (\n            metadata &&\n            metadata.treeParentRelation &&\n            metadata.treeParentRelation!.isTreeParent &&\n            metadata.foreignKeys.find(\n                (foreignKey) => foreignKey.onDelete !== \"NO ACTION\",\n            )\n        )\n            throw new TypeORMError(\n                \"SqlServer does not support options in TreeParent.\",\n            )\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index was not found in table ${table.name}`,\n            )\n\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(table, index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database)\n            if (!isDatabaseExist) return Promise.resolve()\n        }\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`\n            const allViewsResults: ObjectLiteral[] = await this.query(\n                allViewsSql,\n            )\n\n            await Promise.all(\n                allViewsResults.map((viewResult) => {\n                    // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                    const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`\n                    return this.query(dropTableSql)\n                }),\n            )\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n            const allTablesResults: ObjectLiteral[] = await this.query(\n                allTablesSql,\n            )\n\n            if (allTablesResults.length > 0) {\n                const tablesByCatalog: {\n                    [key: string]: {\n                        TABLE_NAME: string\n                        TABLE_SCHEMA: string\n                    }[]\n                } = allTablesResults.reduce(\n                    (c, { TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME }) => {\n                        c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                        c[TABLE_CATALOG].push({ TABLE_SCHEMA, TABLE_NAME })\n                        return c\n                    },\n                    {},\n                )\n\n                const foreignKeysSql = Object.entries(tablesByCatalog)\n                    .map(([TABLE_CATALOG, tables]) => {\n                        const conditions = tables\n                            .map(({ TABLE_SCHEMA, TABLE_NAME }) => {\n                                return `(\"fk\".\"referenced_object_id\" = OBJECT_ID('\"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\"'))`\n                            })\n                            .join(\" OR \")\n\n                        return `\n                        SELECT DISTINCT '${TABLE_CATALOG}' AS                                              \"TABLE_CATALOG\",\n                                        OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\",\n                                                           DB_ID('${TABLE_CATALOG}')) AS                   \"TABLE_SCHEMA\",\n                                        OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${TABLE_CATALOG}')) AS \"TABLE_NAME\",\n                                        \"fk\".\"name\" AS                                                     \"CONSTRAINT_NAME\"\n                        FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" AS \"fk\"\n                        WHERE (${conditions})\n                    `\n                    })\n                    .join(\" UNION ALL \")\n\n                const foreignKeys: {\n                    TABLE_CATALOG: string\n                    TABLE_SCHEMA: string\n                    TABLE_NAME: string\n                    CONSTRAINT_NAME: string\n                }[] = await this.query(foreignKeysSql)\n\n                await Promise.all(\n                    foreignKeys.map(\n                        async ({\n                            TABLE_CATALOG,\n                            TABLE_SCHEMA,\n                            TABLE_NAME,\n                            CONSTRAINT_NAME,\n                        }) => {\n                            // Disable the constraint first.\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `NOCHECK CONSTRAINT \"${CONSTRAINT_NAME}\"`,\n                            )\n\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `DROP CONSTRAINT \"${CONSTRAINT_NAME}\" -- FROM CLEAR`,\n                            )\n                        },\n                    ),\n                )\n\n                await Promise.all(\n                    allTablesResults.map((tablesResult) => {\n                        if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                            // don't try to drop temporary tables\n                            return\n                        }\n\n                        const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`\n                        return this.query(dropTableSql)\n                    }),\n                )\n            }\n\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewPaths?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewPaths) {\n            viewPaths = []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbNames = viewPaths\n            .map((viewPath) => this.driver.parseTableName(viewPath).database)\n            .filter((database) => database)\n\n        if (\n            this.driver.database &&\n            !dbNames.find((dbName) => dbName === this.driver.database)\n        )\n            dbNames.push(this.driver.database)\n\n        const viewsCondition = viewPaths\n            .map((viewPath) => {\n                let { schema, tableName: name } =\n                    this.driver.parseTableName(viewPath)\n\n                if (!schema) {\n                    schema = currentSchema\n                }\n                return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`\n            })\n            .join(\" OR \")\n\n        const query = dbNames\n            .map((dbName) => {\n                return (\n                    `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(\n                        this.getTypeormMetadataTableName(),\n                    )} \"t\" ` +\n                    `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = '${\n                        MetadataTableType.VIEW\n                    }' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const view = new View()\n            const db =\n                dbView[\"TABLE_CATALOG\"] === currentDatabase\n                    ? undefined\n                    : dbView[\"TABLE_CATALOG\"]\n            const schema =\n                dbView[\"schema\"] === currentSchema &&\n                !this.driver.options.schema\n                    ? undefined\n                    : dbView[\"schema\"]\n            view.database = dbView[\"TABLE_CATALOG\"]\n            view.schema = dbView[\"schema\"]\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db)\n            view.expression = dbView[\"value\"]\n            return view\n        })\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbTables: {\n            TABLE_CATALOG: string\n            TABLE_SCHEMA: string\n            TABLE_NAME: string\n        }[] = []\n\n        if (!tableNames) {\n            const databasesSql =\n                `SELECT DISTINCT \"name\" ` +\n                `FROM \"master\".\"dbo\".\"sysdatabases\" ` +\n                `WHERE \"name\" NOT IN ('master', 'model', 'msdb')`\n            const dbDatabases: { name: string }[] = await this.query(\n                databasesSql,\n            )\n\n            const tablesSql = dbDatabases\n                .map(({ name }) => {\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${name}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                      \"TABLE_TYPE\" = 'BASE TABLE'\n                      AND\n                      \"TABLE_CATALOG\" = '${name}'\n                      AND\n                      ISNULL(Objectproperty(Object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), 'IsMSShipped'), 0) = 0\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tableNamesByCatalog = tableNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .reduce((c, { database, ...other }) => {\n                    database = database || currentDatabase\n                    c[database] = c[database] || []\n                    c[database].push({\n                        schema: other.schema || currentSchema,\n                        tableName: other.tableName,\n                    })\n                    return c\n                }, {} as { [key: string]: { schema: string; tableName: string }[] })\n\n            const tablesSql = Object.entries(tableNamesByCatalog)\n                .map(([database, tables]) => {\n                    const tablesCondition = tables\n                        .map(({ schema, tableName }) => {\n                            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${tableName}')`\n                        })\n                        .join(\" OR \")\n\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                          \"TABLE_TYPE\" = 'BASE TABLE' AND\n                          \"TABLE_CATALOG\" = '${database}' AND\n                          ${tablesCondition}\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        const dbTablesByCatalog = dbTables.reduce(\n            (c, { TABLE_CATALOG, ...other }) => {\n                c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                c[TABLE_CATALOG].push(other)\n                return c\n            },\n            {} as {\n                [key: string]: { TABLE_NAME: string; TABLE_SCHEMA: string }[]\n            },\n        )\n\n        const columnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const condition = tables\n                    .map(\n                        ({ TABLE_SCHEMA, TABLE_NAME }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\"OR\")\n\n                return (\n                    `SELECT \"COLUMNS\".*, \"cc\".\"is_persisted\", \"cc\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `LEFT JOIN \"sys\".\"computed_columns\" \"cc\" ON COL_NAME(\"cc\".\"object_id\", \"cc\".\"column_id\") = \"column_name\" ` +\n                    `WHERE (${condition})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const constraintsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"columnUsages\".\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"columnUsages\".\"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ` +\n                    `ON ` +\n                    `\"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" AND ` +\n                    `\"tableConstraints\".\"TABLE_SCHEMA\" = \"columnUsages\".\"TABLE_SCHEMA\" AND ` +\n                    `\"tableConstraints\".\"TABLE_NAME\" = \"columnUsages\".\"TABLE_NAME\" ` +\n                    `LEFT JOIN \"${TABLE_CATALOG}\".\"sys\".\"check_constraints\" \"chk\" ` +\n                    `ON ` +\n                    `\"chk\".\"object_id\" = OBJECT_ID(\"columnUsages\".\"TABLE_CATALOG\" + '.' + \"columnUsages\".\"TABLE_SCHEMA\" + '.' + \"columnUsages\".\"CONSTRAINT_NAME\") ` +\n                    `WHERE ` +\n                    `(${conditions}) AND ` +\n                    `\"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const foreignKeysSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s1\".\"name\" = '${TABLE_SCHEMA}' AND \"t1\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                    `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `WHERE (${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const identityColumnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `WHERE ` +\n                    `EXISTS(SELECT 1 FROM \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"S\" WHERE OBJECT_ID(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\") = \"S\".\"OBJECT_ID\" AND \"COLUMN_NAME\" = \"S\".\"NAME\" AND \"S\".\"is_identity\" = 1) AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`\n\n        const indicesSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s\".\"name\" = '${TABLE_SCHEMA}' AND \"t\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"indexes\" \"ind\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                    `WHERE ` +\n                    `\"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0 AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const [\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ])\n\n        // create table schemas for loaded tables\n        return await Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n\n                const getSchemaFromKey = (dbObject: any, key: string) => {\n                    return dbObject[key] === currentSchema &&\n                        (!this.driver.options.schema ||\n                            this.driver.options.schema === currentSchema)\n                        ? undefined\n                        : dbObject[key]\n                }\n\n                // We do not need to join schema and database names, when db or schema is by default.\n                const db =\n                    dbTable[\"TABLE_CATALOG\"] === currentDatabase\n                        ? undefined\n                        : dbTable[\"TABLE_CATALOG\"]\n                const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\")\n                table.database = dbTable[\"TABLE_CATALOG\"]\n                table.schema = dbTable[\"TABLE_SCHEMA\"]\n                table.name = this.driver.buildTableName(\n                    dbTable[\"TABLE_NAME\"],\n                    schema,\n                    db,\n                )\n\n                const defaultCollation = dbCollations.find(\n                    (dbCollation) =>\n                        dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"],\n                )!\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns\n                        .filter(\n                            (dbColumn) =>\n                                dbColumn[\"TABLE_NAME\"] ===\n                                    dbTable[\"TABLE_NAME\"] &&\n                                dbColumn[\"TABLE_SCHEMA\"] ===\n                                    dbTable[\"TABLE_SCHEMA\"] &&\n                                dbColumn[\"TABLE_CATALOG\"] ===\n                                    dbTable[\"TABLE_CATALOG\"],\n                        )\n                        .map(async (dbColumn) => {\n                            const columnConstraints = dbConstraints.filter(\n                                (dbConstraint) =>\n                                    dbConstraint[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    dbConstraint[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    dbConstraint[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    dbConstraint[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const uniqueConstraints = columnConstraints.filter(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                            )\n                            const isConstraintComposite =\n                                uniqueConstraints.every((uniqueConstraint) => {\n                                    return dbConstraints.some(\n                                        (dbConstraint) =>\n                                            dbConstraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"UNIQUE\" &&\n                                            dbConstraint[\"CONSTRAINT_NAME\"] ===\n                                                uniqueConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ] &&\n                                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            dbConstraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"],\n                                    )\n                                })\n\n                            const isGenerated = !!dbIdentityColumns.find(\n                                (column) =>\n                                    column[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    column[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    column[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    column[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const tableColumn = new TableColumn()\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n                            tableColumn.type =\n                                dbColumn[\"DATA_TYPE\"].toLowerCase()\n\n                            // check only columns that have length property\n                            if (\n                                this.driver.withLengthColumnTypes.indexOf(\n                                    tableColumn.type as ColumnType,\n                                ) !== -1 &&\n                                dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]\n                            ) {\n                                const length =\n                                    dbColumn[\n                                        \"CHARACTER_MAXIMUM_LENGTH\"\n                                    ].toString()\n                                if (length === \"-1\") {\n                                    tableColumn.length = \"MAX\"\n                                } else {\n                                    tableColumn.length =\n                                        !this.isDefaultColumnLength(\n                                            table,\n                                            tableColumn,\n                                            length,\n                                        )\n                                            ? length\n                                            : \"\"\n                                }\n                            }\n\n                            if (\n                                tableColumn.type === \"decimal\" ||\n                                tableColumn.type === \"numeric\"\n                            ) {\n                                if (\n                                    dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_PRECISION\"],\n                                    )\n                                )\n                                    tableColumn.precision =\n                                        dbColumn[\"NUMERIC_PRECISION\"]\n                                if (\n                                    dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                                    !this.isDefaultColumnScale(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_SCALE\"],\n                                    )\n                                )\n                                    tableColumn.scale =\n                                        dbColumn[\"NUMERIC_SCALE\"]\n                            }\n\n                            if (tableColumn.type === \"nvarchar\") {\n                                // Check if this is an enum\n                                const columnCheckConstraints =\n                                    columnConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                            \"CHECK\",\n                                    )\n                                if (columnCheckConstraints.length) {\n                                    // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                                    for (const checkConstraint of columnCheckConstraints) {\n                                        if (\n                                            this.isEnumCheckConstraint(\n                                                checkConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ],\n                                            )\n                                        ) {\n                                            // This is an enum constraint, make column into an enum\n                                            tableColumn.enum = []\n                                            const enumValueRegexp = new RegExp(\n                                                \"\\\\[\" +\n                                                    tableColumn.name +\n                                                    \"\\\\]='([^']+)'\",\n                                                \"g\",\n                                            )\n                                            let result\n                                            while (\n                                                (result = enumValueRegexp.exec(\n                                                    checkConstraint[\n                                                        \"definition\"\n                                                    ],\n                                                )) !== null\n                                            ) {\n                                                tableColumn.enum.unshift(\n                                                    result[1],\n                                                )\n                                            }\n                                            // Skip other column constraints\n                                            break\n                                        }\n                                    }\n                                }\n                            }\n\n                            const primaryConstraint = columnConstraints.find(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] ===\n                                    \"PRIMARY KEY\",\n                            )\n                            if (primaryConstraint) {\n                                tableColumn.isPrimary = true\n                                // find another columns involved in primary key constraint\n                                const anotherPrimaryConstraints =\n                                    dbConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"TABLE_NAME\"] ===\n                                                dbColumn[\"TABLE_NAME\"] &&\n                                            constraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            constraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            constraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"] &&\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"PRIMARY KEY\",\n                                    )\n\n                                // collect all column names\n                                const columnNames =\n                                    anotherPrimaryConstraints.map(\n                                        (constraint) =>\n                                            constraint[\"COLUMN_NAME\"],\n                                    )\n                                columnNames.push(dbColumn[\"COLUMN_NAME\"])\n\n                                // build default primary key constraint name\n                                const pkName =\n                                    this.connection.namingStrategy.primaryKeyName(\n                                        table,\n                                        columnNames,\n                                    )\n\n                                // if primary key has user-defined constraint name, write it in table column\n                                if (\n                                    primaryConstraint[\"CONSTRAINT_NAME\"] !==\n                                    pkName\n                                ) {\n                                    tableColumn.primaryKeyConstraintName =\n                                        primaryConstraint[\"CONSTRAINT_NAME\"]\n                                }\n                            }\n\n                            tableColumn.default =\n                                dbColumn[\"COLUMN_DEFAULT\"] !== null &&\n                                dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                                    ? this.removeParenthesisFromDefault(\n                                          dbColumn[\"COLUMN_DEFAULT\"],\n                                      )\n                                    : undefined\n                            tableColumn.isNullable =\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\n                            tableColumn.isUnique =\n                                uniqueConstraints.length > 0 &&\n                                !isConstraintComposite\n                            tableColumn.isGenerated = isGenerated\n                            if (isGenerated)\n                                tableColumn.generationStrategy = \"increment\"\n                            if (tableColumn.default === \"newsequentialid()\") {\n                                tableColumn.isGenerated = true\n                                tableColumn.generationStrategy = \"uuid\"\n                                tableColumn.default = undefined\n                            }\n\n                            // todo: unable to get default charset\n                            // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                            if (dbColumn[\"COLLATION_NAME\"])\n                                tableColumn.collation =\n                                    dbColumn[\"COLLATION_NAME\"] ===\n                                    defaultCollation[\"COLLATION_NAME\"]\n                                        ? undefined\n                                        : dbColumn[\"COLLATION_NAME\"]\n\n                            if (\n                                tableColumn.type === \"datetime2\" ||\n                                tableColumn.type === \"time\" ||\n                                tableColumn.type === \"datetimeoffset\"\n                            ) {\n                                tableColumn.precision =\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATETIME_PRECISION\"],\n                                    )\n                                        ? dbColumn[\"DATETIME_PRECISION\"]\n                                        : undefined\n                            }\n\n                            if (\n                                dbColumn[\"is_persisted\"] !== null &&\n                                dbColumn[\"is_persisted\"] !== undefined &&\n                                dbColumn[\"definition\"]\n                            ) {\n                                tableColumn.generatedType =\n                                    dbColumn[\"is_persisted\"] === true\n                                        ? \"STORED\"\n                                        : \"VIRTUAL\"\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                                const asExpressionQuery =\n                                    await this.selectTypeormMetadataSql({\n                                        database: dbTable[\"TABLE_CATALOG\"],\n                                        schema: dbTable[\"TABLE_SCHEMA\"],\n                                        table: dbTable[\"TABLE_NAME\"],\n                                        type: MetadataTableType.GENERATED_COLUMN,\n                                        name: tableColumn.name,\n                                    })\n\n                                const results = await this.query(\n                                    asExpressionQuery.query,\n                                    asExpressionQuery.parameters,\n                                )\n                                if (results[0] && results[0].value) {\n                                    tableColumn.asExpression = results[0].value\n                                } else {\n                                    tableColumn.asExpression = \"\"\n                                }\n                            }\n\n                            return tableColumn\n                        }),\n                )\n\n                // find unique constraints of table, group them by constraint name and build TableUnique.\n                const tableUniqueConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.uniques = tableUniqueConstraints.map((constraint) => {\n                    const uniques = dbConstraints.filter(\n                        (dbC) =>\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                            constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableUnique({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\n                    })\n                })\n\n                // find check constraints of table, group them by constraint name and build TableCheck.\n                const tableCheckConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.checks = tableCheckConstraints\n                    .filter(\n                        (constraint) =>\n                            !this.isEnumCheckConstraint(\n                                constraint[\"CONSTRAINT_NAME\"],\n                            ),\n                    )\n                    .map((constraint) => {\n                        const checks = dbConstraints.filter(\n                            (dbC) =>\n                                dbC[\"CONSTRAINT_NAME\"] ===\n                                constraint[\"CONSTRAINT_NAME\"],\n                        )\n                        return new TableCheck({\n                            name: constraint[\"CONSTRAINT_NAME\"],\n                            columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                            expression: constraint[\"definition\"],\n                        })\n                    })\n\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys.filter(\n                        (dbForeignKey) =>\n                            dbForeignKey[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbForeignKey[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbForeignKey[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbForeignKey) => dbForeignKey[\"FK_NAME\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (dbForeignKey) => {\n                        const foreignKeys = dbForeignKeys.filter(\n                            (dbFk) =>\n                                dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"],\n                        )\n\n                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                        const db =\n                            dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase\n                                ? undefined\n                                : dbForeignKey[\"TABLE_CATALOG\"]\n                        const schema = getSchemaFromKey(\n                            dbForeignKey,\n                            \"REF_SCHEMA\",\n                        )\n                        const referencedTableName = this.driver.buildTableName(\n                            dbForeignKey[\"REF_TABLE\"],\n                            schema,\n                            db,\n                        )\n\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"FK_NAME\"],\n                            columnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\n                            ),\n                            referencedDatabase: dbForeignKey[\"TABLE_CATALOG\"],\n                            referencedSchema: dbForeignKey[\"REF_SCHEMA\"],\n                            referencedTableName: referencedTableName,\n                            referencedColumnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"REF_COLUMN\"],\n                            ),\n                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                        })\n                    },\n                )\n\n                // find index constraints of table, group them by constraint name and build TableIndex.\n                const tableIndexConstraints = OrmUtils.uniq(\n                    dbIndices.filter(\n                        (dbIndex) =>\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbIndex[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbIndex[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\n                )\n\n                table.indices = tableIndexConstraints.map((constraint) => {\n                    const indices = dbIndices.filter((index) => {\n                        return (\n                            index[\"TABLE_CATALOG\"] ===\n                                constraint[\"TABLE_CATALOG\"] &&\n                            index[\"TABLE_SCHEMA\"] ===\n                                constraint[\"TABLE_SCHEMA\"] &&\n                            index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                            index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\n                        )\n                    })\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: constraint[\"INDEX_NAME\"],\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                        isUnique: constraint[\"IS_UNIQUE\"],\n                        where: constraint[\"CONDITION\"],\n                    })\n                })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) =>\n                this.buildCreateColumnSql(table, column, false, true),\n            )\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name,\n                )\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                        }),\n                    )\n            })\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              table,\n                              unique.columnNames,\n                          )\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${uniquesSql}`\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n\n                    let constraint = `CONSTRAINT \"${\n                        fk.name\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\n\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      table,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `)`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n    ): Query {\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}`\n            : `DROP TABLE ${this.escapePath(tableOrName)}`\n        return new Query(query)\n    }\n\n    protected createViewSql(view: View): Query {\n        const parsedName = this.driver.parseTableName(view)\n\n        // Can't use `escapePath` here because `CREATE VIEW` does not accept database names.\n        const viewIdentifier = parsedName.schema\n            ? `\"${parsedName.schema}\".\"${parsedName.tableName}\"`\n            : `\"${parsedName.tableName}\"`\n\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view.expression}`,\n            )\n        } else {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view\n                    .expression(this.connection)\n                    .getQuery()}`,\n            )\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(view)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`)\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(\n        viewOrPath: View | string,\n    ): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(viewOrPath)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n        })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\n                index.name\n            }\" ON ${this.escapePath(table)} (${columns}) ${\n                index.where ? \"WHERE \" + index.where : \"\"\n            }`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(\n        table: Table,\n        indexOrName: TableIndex | string,\n    ): Query {\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(\n            `DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`,\n        )\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(\n        table: Table,\n        columnNames: string[],\n        constraintName?: string,\n    ): Query {\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\n        )\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map((column) => column.name)\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\n        )\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(\n        table: Table,\n        uniqueConstraint: TableUnique,\n    ): Query {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                uniqueConstraint.name\n            }\" UNIQUE (${columnNames})`,\n        )\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(\n        table: Table,\n        uniqueOrName: TableUnique | string,\n    ): Query {\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName.name\n            : uniqueOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\n        )\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck,\n    ): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                checkConstraint.name\n            }\" CHECK (${checkConstraint.expression})`,\n        )\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string,\n    ): Query {\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName.name\n            : checkOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${checkName}\"`,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\")\n        let sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                foreignKey.name\n            }\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )}(${referencedColumnNames})`\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\n            foreignKeyOrName,\n        )\n            ? foreignKeyOrName.name\n            : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\n        )\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        const { database, schema, tableName } =\n            this.driver.parseTableName(target)\n\n        if (database && database !== this.driver.database) {\n            if (schema && schema !== this.driver.searchSchema) {\n                return `\"${database}\".\"${schema}\".\"${tableName}\"`\n            }\n\n            return `\"${database}\"..\"${tableName}\"`\n        }\n\n        if (schema && schema !== this.driver.searchSchema) {\n            return `\"${schema}\".\"${tableName}\"`\n        }\n\n        return `\"${tableName}\"`\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(\n        fkName: string,\n        schemaName: string | undefined,\n        dbName: string | undefined,\n    ): string {\n        let joinedFkName = fkName\n        if (schemaName && schemaName !== this.driver.searchSchema)\n            joinedFkName = schemaName + \".\" + joinedFkName\n        if (dbName && dbName !== this.driver.database)\n            joinedFkName = dbName + \".\" + joinedFkName\n\n        return joinedFkName\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\") return defaultValue\n        const normalizedDefault = defaultValue.substr(\n            1,\n            defaultValue.lastIndexOf(\")\") - 1,\n        )\n        return this.removeParenthesisFromDefault(normalizedDefault)\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(\n        table: Table,\n        column: TableColumn,\n        skipIdentity: boolean,\n        createDefault: boolean,\n        skipEnum?: boolean,\n    ) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(\n            column,\n        )}`\n\n        if (!skipEnum && column.enum) {\n            const expression = this.getEnumExpression(column)\n            const checkName =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    expression,\n                    true,\n                )\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`\n        }\n\n        if (column.collation) c += \" COLLATE \" + column.collation\n\n        if (column.asExpression) {\n            c += ` AS (${column.asExpression})`\n            if (column.generatedType === \"STORED\") {\n                c += ` PERSISTED`\n\n                // NOT NULL can be specified for computed columns only if PERSISTED is also specified\n                if (column.isNullable !== true) c += \" NOT NULL\"\n            }\n        } else {\n            if (column.isNullable !== true) c += \" NOT NULL\"\n        }\n\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\" &&\n            !skipIdentity\n        )\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\"\n\n        if (\n            column.default !== undefined &&\n            column.default !== null &&\n            createDefault\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`\n        }\n\n        if (\n            column.isGenerated &&\n            column.generationStrategy === \"uuid\" &&\n            !column.default\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`\n        }\n        return c\n    }\n\n    private getEnumExpression(column: TableColumn) {\n        if (!column.enum) {\n            throw new Error(`Enum is not defined in column ${column.name}`)\n        }\n        return (\n            column.name +\n            \" IN (\" +\n            column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\n            \")\"\n        )\n    }\n\n    protected isEnumCheckConstraint(name: string): boolean {\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit\n            case \"bigint\":\n                return this.driver.mssql.BigInt\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params)\n            case \"float\":\n                return this.driver.mssql.Float\n            case \"int\":\n                return this.driver.mssql.Int\n            case \"money\":\n                return this.driver.mssql.Money\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params)\n            case \"smallint\":\n                return this.driver.mssql.SmallInt\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney\n            case \"real\":\n                return this.driver.mssql.Real\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt\n            case \"char\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.Char(...parameter.params)\n                }\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"text\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.Text\n                }\n                return this.driver.mssql.Ntext\n            case \"ntext\":\n                return this.driver.mssql.Ntext\n            case \"varchar\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.VarChar(...parameter.params)\n                }\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"xml\":\n                return this.driver.mssql.Xml\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params)\n            case \"date\":\n                return this.driver.mssql.Date\n            case \"datetime\":\n                return this.driver.mssql.DateTime\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params)\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params)\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier\n            case \"variant\":\n                return this.driver.mssql.Variant\n            case \"binary\":\n                return this.driver.mssql.Binary\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params)\n            case \"image\":\n                return this.driver.mssql.Image\n            case \"udt\":\n                return this.driver.mssql.UDT\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.d.ts b/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.d.ts
new file mode 100644
index 0000000..0c49fcd
--- /dev/null
+++ b/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.d.ts
@@ -0,0 +1,12 @@
+export interface AzureActiveDirectoryDefaultAuthentication {
+    /**
+     * This uses DefaultAzureCredential from @azure/identity to try multiple methods of authentication
+     */
+    type: "azure-active-directory-default";
+    options: {
+        /**
+         * The clientId of the user you want to log in with, mapped to the managedIdentityClientId in tedious
+         */
+        clientId?: string;
+    };
+}
diff --git a/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js b/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js
new file mode 100644
index 0000000..93a3a16
--- /dev/null
+++ b/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js
@@ -0,0 +1,3 @@
+export {};
+
+//# sourceMappingURL=AzureActiveDirectoryDefaultAuthentication.js.map
diff --git a/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js.map b/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js.map
new file mode 100644
index 0000000..06b9766
--- /dev/null
+++ b/node_modules/typeorm/browser/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../browser/src/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.ts"],"names":[],"mappings":"","file":"AzureActiveDirectoryDefaultAuthentication.js","sourcesContent":["export interface AzureActiveDirectoryDefaultAuthentication {\n    /**\n     * This uses DefaultAzureCredential from @azure/identity to try multiple methods of authentication\n     */\n    type: \"azure-active-directory-default\"\n    options: {\n        /**\n         * The clientId of the user you want to log in with, mapped to the managedIdentityClientId in tedious\n         */\n        clientId?: string\n    }\n}\n"],"sourceRoot":"../../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/driver/types/MappedColumnTypes.d.ts b/node_modules/typeorm/browser/driver/types/MappedColumnTypes.d.ts
index 08b5455..d96cb1a 100644
--- a/node_modules/typeorm/browser/driver/types/MappedColumnTypes.d.ts
+++ b/node_modules/typeorm/browser/driver/types/MappedColumnTypes.d.ts
@@ -1,4 +1,4 @@
-import { ColumnType } from "./ColumnTypes";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
 /**
  * Orm has special columns and we need to know what database column types should be for those types.
  * Column types are driver dependant.
diff --git a/node_modules/typeorm/browser/entity-manager/EntityManager.d.ts b/node_modules/typeorm/browser/entity-manager/EntityManager.d.ts
index b9dfda3..939adde 100644
--- a/node_modules/typeorm/browser/entity-manager/EntityManager.d.ts
+++ b/node_modules/typeorm/browser/entity-manager/EntityManager.d.ts
@@ -1,27 +1,27 @@
-import { DataSource } from "../data-source/DataSource";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectType } from "../common/ObjectType";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { DeepPartial } from "../common/DeepPartial";
-import { RemoveOptions } from "../repository/RemoveOptions";
-import { SaveOptions } from "../repository/SaveOptions";
-import { MongoRepository } from "../repository/MongoRepository";
-import { TreeRepository } from "../repository/TreeRepository";
-import { Repository } from "../repository/Repository";
-import { PlainObjectToNewEntityTransformer } from "../query-builder/transformer/PlainObjectToNewEntityTransformer";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { ObjectId } from "../driver/mongodb/typings";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { IsolationLevel } from "../driver/types/IsolationLevel";
-import { UpsertOptions } from "../repository/UpsertOptions";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { PickKeysByType } from "../common/PickKeysByType";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { FindManyOptions } from "typeorm/browser/find-options/FindManyOptions";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { FindOneOptions } from "typeorm/browser/find-options/FindOneOptions";
+import { DeepPartial } from "typeorm/browser/common/DeepPartial";
+import { RemoveOptions } from "typeorm/browser/repository/RemoveOptions";
+import { SaveOptions } from "typeorm/browser/repository/SaveOptions";
+import { MongoRepository } from "typeorm/browser/repository/MongoRepository";
+import { TreeRepository } from "typeorm/browser/repository/TreeRepository";
+import { Repository } from "typeorm/browser/repository/Repository";
+import { PlainObjectToNewEntityTransformer } from "typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { QueryDeepPartialEntity } from "typeorm/browser/query-builder/QueryPartialEntity";
+import { ObjectId } from "typeorm/browser/driver/mongodb/typings";
+import { InsertResult } from "typeorm/browser/query-builder/result/InsertResult";
+import { UpdateResult } from "typeorm/browser/query-builder/result/UpdateResult";
+import { DeleteResult } from "typeorm/browser/query-builder/result/DeleteResult";
+import { FindOptionsWhere } from "typeorm/browser/find-options/FindOptionsWhere";
+import { IsolationLevel } from "typeorm/browser/driver/types/IsolationLevel";
+import { UpsertOptions } from "typeorm/browser/repository/UpsertOptions";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { PickKeysByType } from "typeorm/browser/common/PickKeysByType";
 /**
  * Entity manager supposed to work with any entity, automatically find its repository and call its methods,
  * whatever entity type are you passing.
diff --git a/node_modules/typeorm/browser/entity-manager/EntityManager.js b/node_modules/typeorm/browser/entity-manager/EntityManager.js
index 1f73195..a18145f 100644
--- a/node_modules/typeorm/browser/entity-manager/EntityManager.js
+++ b/node_modules/typeorm/browser/entity-manager/EntityManager.js
@@ -503,9 +503,13 @@ export class EntityManager {
     }
     async callAggregateFun(entityClass, fnName, columnName, where = {}) {
         const metadata = this.connection.getMetadata(entityClass);
+        const column = metadata.columns.find((item) => item.propertyPath === columnName);
+        if (!column) {
+            throw new TypeORMError(`Column "${columnName}" was not found in table "${metadata.name}"`);
+        }
         const result = await this.createQueryBuilder(entityClass, metadata.name)
             .setFindOptions({ where })
-            .select(`${fnName}(${this.connection.driver.escape(String(columnName))})`, fnName)
+            .select(`${fnName}(${this.connection.driver.escape(column.databaseName)})`, fnName)
             .getRawOne();
         return result[fnName] === null ? null : parseFloat(result[fnName]);
     }
diff --git a/node_modules/typeorm/browser/entity-manager/EntityManager.js.map b/node_modules/typeorm/browser/entity-manager/EntityManager.js.map
index 3a63926..c331322 100644
--- a/node_modules/typeorm/browser/entity-manager/EntityManager.js.map
+++ b/node_modules/typeorm/browser/entity-manager/EntityManager.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/entity-manager/EntityManager.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,mBAAmB,EAAE,MAAM,8BAA8B,CAAA;AAClE,OAAO,EAAE,uCAAuC,EAAE,MAAM,kDAAkD,CAAA;AAK1G,OAAO,EAAE,iCAAiC,EAAE,MAAM,4CAA4C,CAAA;AAC9F,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAA;AAC/D,OAAO,EAAE,cAAc,EAAE,MAAM,8BAA8B,CAAA;AAC7D,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAA;AACrD,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAA;AACnE,OAAO,EAAE,iCAAiC,EAAE,MAAM,gEAAgE,CAAA;AAClH,OAAO,EAAE,sCAAsC,EAAE,MAAM,qEAAqE,CAAA;AAC5H,OAAO,EACH,4CAA4C,EAC5C,6BAA6B,EAC7B,+BAA+B,EAC/B,YAAY,GACf,MAAM,UAAU,CAAA;AACjB,OAAO,EAAE,kBAAkB,EAAE,MAAM,kCAAkC,CAAA;AAIrE,OAAO,EAAE,qBAAqB,EAAE,MAAM,sCAAsC,CAAA;AAO5E,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACjD,OAAO,EAAE,sBAAsB,EAAE,MAAM,YAAY,CAAA;AAEnD,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAIzD;;;GAGG;AACH,MAAM,OAAO,aAAa;IAuCtB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,UAAsB,EAAE,WAAyB;QA1CpD,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,CAAA;QAiBpD,4EAA4E;QAC5E,uBAAuB;QACvB,4EAA4E;QAE5E;;;WAGG;QACO,iBAAY,GAAG,IAAI,GAAG,EAAsC,CAAA;QAEtE;;WAEG;QACO,qBAAgB,GAA0B,EAAE,CAAA;QAEtD;;WAEG;QACO,mCAA8B,GACpC,IAAI,iCAAiC,EAAE,CAAA;QAOvC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAA;QAC5B,IAAI,WAAW,EAAE;YACb,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;YAC9B,uCAAuC;YACvC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAA;SAC1D;IACL,CAAC;IAuBD;;;OAGG;IACH,KAAK,CAAC,WAAW,CACb,2BAEoD,EACpD,qBAAoE;QAEpE,MAAM,SAAS,GACX,OAAO,2BAA2B,KAAK,QAAQ;YAC3C,CAAC,CAAC,2BAA2B;YAC7B,CAAC,CAAC,SAAS,CAAA;QACnB,MAAM,gBAAgB,GAClB,OAAO,2BAA2B,KAAK,UAAU;YAC7C,CAAC,CAAC,2BAA2B;YAC7B,CAAC,CAAC,qBAAqB,CAAA;QAE/B,IAAI,CAAC,gBAAgB,EAAE;YACnB,MAAM,IAAI,YAAY,CAClB,0FAA0F,CAC7F,CAAA;SACJ;QAED,IAAI,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,WAAW,CAAC,UAAU;YAC/C,MAAM,IAAI,uCAAuC,EAAE,CAAA;QAEvD,6HAA6H;QAC7H,6GAA6G;QAC7G,MAAM,WAAW,GACb,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAA;QAE3D,IAAI;YACA,MAAM,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAA;YAC7C,MAAM,MAAM,GAAG,MAAM,gBAAgB,CAAC,WAAW,CAAC,OAAO,CAAC,CAAA;YAC1D,MAAM,WAAW,CAAC,iBAAiB,EAAE,CAAA;YACrC,OAAO,MAAM,CAAA;SAChB;QAAC,OAAO,GAAG,EAAE;YACV,IAAI;gBACA,2DAA2D;gBAC3D,MAAM,WAAW,CAAC,mBAAmB,EAAE,CAAA;aAC1C;YAAC,OAAO,aAAa,EAAE,GAAE;YAC1B,MAAM,GAAG,CAAA;SACZ;gBAAS;YACN,IAAI,CAAC,IAAI,CAAC,WAAW;gBACjB,yDAAyD;gBACzD,MAAM,WAAW,CAAC,OAAO,EAAE,CAAA;SAClC;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK,CAAU,KAAa,EAAE,UAAkB;QAClD,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;IACrE,CAAC;IAgBD;;OAEG;IACH,kBAAkB,CACd,WAAgD,EAChD,KAAc,EACd,WAAyB;QAEzB,IAAI,KAAK,EAAE;YACP,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CACrC,WAAmC,EACnC,KAAK,EACL,WAAW,IAAI,IAAI,CAAC,WAAW,CAClC,CAAA;SACJ;aAAM;YACH,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CACpC,WAAuC;gBACpC,WAAW;gBACX,IAAI,CAAC,WAAW,CACvB,CAAA;SACJ;IACL,CAAC;IAYD;;OAEG;IACH,KAAK,CAAC,cAAuC,EAAE,WAAiB;QAC5D,MAAM,MAAM,GACR,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,WAAW,CAAA;QACxE,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAA;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;QACpD,OAAO,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;IACjC,CAAC;IAYD;;OAEG;IACH,KAAK,CAAC,cAAuC,EAAE,WAAiB;QAC5D,MAAM,MAAM,GACR,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,WAAW,CAAA;QACxE,MAAM,MAAM,GAAG,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,cAAc,CAAA;QACpE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;QACpD,OAAO,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAA;IAC/C,CAAC;IAoBD;;;OAGG;IACH,MAAM,CACF,WAAiC,EACjC,oBAAkE;QAElE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QAEzD,IAAI,CAAC,oBAAoB;YAAE,OAAO,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QAEnE,IAAI,KAAK,CAAC,OAAO,CAAC,oBAAoB,CAAC;YACnC,OAAQ,oBAA8C,CAAC,GAAG,CACtD,CAAC,eAAe,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE,eAAe,CAAC,CACjE,CAAA;QAEL,MAAM,eAAe,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;QACzD,IAAI,CAAC,8BAA8B,CAAC,SAAS,CACzC,eAAe,EACf,oBAAoB,EACpB,QAAQ,EACR,IAAI,CACP,CAAA;QACD,OAAO,eAAe,CAAA;IAC1B,CAAC;IAED;;OAEG;IACH,KAAK,CACD,WAAiC,EACjC,eAAuB,EACvB,GAAG,WAAkC;QAErC,sDAAsD;QACtD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAC3B,IAAI,CAAC,8BAA8B,CAAC,SAAS,CACzC,eAAe,EACf,MAAM,EACN,QAAQ,CACX,CACJ,CAAA;QACD,OAAO,eAAe,CAAA;IAC1B,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,OAAO,CACT,WAAiC,EACjC,UAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,MAAM,sCAAsC,GACxC,IAAI,sCAAsC,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAA;QACvE,MAAM,iBAAiB,GACnB,MAAM,sCAAsC,CAAC,SAAS,CAClD,UAAU,EACV,QAAQ,CACX,CAAA;QACL,IAAI,iBAAiB;YACjB,OAAO,IAAI,CAAC,KAAK,CACb,WAAkB,EAClB,iBAA2B,EAC3B,UAAU,CACb,CAAA;QAEL,OAAO,SAAS,CAAA;IACpB,CAAC;IAsDD;;OAEG;IACH,IAAI,CACA,cAAgD,EAChD,oBAA8B,EAC9B,YAA0B;QAE1B,6BAA6B;QAC7B,IAAI,MAAM,GACN,SAAS,CAAC,MAAM,GAAG,CAAC;YACpB,CAAC,OAAO,cAAc,KAAK,UAAU;gBACjC,eAAe,CAAC,cAAc,CAAC,cAAc,CAAC;gBAC9C,OAAO,cAAc,KAAK,QAAQ,CAAC;YACnC,CAAC,CAAE,cAAoC;YACvC,CAAC,CAAC,SAAS,CAAA;QACnB,MAAM,MAAM,GAAY,MAAM;YAC1B,CAAC,CAAE,oBAAgC;YACnC,CAAC,CAAE,cAA0B,CAAA;QACjC,MAAM,OAAO,GAAG,MAAM;YAClB,CAAC,CAAC,YAAY;YACd,CAAC,CAAE,oBAAoC,CAAA;QAE3C,IAAI,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC;YAAE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;QAExE,2EAA2E;QAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAElC,yBAAyB;QACzB,OAAO,IAAI,qBAAqB,CAC5B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,EAChB,MAAM,EACN,MAAM,EACN,MAAM,EACN,OAAO,CACV;aACI,OAAO,EAAE;aACT,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAA;IAC3B,CAAC;IA8BD;;OAEG;IACH,MAAM,CACF,cAA0D,EAC1D,oBAAwC,EACxC,YAA4B;QAE5B,6BAA6B;QAC7B,MAAM,MAAM,GACR,SAAS,CAAC,MAAM,GAAG,CAAC;YACpB,CAAC,OAAO,cAAc,KAAK,UAAU;gBACjC,eAAe,CAAC,cAAc,CAAC,cAAc,CAAC;gBAC9C,OAAO,cAAc,KAAK,QAAQ,CAAC;YACnC,CAAC,CAAE,cAAoC;YACvC,CAAC,CAAC,SAAS,CAAA;QACnB,MAAM,MAAM,GAAsB,MAAM;YACpC,CAAC,CAAE,oBAA0C;YAC7C,CAAC,CAAE,cAAoC,CAAA;QAC3C,MAAM,OAAO,GAAG,MAAM;YAClB,CAAC,CAAC,YAAY;YACd,CAAC,CAAE,oBAAoC,CAAA;QAE3C,2EAA2E;QAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAElC,yBAAyB;QACzB,OAAO,IAAI,qBAAqB,CAC5B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,EAChB,QAAQ,EACR,MAAM,EACN,MAAM,EACN,OAAO,CACV;aACI,OAAO,EAAE;aACT,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAA;IAC3B,CAAC;IAiCD;;OAEG;IACH,UAAU,CACN,cAAgD,EAChD,oBAA8B,EAC9B,YAA0B;QAE1B,6BAA6B;QAC7B,IAAI,MAAM,GACN,SAAS,CAAC,MAAM,GAAG,CAAC;YACpB,CAAC,OAAO,cAAc,KAAK,UAAU;gBACjC,eAAe,CAAC,cAAc,CAAC,cAAc,CAAC;gBAC9C,OAAO,cAAc,KAAK,QAAQ,CAAC;YACnC,CAAC,CAAE,cAAoC;YACvC,CAAC,CAAC,SAAS,CAAA;QACnB,MAAM,MAAM,GAAY,MAAM;YAC1B,CAAC,CAAE,oBAAgC;YACnC,CAAC,CAAE,cAA0B,CAAA;QACjC,MAAM,OAAO,GAAG,MAAM;YAClB,CAAC,CAAC,YAAY;YACd,CAAC,CAAE,oBAAoC,CAAA;QAE3C,IAAI,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC;YAAE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;QAExE,2EAA2E;QAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAElC,gCAAgC;QAChC,OAAO,IAAI,qBAAqB,CAC5B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,EAChB,aAAa,EACb,MAAM,EACN,MAAM,EACN,OAAO,CACV;aACI,OAAO,EAAE;aACT,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAA;IAC3B,CAAC;IAiCD;;OAEG;IACH,OAAO,CACH,cAAgD,EAChD,oBAA8B,EAC9B,YAA0B;QAE1B,6BAA6B;QAC7B,IAAI,MAAM,GACN,SAAS,CAAC,MAAM,GAAG,CAAC;YACpB,CAAC,OAAO,cAAc,KAAK,UAAU;gBACjC,eAAe,CAAC,cAAc,CAAC,cAAc,CAAC;gBAC9C,OAAO,cAAc,KAAK,QAAQ,CAAC;YACnC,CAAC,CAAE,cAAoC;YACvC,CAAC,CAAC,SAAS,CAAA;QACnB,MAAM,MAAM,GAAY,MAAM;YAC1B,CAAC,CAAE,oBAAgC;YACnC,CAAC,CAAE,cAA0B,CAAA;QACjC,MAAM,OAAO,GAAG,MAAM;YAClB,CAAC,CAAC,YAAY;YACd,CAAC,CAAE,oBAAoC,CAAA;QAE3C,IAAI,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC;YAAE,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAA;QAExE,2EAA2E;QAC3E,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC;YAC5C,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAA;QAElC,4BAA4B;QAC5B,OAAO,IAAI,qBAAqB,CAC5B,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,EAChB,SAAS,EACT,MAAM,EACN,MAAM,EACN,OAAO,CACV;aACI,OAAO,EAAE;aACT,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,CAAA;IAC3B,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,MAAM,CACR,MAA4B,EAC5B,MAEsC;QAEtC,OAAO,IAAI,CAAC,kBAAkB,EAAE;aAC3B,MAAM,EAAE;aACR,IAAI,CAAC,MAAM,CAAC;aACZ,MAAM,CAAC,MAAM,CAAC;aACd,OAAO,EAAE,CAAA;IAClB,CAAC;IAED,KAAK,CAAC,MAAM,CACR,MAA4B,EAC5B,gBAEsC,EACtC,sBAAwD;QAExD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;QAEpD,IAAI,OAA8B,CAAA;QAElC,IAAI,KAAK,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE;YACvC,OAAO,GAAG;gBACN,aAAa,EAAE,sBAAsB;aACxC,CAAA;SACJ;aAAM;YACH,OAAO,GAAG,sBAAsB,CAAA;SACnC;QAED,IAAI,QAA0C,CAAA;QAE9C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;YAClC,QAAQ,GAAG,CAAC,gBAAgB,CAAC,CAAA;SAChC;aAAM;YACH,QAAQ,GAAG,gBAAgB,CAAA;SAC9B;QAED,MAAM,eAAe,GAAG,QAAQ,CAAC,yBAAyB,CACtD,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC;YAChC,CAAC,CAAC,OAAO,CAAC,aAAa;YACvB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,CAC3C,CAAA;QAED,MAAM,gBAAgB,GAAG,QAAQ,CAAC,OAAO,CAAC,MAAM,CAC5C,CAAC,GAAG,EAAE,EAAE,CACJ,CAAC,eAAe,CAAC,QAAQ,CAAC,GAAG,CAAC;YAC9B,QAAQ,CAAC,IAAI,CACT,CAAC,MAAM,EAAE,EAAE,CACP,OAAO,GAAG,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,WAAW,CACxD,CACR,CAAA;QAED,OAAO,IAAI,CAAC,kBAAkB,EAAE;aAC3B,MAAM,EAAE;aACR,IAAI,CAAC,MAAM,CAAC;aACZ,MAAM,CAAC,QAAQ,CAAC;aAChB,QAAQ,CACL,CAAC,GAAG,eAAe,EAAE,GAAG,gBAAgB,CAAC,CAAC,GAAG,CACzC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAC5B,EACD,eAAe,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,EAC9C;YACI,2BAA2B,EACvB,OAAO,CAAC,2BAA2B;YACvC,cAAc,EAAE,OAAO,CAAC,cAAc;YACtC,UAAU,EACN,OAAO,CAAC,UAAU;gBAClB,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;SACrD,CACJ;aACA,OAAO,EAAE,CAAA;IAClB,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CACF,MAA4B,EAC5B,QASS,EACT,aAA6C;QAE7C,gFAAgF;QAChF,IACI,QAAQ,KAAK,SAAS;YACtB,QAAQ,KAAK,IAAI;YACjB,QAAQ,KAAK,EAAE;YACf,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,EACpD;YACE,OAAO,OAAO,CAAC,MAAM,CACjB,IAAI,YAAY,CACZ,0DAA0D,CAC7D,CACJ,CAAA;SACJ;QAED,IACI,OAAO,QAAQ,KAAK,QAAQ;YAC5B,OAAO,QAAQ,KAAK,QAAQ;YAC5B,QAAQ,YAAY,IAAI;YACxB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EACzB;YACE,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,MAAM,CAAC,MAAM,CAAC;iBACd,GAAG,CAAC,aAAa,CAAC;iBAClB,UAAU,CAAC,QAAQ,CAAC;iBACpB,OAAO,EAAE,CAAA;SACjB;aAAM;YACH,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,MAAM,CAAC,MAAM,CAAC;iBACd,GAAG,CAAC,aAAa,CAAC;iBAClB,KAAK,CAAC,QAAQ,CAAC;iBACf,OAAO,EAAE,CAAA;SACjB;IACL,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CACF,cAAoC,EACpC,QASS;QAET,gFAAgF;QAChF,IACI,QAAQ,KAAK,SAAS;YACtB,QAAQ,KAAK,IAAI;YACjB,QAAQ,KAAK,EAAE;YACf,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,EACpD;YACE,OAAO,OAAO,CAAC,MAAM,CACjB,IAAI,YAAY,CACZ,0DAA0D,CAC7D,CACJ,CAAA;SACJ;QAED,IACI,OAAO,QAAQ,KAAK,QAAQ;YAC5B,OAAO,QAAQ,KAAK,QAAQ;YAC5B,QAAQ,YAAY,IAAI;YACxB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EACzB;YACE,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,MAAM,EAAE;iBACR,IAAI,CAAC,cAAc,CAAC;iBACpB,UAAU,CAAC,QAAQ,CAAC;iBACpB,OAAO,EAAE,CAAA;SACjB;aAAM;YACH,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,MAAM,EAAE;iBACR,IAAI,CAAC,cAAc,CAAC;iBACpB,KAAK,CAAC,QAAQ,CAAC;iBACf,OAAO,EAAE,CAAA;SACjB;IACL,CAAC;IAED;;;;;;OAMG;IACH,UAAU,CACN,cAAoC,EACpC,QASS;QAET,gFAAgF;QAChF,IACI,QAAQ,KAAK,SAAS;YACtB,QAAQ,KAAK,IAAI;YACjB,QAAQ,KAAK,EAAE;YACf,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,EACpD;YACE,OAAO,OAAO,CAAC,MAAM,CACjB,IAAI,YAAY,CACZ,0DAA0D,CAC7D,CACJ,CAAA;SACJ;QAED,IACI,OAAO,QAAQ,KAAK,QAAQ;YAC5B,OAAO,QAAQ,KAAK,QAAQ;YAC5B,QAAQ,YAAY,IAAI;YACxB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EACzB;YACE,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,UAAU,EAAE;iBACZ,IAAI,CAAC,cAAc,CAAC;iBACpB,UAAU,CAAC,QAAQ,CAAC;iBACpB,OAAO,EAAE,CAAA;SACjB;aAAM;YACH,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,UAAU,EAAE;iBACZ,IAAI,CAAC,cAAc,CAAC;iBACpB,KAAK,CAAC,QAAQ,CAAC;iBACf,OAAO,EAAE,CAAA;SACjB;IACL,CAAC;IAED;;;;;;OAMG;IACH,OAAO,CACH,cAAoC,EACpC,QASS;QAET,gFAAgF;QAChF,IACI,QAAQ,KAAK,SAAS;YACtB,QAAQ,KAAK,IAAI;YACjB,QAAQ,KAAK,EAAE;YACf,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,EACpD;YACE,OAAO,OAAO,CAAC,MAAM,CACjB,IAAI,YAAY,CACZ,0DAA0D,CAC7D,CACJ,CAAA;SACJ;QAED,IACI,OAAO,QAAQ,KAAK,QAAQ;YAC5B,OAAO,QAAQ,KAAK,QAAQ;YAC5B,QAAQ,YAAY,IAAI;YACxB,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EACzB;YACE,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,OAAO,EAAE;iBACT,IAAI,CAAC,cAAc,CAAC;iBACpB,UAAU,CAAC,QAAQ,CAAC;iBACpB,OAAO,EAAE,CAAA;SACjB;aAAM;YACH,OAAO,IAAI,CAAC,kBAAkB,EAAE;iBAC3B,OAAO,EAAE;iBACT,IAAI,CAAC,cAAc,CAAC;iBACpB,KAAK,CAAC,QAAQ,CAAC;iBACf,OAAO,EAAE,CAAA;SACjB;IACL,CAAC;IAED;;OAEG;IACH,MAAM,CACF,WAAiC,EACjC,OAAiC;QAEjC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,WAAW,EACX,gBAAgB,CAAC,2BAA2B,CAAC,OAAO,CAAC;YACjD,QAAQ,CAAC,IAAI,CACpB;aACI,cAAc,CAAC,OAAO,IAAI,EAAE,CAAC;aAC7B,SAAS,EAAE,CAAA;IACpB,CAAC;IAED;;;OAGG;IACH,KAAK,CACD,WAAiC,EACjC,OAAiC;QAEjC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,WAAW,EACX,gBAAgB,CAAC,2BAA2B,CAAC,OAAO,CAAC;YACjD,QAAQ,CAAC,IAAI,CACpB;aACI,cAAc,CAAC,OAAO,IAAI,EAAE,CAAC;aAC7B,QAAQ,EAAE,CAAA;IACnB,CAAC;IAED;;;OAGG;IACH,OAAO,CACH,WAAiC,EACjC,KAA4D;QAE5D,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC;aACrD,cAAc,CAAC,EAAE,KAAK,EAAE,CAAC;aACzB,QAAQ,EAAE,CAAA;IACnB,CAAC;IAED;;OAEG;IACH,GAAG,CACC,WAAiC,EACjC,UAA0C,EAC1C,KAA6D;QAE7D,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAA;IACvE,CAAC;IAED;;OAEG;IACH,OAAO,CACH,WAAiC,EACjC,UAA0C,EAC1C,KAA6D;QAE7D,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAA;IACvE,CAAC;IAED;;OAEG;IACH,OAAO,CACH,WAAiC,EACjC,UAA0C,EAC1C,KAA6D;QAE7D,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAA;IACvE,CAAC;IAED;;OAEG;IACH,OAAO,CACH,WAAiC,EACjC,UAA0C,EAC1C,KAA6D;QAE7D,OAAO,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,KAAK,EAAE,UAAU,EAAE,KAAK,CAAC,CAAA;IACvE,CAAC;IAEO,KAAK,CAAC,gBAAgB,CAC1B,WAAiC,EACjC,MAAqC,EACrC,UAA0C,EAC1C,QAA+D,EAAE;QAEjE,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,kBAAkB,CAAC,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC;aACnE,cAAc,CAAC,EAAE,KAAK,EAAE,CAAC;aACzB,MAAM,CACH,GAAG,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CACtC,MAAM,CAAC,UAAU,CAAC,CACrB,GAAG,EACJ,MAAM,CACT;aACA,SAAS,EAAE,CAAA;QAChB,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;IACtE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,IAAI,CACN,WAAiC,EACjC,OAAiC;QAEjC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,WAAkB,EAClB,gBAAgB,CAAC,2BAA2B,CAAC,OAAO,CAAC;YACjD,QAAQ,CAAC,IAAI,CACpB;aACI,cAAc,CAAC,OAAO,IAAI,EAAE,CAAC;aAC7B,OAAO,EAAE,CAAA;IAClB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CACR,WAAiC,EACjC,KAA4D;QAE5D,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,WAAkB,EAClB,QAAQ,CAAC,IAAI,CAChB;aACI,cAAc,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;aAChC,OAAO,EAAE,CAAA;IAClB,CAAC;IAED;;;;OAIG;IACH,YAAY,CACR,WAAiC,EACjC,OAAiC;QAEjC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,WAAkB,EAClB,gBAAgB,CAAC,2BAA2B,CAAC,OAAO,CAAC;YACjD,QAAQ,CAAC,IAAI,CACpB;aACI,cAAc,CAAC,OAAO,IAAI,EAAE,CAAC;aAC7B,eAAe,EAAE,CAAA;IAC1B,CAAC;IAED;;;;OAIG;IACH,cAAc,CACV,WAAiC,EACjC,KAA4D;QAE5D,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,WAAkB,EAClB,QAAQ,CAAC,IAAI,CAChB;aACI,cAAc,CAAC,EAAE,KAAK,EAAE,CAAC;aACzB,eAAe,EAAE,CAAA;IAC1B,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,SAAS,CACX,WAAiC,EACjC,GAAU;QAEV,sFAAsF;QACtF,IAAI,CAAC,GAAG,CAAC,MAAM;YAAE,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAA;QAE3C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,OAAO,IAAI,CAAC,kBAAkB,CAC1B,WAAkB,EAClB,QAAQ,CAAC,IAAI,CAChB;aACI,aAAa,CAAC,GAAG,CAAC;aAClB,OAAO,EAAE,CAAA;IAClB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAO,CACT,WAAiC,EACjC,OAA+B;QAE/B,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QAEzD,gCAAgC;QAChC,IAAI,KAAK,GAAW,QAAQ,CAAC,IAAI,CAAA;QACjC,IAAI,OAAO,IAAI,OAAO,CAAC,IAAI,EAAE;YACzB,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAA;SAC7B;QAED,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YAChB,MAAM,IAAI,KAAK,CACX,sEAAsE,CACzE,CAAA;SACJ;QAED,8CAA8C;QAC9C,OAAO,IAAI,CAAC,kBAAkB,CAAS,WAAW,EAAE,KAAK,CAAC;aACrD,cAAc,CAAC;YACZ,GAAG,OAAO;YACV,IAAI,EAAE,CAAC;SACV,CAAC;aACD,MAAM,EAAE,CAAA;IACjB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,SAAS,CACX,WAAiC,EACjC,KAA4D;QAE5D,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QAEzD,8CAA8C;QAC9C,OAAO,IAAI,CAAC,kBAAkB,CAAS,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC;aAC7D,cAAc,CAAC;YACZ,KAAK;YACL,IAAI,EAAE,CAAC;SACV,CAAC;aACD,MAAM,EAAE,CAAA;IACjB,CAAC;IAED;;;;;;;;;OASG;IACH,KAAK,CAAC,WAAW,CACb,WAAiC,EACjC,EAAqC;QAErC,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QAEzD,8CAA8C;QAC9C,OAAO,IAAI,CAAC,kBAAkB,CAAS,WAAW,EAAE,QAAQ,CAAC,IAAI,CAAC;aAC7D,cAAc,CAAC;YACZ,IAAI,EAAE,CAAC;SACV,CAAC;aACD,UAAU,CAAC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;aAC1C,MAAM,EAAE,CAAA;IACjB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,aAAa,CACf,WAAiC,EACjC,OAA+B;QAE/B,OAAO,IAAI,CAAC,OAAO,CAAS,WAAkB,EAAE,OAAO,CAAC,CAAC,IAAI,CACzD,CAAC,KAAK,EAAE,EAAE;YACN,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,OAAO,OAAO,CAAC,MAAM,CACjB,IAAI,mBAAmB,CAAC,WAAW,EAAE,OAAO,CAAC,CAChD,CAAA;aACJ;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACjC,CAAC,CACJ,CAAA;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,eAAe,CACjB,WAAiC,EACjC,KAA4D;QAE5D,OAAO,IAAI,CAAC,SAAS,CAAS,WAAkB,EAAE,KAAK,CAAC,CAAC,IAAI,CACzD,CAAC,KAAK,EAAE,EAAE;YACN,IAAI,KAAK,KAAK,IAAI,EAAE;gBAChB,OAAO,OAAO,CAAC,MAAM,CACjB,IAAI,mBAAmB,CAAC,WAAW,EAAE,KAAK,CAAC,CAC9C,CAAA;aACJ;YACD,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAA;QACjC,CAAC,CACJ,CAAA;IACL,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,KAAK,CAAS,WAAiC;QACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,MAAM,WAAW,GACb,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAA;QAC3D,IAAI;YACA,OAAO,MAAM,WAAW,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA,CAAC,oDAAoD;SAC/G;gBAAS;YACN,IAAI,CAAC,IAAI,CAAC,WAAW;gBAAE,MAAM,WAAW,CAAC,OAAO,EAAE,CAAA;SACrD;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACX,WAAiC,EACjC,UAAe,EACf,YAAoB,EACpB,KAAsB;QAEtB,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,0BAA0B,CAAC,YAAY,CAAC,CAAA;QAChE,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,YAAY,CAClB,UAAU,YAAY,qBAAqB,QAAQ,CAAC,UAAU,UAAU,CAC3E,CAAA;QAEL,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACpB,MAAM,IAAI,YAAY,CAAC,UAAU,KAAK,oBAAoB,CAAC,CAAA;QAE/D,6FAA6F;QAC7F,MAAM,MAAM,GAAmC,YAAY;aACtD,KAAK,CAAC,GAAG,CAAC;aACV,WAAW,CACR,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAU,CAAA,EACzC,GAAG,EAAE,CACD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;YAClD,KAAK;YACL,KAAK,CACZ,CAAA;QAEL,OAAO,IAAI,CAAC,kBAAkB,CAAS,WAAkB,EAAE,QAAQ,CAAC;aAC/D,MAAM,CAAC,WAAW,CAAC;aACnB,GAAG,CAAC,MAAM,CAAC;aACX,KAAK,CAAC,UAAU,CAAC;aACjB,OAAO,EAAE,CAAA;IAClB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACX,WAAiC,EACjC,UAAe,EACf,YAAoB,EACpB,KAAsB;QAEtB,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,CAAA;QACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,0BAA0B,CAAC,YAAY,CAAC,CAAA;QAChE,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,YAAY,CAClB,UAAU,YAAY,qBAAqB,QAAQ,CAAC,UAAU,UAAU,CAC3E,CAAA;QAEL,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACpB,MAAM,IAAI,YAAY,CAAC,UAAU,KAAK,oBAAoB,CAAC,CAAA;QAE/D,6FAA6F;QAC7F,MAAM,MAAM,GAAmC,YAAY;aACtD,KAAK,CAAC,GAAG,CAAC;aACV,WAAW,CACR,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,KAAK,EAAU,CAAA,EACzC,GAAG,EAAE,CACD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC;YAClD,KAAK;YACL,KAAK,CACZ,CAAA;QAEL,OAAO,IAAI,CAAC,kBAAkB,CAAS,WAAkB,EAAE,QAAQ,CAAC;aAC/D,MAAM,CAAC,WAAW,CAAC;aACnB,GAAG,CAAC,MAAM,CAAC;aACX,KAAK,CAAC,UAAU,CAAC;aACjB,OAAO,EAAE,CAAA;IAClB,CAAC;IAED;;;;;OAKG;IACH,aAAa,CACT,MAA4B;QAE5B,kEAAkE;QAClE,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAA;QACjD,IAAI,WAAW;YAAE,OAAO,WAAW,CAAA;QAEnC,+EAA+E;QAC/E,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;YACnD,MAAM,aAAa,GAAG,IAAI,eAAe,CACrC,MAAM,EACN,IAAI,EACJ,IAAI,CAAC,WAAW,CACnB,CAAA;YACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;YAC5C,OAAO,aAAa,CAAA;SACvB;aAAM;YACH,MAAM,aAAa,GAAG,IAAI,UAAU,CAChC,MAAM,EACN,IAAI,EACJ,IAAI,CAAC,WAAW,CACnB,CAAA;YACD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,aAAa,CAAC,CAAA;YAC5C,OAAO,aAAa,CAAA;SACvB;IACL,CAAC;IAED;;;;;OAKG;IACH,iBAAiB,CACb,MAA4B;QAE5B,yDAAyD;QACzD,IAAI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,WAAW,KAAK,KAAK;YAC5C,MAAM,IAAI,+BAA+B,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAA;QAErE,kEAAkE;QAClE,MAAM,UAAU,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CACzC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,MAAM,CAC/C,CAAA;QACD,IAAI,UAAU;YAAE,OAAO,UAAU,CAAA;QAEjC,8CAA8C;QAC9C,MAAM,aAAa,GAAG,IAAI,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;QACxE,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAA;QACzC,OAAO,aAAa,CAAA;IACxB,CAAC;IAED;;OAEG;IACH,kBAAkB,CACd,MAA4B;QAE5B,OAAO,IAAI,CAAC,UAAU,CAAC,kBAAkB,CAAS,MAAM,CAAC,CAAA;IAC7D,CAAC;IAED;;;;OAIG;IACH,cAAc,CACV,UAAkC;QAElC,MAAM,qBAAqB,GACvB,UAAU,CAAC,WAAgC,CAAA;QAC/C,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,yBAAyB,EAAE,GAChE,UAAU,CAAA;QACd,OAAO,MAAM,CAAC,MAAM,CAChB,IAAI,qBAAqB,CAAC,UAAU,CAAC,MAAM,EAAE,IAAI,CAAM,EACvD;YACI,GAAG,yBAAyB;SAC/B,CACJ,CAAA;IACL,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAI,gBAA+B;QAClD,MAAM,4BAA4B,GAC9B,sBAAsB,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;YAC5D,OAAO,CACH,UAAU,CAAC,MAAM;gBACjB,CAAC,OAAO,gBAAgB,KAAK,UAAU;oBACnC,CAAC,CAAC,gBAAgB;oBAClB,CAAC,CAAE,gBAAwB,CAAC,WAAW,CAAC,CAC/C,CAAA;QACL,CAAC,CAAC,CAAA;QACN,IAAI,CAAC,4BAA4B;YAC7B,MAAM,IAAI,6BAA6B,CAAC,gBAAgB,CAAC,CAAA;QAE7D,MAAM,cAAc,GAAG,4BAA4B,CAAC,MAAM;YACtD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,4BAA4B,CAAC,MAAM,CAAC;YAClE,CAAC,CAAC,SAAS,CAAA;QACf,MAAM,wBAAwB,GAC1B,IAAK,4BAA4B,CAAC,MAAc,CAC5C,IAAI,EACJ,cAAc,CACjB,CAAA;QAEL,4HAA4H;QAC5H,kEAAkE;QAClE,IAAI,wBAAwB,YAAY,kBAAkB,EAAE;YACxD,IAAI,CAAE,wBAAgC,CAAC,SAAS,CAAC;gBAC5C,wBAAgC,CAAC,SAAS,CAAC,GAAG,IAAI,CAAA;SAC1D;aAAM;YACH,IAAI,CAAC,cAAc;gBACf,MAAM,IAAI,4CAA4C,CAClD,gBAAgB,CACnB,CACJ;YAAC,wBAAgC,CAAC,SAAS,CAAC,GAAG,IAAI,CACnD;YAAC,wBAAgC,CAAC,UAAU,CAAC,GAAG,cAAc,CAAA;SAClE;QAED,OAAO,wBAAwB,CAAA;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,OAAO;QACT,IAAI,CAAC,IAAI,CAAC,WAAW;YAAE,MAAM,IAAI,iCAAiC,EAAE,CAAA;QAEpE,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,CAAA;IACrC,CAAC;CACJ","file":"EntityManager.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\"\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\nimport { SaveOptions } from \"../repository/SaveOptions\"\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { Repository } from \"../repository/Repository\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\"\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\"\nimport {\n    CustomRepositoryCannotInheritRepositoryError,\n    CustomRepositoryNotFoundError,\n    TreeRepositoryNotSupportedError,\n    TypeORMError,\n} from \"../error\"\nimport { AbstractRepository } from \"../repository/AbstractRepository\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { UpsertOptions } from \"../repository/UpsertOptions\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"EntityManager\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by repositories.\n     * Created as a future replacement for the #repositories to provide a bit more perf optimization.\n     */\n    protected repositories = new Map<EntityTarget<any>, Repository<any>>()\n\n    /**\n     * Once created and then reused by repositories.\n     */\n    protected treeRepositories: TreeRepository<any>[] = []\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer =\n        new PlainObjectToNewEntityTransformer()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        this.connection = connection\n        if (queryRunner) {\n            this.queryRunner = queryRunner\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this })\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T> {\n        const isolation =\n            typeof isolationOrRunInTransaction === \"string\"\n                ? isolationOrRunInTransaction\n                : undefined\n        const runInTransaction =\n            typeof isolationOrRunInTransaction === \"function\"\n                ? isolationOrRunInTransaction\n                : runInTransactionParam\n\n        if (!runInTransaction) {\n            throw new TypeORMError(\n                `Transaction method requires callback in second parameter if isolation level is supplied.`,\n            )\n        }\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        try {\n            await queryRunner.startTransaction(isolation)\n            const result = await runInTransaction(queryRunner.manager)\n            await queryRunner.commitTransaction()\n            return result\n        } catch (err) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw err\n        } finally {\n            if (!this.queryRunner)\n                // if we used a new query runner provider then release it\n                await queryRunner.release()\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(query: string, parameters?: any[]): Promise<T> {\n        return this.connection.query(query, parameters, this.queryRunner)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(\n                entityClass as EntityTarget<Entity>,\n                alias,\n                queryRunner || this.queryRunner,\n            )\n        } else {\n            return this.connection.createQueryBuilder(\n                (entityClass as QueryRunner | undefined) ||\n                    queryRunner ||\n                    this.queryRunner,\n            )\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function | string, entity: any): boolean\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any | Function | string, maybeEntity?: any): boolean {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any | EntityTarget<any>, maybeEntity?: any): any {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.getEntityIdMixedMap(entity)\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObject?: DeepPartial<Entity>,\n    ): Entity\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjects?: DeepPartial<Entity>[],\n    ): Entity[]\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjectOrObjects?: DeepPartial<Entity> | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        if (!plainObjectOrObjects) return metadata.create(this.queryRunner)\n\n        if (Array.isArray(plainObjectOrObjects))\n            return (plainObjectOrObjects as DeepPartial<Entity>[]).map(\n                (plainEntityLike) => this.create(entityClass, plainEntityLike),\n            )\n\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        this.plainObjectToEntityTransformer.transform(\n            mergeIntoEntity,\n            plainObjectOrObjects,\n            metadata,\n            true,\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass)\n        entityLikes.forEach((object) =>\n            this.plainObjectToEntityTransformer.transform(\n                mergeIntoEntity,\n                object,\n                metadata,\n            ),\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const plainObjectToDatabaseEntityTransformer =\n            new PlainObjectToDatabaseEntityTransformer(this.connection.manager)\n        const transformedEntity =\n            await plainObjectToDatabaseEntityTransformer.transform(\n                entityLike,\n                metadata,\n            )\n        if (transformedEntity)\n            return this.merge(\n                entityClass as any,\n                transformedEntity as Entity,\n                entityLike,\n            )\n\n        return undefined\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"save\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity,\n        options?: RemoveOptions,\n    ): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity extends ObjectLiteral>(\n        targetOrEntity: (Entity | Entity[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: Entity | Entity[],\n        maybeOptions?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        // normalize mixed parameters\n        const target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: Entity | Entity[] = target\n            ? (maybeEntityOrOptions as Entity | Entity[])\n            : (targetOrEntity as Entity | Entity[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute soft-remove operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"soft-remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute recover operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"recover\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute()\n    }\n\n    async upsert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        const metadata = this.connection.getMetadata(target)\n\n        let options: UpsertOptions<Entity>\n\n        if (Array.isArray(conflictPathsOrOptions)) {\n            options = {\n                conflictPaths: conflictPathsOrOptions,\n            }\n        } else {\n            options = conflictPathsOrOptions\n        }\n\n        let entities: QueryDeepPartialEntity<Entity>[]\n\n        if (!Array.isArray(entityOrEntities)) {\n            entities = [entityOrEntities]\n        } else {\n            entities = entityOrEntities\n        }\n\n        const conflictColumns = metadata.mapPropertyPathsToColumns(\n            Array.isArray(options.conflictPaths)\n                ? options.conflictPaths\n                : Object.keys(options.conflictPaths),\n        )\n\n        const overwriteColumns = metadata.columns.filter(\n            (col) =>\n                !conflictColumns.includes(col) &&\n                entities.some(\n                    (entity) =>\n                        typeof col.getEntityValue(entity) !== \"undefined\",\n                ),\n        )\n\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entities)\n            .orUpdate(\n                [...conflictColumns, ...overwriteColumns].map(\n                    (col) => col.databaseName,\n                ),\n                conflictColumns.map((col) => col.databaseName),\n                {\n                    skipUpdateIfNoValuesChanged:\n                        options.skipUpdateIfNoValuesChanged,\n                    indexPredicate: options.indexPredicate,\n                    upsertType:\n                        options.upsertType ||\n                        this.connection.driver.supportedUpsertTypes[0],\n                },\n            )\n            .execute()\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the update method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<DeleteResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Checks whether any entity exists with the given condition\n     */\n    exists<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getExists()\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getCount()\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getCount()\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"SUM\", columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"AVG\", columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MIN\", columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MAX\", columnName, where)\n    }\n\n    private async callAggregateFun<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        fnName: \"SUM\" | \"AVG\" | \"MIN\" | \"MAX\",\n        columnName: PickKeysByType<Entity, number>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[] = {},\n    ): Promise<number | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const result = await this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .select(\n                `${fnName}(${this.connection.driver.escape(\n                    String(columnName),\n                )})`,\n                fnName,\n            )\n            .getRawOne()\n        return result[fnName] === null ? null : parseFloat(result[fnName])\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where: where })\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where })\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        ids: any[],\n    ): Promise<Entity[]> {\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length) return Promise.resolve([])\n\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .andWhereInIds(ids)\n            .getMany()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // prepare alias for built query\n        let alias: string = metadata.name\n        if (options && options.join) {\n            alias = options.join.alias\n        }\n\n        if (!options.where) {\n            throw new Error(\n                `You must provide selection conditions in order to find a single row.`,\n            )\n        }\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, alias)\n            .setFindOptions({\n                ...options,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                where,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                take: 1,\n            })\n            .whereInIds(metadata.ensureEntityIdMap(id))\n            .getOne()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, options).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, options),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.findOneBy<Entity>(entityClass as any, where).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, where),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        try {\n            return await queryRunner.clearTable(metadata.tablePath) // await is needed here because we are using finally\n        } finally {\n            if (!this.queryRunner) await queryRunner.release()\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" + \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" - \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        // find already created repository instance and return it if found\n        const repoFromMap = this.repositories.get(target)\n        if (repoFromMap) return repoFromMap\n\n        // if repository was not found then create it, store its instance and return it\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const newRepository = new MongoRepository(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        } else {\n            const newRepository = new Repository<any>(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        }\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver)\n\n        // find already created repository instance and return it if found\n        const repository = this.treeRepositories.find(\n            (repository) => repository.target === target,\n        )\n        if (repository) return repository\n\n        // check if repository is real tree repository\n        const newRepository = new TreeRepository(target, this, this.queryRunner)\n        this.treeRepositories.push(newRepository)\n        return newRepository\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target)\n    }\n\n    /**\n     * Creates a new repository instance out of a given Repository and\n     * sets current EntityManager instance to it. Used to work with custom repositories\n     * in transactions.\n     */\n    withRepository<Entity extends ObjectLiteral, R extends Repository<any>>(\n        repository: R & Repository<Entity>,\n    ): R {\n        const repositoryConstructor =\n            repository.constructor as typeof Repository\n        const { target, manager, queryRunner, ...otherRepositoryProperties } =\n            repository\n        return Object.assign(\n            new repositoryConstructor(repository.target, this) as R,\n            {\n                ...otherRepositoryProperties,\n            },\n        )\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend to create custom repositories\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity\n            ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity)\n            : undefined\n        const entityRepositoryInstance =\n            new (entityRepositoryMetadataArgs.target as any)(\n                this,\n                entityMetadata,\n            )\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this\n        } else {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(\n                    customRepository,\n                )\n            ;(entityRepositoryInstance as any)[\"manager\"] = this\n            ;(entityRepositoryInstance as any)[\"metadata\"] = entityMetadata\n        }\n\n        return entityRepositoryInstance\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner) throw new NoNeedToReleaseEntityManagerError()\n\n        return this.queryRunner.release()\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/entity-manager/EntityManager.ts"],"names":[],"mappings":"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","file":"EntityManager.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\"\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\nimport { SaveOptions } from \"../repository/SaveOptions\"\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { Repository } from \"../repository/Repository\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\"\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\"\nimport {\n    CustomRepositoryCannotInheritRepositoryError,\n    CustomRepositoryNotFoundError,\n    TreeRepositoryNotSupportedError,\n    TypeORMError,\n} from \"../error\"\nimport { AbstractRepository } from \"../repository/AbstractRepository\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { UpsertOptions } from \"../repository/UpsertOptions\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"EntityManager\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by repositories.\n     * Created as a future replacement for the #repositories to provide a bit more perf optimization.\n     */\n    protected repositories = new Map<EntityTarget<any>, Repository<any>>()\n\n    /**\n     * Once created and then reused by repositories.\n     */\n    protected treeRepositories: TreeRepository<any>[] = []\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer =\n        new PlainObjectToNewEntityTransformer()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        this.connection = connection\n        if (queryRunner) {\n            this.queryRunner = queryRunner\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this })\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T> {\n        const isolation =\n            typeof isolationOrRunInTransaction === \"string\"\n                ? isolationOrRunInTransaction\n                : undefined\n        const runInTransaction =\n            typeof isolationOrRunInTransaction === \"function\"\n                ? isolationOrRunInTransaction\n                : runInTransactionParam\n\n        if (!runInTransaction) {\n            throw new TypeORMError(\n                `Transaction method requires callback in second parameter if isolation level is supplied.`,\n            )\n        }\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        try {\n            await queryRunner.startTransaction(isolation)\n            const result = await runInTransaction(queryRunner.manager)\n            await queryRunner.commitTransaction()\n            return result\n        } catch (err) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw err\n        } finally {\n            if (!this.queryRunner)\n                // if we used a new query runner provider then release it\n                await queryRunner.release()\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(query: string, parameters?: any[]): Promise<T> {\n        return this.connection.query(query, parameters, this.queryRunner)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(\n                entityClass as EntityTarget<Entity>,\n                alias,\n                queryRunner || this.queryRunner,\n            )\n        } else {\n            return this.connection.createQueryBuilder(\n                (entityClass as QueryRunner | undefined) ||\n                    queryRunner ||\n                    this.queryRunner,\n            )\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function | string, entity: any): boolean\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any | Function | string, maybeEntity?: any): boolean {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any | EntityTarget<any>, maybeEntity?: any): any {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.getEntityIdMixedMap(entity)\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObject?: DeepPartial<Entity>,\n    ): Entity\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjects?: DeepPartial<Entity>[],\n    ): Entity[]\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjectOrObjects?: DeepPartial<Entity> | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        if (!plainObjectOrObjects) return metadata.create(this.queryRunner)\n\n        if (Array.isArray(plainObjectOrObjects))\n            return (plainObjectOrObjects as DeepPartial<Entity>[]).map(\n                (plainEntityLike) => this.create(entityClass, plainEntityLike),\n            )\n\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        this.plainObjectToEntityTransformer.transform(\n            mergeIntoEntity,\n            plainObjectOrObjects,\n            metadata,\n            true,\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass)\n        entityLikes.forEach((object) =>\n            this.plainObjectToEntityTransformer.transform(\n                mergeIntoEntity,\n                object,\n                metadata,\n            ),\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const plainObjectToDatabaseEntityTransformer =\n            new PlainObjectToDatabaseEntityTransformer(this.connection.manager)\n        const transformedEntity =\n            await plainObjectToDatabaseEntityTransformer.transform(\n                entityLike,\n                metadata,\n            )\n        if (transformedEntity)\n            return this.merge(\n                entityClass as any,\n                transformedEntity as Entity,\n                entityLike,\n            )\n\n        return undefined\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"save\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity,\n        options?: RemoveOptions,\n    ): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity extends ObjectLiteral>(\n        targetOrEntity: (Entity | Entity[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: Entity | Entity[],\n        maybeOptions?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        // normalize mixed parameters\n        const target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: Entity | Entity[] = target\n            ? (maybeEntityOrOptions as Entity | Entity[])\n            : (targetOrEntity as Entity | Entity[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute soft-remove operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"soft-remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute recover operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"recover\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute()\n    }\n\n    async upsert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        const metadata = this.connection.getMetadata(target)\n\n        let options: UpsertOptions<Entity>\n\n        if (Array.isArray(conflictPathsOrOptions)) {\n            options = {\n                conflictPaths: conflictPathsOrOptions,\n            }\n        } else {\n            options = conflictPathsOrOptions\n        }\n\n        let entities: QueryDeepPartialEntity<Entity>[]\n\n        if (!Array.isArray(entityOrEntities)) {\n            entities = [entityOrEntities]\n        } else {\n            entities = entityOrEntities\n        }\n\n        const conflictColumns = metadata.mapPropertyPathsToColumns(\n            Array.isArray(options.conflictPaths)\n                ? options.conflictPaths\n                : Object.keys(options.conflictPaths),\n        )\n\n        const overwriteColumns = metadata.columns.filter(\n            (col) =>\n                !conflictColumns.includes(col) &&\n                entities.some(\n                    (entity) =>\n                        typeof col.getEntityValue(entity) !== \"undefined\",\n                ),\n        )\n\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entities)\n            .orUpdate(\n                [...conflictColumns, ...overwriteColumns].map(\n                    (col) => col.databaseName,\n                ),\n                conflictColumns.map((col) => col.databaseName),\n                {\n                    skipUpdateIfNoValuesChanged:\n                        options.skipUpdateIfNoValuesChanged,\n                    indexPredicate: options.indexPredicate,\n                    upsertType:\n                        options.upsertType ||\n                        this.connection.driver.supportedUpsertTypes[0],\n                },\n            )\n            .execute()\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the update method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<DeleteResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Checks whether any entity exists with the given condition\n     */\n    exists<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getExists()\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getCount()\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getCount()\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"SUM\", columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"AVG\", columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MIN\", columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MAX\", columnName, where)\n    }\n\n    private async callAggregateFun<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        fnName: \"SUM\" | \"AVG\" | \"MIN\" | \"MAX\",\n        columnName: PickKeysByType<Entity, number>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[] = {},\n    ): Promise<number | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.columns.find(\n            (item) => item.propertyPath === columnName,\n        )\n        if (!column) {\n            throw new TypeORMError(\n                `Column \"${columnName}\" was not found in table \"${metadata.name}\"`,\n            )\n        }\n\n        const result = await this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .select(\n                `${fnName}(${this.connection.driver.escape(\n                    column.databaseName,\n                )})`,\n                fnName,\n            )\n            .getRawOne()\n        return result[fnName] === null ? null : parseFloat(result[fnName])\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where: where })\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where })\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        ids: any[],\n    ): Promise<Entity[]> {\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length) return Promise.resolve([])\n\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .andWhereInIds(ids)\n            .getMany()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // prepare alias for built query\n        let alias: string = metadata.name\n        if (options && options.join) {\n            alias = options.join.alias\n        }\n\n        if (!options.where) {\n            throw new Error(\n                `You must provide selection conditions in order to find a single row.`,\n            )\n        }\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, alias)\n            .setFindOptions({\n                ...options,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                where,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                take: 1,\n            })\n            .whereInIds(metadata.ensureEntityIdMap(id))\n            .getOne()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, options).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, options),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.findOneBy<Entity>(entityClass as any, where).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, where),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        try {\n            return await queryRunner.clearTable(metadata.tablePath) // await is needed here because we are using finally\n        } finally {\n            if (!this.queryRunner) await queryRunner.release()\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" + \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" - \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        // find already created repository instance and return it if found\n        const repoFromMap = this.repositories.get(target)\n        if (repoFromMap) return repoFromMap\n\n        // if repository was not found then create it, store its instance and return it\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const newRepository = new MongoRepository(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        } else {\n            const newRepository = new Repository<any>(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        }\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver)\n\n        // find already created repository instance and return it if found\n        const repository = this.treeRepositories.find(\n            (repository) => repository.target === target,\n        )\n        if (repository) return repository\n\n        // check if repository is real tree repository\n        const newRepository = new TreeRepository(target, this, this.queryRunner)\n        this.treeRepositories.push(newRepository)\n        return newRepository\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target)\n    }\n\n    /**\n     * Creates a new repository instance out of a given Repository and\n     * sets current EntityManager instance to it. Used to work with custom repositories\n     * in transactions.\n     */\n    withRepository<Entity extends ObjectLiteral, R extends Repository<any>>(\n        repository: R & Repository<Entity>,\n    ): R {\n        const repositoryConstructor =\n            repository.constructor as typeof Repository\n        const { target, manager, queryRunner, ...otherRepositoryProperties } =\n            repository\n        return Object.assign(\n            new repositoryConstructor(repository.target, this) as R,\n            {\n                ...otherRepositoryProperties,\n            },\n        )\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend to create custom repositories\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity\n            ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity)\n            : undefined\n        const entityRepositoryInstance =\n            new (entityRepositoryMetadataArgs.target as any)(\n                this,\n                entityMetadata,\n            )\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this\n        } else {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(\n                    customRepository,\n                )\n            ;(entityRepositoryInstance as any)[\"manager\"] = this\n            ;(entityRepositoryInstance as any)[\"metadata\"] = entityMetadata\n        }\n\n        return entityRepositoryInstance\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner) throw new NoNeedToReleaseEntityManagerError()\n\n        return this.queryRunner.release()\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/entity-manager/MongoEntityManager.d.ts b/node_modules/typeorm/browser/entity-manager/MongoEntityManager.d.ts
index 4d426e5..81c8d6d 100644
--- a/node_modules/typeorm/browser/entity-manager/MongoEntityManager.d.ts
+++ b/node_modules/typeorm/browser/entity-manager/MongoEntityManager.d.ts
@@ -1,19 +1,19 @@
-import { EntityManager } from "./EntityManager";
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { MongoQueryRunner } from "../driver/mongodb/MongoQueryRunner";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { BulkWriteResult, AggregationCursor, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult as DeleteResultMongoDb, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult as UpdateResultMongoDb, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions, ObjectId, FilterOperators } from "../driver/mongodb/typings";
-import { DataSource } from "../data-source/DataSource";
-import { MongoFindManyOptions } from "../find-options/mongodb/MongoFindManyOptions";
-import { MongoFindOneOptions } from "../find-options/mongodb/MongoFindOneOptions";
-import { FindOptionsSelect, FindOptionsSelectByString } from "../find-options/FindOptionsSelect";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { MongoQueryRunner } from "typeorm/browser/driver/mongodb/MongoQueryRunner";
+import { FindManyOptions } from "typeorm/browser/find-options/FindManyOptions";
+import { QueryDeepPartialEntity } from "typeorm/browser/query-builder/QueryPartialEntity";
+import { InsertResult } from "typeorm/browser/query-builder/result/InsertResult";
+import { UpdateResult } from "typeorm/browser/query-builder/result/UpdateResult";
+import { DeleteResult } from "typeorm/browser/query-builder/result/DeleteResult";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { BulkWriteResult, AggregationCursor, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult as DeleteResultMongoDb, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult as UpdateResultMongoDb, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions, ObjectId, FilterOperators, CountDocumentsOptions } from "typeorm/browser/driver/mongodb/typings";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { MongoFindManyOptions } from "typeorm/browser/find-options/mongodb/MongoFindManyOptions";
+import { MongoFindOneOptions } from "typeorm/browser/find-options/mongodb/MongoFindOneOptions";
+import { FindOptionsSelect, FindOptionsSelectByString } from "typeorm/browser/find-options/FindOptionsSelect";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
 /**
  * Entity manager supposed to work with any entity, automatically find its repository and call its methods,
  * whatever entity type are you passing.
@@ -114,6 +114,10 @@ export declare class MongoEntityManager extends EntityManager {
      * Count number of matching documents in the db to a query.
      */
     count<Entity>(entityClassOrName: EntityTarget<Entity>, query?: Filter<Document>, options?: CountOptions): Promise<number>;
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments<Entity>(entityClassOrName: EntityTarget<Entity>, query?: Filter<Document>, options?: CountDocumentsOptions): Promise<number>;
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js b/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js
index f5093ca..3cdf576 100644
--- a/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js
+++ b/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js
@@ -259,6 +259,13 @@ export class MongoEntityManager extends EntityManager {
         const metadata = this.connection.getMetadata(entityClassOrName);
         return this.mongoQueryRunner.count(metadata.tableName, query, options);
     }
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments(entityClassOrName, query = {}, options = {}) {
+        const metadata = this.connection.getMetadata(entityClassOrName);
+        return this.mongoQueryRunner.countDocuments(metadata.tableName, query, options);
+    }
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js.map b/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js.map
index 1d131bb..772174f 100644
--- a/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js.map
+++ b/node_modules/typeorm/browser/entity-manager/MongoEntityManager.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":"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","file":"MongoEntityManager.js","sourcesContent":["import { EntityManager } from \"./EntityManager\"\nimport { EntityTarget } from \"../common/EntityTarget\"\n\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\"\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\n\nimport {\n    BulkWriteResult,\n    AggregationCursor,\n    Collection,\n    FindCursor,\n    Document,\n    AggregateOptions,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    Filter,\n    CountOptions,\n    IndexSpecification,\n    CreateIndexesOptions,\n    IndexDescription,\n    DeleteResult as DeleteResultMongoDb,\n    DeleteOptions,\n    CommandOperationOptions,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    UpdateFilter,\n    FindOneAndUpdateOptions,\n    RenameOptions,\n    ReplaceOptions,\n    UpdateResult as UpdateResultMongoDb,\n    CollStats,\n    CollStatsOptions,\n    ChangeStreamOptions,\n    ChangeStream,\n    UpdateOptions,\n    ListIndexesOptions,\n    ListIndexesCursor,\n    OptionalId,\n    InsertOneOptions,\n    InsertOneResult,\n    InsertManyResult,\n    UnorderedBulkOperation,\n    OrderedBulkOperation,\n    IndexInformationOptions,\n    ObjectId,\n    FilterOperators,\n} from \"../driver/mongodb/typings\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport {\n    FindOptionsSelect,\n    FindOptionsSelectByString,\n} from \"../find-options/FindOptionsSelect\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"MongoEntityManager\")\n\n    get mongoQueryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver)\n            .queryRunner as MongoQueryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options.\n     */\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, options)\n    }\n\n    /**\n     * Finds entities that match given where conditions.\n     */\n    async findAndCountBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead.\n     */\n    async findByIds<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        ids: any[],\n        optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            ) || {}\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        query[\"_id\"] = {\n            $in: ids.map((id) => {\n                if (typeof id === \"string\") {\n                    return new objectIdInstance(id)\n                }\n\n                if (typeof id === \"object\") {\n                    if (id instanceof objectIdInstance) {\n                        return id\n                    }\n\n                    const propertyName = metadata.objectIdColumn!.propertyName\n\n                    if (id[propertyName] instanceof objectIdInstance) {\n                        return id[propertyName]\n                    }\n                }\n            }),\n        }\n\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, id)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult()\n        if (Array.isArray(entity)) {\n            result.raw = await this.insertMany(target, entity)\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                let insertedId = result.raw.insertedIds[key]\n                result.generatedMaps.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n                result.identifiers.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n            })\n        } else {\n            result.raw = await this.insertOne(target, entity)\n            result.generatedMaps.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n            result.identifiers.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n        }\n\n        return result\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        const result = new UpdateResult()\n\n        if (Array.isArray(criteria)) {\n            const updateResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.update(target, criteriaItem, partialEntity)\n                }),\n            )\n\n            result.raw = updateResults.map((r) => r.raw)\n            result.affected = updateResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n            result.generatedMaps = updateResults.reduce(\n                (c, r) => c.concat(r.generatedMaps),\n                [] as ObjectLiteral[],\n            )\n        } else {\n            const metadata = this.connection.getMetadata(target)\n            const mongoResult = await this.updateMany(\n                target,\n                this.convertMixedCriteria(metadata, criteria),\n                { $set: partialEntity },\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.modifiedCount\n        }\n\n        return result\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral[],\n    ): Promise<DeleteResult> {\n        const result = new DeleteResult()\n\n        if (Array.isArray(criteria)) {\n            const deleteResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.delete(target, criteriaItem)\n                }),\n            )\n\n            result.raw = deleteResults.map((r) => r.raw)\n            result.affected = deleteResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n        } else {\n            const mongoResult = await this.deleteMany(\n                target,\n                this.convertMixedCriteria(\n                    this.connection.getMetadata(target),\n                    criteria,\n                ),\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.deletedCount\n        }\n\n        return result\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.cursor(metadata.tableName, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.createCursor(entityClassOrName, query)\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        operations: AnyBulkWriteOperation<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.bulkWrite(\n            metadata.tableName,\n            operations,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.count(metadata.tableName, query, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n        options?: CountOptions,\n    ): Promise<number> {\n        return this.count(entityClassOrName, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        fieldOrSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndex(\n            metadata.tableName,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexSpecs: IndexDescription[],\n    ): Promise<string[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndexes(\n            metadata.tableName,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteMany(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteOne(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        key: string,\n        query: Filter<Document>,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.distinct(\n            metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndex(\n            metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndDelete(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        replacement: Document,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndReplace(\n            metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndUpdate(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexes: string | string[],\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexExists(\n            metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: IndexInformationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexInformation(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeOrderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        docs: OptionalId<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertMany(\n            metadata.tableName,\n            docs,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        doc: OptionalId<Document>,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.isCapped(metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: ListIndexesOptions,\n    ): ListIndexesCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.listCollectionIndexes(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        newName: string,\n        options?: RenameOptions,\n    ): Promise<Collection<Document>> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.rename(\n            metadata.tableName,\n            newName,\n            options,\n        )\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        doc: Document,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.replaceOne(\n            metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: CollStatsOptions,\n    ): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.stats(metadata.tableName, options)\n    }\n\n    watch<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.watch(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateMany(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateOne(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>\n            | any[]\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindOneOptions<Entity>\n            | Partial<Entity>\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1\n                    break\n                case \"ASC\":\n                    orderCriteria[key] = 1\n                    break\n                default:\n                    orderCriteria[key] = order[key]\n            }\n            return orderCriteria\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    protected convertFindOptionsSelectToProjectCriteria(\n        selects: FindOptionsSelect<any> | FindOptionsSelectByString<any>,\n    ) {\n        if (Array.isArray(selects)) {\n            return selects.reduce((projectCriteria, key) => {\n                projectCriteria[key] = 1\n                return projectCriteria\n            }, {} as any)\n        } else {\n            // todo: implement\n            return {}\n        }\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(\n        metadata: EntityMetadata,\n        idMap: any,\n    ): ObjectLiteral {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n\n        // check first if it's ObjectId compatible:\n        // string, number, Buffer, ObjectId or ObjectId-like\n        if (objectIdInstance.isValid(idMap)) {\n            return {\n                _id: new objectIdInstance(idMap),\n            }\n        }\n\n        // if it's some other type of object build a query from the columns\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\n        if (ObjectUtils.isObject(idMap)) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap)\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue\n                return query\n            }, {} as any)\n        }\n\n        // last resort: try to convert it to an ObjectId anyway\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\n        // it can still pass with null/undefined\n        return {\n            _id: new objectIdInstance(idMap),\n        }\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity extends ObjectLiteral>(\n        metadata: EntityMetadata,\n        cursor: FindCursor<Entity> | AggregationCursor<Entity>,\n    ) {\n        const queryRunner = this.mongoQueryRunner\n        cursor.toArray = () =>\n            cursor\n                .clone()\n                .toArray()\n                .then(async (results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer()\n                    const entities = transformer.transformAll(results, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\n                        \"Load\",\n                        metadata,\n                        entities,\n                    )\n                    return entities\n                })\n\n        cursor.next = () =>\n            cursor\n                .clone()\n                .next()\n                .then(async (result: Entity) => {\n                    if (!result) {\n                        return result\n                    }\n                    const transformer = new DocumentToEntityTransformer()\n                    const entity = transformer.transform(result, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\"Load\", metadata, [\n                        entity,\n                    ])\n                    return entity\n                })\n    }\n\n    protected filterSoftDeleted<Entity>(\n        cursor: FindCursor<Entity>,\n        deleteDateColumn: ColumnMetadata,\n        query?: ObjectLiteral,\n    ) {\n        const { $or, ...restQuery } = query ?? {}\n        cursor.filter({\n            $or: [\n                { [deleteDateColumn.propertyName]: { $eq: null } },\n                ...(Array.isArray($or) ? $or : []),\n            ],\n            ...restQuery,\n        })\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    protected async executeFindOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: any,\n        maybeOptions?: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        const id =\n            optionsOrConditions instanceof objectIdInstance ||\n            typeof optionsOrConditions === \"string\"\n                ? optionsOrConditions\n                : undefined\n        const findOneOptionsOrConditions = (\n            id ? maybeOptions : optionsOrConditions\n        ) as any\n        const query =\n            this.convertFindOneOptionsOrConditionsToMongodbQuery(\n                findOneOptionsOrConditions,\n            ) || {}\n        if (id) {\n            query[\"_id\"] =\n                id instanceof objectIdInstance ? id : new ObjectId(id)\n        }\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\n            if (findOneOptionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        findOneOptionsOrConditions.select,\n                    ),\n                )\n            if (findOneOptionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        findOneOptionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !findOneOptionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray()\n        return result.length > 0 ? result[0] : null\n    }\n\n    protected async executeFind<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | any[],\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async executeFindAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: MongoFindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<[Entity[], number]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ])\n        return [results, parseInt(count)]\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":"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","file":"MongoEntityManager.js","sourcesContent":["import { EntityManager } from \"./EntityManager\"\nimport { EntityTarget } from \"../common/EntityTarget\"\n\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\"\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\n\nimport {\n    BulkWriteResult,\n    AggregationCursor,\n    Collection,\n    FindCursor,\n    Document,\n    AggregateOptions,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    Filter,\n    CountOptions,\n    IndexSpecification,\n    CreateIndexesOptions,\n    IndexDescription,\n    DeleteResult as DeleteResultMongoDb,\n    DeleteOptions,\n    CommandOperationOptions,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    UpdateFilter,\n    FindOneAndUpdateOptions,\n    RenameOptions,\n    ReplaceOptions,\n    UpdateResult as UpdateResultMongoDb,\n    CollStats,\n    CollStatsOptions,\n    ChangeStreamOptions,\n    ChangeStream,\n    UpdateOptions,\n    ListIndexesOptions,\n    ListIndexesCursor,\n    OptionalId,\n    InsertOneOptions,\n    InsertOneResult,\n    InsertManyResult,\n    UnorderedBulkOperation,\n    OrderedBulkOperation,\n    IndexInformationOptions,\n    ObjectId,\n    FilterOperators,\n    CountDocumentsOptions,\n} from \"../driver/mongodb/typings\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport {\n    FindOptionsSelect,\n    FindOptionsSelectByString,\n} from \"../find-options/FindOptionsSelect\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"MongoEntityManager\")\n\n    get mongoQueryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver)\n            .queryRunner as MongoQueryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options.\n     */\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, options)\n    }\n\n    /**\n     * Finds entities that match given where conditions.\n     */\n    async findAndCountBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead.\n     */\n    async findByIds<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        ids: any[],\n        optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            ) || {}\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        query[\"_id\"] = {\n            $in: ids.map((id) => {\n                if (typeof id === \"string\") {\n                    return new objectIdInstance(id)\n                }\n\n                if (typeof id === \"object\") {\n                    if (id instanceof objectIdInstance) {\n                        return id\n                    }\n\n                    const propertyName = metadata.objectIdColumn!.propertyName\n\n                    if (id[propertyName] instanceof objectIdInstance) {\n                        return id[propertyName]\n                    }\n                }\n            }),\n        }\n\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, id)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult()\n        if (Array.isArray(entity)) {\n            result.raw = await this.insertMany(target, entity)\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                let insertedId = result.raw.insertedIds[key]\n                result.generatedMaps.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n                result.identifiers.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n            })\n        } else {\n            result.raw = await this.insertOne(target, entity)\n            result.generatedMaps.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n            result.identifiers.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n        }\n\n        return result\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        const result = new UpdateResult()\n\n        if (Array.isArray(criteria)) {\n            const updateResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.update(target, criteriaItem, partialEntity)\n                }),\n            )\n\n            result.raw = updateResults.map((r) => r.raw)\n            result.affected = updateResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n            result.generatedMaps = updateResults.reduce(\n                (c, r) => c.concat(r.generatedMaps),\n                [] as ObjectLiteral[],\n            )\n        } else {\n            const metadata = this.connection.getMetadata(target)\n            const mongoResult = await this.updateMany(\n                target,\n                this.convertMixedCriteria(metadata, criteria),\n                { $set: partialEntity },\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.modifiedCount\n        }\n\n        return result\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral[],\n    ): Promise<DeleteResult> {\n        const result = new DeleteResult()\n\n        if (Array.isArray(criteria)) {\n            const deleteResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.delete(target, criteriaItem)\n                }),\n            )\n\n            result.raw = deleteResults.map((r) => r.raw)\n            result.affected = deleteResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n        } else {\n            const mongoResult = await this.deleteMany(\n                target,\n                this.convertMixedCriteria(\n                    this.connection.getMetadata(target),\n                    criteria,\n                ),\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.deletedCount\n        }\n\n        return result\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.cursor(metadata.tableName, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.createCursor(entityClassOrName, query)\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        operations: AnyBulkWriteOperation<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.bulkWrite(\n            metadata.tableName,\n            operations,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.count(metadata.tableName, query, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countDocuments<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountDocumentsOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.countDocuments(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n        options?: CountOptions,\n    ): Promise<number> {\n        return this.count(entityClassOrName, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        fieldOrSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndex(\n            metadata.tableName,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexSpecs: IndexDescription[],\n    ): Promise<string[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndexes(\n            metadata.tableName,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteMany(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteOne(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        key: string,\n        query: Filter<Document>,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.distinct(\n            metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndex(\n            metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndDelete(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        replacement: Document,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndReplace(\n            metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndUpdate(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexes: string | string[],\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexExists(\n            metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: IndexInformationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexInformation(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeOrderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        docs: OptionalId<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertMany(\n            metadata.tableName,\n            docs,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        doc: OptionalId<Document>,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.isCapped(metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: ListIndexesOptions,\n    ): ListIndexesCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.listCollectionIndexes(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        newName: string,\n        options?: RenameOptions,\n    ): Promise<Collection<Document>> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.rename(\n            metadata.tableName,\n            newName,\n            options,\n        )\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        doc: Document,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.replaceOne(\n            metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: CollStatsOptions,\n    ): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.stats(metadata.tableName, options)\n    }\n\n    watch<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.watch(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateMany(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateOne(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>\n            | any[]\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindOneOptions<Entity>\n            | Partial<Entity>\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1\n                    break\n                case \"ASC\":\n                    orderCriteria[key] = 1\n                    break\n                default:\n                    orderCriteria[key] = order[key]\n            }\n            return orderCriteria\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    protected convertFindOptionsSelectToProjectCriteria(\n        selects: FindOptionsSelect<any> | FindOptionsSelectByString<any>,\n    ) {\n        if (Array.isArray(selects)) {\n            return selects.reduce((projectCriteria, key) => {\n                projectCriteria[key] = 1\n                return projectCriteria\n            }, {} as any)\n        } else {\n            // todo: implement\n            return {}\n        }\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(\n        metadata: EntityMetadata,\n        idMap: any,\n    ): ObjectLiteral {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n\n        // check first if it's ObjectId compatible:\n        // string, number, Buffer, ObjectId or ObjectId-like\n        if (objectIdInstance.isValid(idMap)) {\n            return {\n                _id: new objectIdInstance(idMap),\n            }\n        }\n\n        // if it's some other type of object build a query from the columns\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\n        if (ObjectUtils.isObject(idMap)) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap)\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue\n                return query\n            }, {} as any)\n        }\n\n        // last resort: try to convert it to an ObjectId anyway\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\n        // it can still pass with null/undefined\n        return {\n            _id: new objectIdInstance(idMap),\n        }\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity extends ObjectLiteral>(\n        metadata: EntityMetadata,\n        cursor: FindCursor<Entity> | AggregationCursor<Entity>,\n    ) {\n        const queryRunner = this.mongoQueryRunner\n        cursor.toArray = () =>\n            cursor\n                .clone()\n                .toArray()\n                .then(async (results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer()\n                    const entities = transformer.transformAll(results, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\n                        \"Load\",\n                        metadata,\n                        entities,\n                    )\n                    return entities\n                })\n\n        cursor.next = () =>\n            cursor\n                .clone()\n                .next()\n                .then(async (result: Entity) => {\n                    if (!result) {\n                        return result\n                    }\n                    const transformer = new DocumentToEntityTransformer()\n                    const entity = transformer.transform(result, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\"Load\", metadata, [\n                        entity,\n                    ])\n                    return entity\n                })\n    }\n\n    protected filterSoftDeleted<Entity>(\n        cursor: FindCursor<Entity>,\n        deleteDateColumn: ColumnMetadata,\n        query?: ObjectLiteral,\n    ) {\n        const { $or, ...restQuery } = query ?? {}\n        cursor.filter({\n            $or: [\n                { [deleteDateColumn.propertyName]: { $eq: null } },\n                ...(Array.isArray($or) ? $or : []),\n            ],\n            ...restQuery,\n        })\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    protected async executeFindOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: any,\n        maybeOptions?: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        const id =\n            optionsOrConditions instanceof objectIdInstance ||\n            typeof optionsOrConditions === \"string\"\n                ? optionsOrConditions\n                : undefined\n        const findOneOptionsOrConditions = (\n            id ? maybeOptions : optionsOrConditions\n        ) as any\n        const query =\n            this.convertFindOneOptionsOrConditionsToMongodbQuery(\n                findOneOptionsOrConditions,\n            ) || {}\n        if (id) {\n            query[\"_id\"] =\n                id instanceof objectIdInstance ? id : new ObjectId(id)\n        }\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\n            if (findOneOptionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        findOneOptionsOrConditions.select,\n                    ),\n                )\n            if (findOneOptionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        findOneOptionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !findOneOptionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray()\n        return result.length > 0 ? result[0] : null\n    }\n\n    protected async executeFind<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | any[],\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async executeFindAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: MongoFindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<[Entity[], number]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ])\n        return [results, parseInt(count)]\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/entity-manager/SqljsEntityManager.d.ts b/node_modules/typeorm/browser/entity-manager/SqljsEntityManager.d.ts
index 18e5c59..e2cad3f 100644
--- a/node_modules/typeorm/browser/entity-manager/SqljsEntityManager.d.ts
+++ b/node_modules/typeorm/browser/entity-manager/SqljsEntityManager.d.ts
@@ -1,6 +1,6 @@
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { EntityManager } from "./EntityManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
 /**
  * A special EntityManager that includes import/export and load/save function
  * that are unique to Sql.js.
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchema.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchema.d.ts
index 36b35c2..c73c1b8 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchema.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchema.d.ts
@@ -1,4 +1,4 @@
-import { EntitySchemaOptions } from "./EntitySchemaOptions";
+import { EntitySchemaOptions } from "typeorm/browser/entity-schema/EntitySchemaOptions";
 /**
  * Interface for entity metadata mappings stored inside "schemas" instead of models decorated by decorators.
  */
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchemaColumnOptions.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchemaColumnOptions.d.ts
index c25bbc2..6f0e6d6 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchemaColumnOptions.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchemaColumnOptions.d.ts
@@ -1,6 +1,6 @@
-import { ColumnType } from "../driver/types/ColumnTypes";
-import { ValueTransformer } from "../decorator/options/ValueTransformer";
-import { SpatialColumnOptions } from "../decorator/options/SpatialColumnOptions";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { ValueTransformer } from "typeorm/browser/decorator/options/ValueTransformer";
+import { SpatialColumnOptions } from "typeorm/browser/decorator/options/SpatialColumnOptions";
 export interface EntitySchemaColumnOptions extends SpatialColumnOptions {
     /**
      * Indicates if this column is a primary column.
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts
index 959b376..0cb9d59 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts
@@ -1,4 +1,4 @@
-import { EntitySchema } from "./EntitySchema";
+import { EntitySchema } from "typeorm/browser/entity-schema/EntitySchema";
 export declare class EntitySchemaEmbeddedColumnOptions {
     /**
      * Schema of embedded entity
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchemaInheritanceOptions.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchemaInheritanceOptions.d.ts
index a054205..c49d0fe 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchemaInheritanceOptions.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchemaInheritanceOptions.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../decorator/options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 export interface EntitySchemaInheritanceOptions {
     /**
      * Inheritance pattern.
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchemaOptions.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchemaOptions.d.ts
index 8995bfd..602dc4d 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchemaOptions.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchemaOptions.d.ts
@@ -1,14 +1,14 @@
-import { DataSource, EntitySchemaEmbeddedColumnOptions, SelectQueryBuilder } from "..";
-import { EntitySchemaIndexOptions } from "./EntitySchemaIndexOptions";
-import { EntitySchemaColumnOptions } from "./EntitySchemaColumnOptions";
-import { EntitySchemaRelationOptions } from "./EntitySchemaRelationOptions";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { TableType } from "../metadata/types/TableTypes";
-import { EntitySchemaUniqueOptions } from "./EntitySchemaUniqueOptions";
-import { EntitySchemaCheckOptions } from "./EntitySchemaCheckOptions";
-import { EntitySchemaExclusionOptions } from "./EntitySchemaExclusionOptions";
-import { EntitySchemaInheritanceOptions } from "./EntitySchemaInheritanceOptions";
-import { EntitySchemaRelationIdOptions } from "./EntitySchemaRelationIdOptions";
+import { DataSource, EntitySchemaEmbeddedColumnOptions, SelectQueryBuilder } from "typeorm/browser";
+import { EntitySchemaIndexOptions } from "typeorm/browser/entity-schema/EntitySchemaIndexOptions";
+import { EntitySchemaColumnOptions } from "typeorm/browser/entity-schema/EntitySchemaColumnOptions";
+import { EntitySchemaRelationOptions } from "typeorm/browser/entity-schema/EntitySchemaRelationOptions";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
+import { TableType } from "typeorm/browser/metadata/types/TableTypes";
+import { EntitySchemaUniqueOptions } from "typeorm/browser/entity-schema/EntitySchemaUniqueOptions";
+import { EntitySchemaCheckOptions } from "typeorm/browser/entity-schema/EntitySchemaCheckOptions";
+import { EntitySchemaExclusionOptions } from "typeorm/browser/entity-schema/EntitySchemaExclusionOptions";
+import { EntitySchemaInheritanceOptions } from "typeorm/browser/entity-schema/EntitySchemaInheritanceOptions";
+import { EntitySchemaRelationIdOptions } from "typeorm/browser/entity-schema/EntitySchemaRelationIdOptions";
 /**
  * Interface for entity metadata mappings stored inside "schemas" instead of models decorated by decorators.
  */
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationIdOptions.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationIdOptions.d.ts
index ebf7858..f3cf198 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationIdOptions.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationIdOptions.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 export interface EntitySchemaRelationIdOptions {
     /**
      * Name of relation.
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationOptions.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationOptions.d.ts
index 447457c..3eddacd 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationOptions.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchemaRelationOptions.d.ts
@@ -1,11 +1,11 @@
-import { JoinColumnOptions } from "../decorator/options/JoinColumnOptions";
-import { RelationType } from "../metadata/types/RelationTypes";
-import { JoinTableMultipleColumnsOptions } from "../decorator/options/JoinTableMultipleColumnsOptions";
-import { DeferrableType } from "../metadata/types/DeferrableType";
-import { OnDeleteType } from "../metadata/types/OnDeleteType";
-import { OnUpdateType } from "../metadata/types/OnUpdateType";
-import { JoinTableOptions } from "../decorator/options/JoinTableOptions";
-import { EntityTarget } from "../common/EntityTarget";
+import { JoinColumnOptions } from "typeorm/browser/decorator/options/JoinColumnOptions";
+import { RelationType } from "typeorm/browser/metadata/types/RelationTypes";
+import { JoinTableMultipleColumnsOptions } from "typeorm/browser/decorator/options/JoinTableMultipleColumnsOptions";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
+import { OnDeleteType } from "typeorm/browser/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/browser/metadata/types/OnUpdateType";
+import { JoinTableOptions } from "typeorm/browser/decorator/options/JoinTableOptions";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
 export interface EntitySchemaRelationOptions {
     /**
      * Indicates with which entity this relation is made.
diff --git a/node_modules/typeorm/browser/entity-schema/EntitySchemaUniqueOptions.d.ts b/node_modules/typeorm/browser/entity-schema/EntitySchemaUniqueOptions.d.ts
index 368f4af..793b759 100644
--- a/node_modules/typeorm/browser/entity-schema/EntitySchemaUniqueOptions.d.ts
+++ b/node_modules/typeorm/browser/entity-schema/EntitySchemaUniqueOptions.d.ts
@@ -1,4 +1,4 @@
-import { DeferrableType } from "../metadata/types/DeferrableType";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
 export interface EntitySchemaUniqueOptions {
     /**
      * Unique constraint name.
diff --git a/node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.d.ts b/node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.d.ts
index 5329bed..108ab82 100644
--- a/node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.d.ts
+++ b/node_modules/typeorm/browser/error/AlreadyHasActiveConnectionError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.
  */
diff --git a/node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.d.ts b/node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.d.ts
index 9947f60..4112ca7 100644
--- a/node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.d.ts
+++ b/node_modules/typeorm/browser/error/CannotAttachTreeChildrenEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user saves tree children entity but its parent is not saved yet.
  */
diff --git a/node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.d.ts b/node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.d.ts
index 48cbd98..f1f5347 100644
--- a/node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.d.ts
+++ b/node_modules/typeorm/browser/error/CannotConnectAlreadyConnectedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to connect when he already connected.
  */
diff --git a/node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.d.ts b/node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.d.ts
index bfaf176..fd50564 100644
--- a/node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.d.ts
+++ b/node_modules/typeorm/browser/error/CannotCreateEntityIdMapError.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user tries to create entity id map from the mixed id value,
  * but id value is a single value when entity requires multiple values.
diff --git a/node_modules/typeorm/browser/error/CannotDetermineEntityError.d.ts b/node_modules/typeorm/browser/error/CannotDetermineEntityError.d.ts
index d3f3a8a..198fdee 100644
--- a/node_modules/typeorm/browser/error/CannotDetermineEntityError.d.ts
+++ b/node_modules/typeorm/browser/error/CannotDetermineEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.
  */
diff --git a/node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.d.ts b/node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.d.ts
index a7b2003..889e21c 100644
--- a/node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.d.ts
+++ b/node_modules/typeorm/browser/error/CannotExecuteNotConnectedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to execute operation allowed only if connection is opened.
  */
diff --git a/node_modules/typeorm/browser/error/CannotGetEntityManagerNotConnectedError.d.ts b/node_modules/typeorm/browser/error/CannotGetEntityManagerNotConnectedError.d.ts
index ecf88b8..aa817bc 100644
--- a/node_modules/typeorm/browser/error/CannotGetEntityManagerNotConnectedError.d.ts
+++ b/node_modules/typeorm/browser/error/CannotGetEntityManagerNotConnectedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to access entity manager before connection is established.
  */
diff --git a/node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.d.ts b/node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.d.ts
index 8c1b794..e9f19a9 100644
--- a/node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.d.ts
+++ b/node_modules/typeorm/browser/error/CannotReflectMethodParameterTypeError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when ORM cannot get method parameter's type.
  * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
diff --git a/node_modules/typeorm/browser/error/CircularRelationsError.d.ts b/node_modules/typeorm/browser/error/CircularRelationsError.d.ts
index ae78426..d6f94f2 100644
--- a/node_modules/typeorm/browser/error/CircularRelationsError.d.ts
+++ b/node_modules/typeorm/browser/error/CircularRelationsError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when circular relations detected with nullable set to false.
  */
diff --git a/node_modules/typeorm/browser/error/ColumnTypeUndefinedError.d.ts b/node_modules/typeorm/browser/error/ColumnTypeUndefinedError.d.ts
index e36028d..73cdc76 100644
--- a/node_modules/typeorm/browser/error/ColumnTypeUndefinedError.d.ts
+++ b/node_modules/typeorm/browser/error/ColumnTypeUndefinedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when ORM cannot get column's type automatically.
  * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
diff --git a/node_modules/typeorm/browser/error/ConnectionIsNotSetError.d.ts b/node_modules/typeorm/browser/error/ConnectionIsNotSetError.d.ts
index 1541558..4c84628 100644
--- a/node_modules/typeorm/browser/error/ConnectionIsNotSetError.d.ts
+++ b/node_modules/typeorm/browser/error/ConnectionIsNotSetError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user tries to execute operation that requires connection to be established.
  */
diff --git a/node_modules/typeorm/browser/error/ConnectionNotFoundError.d.ts b/node_modules/typeorm/browser/error/ConnectionNotFoundError.d.ts
index 3d5c4cd..6a75537 100644
--- a/node_modules/typeorm/browser/error/ConnectionNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/ConnectionNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to get connection that does not exist.
  */
diff --git a/node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.d.ts b/node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.d.ts
index 31e8606..39eb87f 100644
--- a/node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.d.ts
+++ b/node_modules/typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.
  */
diff --git a/node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.d.ts b/node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.d.ts
index 32955f9..523d415 100644
--- a/node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.d.ts
+++ b/node_modules/typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.
  */
diff --git a/node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.d.ts b/node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.d.ts
index 03079b3..923e42a 100644
--- a/node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/CustomRepositoryNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown if custom repository was not found.
  */
diff --git a/node_modules/typeorm/browser/error/DataTypeNotSupportedError.d.ts b/node_modules/typeorm/browser/error/DataTypeNotSupportedError.d.ts
index 4901201..32aa28a 100644
--- a/node_modules/typeorm/browser/error/DataTypeNotSupportedError.d.ts
+++ b/node_modules/typeorm/browser/error/DataTypeNotSupportedError.d.ts
@@ -1,7 +1,7 @@
-import { ColumnType } from "../driver/types/ColumnTypes";
-import { DatabaseType } from "../driver/types/DatabaseType";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { DatabaseType } from "typeorm/browser/driver/types/DatabaseType";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class DataTypeNotSupportedError extends TypeORMError {
     constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType);
 }
diff --git a/node_modules/typeorm/browser/error/DriverOptionNotSetError.d.ts b/node_modules/typeorm/browser/error/DriverOptionNotSetError.d.ts
index eaf039e..7fd9366 100644
--- a/node_modules/typeorm/browser/error/DriverOptionNotSetError.d.ts
+++ b/node_modules/typeorm/browser/error/DriverOptionNotSetError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown if some required driver's option is not set.
  */
diff --git a/node_modules/typeorm/browser/error/DriverPackageNotInstalledError.d.ts b/node_modules/typeorm/browser/error/DriverPackageNotInstalledError.d.ts
index 5859509..2456b29 100644
--- a/node_modules/typeorm/browser/error/DriverPackageNotInstalledError.d.ts
+++ b/node_modules/typeorm/browser/error/DriverPackageNotInstalledError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when required driver's package is not installed.
  */
diff --git a/node_modules/typeorm/browser/error/EntityMetadataNotFoundError.d.ts b/node_modules/typeorm/browser/error/EntityMetadataNotFoundError.d.ts
index 95ecd0d..b05096d 100644
--- a/node_modules/typeorm/browser/error/EntityMetadataNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/EntityMetadataNotFoundError.d.ts
@@ -1,5 +1,5 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { TypeORMError } from "./TypeORMError";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class EntityMetadataNotFoundError extends TypeORMError {
     constructor(target: EntityTarget<any>);
     private stringifyTarget;
diff --git a/node_modules/typeorm/browser/error/EntityNotFoundError.d.ts b/node_modules/typeorm/browser/error/EntityNotFoundError.d.ts
index 0b7549b..b38a507 100644
--- a/node_modules/typeorm/browser/error/EntityNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/EntityNotFoundError.d.ts
@@ -1,5 +1,5 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { TypeORMError } from "./TypeORMError";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.
  */
diff --git a/node_modules/typeorm/browser/error/EntityPropertyNotFoundError.d.ts b/node_modules/typeorm/browser/error/EntityPropertyNotFoundError.d.ts
index 48c7596..60ba8ab 100644
--- a/node_modules/typeorm/browser/error/EntityPropertyNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/EntityPropertyNotFoundError.d.ts
@@ -1,5 +1,5 @@
-import { TypeORMError } from "./TypeORMError";
-import { EntityMetadata } from "../metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
 /**
  * Thrown when specified entity property was not found.
  */
diff --git a/node_modules/typeorm/browser/error/FindRelationsNotFoundError.d.ts b/node_modules/typeorm/browser/error/FindRelationsNotFoundError.d.ts
index ff84682..aaea36d 100644
--- a/node_modules/typeorm/browser/error/FindRelationsNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/FindRelationsNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when relations specified in the find options were not found in the entities.
  */
diff --git a/node_modules/typeorm/browser/error/ForbiddenTransactionModeOverrideError.d.ts b/node_modules/typeorm/browser/error/ForbiddenTransactionModeOverrideError.d.ts
index dccb3e1..efc84e5 100644
--- a/node_modules/typeorm/browser/error/ForbiddenTransactionModeOverrideError.d.ts
+++ b/node_modules/typeorm/browser/error/ForbiddenTransactionModeOverrideError.d.ts
@@ -1,5 +1,5 @@
-import { Migration } from "../migration/Migration";
-import { TypeORMError } from "./TypeORMError";
+import { Migration } from "typeorm/browser/migration/Migration";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when the per-migration transaction mode is overriden but the global transaction mode is set to "all".
  */
diff --git a/node_modules/typeorm/browser/error/InitializedRelationError.d.ts b/node_modules/typeorm/browser/error/InitializedRelationError.d.ts
index 321eaa4..f30cbc6 100644
--- a/node_modules/typeorm/browser/error/InitializedRelationError.d.ts
+++ b/node_modules/typeorm/browser/error/InitializedRelationError.d.ts
@@ -1,5 +1,5 @@
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when relation has array initialized which is forbidden my ORM.
  *
diff --git a/node_modules/typeorm/browser/error/InsertValuesMissingError.d.ts b/node_modules/typeorm/browser/error/InsertValuesMissingError.d.ts
index db42add..1f1b3cb 100644
--- a/node_modules/typeorm/browser/error/InsertValuesMissingError.d.ts
+++ b/node_modules/typeorm/browser/error/InsertValuesMissingError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.
  */
diff --git a/node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.d.ts b/node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.d.ts
index 05b044c..a97fb8d 100644
--- a/node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.d.ts
+++ b/node_modules/typeorm/browser/error/LimitOnUpdateNotSupportedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.
  */
diff --git a/node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.d.ts b/node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.d.ts
index 28514b7..c517401 100644
--- a/node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.d.ts
+++ b/node_modules/typeorm/browser/error/LockNotSupportedOnGivenDriverError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when selected sql driver does not supports locking.
  */
diff --git a/node_modules/typeorm/browser/error/MetadataAlreadyExistsError.d.ts b/node_modules/typeorm/browser/error/MetadataAlreadyExistsError.d.ts
index 8065352..531f59c 100644
--- a/node_modules/typeorm/browser/error/MetadataAlreadyExistsError.d.ts
+++ b/node_modules/typeorm/browser/error/MetadataAlreadyExistsError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class MetadataAlreadyExistsError extends TypeORMError {
     constructor(metadataType: string, constructor: Function, propertyName?: string);
 }
diff --git a/node_modules/typeorm/browser/error/MetadataWithSuchNameAlreadyExistsError.d.ts b/node_modules/typeorm/browser/error/MetadataWithSuchNameAlreadyExistsError.d.ts
index 95524aa..0813c39 100644
--- a/node_modules/typeorm/browser/error/MetadataWithSuchNameAlreadyExistsError.d.ts
+++ b/node_modules/typeorm/browser/error/MetadataWithSuchNameAlreadyExistsError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class MetadataWithSuchNameAlreadyExistsError extends TypeORMError {
     constructor(metadataType: string, name: string);
 }
diff --git a/node_modules/typeorm/browser/error/MissingDeleteDateColumnError.d.ts b/node_modules/typeorm/browser/error/MissingDeleteDateColumnError.d.ts
index 90fd4af..04ad934 100644
--- a/node_modules/typeorm/browser/error/MissingDeleteDateColumnError.d.ts
+++ b/node_modules/typeorm/browser/error/MissingDeleteDateColumnError.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class MissingDeleteDateColumnError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/MissingDriverError.d.ts b/node_modules/typeorm/browser/error/MissingDriverError.d.ts
index 40f8888..82019cb 100644
--- a/node_modules/typeorm/browser/error/MissingDriverError.d.ts
+++ b/node_modules/typeorm/browser/error/MissingDriverError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer specifies driver type that does not exist or supported.
  */
diff --git a/node_modules/typeorm/browser/error/MissingJoinColumnError.d.ts b/node_modules/typeorm/browser/error/MissingJoinColumnError.d.ts
index a3f34f4..b486859 100644
--- a/node_modules/typeorm/browser/error/MissingJoinColumnError.d.ts
+++ b/node_modules/typeorm/browser/error/MissingJoinColumnError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class MissingJoinColumnError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/MissingJoinTableError.d.ts b/node_modules/typeorm/browser/error/MissingJoinTableError.d.ts
index 796904e..ffaaf6c 100644
--- a/node_modules/typeorm/browser/error/MissingJoinTableError.d.ts
+++ b/node_modules/typeorm/browser/error/MissingJoinTableError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class MissingJoinTableError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/MissingPrimaryColumnError.d.ts b/node_modules/typeorm/browser/error/MissingPrimaryColumnError.d.ts
index 2221ff3..8e6b560 100644
--- a/node_modules/typeorm/browser/error/MissingPrimaryColumnError.d.ts
+++ b/node_modules/typeorm/browser/error/MissingPrimaryColumnError.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class MissingPrimaryColumnError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/MustBeEntityError.d.ts b/node_modules/typeorm/browser/error/MustBeEntityError.d.ts
index 5c77f06..c14886a 100644
--- a/node_modules/typeorm/browser/error/MustBeEntityError.d.ts
+++ b/node_modules/typeorm/browser/error/MustBeEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when method expects entity but instead something else is given.
  */
diff --git a/node_modules/typeorm/browser/error/NamingStrategyNotFoundError.d.ts b/node_modules/typeorm/browser/error/NamingStrategyNotFoundError.d.ts
index 32a2566..8d15460 100644
--- a/node_modules/typeorm/browser/error/NamingStrategyNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/NamingStrategyNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to use naming strategy that does not exist.
  */
diff --git a/node_modules/typeorm/browser/error/NoConnectionForRepositoryError.d.ts b/node_modules/typeorm/browser/error/NoConnectionForRepositoryError.d.ts
index 566f0d9..4d6ea3f 100644
--- a/node_modules/typeorm/browser/error/NoConnectionForRepositoryError.d.ts
+++ b/node_modules/typeorm/browser/error/NoConnectionForRepositoryError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to access repository before connection is established.
  */
diff --git a/node_modules/typeorm/browser/error/NoConnectionOptionError.d.ts b/node_modules/typeorm/browser/error/NoConnectionOptionError.d.ts
index f7ea8ae..00ed2a7 100644
--- a/node_modules/typeorm/browser/error/NoConnectionOptionError.d.ts
+++ b/node_modules/typeorm/browser/error/NoConnectionOptionError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when some option is not set in the connection options.
  */
diff --git a/node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.d.ts b/node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.d.ts
index 47b19f9..72cc2ab 100644
--- a/node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.d.ts
+++ b/node_modules/typeorm/browser/error/NoNeedToReleaseEntityManagerError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to release entity manager that does not use single database connection.
  */
diff --git a/node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.d.ts b/node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.d.ts
index a2fc09a..21683c0 100644
--- a/node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.d.ts
+++ b/node_modules/typeorm/browser/error/NoVersionOrUpdateDateColumnError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when an entity does not have no version and no update date column.
  */
diff --git a/node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.d.ts b/node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.d.ts
index 2e68d48..b0f5673 100644
--- a/node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.d.ts
+++ b/node_modules/typeorm/browser/error/OffsetWithoutLimitNotSupportedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.
  */
diff --git a/node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.d.ts b/node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.d.ts
index 5e399e1..d8556ca 100644
--- a/node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.d.ts
+++ b/node_modules/typeorm/browser/error/OptimisticLockCanNotBeUsedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when an optimistic lock cannot be used in query builder.
  */
diff --git a/node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.d.ts b/node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.d.ts
index d09679f..de9efab 100644
--- a/node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.d.ts
+++ b/node_modules/typeorm/browser/error/OptimisticLockVersionMismatchError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when a version check on an object that uses optimistic locking through a version field fails.
  */
diff --git a/node_modules/typeorm/browser/error/PersistedEntityNotFoundError.d.ts b/node_modules/typeorm/browser/error/PersistedEntityNotFoundError.d.ts
index e688cf7..204a3bd 100644
--- a/node_modules/typeorm/browser/error/PersistedEntityNotFoundError.d.ts
+++ b/node_modules/typeorm/browser/error/PersistedEntityNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown . Theoretically can't be thrown.
  */
diff --git a/node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.d.ts b/node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.d.ts
index 75a9f93..ac2e78a 100644
--- a/node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.d.ts
+++ b/node_modules/typeorm/browser/error/PessimisticLockTransactionRequiredError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when a transaction is required for the current operation, but there is none open.
  */
diff --git a/node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.d.ts b/node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.d.ts
index 12f0305..8fbaf14 100644
--- a/node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.d.ts
+++ b/node_modules/typeorm/browser/error/PrimaryColumnCannotBeNullableError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class PrimaryColumnCannotBeNullableError extends TypeORMError {
     constructor(object: Object, propertyName: string);
 }
diff --git a/node_modules/typeorm/browser/error/QueryFailedError.d.ts b/node_modules/typeorm/browser/error/QueryFailedError.d.ts
index a401a0d..4733960 100644
--- a/node_modules/typeorm/browser/error/QueryFailedError.d.ts
+++ b/node_modules/typeorm/browser/error/QueryFailedError.d.ts
@@ -1,10 +1,10 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when query execution has failed.
  */
-export declare class QueryFailedError extends TypeORMError {
+export declare class QueryFailedError<T extends Error = Error> extends TypeORMError {
     readonly query: string;
     readonly parameters: any[] | undefined;
-    readonly driverError: any;
-    constructor(query: string, parameters: any[] | undefined, driverError: any);
+    readonly driverError: T;
+    constructor(query: string, parameters: any[] | undefined, driverError: T);
 }
diff --git a/node_modules/typeorm/browser/error/QueryFailedError.js.map b/node_modules/typeorm/browser/error/QueryFailedError.js.map
index 5d8159c..eda16fb 100644
--- a/node_modules/typeorm/browser/error/QueryFailedError.js.map
+++ b/node_modules/typeorm/browser/error/QueryFailedError.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/error/QueryFailedError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACjD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAE7C;;GAEG;AACH,MAAM,OAAO,gBAAiB,SAAQ,YAAY;IAC9C,YACa,KAAa,EACb,UAA6B,EAC7B,WAAgB;QAEzB,KAAK,CACD,WAAW;aACN,QAAQ,EAAE;aACV,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAC/B,CAAA;QAVQ,UAAK,GAAL,KAAK,CAAQ;QACb,eAAU,GAAV,UAAU,CAAmB;QAC7B,gBAAW,GAAX,WAAW,CAAK;QAUzB,IAAI,WAAW,EAAE;YACb,MAAM,EACF,IAAI,EAAE,CAAC,EAAE,sBAAsB;YAC/B,GAAG,eAAe,EACrB,GAAG,WAAW,CAAA;YAEf,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE;gBACrB,GAAG,eAAe;aACrB,CAAC,CAAA;SACL;IACL,CAAC;CACJ","file":"QueryFailedError.js","sourcesContent":["import { ObjectUtils } from \"../util/ObjectUtils\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when query execution has failed.\n */\nexport class QueryFailedError extends TypeORMError {\n    constructor(\n        readonly query: string,\n        readonly parameters: any[] | undefined,\n        readonly driverError: any,\n    ) {\n        super(\n            driverError\n                .toString()\n                .replace(/^error: /, \"\")\n                .replace(/^Error: /, \"\")\n                .replace(/^Request/, \"\"),\n        )\n\n        if (driverError) {\n            const {\n                name: _, // eslint-disable-line\n                ...otherProperties\n            } = driverError\n\n            ObjectUtils.assign(this, {\n                ...otherProperties,\n            })\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/error/QueryFailedError.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACjD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAE7C;;GAEG;AACH,MAAM,OAAO,gBAA0C,SAAQ,YAAY;IACvE,YACa,KAAa,EACb,UAA6B,EAC7B,WAAc;QAEvB,KAAK,CACD,WAAW;aACN,QAAQ,EAAE;aACV,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAC/B,CAAA;QAVQ,UAAK,GAAL,KAAK,CAAQ;QACb,eAAU,GAAV,UAAU,CAAmB;QAC7B,gBAAW,GAAX,WAAW,CAAG;QAUvB,IAAI,WAAW,EAAE;YACb,MAAM,EACF,IAAI,EAAE,CAAC,EAAE,sBAAsB;YAC/B,GAAG,eAAe,EACrB,GAAG,WAAW,CAAA;YAEf,WAAW,CAAC,MAAM,CAAC,IAAI,EAAE;gBACrB,GAAG,eAAe;aACrB,CAAC,CAAA;SACL;IACL,CAAC;CACJ","file":"QueryFailedError.js","sourcesContent":["import { ObjectUtils } from \"../util/ObjectUtils\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when query execution has failed.\n */\nexport class QueryFailedError<T extends Error = Error> extends TypeORMError {\n    constructor(\n        readonly query: string,\n        readonly parameters: any[] | undefined,\n        readonly driverError: T,\n    ) {\n        super(\n            driverError\n                .toString()\n                .replace(/^error: /, \"\")\n                .replace(/^Error: /, \"\")\n                .replace(/^Request/, \"\"),\n        )\n\n        if (driverError) {\n            const {\n                name: _, // eslint-disable-line\n                ...otherProperties\n            } = driverError\n\n            ObjectUtils.assign(this, {\n                ...otherProperties,\n            })\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.d.ts b/node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.d.ts
index 2ebabb1..3c00293 100644
--- a/node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.d.ts
+++ b/node_modules/typeorm/browser/error/QueryRunnerAlreadyReleasedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class QueryRunnerAlreadyReleasedError extends TypeORMError {
     constructor();
 }
diff --git a/node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.d.ts b/node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.d.ts
index df6a438..91efd98 100644
--- a/node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.d.ts
+++ b/node_modules/typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when consumer tries to use query runner from query runner provider after it was released.
  */
diff --git a/node_modules/typeorm/browser/error/RepositoryNotTreeError.d.ts b/node_modules/typeorm/browser/error/RepositoryNotTreeError.d.ts
index bbbac36..dfcc7fc 100644
--- a/node_modules/typeorm/browser/error/RepositoryNotTreeError.d.ts
+++ b/node_modules/typeorm/browser/error/RepositoryNotTreeError.d.ts
@@ -1,5 +1,5 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { TypeORMError } from "./TypeORMError";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when repository for the given class is not found.
  */
diff --git a/node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.d.ts b/node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.d.ts
index beb1506..3a88574 100644
--- a/node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.d.ts
+++ b/node_modules/typeorm/browser/error/ReturningStatementNotSupportedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when user tries to build a query with RETURNING / OUTPUT statement,
  * but used database does not support it.
diff --git a/node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.d.ts b/node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.d.ts
index 822585f..1fa4e70 100644
--- a/node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.d.ts
+++ b/node_modules/typeorm/browser/error/SubjectRemovedAndUpdatedError.d.ts
@@ -1,5 +1,5 @@
-import { Subject } from "../persistence/Subject";
-import { TypeORMError } from "./TypeORMError";
+import { Subject } from "typeorm/browser/persistence/Subject";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when same object is scheduled for remove and updation at the same time.
  */
diff --git a/node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.d.ts b/node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.d.ts
index 7b4b730..764417f 100644
--- a/node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.d.ts
+++ b/node_modules/typeorm/browser/error/SubjectWithoutIdentifierError.d.ts
@@ -1,5 +1,5 @@
-import { Subject } from "../persistence/Subject";
-import { TypeORMError } from "./TypeORMError";
+import { Subject } from "typeorm/browser/persistence/Subject";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when operation is going to be executed on a subject without identifier.
  * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.
diff --git a/node_modules/typeorm/browser/error/TransactionAlreadyStartedError.d.ts b/node_modules/typeorm/browser/error/TransactionAlreadyStartedError.d.ts
index 1e651be..7138564 100644
--- a/node_modules/typeorm/browser/error/TransactionAlreadyStartedError.d.ts
+++ b/node_modules/typeorm/browser/error/TransactionAlreadyStartedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when transaction is already started and user tries to run it again.
  */
diff --git a/node_modules/typeorm/browser/error/TransactionNotStartedError.d.ts b/node_modules/typeorm/browser/error/TransactionNotStartedError.d.ts
index 9498cad..429aa67 100644
--- a/node_modules/typeorm/browser/error/TransactionNotStartedError.d.ts
+++ b/node_modules/typeorm/browser/error/TransactionNotStartedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 /**
  * Thrown when transaction is not started yet and user tries to run commit or rollback.
  */
diff --git a/node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.d.ts b/node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.d.ts
index 1eb9e04..ad52d99 100644
--- a/node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.d.ts
+++ b/node_modules/typeorm/browser/error/TreeRepositoryNotSupportedError.d.ts
@@ -1,5 +1,5 @@
-import { Driver } from "../driver/Driver";
-import { TypeORMError } from "./TypeORMError";
+import { Driver } from "typeorm/browser/driver/Driver";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class TreeRepositoryNotSupportedError extends TypeORMError {
     constructor(driver: Driver);
 }
diff --git a/node_modules/typeorm/browser/error/UpdateValuesMissingError.d.ts b/node_modules/typeorm/browser/error/UpdateValuesMissingError.d.ts
index 5825396..486d0ac 100644
--- a/node_modules/typeorm/browser/error/UpdateValuesMissingError.d.ts
+++ b/node_modules/typeorm/browser/error/UpdateValuesMissingError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class UpdateValuesMissingError extends TypeORMError {
     constructor();
 }
diff --git a/node_modules/typeorm/browser/error/UsingJoinColumnIsNotAllowedError.d.ts b/node_modules/typeorm/browser/error/UsingJoinColumnIsNotAllowedError.d.ts
index b8e50d6..6eeabce 100644
--- a/node_modules/typeorm/browser/error/UsingJoinColumnIsNotAllowedError.d.ts
+++ b/node_modules/typeorm/browser/error/UsingJoinColumnIsNotAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class UsingJoinColumnIsNotAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts b/node_modules/typeorm/browser/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts
index fd69b60..fc97e48 100644
--- a/node_modules/typeorm/browser/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts
+++ b/node_modules/typeorm/browser/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class UsingJoinColumnOnlyOnOneSideAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/UsingJoinTableIsNotAllowedError.d.ts b/node_modules/typeorm/browser/error/UsingJoinTableIsNotAllowedError.d.ts
index 4e81da1..678d030 100644
--- a/node_modules/typeorm/browser/error/UsingJoinTableIsNotAllowedError.d.ts
+++ b/node_modules/typeorm/browser/error/UsingJoinTableIsNotAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class UsingJoinTableIsNotAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts b/node_modules/typeorm/browser/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts
index 6f969b0..52abbc0 100644
--- a/node_modules/typeorm/browser/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts
+++ b/node_modules/typeorm/browser/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/browser/error/TypeORMError";
 export declare class UsingJoinTableOnlyOnOneSideAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/browser/error/index.d.ts b/node_modules/typeorm/browser/error/index.d.ts
index cfe3615..5d4ce9d 100644
--- a/node_modules/typeorm/browser/error/index.d.ts
+++ b/node_modules/typeorm/browser/error/index.d.ts
@@ -1,62 +1,62 @@
-export * from "./CannotReflectMethodParameterTypeError";
-export * from "./AlreadyHasActiveConnectionError";
-export * from "./SubjectWithoutIdentifierError";
-export * from "./CannotConnectAlreadyConnectedError";
-export * from "./LockNotSupportedOnGivenDriverError";
-export * from "./ConnectionIsNotSetError";
-export * from "./CannotCreateEntityIdMapError";
-export * from "./MetadataAlreadyExistsError";
-export * from "./CannotDetermineEntityError";
-export * from "./UpdateValuesMissingError";
-export * from "./TreeRepositoryNotSupportedError";
-export * from "./CustomRepositoryNotFoundError";
-export * from "./TransactionNotStartedError";
-export * from "./TransactionAlreadyStartedError";
-export * from "./EntityNotFoundError";
-export * from "./EntityMetadataNotFoundError";
-export * from "./MustBeEntityError";
-export * from "./OptimisticLockVersionMismatchError";
-export * from "./LimitOnUpdateNotSupportedError";
-export * from "./PrimaryColumnCannotBeNullableError";
-export * from "./CustomRepositoryCannotInheritRepositoryError";
-export * from "./QueryRunnerProviderAlreadyReleasedError";
-export * from "./CannotAttachTreeChildrenEntityError";
-export * from "./CustomRepositoryDoesNotHaveEntityError";
-export * from "./MissingDeleteDateColumnError";
-export * from "./NoConnectionForRepositoryError";
-export * from "./CircularRelationsError";
-export * from "./ReturningStatementNotSupportedError";
-export * from "./UsingJoinTableIsNotAllowedError";
-export * from "./MissingJoinColumnError";
-export * from "./MissingPrimaryColumnError";
-export * from "./EntityPropertyNotFoundError";
-export * from "./MissingDriverError";
-export * from "./DriverPackageNotInstalledError";
-export * from "./CannotGetEntityManagerNotConnectedError";
-export * from "./ConnectionNotFoundError";
-export * from "./NoVersionOrUpdateDateColumnError";
-export * from "./InsertValuesMissingError";
-export * from "./OptimisticLockCanNotBeUsedError";
-export * from "./MetadataWithSuchNameAlreadyExistsError";
-export * from "./DriverOptionNotSetError";
-export * from "./FindRelationsNotFoundError";
-export * from "./NamingStrategyNotFoundError";
-export * from "./PessimisticLockTransactionRequiredError";
-export * from "./RepositoryNotTreeError";
-export * from "./DataTypeNotSupportedError";
-export * from "./InitializedRelationError";
-export * from "./MissingJoinTableError";
-export * from "./QueryFailedError";
-export * from "./NoNeedToReleaseEntityManagerError";
-export * from "./UsingJoinColumnOnlyOnOneSideAllowedError";
-export * from "./UsingJoinTableOnlyOnOneSideAllowedError";
-export * from "./SubjectRemovedAndUpdatedError";
-export * from "./PersistedEntityNotFoundError";
-export * from "./UsingJoinColumnIsNotAllowedError";
-export * from "./ColumnTypeUndefinedError";
-export * from "./QueryRunnerAlreadyReleasedError";
-export * from "./OffsetWithoutLimitNotSupportedError";
-export * from "./CannotExecuteNotConnectedError";
-export * from "./NoConnectionOptionError";
-export * from "./TypeORMError";
-export * from "./ForbiddenTransactionModeOverrideError";
+export * from "typeorm/browser/error/CannotReflectMethodParameterTypeError";
+export * from "typeorm/browser/error/AlreadyHasActiveConnectionError";
+export * from "typeorm/browser/error/SubjectWithoutIdentifierError";
+export * from "typeorm/browser/error/CannotConnectAlreadyConnectedError";
+export * from "typeorm/browser/error/LockNotSupportedOnGivenDriverError";
+export * from "typeorm/browser/error/ConnectionIsNotSetError";
+export * from "typeorm/browser/error/CannotCreateEntityIdMapError";
+export * from "typeorm/browser/error/MetadataAlreadyExistsError";
+export * from "typeorm/browser/error/CannotDetermineEntityError";
+export * from "typeorm/browser/error/UpdateValuesMissingError";
+export * from "typeorm/browser/error/TreeRepositoryNotSupportedError";
+export * from "typeorm/browser/error/CustomRepositoryNotFoundError";
+export * from "typeorm/browser/error/TransactionNotStartedError";
+export * from "typeorm/browser/error/TransactionAlreadyStartedError";
+export * from "typeorm/browser/error/EntityNotFoundError";
+export * from "typeorm/browser/error/EntityMetadataNotFoundError";
+export * from "typeorm/browser/error/MustBeEntityError";
+export * from "typeorm/browser/error/OptimisticLockVersionMismatchError";
+export * from "typeorm/browser/error/LimitOnUpdateNotSupportedError";
+export * from "typeorm/browser/error/PrimaryColumnCannotBeNullableError";
+export * from "typeorm/browser/error/CustomRepositoryCannotInheritRepositoryError";
+export * from "typeorm/browser/error/QueryRunnerProviderAlreadyReleasedError";
+export * from "typeorm/browser/error/CannotAttachTreeChildrenEntityError";
+export * from "typeorm/browser/error/CustomRepositoryDoesNotHaveEntityError";
+export * from "typeorm/browser/error/MissingDeleteDateColumnError";
+export * from "typeorm/browser/error/NoConnectionForRepositoryError";
+export * from "typeorm/browser/error/CircularRelationsError";
+export * from "typeorm/browser/error/ReturningStatementNotSupportedError";
+export * from "typeorm/browser/error/UsingJoinTableIsNotAllowedError";
+export * from "typeorm/browser/error/MissingJoinColumnError";
+export * from "typeorm/browser/error/MissingPrimaryColumnError";
+export * from "typeorm/browser/error/EntityPropertyNotFoundError";
+export * from "typeorm/browser/error/MissingDriverError";
+export * from "typeorm/browser/error/DriverPackageNotInstalledError";
+export * from "typeorm/browser/error/CannotGetEntityManagerNotConnectedError";
+export * from "typeorm/browser/error/ConnectionNotFoundError";
+export * from "typeorm/browser/error/NoVersionOrUpdateDateColumnError";
+export * from "typeorm/browser/error/InsertValuesMissingError";
+export * from "typeorm/browser/error/OptimisticLockCanNotBeUsedError";
+export * from "typeorm/browser/error/MetadataWithSuchNameAlreadyExistsError";
+export * from "typeorm/browser/error/DriverOptionNotSetError";
+export * from "typeorm/browser/error/FindRelationsNotFoundError";
+export * from "typeorm/browser/error/NamingStrategyNotFoundError";
+export * from "typeorm/browser/error/PessimisticLockTransactionRequiredError";
+export * from "typeorm/browser/error/RepositoryNotTreeError";
+export * from "typeorm/browser/error/DataTypeNotSupportedError";
+export * from "typeorm/browser/error/InitializedRelationError";
+export * from "typeorm/browser/error/MissingJoinTableError";
+export * from "typeorm/browser/error/QueryFailedError";
+export * from "typeorm/browser/error/NoNeedToReleaseEntityManagerError";
+export * from "typeorm/browser/error/UsingJoinColumnOnlyOnOneSideAllowedError";
+export * from "typeorm/browser/error/UsingJoinTableOnlyOnOneSideAllowedError";
+export * from "typeorm/browser/error/SubjectRemovedAndUpdatedError";
+export * from "typeorm/browser/error/PersistedEntityNotFoundError";
+export * from "typeorm/browser/error/UsingJoinColumnIsNotAllowedError";
+export * from "typeorm/browser/error/ColumnTypeUndefinedError";
+export * from "typeorm/browser/error/QueryRunnerAlreadyReleasedError";
+export * from "typeorm/browser/error/OffsetWithoutLimitNotSupportedError";
+export * from "typeorm/browser/error/CannotExecuteNotConnectedError";
+export * from "typeorm/browser/error/NoConnectionOptionError";
+export * from "typeorm/browser/error/TypeORMError";
+export * from "typeorm/browser/error/ForbiddenTransactionModeOverrideError";
diff --git a/node_modules/typeorm/browser/find-options/EqualOperator.d.ts b/node_modules/typeorm/browser/find-options/EqualOperator.d.ts
index 7212b11..4958a02 100644
--- a/node_modules/typeorm/browser/find-options/EqualOperator.d.ts
+++ b/node_modules/typeorm/browser/find-options/EqualOperator.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "./FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 export declare class EqualOperator<T> extends FindOperator<T> {
     readonly "@instanceof": symbol;
     constructor(value: T | FindOperator<T>);
diff --git a/node_modules/typeorm/browser/find-options/FindManyOptions.d.ts b/node_modules/typeorm/browser/find-options/FindManyOptions.d.ts
index a2561d6..14bcf3c 100644
--- a/node_modules/typeorm/browser/find-options/FindManyOptions.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindManyOptions.d.ts
@@ -1,4 +1,4 @@
-import { FindOneOptions } from "./FindOneOptions";
+import { FindOneOptions } from "typeorm/browser/find-options/FindOneOptions";
 /**
  * Defines a special criteria to find specific entities.
  */
diff --git a/node_modules/typeorm/browser/find-options/FindOneOptions.d.ts b/node_modules/typeorm/browser/find-options/FindOneOptions.d.ts
index 55371f3..fef2ffa 100644
--- a/node_modules/typeorm/browser/find-options/FindOneOptions.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindOneOptions.d.ts
@@ -1,8 +1,8 @@
-import { JoinOptions } from "./JoinOptions";
-import { FindOptionsWhere } from "./FindOptionsWhere";
-import { FindOptionsSelect, FindOptionsSelectByString } from "./FindOptionsSelect";
-import { FindOptionsRelationByString, FindOptionsRelations } from "./FindOptionsRelations";
-import { FindOptionsOrder } from "./FindOptionsOrder";
+import { JoinOptions } from "typeorm/browser/find-options/JoinOptions";
+import { FindOptionsWhere } from "typeorm/browser/find-options/FindOptionsWhere";
+import { FindOptionsSelect, FindOptionsSelectByString } from "typeorm/browser/find-options/FindOptionsSelect";
+import { FindOptionsRelationByString, FindOptionsRelations } from "typeorm/browser/find-options/FindOptionsRelations";
+import { FindOptionsOrder } from "typeorm/browser/find-options/FindOptionsOrder";
 /**
  * Defines a special criteria to find specific entity.
  */
diff --git a/node_modules/typeorm/browser/find-options/FindOperator.d.ts b/node_modules/typeorm/browser/find-options/FindOperator.d.ts
index 6161376..311094b 100644
--- a/node_modules/typeorm/browser/find-options/FindOperator.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindOperator.d.ts
@@ -1,6 +1,6 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { FindOperatorType } from "./FindOperatorType";
-import { ValueTransformer } from "../decorator/options/ValueTransformer";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { FindOperatorType } from "typeorm/browser/find-options/FindOperatorType";
+import { ValueTransformer } from "typeorm/browser/decorator/options/ValueTransformer";
 type SqlGeneratorType = (aliasPath: string) => string;
 /**
  * Find Operator used in Find Conditions.
diff --git a/node_modules/typeorm/browser/find-options/FindOptionsOrder.d.ts b/node_modules/typeorm/browser/find-options/FindOptionsOrder.d.ts
index 31b188a..7e35588 100644
--- a/node_modules/typeorm/browser/find-options/FindOptionsOrder.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindOptionsOrder.d.ts
@@ -1,5 +1,5 @@
 
-import { ObjectId } from "../driver/mongodb/typings";
+import { ObjectId } from "typeorm/browser/driver/mongodb/typings";
 /**
  * A single property handler for FindOptionsOrder.
  */
diff --git a/node_modules/typeorm/browser/find-options/FindOptionsRelations.d.ts b/node_modules/typeorm/browser/find-options/FindOptionsRelations.d.ts
index c5044af..530e357 100644
--- a/node_modules/typeorm/browser/find-options/FindOptionsRelations.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindOptionsRelations.d.ts
@@ -1,5 +1,5 @@
 
-import { ObjectId } from "../driver/mongodb/typings";
+import { ObjectId } from "typeorm/browser/driver/mongodb/typings";
 /**
  * A single property handler for FindOptionsRelations.
  */
diff --git a/node_modules/typeorm/browser/find-options/FindOptionsSelect.d.ts b/node_modules/typeorm/browser/find-options/FindOptionsSelect.d.ts
index 92551de..2636e50 100644
--- a/node_modules/typeorm/browser/find-options/FindOptionsSelect.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindOptionsSelect.d.ts
@@ -1,5 +1,5 @@
 
-import { ObjectId } from "../driver/mongodb/typings";
+import { ObjectId } from "typeorm/browser/driver/mongodb/typings";
 /**
  * A single property handler for FindOptionsSelect.
  */
diff --git a/node_modules/typeorm/browser/find-options/FindOptionsUtils.d.ts b/node_modules/typeorm/browser/find-options/FindOptionsUtils.d.ts
index 677ca22..e346829 100644
--- a/node_modules/typeorm/browser/find-options/FindOptionsUtils.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindOptionsUtils.d.ts
@@ -1,9 +1,9 @@
-import { FindManyOptions } from "./FindManyOptions";
-import { FindOneOptions } from "./FindOneOptions";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { FindTreeOptions } from "./FindTreeOptions";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { FindManyOptions } from "typeorm/browser/find-options/FindManyOptions";
+import { FindOneOptions } from "typeorm/browser/find-options/FindOneOptions";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { FindTreeOptions } from "typeorm/browser/find-options/FindTreeOptions";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Utilities to work with FindOptions.
  */
diff --git a/node_modules/typeorm/browser/find-options/FindOptionsUtils.js b/node_modules/typeorm/browser/find-options/FindOptionsUtils.js
index 1a78db2..86cb875 100644
--- a/node_modules/typeorm/browser/find-options/FindOptionsUtils.js
+++ b/node_modules/typeorm/browser/find-options/FindOptionsUtils.js
@@ -300,7 +300,7 @@ export class FindOptionsUtils {
     static joinEagerRelations(qb, alias, metadata) {
         metadata.eagerRelations.forEach((relation) => {
             // generate a relation alias
-            let relationAlias = DriverUtils.buildAlias(qb.connection.driver, { joiner: "__" }, alias, relation.propertyPath);
+            let relationAlias = DriverUtils.buildAlias(qb.connection.driver, { joiner: "__" }, alias, relation.propertyName);
             // add a join for the relation
             // Checking whether the relation wasn't joined yet.
             let addJoin = true;
diff --git a/node_modules/typeorm/browser/find-options/FindOptionsUtils.js.map b/node_modules/typeorm/browser/find-options/FindOptionsUtils.js.map
index 57f222f..19ae532 100644
--- a/node_modules/typeorm/browser/find-options/FindOptionsUtils.js.map
+++ b/node_modules/typeorm/browser/find-options/FindOptionsUtils.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/find-options/FindOptionsUtils.ts"],"names":[],"mappings":"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","file":"FindOptionsUtils.js","sourcesContent":["import { FindManyOptions } from \"./FindManyOptions\"\nimport { FindOneOptions } from \"./FindOneOptions\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { FindRelationsNotFoundError } from \"../error\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { FindTreeOptions } from \"./FindTreeOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { EntityPropertyNotFoundError } from \"../error\"\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions<Entity = any>(\n        obj: any,\n    ): obj is FindOneOptions<Entity> {\n        const possibleOptions: FindOneOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (Array.isArray(possibleOptions.select) ||\n                Array.isArray(possibleOptions.relations) ||\n                typeof possibleOptions.select === \"object\" ||\n                typeof possibleOptions.relations === \"object\" ||\n                typeof possibleOptions.where === \"object\" ||\n                // typeof possibleOptions.where === \"string\" ||\n                typeof possibleOptions.join === \"object\" ||\n                typeof possibleOptions.order === \"object\" ||\n                typeof possibleOptions.cache === \"object\" ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                typeof possibleOptions.comment === \"string\" ||\n                typeof possibleOptions.lock === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                typeof possibleOptions.withDeleted === \"boolean\" ||\n                typeof possibleOptions.relationLoadStrategy === \"string\" ||\n                typeof possibleOptions.transaction === \"boolean\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions<Entity = any>(\n        obj: any,\n    ): obj is FindManyOptions<Entity> {\n        const possibleOptions: FindManyOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (this.isFindOneOptions(possibleOptions) ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"string\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"string\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string | undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias\n\n        return undefined\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }*/\n\n    /**\n     * Applies give find options to the given query builder.\n\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (options.transaction === true) {\n            qb.expressionMap.useTransaction = true;\n        }\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.comment) {\n            qb.comment(options.comment);\n        }\n\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.hasColumnWithPropertyPath(`${select}`))\n                    throw new TypeORMError(`${select} column was not found in the ${metadata.name} entity.`);\n\n                const columns = metadata.findColumnsWithPropertyPath(`${select}`);\n\n                for (const column of columns) {\n                    qb.addSelect(qb.alias + \".\" + column.propertyPath);\n                }\n            });\n        }\n\n        if (options.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations];\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version);\n            } else if (\n                options.lock.mode === \"pessimistic_read\" ||\n                options.lock.mode === \"pessimistic_write\" ||\n                options.lock.mode === \"dirty_read\" ||\n                options.lock.mode === \"pessimistic_partial_write\" ||\n                options.lock.mode === \"pessimistic_write_or_fail\" ||\n                options.lock.mode === \"for_no_key_update\" ||\n                options.lock.mode === \"for_key_share\"\n            ) {\n                const tableNames = options.lock.tables ? options.lock.tables.map((table) => {\n                    const tableAlias = qb.expressionMap.aliases.find((alias) => {\n                        return alias.metadata.tableNameWithoutPrefix === table;\n                    });\n                    if (!tableAlias) {\n                        throw new TypeORMError(`\"${table}\" is not part of this query`);\n                    }\n                    return qb.escape(tableAlias.name);\n                }) : undefined;\n                qb.setLock(options.lock.mode, undefined, tableNames);\n            }\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        return qb;\n    }*/\n\n    static applyOptionsToTreeQueryBuilder<T extends ObjectLiteral>(\n        qb: SelectQueryBuilder<T>,\n        options?: FindTreeOptions,\n    ): SelectQueryBuilder<T> {\n        if (options?.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations]\n\n            FindOptionsUtils.applyRelationsRecursively(\n                qb,\n                allRelations,\n                qb.expressionMap.mainAlias!.name,\n                qb.expressionMap.mainAlias!.metadata,\n                \"\",\n            )\n\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations)\n        }\n\n        return qb\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    public static applyRelationsRecursively(\n        qb: SelectQueryBuilder<any>,\n        allRelations: string[],\n        alias: string,\n        metadata: EntityMetadata,\n        prefix: string,\n    ): void {\n        // find all relations that match given prefix\n        let matchedBaseRelations: RelationMetadata[] = []\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\")\n            matchedBaseRelations = allRelations\n                .filter((relation) => relation.match(regexp))\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(\n                        relation.replace(regexp, \"\"),\n                    ),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        } else {\n            matchedBaseRelations = allRelations\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(relation),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        }\n\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyPath,\n            )\n\n            // add a join for the found relation\n            const selection = alias + \".\" + relation.propertyPath\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                qb.concatRelationMetadata(relation)\n            } else {\n                qb.leftJoinAndSelect(selection, relationAlias)\n            }\n\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(\n                allRelations.indexOf(\n                    prefix\n                        ? prefix + \".\" + relation.propertyPath\n                        : relation.propertyPath,\n                ),\n                1,\n            )\n\n            // try to find sub-relations\n            let relationMetadata: EntityMetadata | undefined\n            let relationName: string | undefined\n\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                relationMetadata = relation.inverseEntityMetadata\n                relationName = relationAlias\n            } else {\n                const join = qb.expressionMap.joinAttributes.find(\n                    (join) => join.entityOrProperty === selection,\n                )\n                relationMetadata = join!.metadata!\n                relationName = join!.alias.name\n            }\n\n            if (!relationName || !relationMetadata) {\n                throw new EntityPropertyNotFoundError(\n                    relation.propertyPath,\n                    metadata,\n                )\n            }\n\n            this.applyRelationsRecursively(\n                qb,\n                allRelations,\n                relationName,\n                relationMetadata,\n                prefix\n                    ? prefix + \".\" + relation.propertyPath\n                    : relation.propertyPath,\n            )\n\n            // join the eager relations of the found relation\n            // Only supported for \"join\" relationLoadStrategy\n            if (qb.expressionMap.relationLoadStrategy === \"join\") {\n                const relMetadata = metadata.relations.find(\n                    (metadata) =>\n                        metadata.propertyName === relation.propertyPath,\n                )\n                if (relMetadata) {\n                    this.joinEagerRelations(\n                        qb,\n                        relationAlias,\n                        relMetadata.inverseEntityMetadata,\n                    )\n                }\n            }\n        })\n    }\n\n    public static joinEagerRelations(\n        qb: SelectQueryBuilder<any>,\n        alias: string,\n        metadata: EntityMetadata,\n    ) {\n        metadata.eagerRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyPath,\n            )\n\n            // add a join for the relation\n            // Checking whether the relation wasn't joined yet.\n            let addJoin = true\n            // TODO: Review this validation\n            for (const join of qb.expressionMap.joinAttributes) {\n                if (\n                    join.condition !== undefined ||\n                    join.mapToProperty !== undefined ||\n                    join.isMappingMany !== undefined ||\n                    join.direction !== \"LEFT\" ||\n                    join.entityOrProperty !==\n                        `${alias}.${relation.propertyPath}`\n                ) {\n                    continue\n                }\n                addJoin = false\n                relationAlias = join.alias.name\n                break\n            }\n\n            const joinAlreadyAdded = Boolean(\n                qb.expressionMap.joinAttributes.find(\n                    (joinAttribute) =>\n                        joinAttribute.alias.name === relationAlias,\n                ),\n            )\n\n            if (addJoin && !joinAlreadyAdded) {\n                qb.leftJoin(alias + \".\" + relation.propertyPath, relationAlias)\n            }\n\n            // Checking whether the relation wasn't selected yet.\n            // This check shall be after the join check to detect relationAlias.\n            let addSelect = true\n            for (const select of qb.expressionMap.selects) {\n                if (\n                    select.aliasName !== undefined ||\n                    select.virtual !== undefined ||\n                    select.selection !== relationAlias\n                ) {\n                    continue\n                }\n                addSelect = false\n                break\n            }\n\n            if (addSelect) {\n                qb.addSelect(relationAlias)\n            }\n\n            // (recursive) join the eager relations\n            this.joinEagerRelations(\n                qb,\n                relationAlias,\n                relation.inverseEntityMetadata,\n            )\n        })\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/find-options/FindOptionsUtils.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,0BAA0B,EAAE,MAAM,UAAU,CAAA;AAErD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAA;AAInD,OAAO,EAAE,2BAA2B,EAAE,MAAM,UAAU,CAAA;AAEtD;;GAEG;AACH,MAAM,OAAO,gBAAgB;IACzB,4EAA4E;IAC5E,wBAAwB;IACxB,4EAA4E;IAE5E;;OAEG;IACH,MAAM,CAAC,gBAAgB,CACnB,GAAQ;QAER,MAAM,eAAe,GAA2B,GAAG,CAAA;QACnD,OAAO,CACH,eAAe;YACf,CAAC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,MAAM,CAAC;gBAClC,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,SAAS,CAAC;gBACxC,OAAO,eAAe,CAAC,MAAM,KAAK,QAAQ;gBAC1C,OAAO,eAAe,CAAC,SAAS,KAAK,QAAQ;gBAC7C,OAAO,eAAe,CAAC,KAAK,KAAK,QAAQ;gBACzC,+CAA+C;gBAC/C,OAAO,eAAe,CAAC,IAAI,KAAK,QAAQ;gBACxC,OAAO,eAAe,CAAC,KAAK,KAAK,QAAQ;gBACzC,OAAO,eAAe,CAAC,KAAK,KAAK,QAAQ;gBACzC,OAAO,eAAe,CAAC,KAAK,KAAK,SAAS;gBAC1C,OAAO,eAAe,CAAC,KAAK,KAAK,QAAQ;gBACzC,OAAO,eAAe,CAAC,OAAO,KAAK,QAAQ;gBAC3C,OAAO,eAAe,CAAC,IAAI,KAAK,QAAQ;gBACxC,OAAO,eAAe,CAAC,eAAe,KAAK,QAAQ;gBACnD,OAAO,eAAe,CAAC,eAAe,KAAK,SAAS;gBACpD,OAAO,eAAe,CAAC,kBAAkB,KAAK,SAAS;gBACvD,OAAO,eAAe,CAAC,WAAW,KAAK,SAAS;gBAChD,OAAO,eAAe,CAAC,oBAAoB,KAAK,QAAQ;gBACxD,OAAO,eAAe,CAAC,WAAW,KAAK,SAAS,CAAC,CACxD,CAAA;IACL,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,iBAAiB,CACpB,GAAQ;QAER,MAAM,eAAe,GAA4B,GAAG,CAAA;QACpD,OAAO,CACH,eAAe;YACf,CAAC,IAAI,CAAC,gBAAgB,CAAC,eAAe,CAAC;gBACnC,OAAQ,eAAwC,CAAC,IAAI;oBACjD,QAAQ;gBACZ,OAAQ,eAAwC,CAAC,IAAI;oBACjD,QAAQ;gBACZ,OAAQ,eAAwC,CAAC,IAAI;oBACjD,QAAQ;gBACZ,OAAQ,eAAwC,CAAC,IAAI;oBACjD,QAAQ,CAAC,CACpB,CAAA;IACL,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,2BAA2B,CAAC,MAAW;QAC1C,IAAI,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI;YAC7C,OAAO,MAAM,CAAC,IAAI,CAAC,KAAK,CAAA;QAE5B,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;;;;;;;;;;OAWG;IAEH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;OAoJG;IAEH,MAAM,CAAC,8BAA8B,CACjC,EAAyB,EACzB,OAAyB;QAEzB,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,SAAS,EAAE;YACpB,uDAAuD;YACvD,MAAM,YAAY,GAAG,CAAC,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;YAE3C,gBAAgB,CAAC,yBAAyB,CACtC,EAAE,EACF,YAAY,EACZ,EAAE,CAAC,aAAa,CAAC,SAAU,CAAC,IAAI,EAChC,EAAE,CAAC,aAAa,CAAC,SAAU,CAAC,QAAQ,EACpC,EAAE,CACL,CAAA;YAED,4DAA4D;YAC5D,4GAA4G;YAC5G,qDAAqD;YACrD,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC;gBACvB,MAAM,IAAI,0BAA0B,CAAC,YAAY,CAAC,CAAA;SACzD;QAED,OAAO,EAAE,CAAA;IACb,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACI,MAAM,CAAC,yBAAyB,CACnC,EAA2B,EAC3B,YAAsB,EACtB,KAAa,EACb,QAAwB,EACxB,MAAc;QAEd,6CAA6C;QAC7C,IAAI,oBAAoB,GAAuB,EAAE,CAAA;QACjD,IAAI,MAAM,EAAE;YACR,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,KAAK,CAAC,CAAA;YACnE,oBAAoB,GAAG,YAAY;iBAC9B,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;iBAC5C,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CACd,QAAQ,CAAC,4BAA4B,CACjC,QAAQ,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAC/B,CACJ;iBACA,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAuB,CAAA;SACxD;aAAM;YACH,oBAAoB,GAAG,YAAY;iBAC9B,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CACd,QAAQ,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAClD;iBACA,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAuB,CAAA;SACxD;QAED,yDAAyD;QACzD,oBAAoB,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACtC,4BAA4B;YAC5B,IAAI,aAAa,GAAW,WAAW,CAAC,UAAU,CAC9C,EAAE,CAAC,UAAU,CAAC,MAAM,EACpB,EAAE,MAAM,EAAE,IAAI,EAAE,EAChB,KAAK,EACL,QAAQ,CAAC,YAAY,CACxB,CAAA;YAED,oCAAoC;YACpC,MAAM,SAAS,GAAG,KAAK,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,CAAA;YACrD,IAAI,EAAE,CAAC,aAAa,CAAC,oBAAoB,KAAK,OAAO,EAAE;gBACnD,EAAE,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAA;aACtC;iBAAM;gBACH,EAAE,CAAC,iBAAiB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAA;aACjD;YAED,gHAAgH;YAChH,YAAY,CAAC,MAAM,CACf,YAAY,CAAC,OAAO,CAChB,MAAM;gBACF,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY;gBACtC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAC9B,EACD,CAAC,CACJ,CAAA;YAED,4BAA4B;YAC5B,IAAI,gBAA4C,CAAA;YAChD,IAAI,YAAgC,CAAA;YAEpC,IAAI,EAAE,CAAC,aAAa,CAAC,oBAAoB,KAAK,OAAO,EAAE;gBACnD,gBAAgB,GAAG,QAAQ,CAAC,qBAAqB,CAAA;gBACjD,YAAY,GAAG,aAAa,CAAA;aAC/B;iBAAM;gBACH,MAAM,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAC7C,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,gBAAgB,KAAK,SAAS,CAChD,CAAA;gBACD,gBAAgB,GAAG,IAAK,CAAC,QAAS,CAAA;gBAClC,YAAY,GAAG,IAAK,CAAC,KAAK,CAAC,IAAI,CAAA;aAClC;YAED,IAAI,CAAC,YAAY,IAAI,CAAC,gBAAgB,EAAE;gBACpC,MAAM,IAAI,2BAA2B,CACjC,QAAQ,CAAC,YAAY,EACrB,QAAQ,CACX,CAAA;aACJ;YAED,IAAI,CAAC,yBAAyB,CAC1B,EAAE,EACF,YAAY,EACZ,YAAY,EACZ,gBAAgB,EAChB,MAAM;gBACF,CAAC,CAAC,MAAM,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY;gBACtC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAC9B,CAAA;YAED,iDAAiD;YACjD,iDAAiD;YACjD,IAAI,EAAE,CAAC,aAAa,CAAC,oBAAoB,KAAK,MAAM,EAAE;gBAClD,MAAM,WAAW,GAAG,QAAQ,CAAC,SAAS,CAAC,IAAI,CACvC,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,YAAY,KAAK,QAAQ,CAAC,YAAY,CACtD,CAAA;gBACD,IAAI,WAAW,EAAE;oBACb,IAAI,CAAC,kBAAkB,CACnB,EAAE,EACF,aAAa,EACb,WAAW,CAAC,qBAAqB,CACpC,CAAA;iBACJ;aACJ;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAEM,MAAM,CAAC,kBAAkB,CAC5B,EAA2B,EAC3B,KAAa,EACb,QAAwB;QAExB,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE,EAAE;YACzC,4BAA4B;YAC5B,IAAI,aAAa,GAAW,WAAW,CAAC,UAAU,CAC9C,EAAE,CAAC,UAAU,CAAC,MAAM,EACpB,EAAE,MAAM,EAAE,IAAI,EAAE,EAChB,KAAK,EACL,QAAQ,CAAC,YAAY,CACxB,CAAA;YAED,8BAA8B;YAC9B,mDAAmD;YACnD,IAAI,OAAO,GAAG,IAAI,CAAA;YAClB,+BAA+B;YAC/B,KAAK,MAAM,IAAI,IAAI,EAAE,CAAC,aAAa,CAAC,cAAc,EAAE;gBAChD,IACI,IAAI,CAAC,SAAS,KAAK,SAAS;oBAC5B,IAAI,CAAC,aAAa,KAAK,SAAS;oBAChC,IAAI,CAAC,aAAa,KAAK,SAAS;oBAChC,IAAI,CAAC,SAAS,KAAK,MAAM;oBACzB,IAAI,CAAC,gBAAgB;wBACjB,GAAG,KAAK,IAAI,QAAQ,CAAC,YAAY,EAAE,EACzC;oBACE,SAAQ;iBACX;gBACD,OAAO,GAAG,KAAK,CAAA;gBACf,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAA;gBAC/B,MAAK;aACR;YAED,MAAM,gBAAgB,GAAG,OAAO,CAC5B,EAAE,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CAChC,CAAC,aAAa,EAAE,EAAE,CACd,aAAa,CAAC,KAAK,CAAC,IAAI,KAAK,aAAa,CACjD,CACJ,CAAA;YAED,IAAI,OAAO,IAAI,CAAC,gBAAgB,EAAE;gBAC9B,EAAE,CAAC,QAAQ,CAAC,KAAK,GAAG,GAAG,GAAG,QAAQ,CAAC,YAAY,EAAE,aAAa,CAAC,CAAA;aAClE;YAED,qDAAqD;YACrD,oEAAoE;YACpE,IAAI,SAAS,GAAG,IAAI,CAAA;YACpB,KAAK,MAAM,MAAM,IAAI,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE;gBAC3C,IACI,MAAM,CAAC,SAAS,KAAK,SAAS;oBAC9B,MAAM,CAAC,OAAO,KAAK,SAAS;oBAC5B,MAAM,CAAC,SAAS,KAAK,aAAa,EACpC;oBACE,SAAQ;iBACX;gBACD,SAAS,GAAG,KAAK,CAAA;gBACjB,MAAK;aACR;YAED,IAAI,SAAS,EAAE;gBACX,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,CAAA;aAC9B;YAED,uCAAuC;YACvC,IAAI,CAAC,kBAAkB,CACnB,EAAE,EACF,aAAa,EACb,QAAQ,CAAC,qBAAqB,CACjC,CAAA;QACL,CAAC,CAAC,CAAA;IACN,CAAC;CACJ","file":"FindOptionsUtils.js","sourcesContent":["import { FindManyOptions } from \"./FindManyOptions\"\nimport { FindOneOptions } from \"./FindOneOptions\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { FindRelationsNotFoundError } from \"../error\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { FindTreeOptions } from \"./FindTreeOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { EntityPropertyNotFoundError } from \"../error\"\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions<Entity = any>(\n        obj: any,\n    ): obj is FindOneOptions<Entity> {\n        const possibleOptions: FindOneOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (Array.isArray(possibleOptions.select) ||\n                Array.isArray(possibleOptions.relations) ||\n                typeof possibleOptions.select === \"object\" ||\n                typeof possibleOptions.relations === \"object\" ||\n                typeof possibleOptions.where === \"object\" ||\n                // typeof possibleOptions.where === \"string\" ||\n                typeof possibleOptions.join === \"object\" ||\n                typeof possibleOptions.order === \"object\" ||\n                typeof possibleOptions.cache === \"object\" ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                typeof possibleOptions.comment === \"string\" ||\n                typeof possibleOptions.lock === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                typeof possibleOptions.withDeleted === \"boolean\" ||\n                typeof possibleOptions.relationLoadStrategy === \"string\" ||\n                typeof possibleOptions.transaction === \"boolean\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions<Entity = any>(\n        obj: any,\n    ): obj is FindManyOptions<Entity> {\n        const possibleOptions: FindManyOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (this.isFindOneOptions(possibleOptions) ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"string\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"string\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string | undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias\n\n        return undefined\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }*/\n\n    /**\n     * Applies give find options to the given query builder.\n\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (options.transaction === true) {\n            qb.expressionMap.useTransaction = true;\n        }\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.comment) {\n            qb.comment(options.comment);\n        }\n\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.hasColumnWithPropertyPath(`${select}`))\n                    throw new TypeORMError(`${select} column was not found in the ${metadata.name} entity.`);\n\n                const columns = metadata.findColumnsWithPropertyPath(`${select}`);\n\n                for (const column of columns) {\n                    qb.addSelect(qb.alias + \".\" + column.propertyPath);\n                }\n            });\n        }\n\n        if (options.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations];\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version);\n            } else if (\n                options.lock.mode === \"pessimistic_read\" ||\n                options.lock.mode === \"pessimistic_write\" ||\n                options.lock.mode === \"dirty_read\" ||\n                options.lock.mode === \"pessimistic_partial_write\" ||\n                options.lock.mode === \"pessimistic_write_or_fail\" ||\n                options.lock.mode === \"for_no_key_update\" ||\n                options.lock.mode === \"for_key_share\"\n            ) {\n                const tableNames = options.lock.tables ? options.lock.tables.map((table) => {\n                    const tableAlias = qb.expressionMap.aliases.find((alias) => {\n                        return alias.metadata.tableNameWithoutPrefix === table;\n                    });\n                    if (!tableAlias) {\n                        throw new TypeORMError(`\"${table}\" is not part of this query`);\n                    }\n                    return qb.escape(tableAlias.name);\n                }) : undefined;\n                qb.setLock(options.lock.mode, undefined, tableNames);\n            }\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        return qb;\n    }*/\n\n    static applyOptionsToTreeQueryBuilder<T extends ObjectLiteral>(\n        qb: SelectQueryBuilder<T>,\n        options?: FindTreeOptions,\n    ): SelectQueryBuilder<T> {\n        if (options?.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations]\n\n            FindOptionsUtils.applyRelationsRecursively(\n                qb,\n                allRelations,\n                qb.expressionMap.mainAlias!.name,\n                qb.expressionMap.mainAlias!.metadata,\n                \"\",\n            )\n\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations)\n        }\n\n        return qb\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    public static applyRelationsRecursively(\n        qb: SelectQueryBuilder<any>,\n        allRelations: string[],\n        alias: string,\n        metadata: EntityMetadata,\n        prefix: string,\n    ): void {\n        // find all relations that match given prefix\n        let matchedBaseRelations: RelationMetadata[] = []\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\")\n            matchedBaseRelations = allRelations\n                .filter((relation) => relation.match(regexp))\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(\n                        relation.replace(regexp, \"\"),\n                    ),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        } else {\n            matchedBaseRelations = allRelations\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(relation),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        }\n\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyPath,\n            )\n\n            // add a join for the found relation\n            const selection = alias + \".\" + relation.propertyPath\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                qb.concatRelationMetadata(relation)\n            } else {\n                qb.leftJoinAndSelect(selection, relationAlias)\n            }\n\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(\n                allRelations.indexOf(\n                    prefix\n                        ? prefix + \".\" + relation.propertyPath\n                        : relation.propertyPath,\n                ),\n                1,\n            )\n\n            // try to find sub-relations\n            let relationMetadata: EntityMetadata | undefined\n            let relationName: string | undefined\n\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                relationMetadata = relation.inverseEntityMetadata\n                relationName = relationAlias\n            } else {\n                const join = qb.expressionMap.joinAttributes.find(\n                    (join) => join.entityOrProperty === selection,\n                )\n                relationMetadata = join!.metadata!\n                relationName = join!.alias.name\n            }\n\n            if (!relationName || !relationMetadata) {\n                throw new EntityPropertyNotFoundError(\n                    relation.propertyPath,\n                    metadata,\n                )\n            }\n\n            this.applyRelationsRecursively(\n                qb,\n                allRelations,\n                relationName,\n                relationMetadata,\n                prefix\n                    ? prefix + \".\" + relation.propertyPath\n                    : relation.propertyPath,\n            )\n\n            // join the eager relations of the found relation\n            // Only supported for \"join\" relationLoadStrategy\n            if (qb.expressionMap.relationLoadStrategy === \"join\") {\n                const relMetadata = metadata.relations.find(\n                    (metadata) =>\n                        metadata.propertyName === relation.propertyPath,\n                )\n                if (relMetadata) {\n                    this.joinEagerRelations(\n                        qb,\n                        relationAlias,\n                        relMetadata.inverseEntityMetadata,\n                    )\n                }\n            }\n        })\n    }\n\n    public static joinEagerRelations(\n        qb: SelectQueryBuilder<any>,\n        alias: string,\n        metadata: EntityMetadata,\n    ) {\n        metadata.eagerRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyName,\n            )\n\n            // add a join for the relation\n            // Checking whether the relation wasn't joined yet.\n            let addJoin = true\n            // TODO: Review this validation\n            for (const join of qb.expressionMap.joinAttributes) {\n                if (\n                    join.condition !== undefined ||\n                    join.mapToProperty !== undefined ||\n                    join.isMappingMany !== undefined ||\n                    join.direction !== \"LEFT\" ||\n                    join.entityOrProperty !==\n                        `${alias}.${relation.propertyPath}`\n                ) {\n                    continue\n                }\n                addJoin = false\n                relationAlias = join.alias.name\n                break\n            }\n\n            const joinAlreadyAdded = Boolean(\n                qb.expressionMap.joinAttributes.find(\n                    (joinAttribute) =>\n                        joinAttribute.alias.name === relationAlias,\n                ),\n            )\n\n            if (addJoin && !joinAlreadyAdded) {\n                qb.leftJoin(alias + \".\" + relation.propertyPath, relationAlias)\n            }\n\n            // Checking whether the relation wasn't selected yet.\n            // This check shall be after the join check to detect relationAlias.\n            let addSelect = true\n            for (const select of qb.expressionMap.selects) {\n                if (\n                    select.aliasName !== undefined ||\n                    select.virtual !== undefined ||\n                    select.selection !== relationAlias\n                ) {\n                    continue\n                }\n                addSelect = false\n                break\n            }\n\n            if (addSelect) {\n                qb.addSelect(relationAlias)\n            }\n\n            // (recursive) join the eager relations\n            this.joinEagerRelations(\n                qb,\n                relationAlias,\n                relation.inverseEntityMetadata,\n            )\n        })\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/find-options/FindOptionsWhere.d.ts b/node_modules/typeorm/browser/find-options/FindOptionsWhere.d.ts
index 593f302..ff1f4ed 100644
--- a/node_modules/typeorm/browser/find-options/FindOptionsWhere.d.ts
+++ b/node_modules/typeorm/browser/find-options/FindOptionsWhere.d.ts
@@ -1,7 +1,7 @@
 
-import { FindOperator } from "./FindOperator";
-import { ObjectId } from "../driver/mongodb/typings";
-import { EqualOperator } from "./EqualOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
+import { ObjectId } from "typeorm/browser/driver/mongodb/typings";
+import { EqualOperator } from "typeorm/browser/find-options/EqualOperator";
 /**
  * A single property handler for FindOptionsWhere.
  *
diff --git a/node_modules/typeorm/browser/find-options/mongodb/MongoFindManyOptions.d.ts b/node_modules/typeorm/browser/find-options/mongodb/MongoFindManyOptions.d.ts
index 0d16250..5e855c5 100644
--- a/node_modules/typeorm/browser/find-options/mongodb/MongoFindManyOptions.d.ts
+++ b/node_modules/typeorm/browser/find-options/mongodb/MongoFindManyOptions.d.ts
@@ -1,4 +1,4 @@
-import { MongoFindOneOptions } from "./MongoFindOneOptions";
+import { MongoFindOneOptions } from "typeorm/browser/find-options/mongodb/MongoFindOneOptions";
 /**
  * Defines a special criteria to find specific entities.
  */
diff --git a/node_modules/typeorm/browser/find-options/mongodb/MongoFindOneOptions.d.ts b/node_modules/typeorm/browser/find-options/mongodb/MongoFindOneOptions.d.ts
index c8bd14e..6b05f7f 100644
--- a/node_modules/typeorm/browser/find-options/mongodb/MongoFindOneOptions.d.ts
+++ b/node_modules/typeorm/browser/find-options/mongodb/MongoFindOneOptions.d.ts
@@ -1,5 +1,5 @@
-import { FindOneOptions } from "../FindOneOptions";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { FindOneOptions } from "typeorm/browser/find-options/FindOneOptions";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Defines a special criteria to find specific entity.
  */
diff --git a/node_modules/typeorm/browser/find-options/operator/And.d.ts b/node_modules/typeorm/browser/find-options/operator/And.d.ts
index ca8d0be..c927371 100644
--- a/node_modules/typeorm/browser/find-options/operator/And.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/And.d.ts
@@ -1,2 +1,2 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 export declare function And<T>(...values: FindOperator<T>[]): FindOperator<T>;
diff --git a/node_modules/typeorm/browser/find-options/operator/Any.d.ts b/node_modules/typeorm/browser/find-options/operator/Any.d.ts
index a152720..5374f7d 100644
--- a/node_modules/typeorm/browser/find-options/operator/Any.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/Any.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: Any([...]) }
diff --git a/node_modules/typeorm/browser/find-options/operator/ArrayContainedBy.d.ts b/node_modules/typeorm/browser/find-options/operator/ArrayContainedBy.d.ts
index 3f40057..509d7b4 100644
--- a/node_modules/typeorm/browser/find-options/operator/ArrayContainedBy.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/ArrayContainedBy.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: ArrayContainedBy([...]) }
diff --git a/node_modules/typeorm/browser/find-options/operator/ArrayContains.d.ts b/node_modules/typeorm/browser/find-options/operator/ArrayContains.d.ts
index 97998e2..ccfdd27 100644
--- a/node_modules/typeorm/browser/find-options/operator/ArrayContains.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/ArrayContains.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: ArrayContains([...]) }
diff --git a/node_modules/typeorm/browser/find-options/operator/ArrayOverlap.d.ts b/node_modules/typeorm/browser/find-options/operator/ArrayOverlap.d.ts
index 6ea8a70..3aa3836 100644
--- a/node_modules/typeorm/browser/find-options/operator/ArrayOverlap.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/ArrayOverlap.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: ArrayOverlap([...]) }
diff --git a/node_modules/typeorm/browser/find-options/operator/Between.d.ts b/node_modules/typeorm/browser/find-options/operator/Between.d.ts
index b328156..dc77166 100644
--- a/node_modules/typeorm/browser/find-options/operator/Between.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/Between.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: Between(x, y) }
diff --git a/node_modules/typeorm/browser/find-options/operator/Equal.d.ts b/node_modules/typeorm/browser/find-options/operator/Equal.d.ts
index fb3c901..294e44a 100644
--- a/node_modules/typeorm/browser/find-options/operator/Equal.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/Equal.d.ts
@@ -1,5 +1,5 @@
-import { FindOperator } from "../FindOperator";
-import { EqualOperator } from "../EqualOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
+import { EqualOperator } from "typeorm/browser/find-options/EqualOperator";
 /**
  * Find Options Operator.
  * This operator is handy to provide object value for non-relational properties of the Entity.
diff --git a/node_modules/typeorm/browser/find-options/operator/ILike.d.ts b/node_modules/typeorm/browser/find-options/operator/ILike.d.ts
index c4726aa..88e452b 100644
--- a/node_modules/typeorm/browser/find-options/operator/ILike.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/ILike.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: ILike("%SOME string%") }
diff --git a/node_modules/typeorm/browser/find-options/operator/In.d.ts b/node_modules/typeorm/browser/find-options/operator/In.d.ts
index a8e2cf9..624e764 100644
--- a/node_modules/typeorm/browser/find-options/operator/In.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/In.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: In([...]) }
diff --git a/node_modules/typeorm/browser/find-options/operator/IsNull.d.ts b/node_modules/typeorm/browser/find-options/operator/IsNull.d.ts
index 0e36681..92b6c86 100644
--- a/node_modules/typeorm/browser/find-options/operator/IsNull.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/IsNull.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: IsNull() }
diff --git a/node_modules/typeorm/browser/find-options/operator/JsonContains.d.ts b/node_modules/typeorm/browser/find-options/operator/JsonContains.d.ts
index ce939f5..fdf9bfa 100644
--- a/node_modules/typeorm/browser/find-options/operator/JsonContains.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/JsonContains.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: JsonContains({...}) }
diff --git a/node_modules/typeorm/browser/find-options/operator/LessThan.d.ts b/node_modules/typeorm/browser/find-options/operator/LessThan.d.ts
index 99ebf73..e56ac60 100644
--- a/node_modules/typeorm/browser/find-options/operator/LessThan.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/LessThan.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: LessThan(10) }
diff --git a/node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.d.ts b/node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.d.ts
index e7d7163..7359c9d 100644
--- a/node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/LessThanOrEqual.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: LessThanOrEqual(10) }
diff --git a/node_modules/typeorm/browser/find-options/operator/Like.d.ts b/node_modules/typeorm/browser/find-options/operator/Like.d.ts
index 47f1547..92b3499 100644
--- a/node_modules/typeorm/browser/find-options/operator/Like.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/Like.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: Like("%some string%") }
diff --git a/node_modules/typeorm/browser/find-options/operator/MoreThan.d.ts b/node_modules/typeorm/browser/find-options/operator/MoreThan.d.ts
index acdfbc1..e324ef7 100644
--- a/node_modules/typeorm/browser/find-options/operator/MoreThan.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/MoreThan.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: MoreThan(10) }
diff --git a/node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.d.ts b/node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.d.ts
index b09605b..96a8f37 100644
--- a/node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/MoreThanOrEqual.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: MoreThanOrEqual(10) }
diff --git a/node_modules/typeorm/browser/find-options/operator/Not.d.ts b/node_modules/typeorm/browser/find-options/operator/Not.d.ts
index 9ac81b2..d8c9cf7 100644
--- a/node_modules/typeorm/browser/find-options/operator/Not.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/Not.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Used to negate expression.
diff --git a/node_modules/typeorm/browser/find-options/operator/Raw.d.ts b/node_modules/typeorm/browser/find-options/operator/Raw.d.ts
index 9e2b8c6..ec6b002 100644
--- a/node_modules/typeorm/browser/find-options/operator/Raw.d.ts
+++ b/node_modules/typeorm/browser/find-options/operator/Raw.d.ts
@@ -1,5 +1,5 @@
-import { FindOperator } from "../FindOperator";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { FindOperator } from "typeorm/browser/find-options/FindOperator";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Find Options Operator.
  * Example: { someField: Raw("12") }
diff --git a/node_modules/typeorm/browser/globals.d.ts b/node_modules/typeorm/browser/globals.d.ts
index 9236985..a525842 100644
--- a/node_modules/typeorm/browser/globals.d.ts
+++ b/node_modules/typeorm/browser/globals.d.ts
@@ -1,17 +1,17 @@
-import { MetadataArgsStorage } from "./metadata-args/MetadataArgsStorage";
-import { DataSourceOptions } from "./data-source/DataSourceOptions";
-import { ConnectionManager } from "./connection/ConnectionManager";
-import { DataSource } from "./data-source/DataSource";
-import { EntityManager } from "./entity-manager/EntityManager";
-import { MongoEntityManager } from "./entity-manager/MongoEntityManager";
-import { SqljsEntityManager } from "./entity-manager/SqljsEntityManager";
-import { EntityTarget } from "./common/EntityTarget";
-import { Repository } from "./repository/Repository";
-import { TreeRepository } from "./repository/TreeRepository";
-import { ObjectType } from "./common/ObjectType";
-import { MongoRepository } from "./repository/MongoRepository";
-import { SelectQueryBuilder } from "./query-builder/SelectQueryBuilder";
-import { ObjectLiteral } from "./common/ObjectLiteral";
+import { MetadataArgsStorage } from "typeorm/browser/metadata-args/MetadataArgsStorage";
+import { DataSourceOptions } from "typeorm/browser/data-source/DataSourceOptions";
+import { ConnectionManager } from "typeorm/browser/connection/ConnectionManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { MongoEntityManager } from "typeorm/browser/entity-manager/MongoEntityManager";
+import { SqljsEntityManager } from "typeorm/browser/entity-manager/SqljsEntityManager";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { Repository } from "typeorm/browser/repository/Repository";
+import { TreeRepository } from "typeorm/browser/repository/TreeRepository";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { MongoRepository } from "typeorm/browser/repository/MongoRepository";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Gets metadata args storage.
  */
diff --git a/node_modules/typeorm/browser/index.d.ts b/node_modules/typeorm/browser/index.d.ts
index 20bf12f..59beab4 100644
--- a/node_modules/typeorm/browser/index.d.ts
+++ b/node_modules/typeorm/browser/index.d.ts
@@ -1,177 +1,178 @@
 /*!
  */
 import "reflect-metadata";
-export * from "./globals";
-export * from "./container";
-export * from "./common/EntityTarget";
-export * from "./common/ObjectType";
-export * from "./common/ObjectLiteral";
-export * from "./common/MixedList";
-export * from "./common/DeepPartial";
-export * from "./common/RelationType";
-export * from "./error";
-export * from "./decorator/columns/Column";
-export * from "./decorator/columns/CreateDateColumn";
-export * from "./decorator/columns/DeleteDateColumn";
-export * from "./decorator/columns/PrimaryGeneratedColumn";
-export * from "./decorator/columns/PrimaryColumn";
-export * from "./decorator/columns/UpdateDateColumn";
-export * from "./decorator/columns/VersionColumn";
-export * from "./decorator/columns/VirtualColumn";
-export * from "./decorator/columns/ViewColumn";
-export * from "./decorator/columns/ObjectIdColumn";
-export * from "./decorator/listeners/AfterInsert";
-export * from "./decorator/listeners/AfterLoad";
-export * from "./decorator/listeners/AfterRemove";
-export * from "./decorator/listeners/AfterSoftRemove";
-export * from "./decorator/listeners/AfterRecover";
-export * from "./decorator/listeners/AfterUpdate";
-export * from "./decorator/listeners/BeforeInsert";
-export * from "./decorator/listeners/BeforeRemove";
-export * from "./decorator/listeners/BeforeSoftRemove";
-export * from "./decorator/listeners/BeforeRecover";
-export * from "./decorator/listeners/BeforeUpdate";
-export * from "./decorator/listeners/EventSubscriber";
-export * from "./decorator/options/ColumnOptions";
-export * from "./decorator/options/IndexOptions";
-export * from "./decorator/options/JoinColumnOptions";
-export * from "./decorator/options/JoinTableOptions";
-export * from "./decorator/options/RelationOptions";
-export * from "./decorator/options/EntityOptions";
-export * from "./decorator/options/ValueTransformer";
-export * from "./decorator/relations/JoinColumn";
-export * from "./decorator/relations/JoinTable";
-export * from "./decorator/relations/ManyToMany";
-export * from "./decorator/relations/ManyToOne";
-export * from "./decorator/relations/OneToMany";
-export * from "./decorator/relations/OneToOne";
-export * from "./decorator/relations/RelationCount";
-export * from "./decorator/relations/RelationId";
-export * from "./decorator/entity/Entity";
-export * from "./decorator/entity/ChildEntity";
-export * from "./decorator/entity/TableInheritance";
-export * from "./decorator/entity-view/ViewEntity";
-export * from "./decorator/tree/TreeLevelColumn";
-export * from "./decorator/tree/TreeParent";
-export * from "./decorator/tree/TreeChildren";
-export * from "./decorator/tree/Tree";
-export * from "./decorator/Index";
-export * from "./decorator/Unique";
-export * from "./decorator/Check";
-export * from "./decorator/Exclusion";
-export * from "./decorator/Generated";
-export * from "./decorator/EntityRepository";
-export * from "./find-options/operator/And";
-export * from "./find-options/operator/Any";
-export * from "./find-options/operator/ArrayContainedBy";
-export * from "./find-options/operator/ArrayContains";
-export * from "./find-options/operator/ArrayOverlap";
-export * from "./find-options/operator/Between";
-export * from "./find-options/operator/Equal";
-export * from "./find-options/operator/In";
-export * from "./find-options/operator/IsNull";
-export * from "./find-options/operator/LessThan";
-export * from "./find-options/operator/LessThanOrEqual";
-export * from "./find-options/operator/ILike";
-export * from "./find-options/operator/Like";
-export * from "./find-options/operator/MoreThan";
-export * from "./find-options/operator/MoreThanOrEqual";
-export * from "./find-options/operator/Not";
-export * from "./find-options/operator/Raw";
-export * from "./find-options/operator/JsonContains";
-export * from "./find-options/EqualOperator";
-export * from "./find-options/FindManyOptions";
-export * from "./find-options/FindOneOptions";
-export * from "./find-options/FindOperator";
-export * from "./find-options/FindOperatorType";
-export * from "./find-options/FindOptionsOrder";
-export * from "./find-options/FindOptionsRelations";
-export * from "./find-options/FindOptionsSelect";
-export * from "./find-options/FindOptionsUtils";
-export * from "./find-options/FindOptionsWhere";
-export * from "./find-options/FindTreeOptions";
-export * from "./find-options/JoinOptions";
-export * from "./find-options/OrderByCondition";
-export * from "./logger/AbstractLogger";
-export * from "./logger/Logger";
-export * from "./logger/LoggerOptions";
-export * from "./logger/AdvancedConsoleLogger";
-export * from "./logger/SimpleConsoleLogger";
-export * from "./logger/FileLogger";
-export * from "./metadata/EntityMetadata";
-export * from "./entity-manager/EntityManager";
-export * from "./repository/AbstractRepository";
-export * from "./repository/Repository";
-export * from "./repository/BaseEntity";
-export * from "./repository/TreeRepository";
-export * from "./repository/MongoRepository";
-export * from "./repository/RemoveOptions";
-export * from "./repository/SaveOptions";
-export * from "./schema-builder/table/TableCheck";
-export * from "./schema-builder/table/TableColumn";
-export * from "./schema-builder/table/TableExclusion";
-export * from "./schema-builder/table/TableForeignKey";
-export * from "./schema-builder/table/TableIndex";
-export * from "./schema-builder/table/TableUnique";
-export * from "./schema-builder/table/Table";
-export * from "./schema-builder/options/TableCheckOptions";
-export * from "./schema-builder/options/TableColumnOptions";
-export * from "./schema-builder/options/TableExclusionOptions";
-export * from "./schema-builder/options/TableForeignKeyOptions";
-export * from "./schema-builder/options/TableIndexOptions";
-export * from "./schema-builder/options/TableOptions";
-export * from "./schema-builder/options/TableUniqueOptions";
-export * from "./schema-builder/options/ViewOptions";
-export * from "./driver/mongodb/typings";
-export * from "./driver/types/DatabaseType";
-export * from "./driver/types/GeoJsonTypes";
-export * from "./driver/types/ReplicationMode";
-export * from "./driver/sqlserver/MssqlParameter";
-export { ConnectionOptionsReader } from "./connection/ConnectionOptionsReader";
-export { ConnectionOptions } from "./connection/ConnectionOptions";
-export { DataSource } from "./data-source/DataSource";
-export { Connection } from "./connection/Connection";
-export { ConnectionManager } from "./connection/ConnectionManager";
-export { DataSourceOptions } from "./data-source/DataSourceOptions";
-export { Driver } from "./driver/Driver";
-export { QueryBuilder } from "./query-builder/QueryBuilder";
-export { SelectQueryBuilder } from "./query-builder/SelectQueryBuilder";
-export { DeleteQueryBuilder } from "./query-builder/DeleteQueryBuilder";
-export { InsertQueryBuilder } from "./query-builder/InsertQueryBuilder";
-export { UpdateQueryBuilder } from "./query-builder/UpdateQueryBuilder";
-export { RelationQueryBuilder } from "./query-builder/RelationQueryBuilder";
-export { Brackets } from "./query-builder/Brackets";
-export { NotBrackets } from "./query-builder/NotBrackets";
-export { WhereExpressionBuilder } from "./query-builder/WhereExpressionBuilder";
-export { WhereExpression } from "./query-builder/WhereExpressionBuilder";
-export { InsertResult } from "./query-builder/result/InsertResult";
-export { UpdateResult } from "./query-builder/result/UpdateResult";
-export { DeleteResult } from "./query-builder/result/DeleteResult";
-export { QueryResult } from "./query-runner/QueryResult";
-export { QueryRunner } from "./query-runner/QueryRunner";
-export { MongoEntityManager } from "./entity-manager/MongoEntityManager";
-export { Migration } from "./migration/Migration";
-export { MigrationExecutor } from "./migration/MigrationExecutor";
-export { MigrationInterface } from "./migration/MigrationInterface";
-export { DefaultNamingStrategy } from "./naming-strategy/DefaultNamingStrategy";
-export { NamingStrategyInterface } from "./naming-strategy/NamingStrategyInterface";
-export { LegacyOracleNamingStrategy } from "./naming-strategy/LegacyOracleNamingStrategy";
-export { InsertEvent } from "./subscriber/event/InsertEvent";
-export { LoadEvent } from "./subscriber/event/LoadEvent";
-export { UpdateEvent } from "./subscriber/event/UpdateEvent";
-export { RemoveEvent } from "./subscriber/event/RemoveEvent";
-export { SoftRemoveEvent } from "./subscriber/event/SoftRemoveEvent";
-export { RecoverEvent } from "./subscriber/event/RecoverEvent";
-export { TransactionCommitEvent } from "./subscriber/event/TransactionCommitEvent";
-export { TransactionRollbackEvent } from "./subscriber/event/TransactionRollbackEvent";
-export { TransactionStartEvent } from "./subscriber/event/TransactionStartEvent";
-export { EntitySubscriberInterface } from "./subscriber/EntitySubscriberInterface";
-export { EntitySchema } from "./entity-schema/EntitySchema";
-export { EntitySchemaColumnOptions } from "./entity-schema/EntitySchemaColumnOptions";
-export { EntitySchemaIndexOptions } from "./entity-schema/EntitySchemaIndexOptions";
-export { EntitySchemaRelationOptions } from "./entity-schema/EntitySchemaRelationOptions";
-export { EntitySchemaEmbeddedColumnOptions } from "./entity-schema/EntitySchemaEmbeddedColumnOptions";
-export { ColumnType } from "./driver/types/ColumnTypes";
-export { EntitySchemaOptions } from "./entity-schema/EntitySchemaOptions";
-export { InstanceChecker } from "./util/InstanceChecker";
-export { TreeRepositoryUtils } from "./util/TreeRepositoryUtils";
+export * from "typeorm/browser/globals";
+export * from "typeorm/browser/container";
+export * from "typeorm/browser/common/EntityTarget";
+export * from "typeorm/browser/common/ObjectType";
+export * from "typeorm/browser/common/ObjectLiteral";
+export * from "typeorm/browser/common/MixedList";
+export * from "typeorm/browser/common/DeepPartial";
+export * from "typeorm/browser/common/RelationType";
+export * from "typeorm/browser/error";
+export * from "typeorm/browser/decorator/columns/Column";
+export * from "typeorm/browser/decorator/columns/CreateDateColumn";
+export * from "typeorm/browser/decorator/columns/DeleteDateColumn";
+export * from "typeorm/browser/decorator/columns/PrimaryGeneratedColumn";
+export * from "typeorm/browser/decorator/columns/PrimaryColumn";
+export * from "typeorm/browser/decorator/columns/UpdateDateColumn";
+export * from "typeorm/browser/decorator/columns/VersionColumn";
+export * from "typeorm/browser/decorator/columns/VirtualColumn";
+export * from "typeorm/browser/decorator/columns/ViewColumn";
+export * from "typeorm/browser/decorator/columns/ObjectIdColumn";
+export * from "typeorm/browser/decorator/listeners/AfterInsert";
+export * from "typeorm/browser/decorator/listeners/AfterLoad";
+export * from "typeorm/browser/decorator/listeners/AfterRemove";
+export * from "typeorm/browser/decorator/listeners/AfterSoftRemove";
+export * from "typeorm/browser/decorator/listeners/AfterRecover";
+export * from "typeorm/browser/decorator/listeners/AfterUpdate";
+export * from "typeorm/browser/decorator/listeners/BeforeInsert";
+export * from "typeorm/browser/decorator/listeners/BeforeRemove";
+export * from "typeorm/browser/decorator/listeners/BeforeSoftRemove";
+export * from "typeorm/browser/decorator/listeners/BeforeRecover";
+export * from "typeorm/browser/decorator/listeners/BeforeUpdate";
+export * from "typeorm/browser/decorator/listeners/EventSubscriber";
+export * from "typeorm/browser/decorator/options/ColumnOptions";
+export * from "typeorm/browser/decorator/options/IndexOptions";
+export * from "typeorm/browser/decorator/options/JoinColumnOptions";
+export * from "typeorm/browser/decorator/options/JoinTableOptions";
+export * from "typeorm/browser/decorator/options/RelationOptions";
+export * from "typeorm/browser/decorator/options/EntityOptions";
+export * from "typeorm/browser/decorator/options/ValueTransformer";
+export * from "typeorm/browser/decorator/relations/JoinColumn";
+export * from "typeorm/browser/decorator/relations/JoinTable";
+export * from "typeorm/browser/decorator/relations/ManyToMany";
+export * from "typeorm/browser/decorator/relations/ManyToOne";
+export * from "typeorm/browser/decorator/relations/OneToMany";
+export * from "typeorm/browser/decorator/relations/OneToOne";
+export * from "typeorm/browser/decorator/relations/RelationCount";
+export * from "typeorm/browser/decorator/relations/RelationId";
+export * from "typeorm/browser/decorator/entity/Entity";
+export * from "typeorm/browser/decorator/entity/ChildEntity";
+export * from "typeorm/browser/decorator/entity/TableInheritance";
+export * from "typeorm/browser/decorator/entity-view/ViewEntity";
+export * from "typeorm/browser/decorator/tree/TreeLevelColumn";
+export * from "typeorm/browser/decorator/tree/TreeParent";
+export * from "typeorm/browser/decorator/tree/TreeChildren";
+export * from "typeorm/browser/decorator/tree/Tree";
+export * from "typeorm/browser/decorator/Index";
+export * from "typeorm/browser/decorator/Unique";
+export * from "typeorm/browser/decorator/Check";
+export * from "typeorm/browser/decorator/Exclusion";
+export * from "typeorm/browser/decorator/Generated";
+export * from "typeorm/browser/decorator/EntityRepository";
+export * from "typeorm/browser/find-options/operator/And";
+export * from "typeorm/browser/find-options/operator/Any";
+export * from "typeorm/browser/find-options/operator/ArrayContainedBy";
+export * from "typeorm/browser/find-options/operator/ArrayContains";
+export * from "typeorm/browser/find-options/operator/ArrayOverlap";
+export * from "typeorm/browser/find-options/operator/Between";
+export * from "typeorm/browser/find-options/operator/Equal";
+export * from "typeorm/browser/find-options/operator/In";
+export * from "typeorm/browser/find-options/operator/IsNull";
+export * from "typeorm/browser/find-options/operator/LessThan";
+export * from "typeorm/browser/find-options/operator/LessThanOrEqual";
+export * from "typeorm/browser/find-options/operator/ILike";
+export * from "typeorm/browser/find-options/operator/Like";
+export * from "typeorm/browser/find-options/operator/MoreThan";
+export * from "typeorm/browser/find-options/operator/MoreThanOrEqual";
+export * from "typeorm/browser/find-options/operator/Not";
+export * from "typeorm/browser/find-options/operator/Raw";
+export * from "typeorm/browser/find-options/operator/JsonContains";
+export * from "typeorm/browser/find-options/EqualOperator";
+export * from "typeorm/browser/find-options/FindManyOptions";
+export * from "typeorm/browser/find-options/FindOneOptions";
+export * from "typeorm/browser/find-options/FindOperator";
+export * from "typeorm/browser/find-options/FindOperatorType";
+export * from "typeorm/browser/find-options/FindOptionsOrder";
+export * from "typeorm/browser/find-options/FindOptionsRelations";
+export * from "typeorm/browser/find-options/FindOptionsSelect";
+export * from "typeorm/browser/find-options/FindOptionsUtils";
+export * from "typeorm/browser/find-options/FindOptionsWhere";
+export * from "typeorm/browser/find-options/FindTreeOptions";
+export * from "typeorm/browser/find-options/JoinOptions";
+export * from "typeorm/browser/find-options/OrderByCondition";
+export * from "typeorm/browser/logger/AbstractLogger";
+export * from "typeorm/browser/logger/Logger";
+export * from "typeorm/browser/logger/LoggerOptions";
+export * from "typeorm/browser/logger/AdvancedConsoleLogger";
+export * from "typeorm/browser/logger/SimpleConsoleLogger";
+export * from "typeorm/browser/logger/FileLogger";
+export * from "typeorm/browser/metadata/EntityMetadata";
+export * from "typeorm/browser/entity-manager/EntityManager";
+export * from "typeorm/browser/repository/AbstractRepository";
+export * from "typeorm/browser/repository/Repository";
+export * from "typeorm/browser/repository/BaseEntity";
+export * from "typeorm/browser/repository/TreeRepository";
+export * from "typeorm/browser/repository/MongoRepository";
+export * from "typeorm/browser/repository/RemoveOptions";
+export * from "typeorm/browser/repository/SaveOptions";
+export * from "typeorm/browser/schema-builder/table/TableCheck";
+export * from "typeorm/browser/schema-builder/table/TableColumn";
+export * from "typeorm/browser/schema-builder/table/TableExclusion";
+export * from "typeorm/browser/schema-builder/table/TableForeignKey";
+export * from "typeorm/browser/schema-builder/table/TableIndex";
+export * from "typeorm/browser/schema-builder/table/TableUnique";
+export * from "typeorm/browser/schema-builder/table/Table";
+export * from "typeorm/browser/schema-builder/view/View";
+export * from "typeorm/browser/schema-builder/options/TableCheckOptions";
+export * from "typeorm/browser/schema-builder/options/TableColumnOptions";
+export * from "typeorm/browser/schema-builder/options/TableExclusionOptions";
+export * from "typeorm/browser/schema-builder/options/TableForeignKeyOptions";
+export * from "typeorm/browser/schema-builder/options/TableIndexOptions";
+export * from "typeorm/browser/schema-builder/options/TableOptions";
+export * from "typeorm/browser/schema-builder/options/TableUniqueOptions";
+export * from "typeorm/browser/schema-builder/options/ViewOptions";
+export * from "typeorm/browser/driver/mongodb/typings";
+export * from "typeorm/browser/driver/types/DatabaseType";
+export * from "typeorm/browser/driver/types/GeoJsonTypes";
+export * from "typeorm/browser/driver/types/ReplicationMode";
+export * from "typeorm/browser/driver/sqlserver/MssqlParameter";
+export { ConnectionOptionsReader } from "typeorm/browser/connection/ConnectionOptionsReader";
+export { ConnectionOptions } from "typeorm/browser/connection/ConnectionOptions";
+export { DataSource } from "typeorm/browser/data-source/DataSource";
+export { Connection } from "typeorm/browser/connection/Connection";
+export { ConnectionManager } from "typeorm/browser/connection/ConnectionManager";
+export { DataSourceOptions } from "typeorm/browser/data-source/DataSourceOptions";
+export { Driver } from "typeorm/browser/driver/Driver";
+export { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+export { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+export { DeleteQueryBuilder } from "typeorm/browser/query-builder/DeleteQueryBuilder";
+export { InsertQueryBuilder } from "typeorm/browser/query-builder/InsertQueryBuilder";
+export { UpdateQueryBuilder } from "typeorm/browser/query-builder/UpdateQueryBuilder";
+export { RelationQueryBuilder } from "typeorm/browser/query-builder/RelationQueryBuilder";
+export { Brackets } from "typeorm/browser/query-builder/Brackets";
+export { NotBrackets } from "typeorm/browser/query-builder/NotBrackets";
+export { WhereExpressionBuilder } from "typeorm/browser/query-builder/WhereExpressionBuilder";
+export { WhereExpression } from "typeorm/browser/query-builder/WhereExpressionBuilder";
+export { InsertResult } from "typeorm/browser/query-builder/result/InsertResult";
+export { UpdateResult } from "typeorm/browser/query-builder/result/UpdateResult";
+export { DeleteResult } from "typeorm/browser/query-builder/result/DeleteResult";
+export { QueryResult } from "typeorm/browser/query-runner/QueryResult";
+export { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+export { MongoEntityManager } from "typeorm/browser/entity-manager/MongoEntityManager";
+export { Migration } from "typeorm/browser/migration/Migration";
+export { MigrationExecutor } from "typeorm/browser/migration/MigrationExecutor";
+export { MigrationInterface } from "typeorm/browser/migration/MigrationInterface";
+export { DefaultNamingStrategy } from "typeorm/browser/naming-strategy/DefaultNamingStrategy";
+export { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+export { LegacyOracleNamingStrategy } from "typeorm/browser/naming-strategy/LegacyOracleNamingStrategy";
+export { InsertEvent } from "typeorm/browser/subscriber/event/InsertEvent";
+export { LoadEvent } from "typeorm/browser/subscriber/event/LoadEvent";
+export { UpdateEvent } from "typeorm/browser/subscriber/event/UpdateEvent";
+export { RemoveEvent } from "typeorm/browser/subscriber/event/RemoveEvent";
+export { SoftRemoveEvent } from "typeorm/browser/subscriber/event/SoftRemoveEvent";
+export { RecoverEvent } from "typeorm/browser/subscriber/event/RecoverEvent";
+export { TransactionCommitEvent } from "typeorm/browser/subscriber/event/TransactionCommitEvent";
+export { TransactionRollbackEvent } from "typeorm/browser/subscriber/event/TransactionRollbackEvent";
+export { TransactionStartEvent } from "typeorm/browser/subscriber/event/TransactionStartEvent";
+export { EntitySubscriberInterface } from "typeorm/browser/subscriber/EntitySubscriberInterface";
+export { EntitySchema } from "typeorm/browser/entity-schema/EntitySchema";
+export { EntitySchemaColumnOptions } from "typeorm/browser/entity-schema/EntitySchemaColumnOptions";
+export { EntitySchemaIndexOptions } from "typeorm/browser/entity-schema/EntitySchemaIndexOptions";
+export { EntitySchemaRelationOptions } from "typeorm/browser/entity-schema/EntitySchemaRelationOptions";
+export { EntitySchemaEmbeddedColumnOptions } from "typeorm/browser/entity-schema/EntitySchemaEmbeddedColumnOptions";
+export { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+export { EntitySchemaOptions } from "typeorm/browser/entity-schema/EntitySchemaOptions";
+export { InstanceChecker } from "typeorm/browser/util/InstanceChecker";
+export { TreeRepositoryUtils } from "typeorm/browser/util/TreeRepositoryUtils";
diff --git a/node_modules/typeorm/browser/index.js b/node_modules/typeorm/browser/index.js
index 4a4a382..91847e8 100644
--- a/node_modules/typeorm/browser/index.js
+++ b/node_modules/typeorm/browser/index.js
@@ -117,6 +117,7 @@ export * from "./schema-builder/table/TableForeignKey";
 export * from "./schema-builder/table/TableIndex";
 export * from "./schema-builder/table/TableUnique";
 export * from "./schema-builder/table/Table";
+export * from "./schema-builder/view/View";
 export * from "./schema-builder/options/TableCheckOptions";
 export * from "./schema-builder/options/TableColumnOptions";
 export * from "./schema-builder/options/TableExclusionOptions";
diff --git a/node_modules/typeorm/browser/index.js.map b/node_modules/typeorm/browser/index.js.map
index 89df76d..d87269e 100644
--- a/node_modules/typeorm/browser/index.js.map
+++ b/node_modules/typeorm/browser/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*!\n */\nimport \"reflect-metadata\"\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./globals\"\nexport * from \"./container\"\nexport * from \"./common/EntityTarget\"\nexport * from \"./common/ObjectType\"\nexport * from \"./common/ObjectLiteral\"\nexport * from \"./common/MixedList\"\nexport * from \"./common/DeepPartial\"\nexport * from \"./common/RelationType\"\nexport * from \"./error\"\nexport * from \"./decorator/columns/Column\"\nexport * from \"./decorator/columns/CreateDateColumn\"\nexport * from \"./decorator/columns/DeleteDateColumn\"\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\"\nexport * from \"./decorator/columns/PrimaryColumn\"\nexport * from \"./decorator/columns/UpdateDateColumn\"\nexport * from \"./decorator/columns/VersionColumn\"\nexport * from \"./decorator/columns/VirtualColumn\"\nexport * from \"./decorator/columns/ViewColumn\"\nexport * from \"./decorator/columns/ObjectIdColumn\"\nexport * from \"./decorator/listeners/AfterInsert\"\nexport * from \"./decorator/listeners/AfterLoad\"\nexport * from \"./decorator/listeners/AfterRemove\"\nexport * from \"./decorator/listeners/AfterSoftRemove\"\nexport * from \"./decorator/listeners/AfterRecover\"\nexport * from \"./decorator/listeners/AfterUpdate\"\nexport * from \"./decorator/listeners/BeforeInsert\"\nexport * from \"./decorator/listeners/BeforeRemove\"\nexport * from \"./decorator/listeners/BeforeSoftRemove\"\nexport * from \"./decorator/listeners/BeforeRecover\"\nexport * from \"./decorator/listeners/BeforeUpdate\"\nexport * from \"./decorator/listeners/EventSubscriber\"\nexport * from \"./decorator/options/ColumnOptions\"\nexport * from \"./decorator/options/IndexOptions\"\nexport * from \"./decorator/options/JoinColumnOptions\"\nexport * from \"./decorator/options/JoinTableOptions\"\nexport * from \"./decorator/options/RelationOptions\"\nexport * from \"./decorator/options/EntityOptions\"\nexport * from \"./decorator/options/ValueTransformer\"\nexport * from \"./decorator/relations/JoinColumn\"\nexport * from \"./decorator/relations/JoinTable\"\nexport * from \"./decorator/relations/ManyToMany\"\nexport * from \"./decorator/relations/ManyToOne\"\nexport * from \"./decorator/relations/OneToMany\"\nexport * from \"./decorator/relations/OneToOne\"\nexport * from \"./decorator/relations/RelationCount\"\nexport * from \"./decorator/relations/RelationId\"\nexport * from \"./decorator/entity/Entity\"\nexport * from \"./decorator/entity/ChildEntity\"\nexport * from \"./decorator/entity/TableInheritance\"\nexport * from \"./decorator/entity-view/ViewEntity\"\nexport * from \"./decorator/tree/TreeLevelColumn\"\nexport * from \"./decorator/tree/TreeParent\"\nexport * from \"./decorator/tree/TreeChildren\"\nexport * from \"./decorator/tree/Tree\"\nexport * from \"./decorator/Index\"\nexport * from \"./decorator/Unique\"\nexport * from \"./decorator/Check\"\nexport * from \"./decorator/Exclusion\"\nexport * from \"./decorator/Generated\"\nexport * from \"./decorator/EntityRepository\"\nexport * from \"./find-options/operator/And\"\nexport * from \"./find-options/operator/Any\"\nexport * from \"./find-options/operator/ArrayContainedBy\"\nexport * from \"./find-options/operator/ArrayContains\"\nexport * from \"./find-options/operator/ArrayOverlap\"\nexport * from \"./find-options/operator/Between\"\nexport * from \"./find-options/operator/Equal\"\nexport * from \"./find-options/operator/In\"\nexport * from \"./find-options/operator/IsNull\"\nexport * from \"./find-options/operator/LessThan\"\nexport * from \"./find-options/operator/LessThanOrEqual\"\nexport * from \"./find-options/operator/ILike\"\nexport * from \"./find-options/operator/Like\"\nexport * from \"./find-options/operator/MoreThan\"\nexport * from \"./find-options/operator/MoreThanOrEqual\"\nexport * from \"./find-options/operator/Not\"\nexport * from \"./find-options/operator/Raw\"\nexport * from \"./find-options/operator/JsonContains\"\nexport * from \"./find-options/EqualOperator\"\nexport * from \"./find-options/FindManyOptions\"\nexport * from \"./find-options/FindOneOptions\"\nexport * from \"./find-options/FindOperator\"\nexport * from \"./find-options/FindOperatorType\"\nexport * from \"./find-options/FindOptionsOrder\"\nexport * from \"./find-options/FindOptionsRelations\"\nexport * from \"./find-options/FindOptionsSelect\"\nexport * from \"./find-options/FindOptionsUtils\"\nexport * from \"./find-options/FindOptionsWhere\"\nexport * from \"./find-options/FindTreeOptions\"\nexport * from \"./find-options/JoinOptions\"\nexport * from \"./find-options/OrderByCondition\"\nexport * from \"./logger/AbstractLogger\"\nexport * from \"./logger/Logger\"\nexport * from \"./logger/LoggerOptions\"\nexport * from \"./logger/AdvancedConsoleLogger\"\nexport * from \"./logger/SimpleConsoleLogger\"\nexport * from \"./logger/FileLogger\"\nexport * from \"./metadata/EntityMetadata\"\nexport * from \"./entity-manager/EntityManager\"\nexport * from \"./repository/AbstractRepository\"\nexport * from \"./repository/Repository\"\nexport * from \"./repository/BaseEntity\"\nexport * from \"./repository/TreeRepository\"\nexport * from \"./repository/MongoRepository\"\nexport * from \"./repository/RemoveOptions\"\nexport * from \"./repository/SaveOptions\"\nexport * from \"./schema-builder/table/TableCheck\"\nexport * from \"./schema-builder/table/TableColumn\"\nexport * from \"./schema-builder/table/TableExclusion\"\nexport * from \"./schema-builder/table/TableForeignKey\"\nexport * from \"./schema-builder/table/TableIndex\"\nexport * from \"./schema-builder/table/TableUnique\"\nexport * from \"./schema-builder/table/Table\"\nexport * from \"./schema-builder/options/TableCheckOptions\"\nexport * from \"./schema-builder/options/TableColumnOptions\"\nexport * from \"./schema-builder/options/TableExclusionOptions\"\nexport * from \"./schema-builder/options/TableForeignKeyOptions\"\nexport * from \"./schema-builder/options/TableIndexOptions\"\nexport * from \"./schema-builder/options/TableOptions\"\nexport * from \"./schema-builder/options/TableUniqueOptions\"\nexport * from \"./schema-builder/options/ViewOptions\"\nexport * from \"./driver/mongodb/typings\"\nexport * from \"./driver/types/DatabaseType\"\nexport * from \"./driver/types/GeoJsonTypes\"\nexport * from \"./driver/types/ReplicationMode\"\nexport * from \"./driver/sqlserver/MssqlParameter\"\n\n// export * from \"./data-source\";\n\nexport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"\nexport { ConnectionOptions } from \"./connection/ConnectionOptions\"\nexport { DataSource } from \"./data-source/DataSource\"\nexport { Connection } from \"./connection/Connection\"\nexport { ConnectionManager } from \"./connection/ConnectionManager\"\nexport { DataSourceOptions } from \"./data-source/DataSourceOptions\"\nexport { Driver } from \"./driver/Driver\"\nexport { QueryBuilder } from \"./query-builder/QueryBuilder\"\nexport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\"\nexport { DeleteQueryBuilder } from \"./query-builder/DeleteQueryBuilder\"\nexport { InsertQueryBuilder } from \"./query-builder/InsertQueryBuilder\"\nexport { UpdateQueryBuilder } from \"./query-builder/UpdateQueryBuilder\"\nexport { RelationQueryBuilder } from \"./query-builder/RelationQueryBuilder\"\nexport { Brackets } from \"./query-builder/Brackets\"\nexport { NotBrackets } from \"./query-builder/NotBrackets\"\nexport { WhereExpressionBuilder } from \"./query-builder/WhereExpressionBuilder\"\nexport { WhereExpression } from \"./query-builder/WhereExpressionBuilder\"\nexport { InsertResult } from \"./query-builder/result/InsertResult\"\nexport { UpdateResult } from \"./query-builder/result/UpdateResult\"\nexport { DeleteResult } from \"./query-builder/result/DeleteResult\"\nexport { QueryResult } from \"./query-runner/QueryResult\"\nexport { QueryRunner } from \"./query-runner/QueryRunner\"\nexport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\"\nexport { Migration } from \"./migration/Migration\"\nexport { MigrationExecutor } from \"./migration/MigrationExecutor\"\nexport { MigrationInterface } from \"./migration/MigrationInterface\"\nexport { DefaultNamingStrategy } from \"./naming-strategy/DefaultNamingStrategy\"\nexport { NamingStrategyInterface } from \"./naming-strategy/NamingStrategyInterface\"\nexport { LegacyOracleNamingStrategy } from \"./naming-strategy/LegacyOracleNamingStrategy\"\nexport { InsertEvent } from \"./subscriber/event/InsertEvent\"\nexport { LoadEvent } from \"./subscriber/event/LoadEvent\"\nexport { UpdateEvent } from \"./subscriber/event/UpdateEvent\"\nexport { RemoveEvent } from \"./subscriber/event/RemoveEvent\"\nexport { SoftRemoveEvent } from \"./subscriber/event/SoftRemoveEvent\"\nexport { RecoverEvent } from \"./subscriber/event/RecoverEvent\"\nexport { TransactionCommitEvent } from \"./subscriber/event/TransactionCommitEvent\"\nexport { TransactionRollbackEvent } from \"./subscriber/event/TransactionRollbackEvent\"\nexport { TransactionStartEvent } from \"./subscriber/event/TransactionStartEvent\"\nexport { EntitySubscriberInterface } from \"./subscriber/EntitySubscriberInterface\"\nexport { EntitySchema } from \"./entity-schema/EntitySchema\"\nexport { EntitySchemaColumnOptions } from \"./entity-schema/EntitySchemaColumnOptions\"\nexport { EntitySchemaIndexOptions } from \"./entity-schema/EntitySchemaIndexOptions\"\nexport { EntitySchemaRelationOptions } from \"./entity-schema/EntitySchemaRelationOptions\"\nexport { EntitySchemaEmbeddedColumnOptions } from \"./entity-schema/EntitySchemaEmbeddedColumnOptions\"\nexport { ColumnType } from \"./driver/types/ColumnTypes\"\nexport { EntitySchemaOptions } from \"./entity-schema/EntitySchemaOptions\"\nexport { InstanceChecker } from \"./util/InstanceChecker\"\nexport { TreeRepositoryUtils } from \"./util/TreeRepositoryUtils\"\n"],"sourceRoot":"."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*!\n */\nimport \"reflect-metadata\"\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./globals\"\nexport * from \"./container\"\nexport * from \"./common/EntityTarget\"\nexport * from \"./common/ObjectType\"\nexport * from \"./common/ObjectLiteral\"\nexport * from \"./common/MixedList\"\nexport * from \"./common/DeepPartial\"\nexport * from \"./common/RelationType\"\nexport * from \"./error\"\nexport * from \"./decorator/columns/Column\"\nexport * from \"./decorator/columns/CreateDateColumn\"\nexport * from \"./decorator/columns/DeleteDateColumn\"\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\"\nexport * from \"./decorator/columns/PrimaryColumn\"\nexport * from \"./decorator/columns/UpdateDateColumn\"\nexport * from \"./decorator/columns/VersionColumn\"\nexport * from \"./decorator/columns/VirtualColumn\"\nexport * from \"./decorator/columns/ViewColumn\"\nexport * from \"./decorator/columns/ObjectIdColumn\"\nexport * from \"./decorator/listeners/AfterInsert\"\nexport * from \"./decorator/listeners/AfterLoad\"\nexport * from \"./decorator/listeners/AfterRemove\"\nexport * from \"./decorator/listeners/AfterSoftRemove\"\nexport * from \"./decorator/listeners/AfterRecover\"\nexport * from \"./decorator/listeners/AfterUpdate\"\nexport * from \"./decorator/listeners/BeforeInsert\"\nexport * from \"./decorator/listeners/BeforeRemove\"\nexport * from \"./decorator/listeners/BeforeSoftRemove\"\nexport * from \"./decorator/listeners/BeforeRecover\"\nexport * from \"./decorator/listeners/BeforeUpdate\"\nexport * from \"./decorator/listeners/EventSubscriber\"\nexport * from \"./decorator/options/ColumnOptions\"\nexport * from \"./decorator/options/IndexOptions\"\nexport * from \"./decorator/options/JoinColumnOptions\"\nexport * from \"./decorator/options/JoinTableOptions\"\nexport * from \"./decorator/options/RelationOptions\"\nexport * from \"./decorator/options/EntityOptions\"\nexport * from \"./decorator/options/ValueTransformer\"\nexport * from \"./decorator/relations/JoinColumn\"\nexport * from \"./decorator/relations/JoinTable\"\nexport * from \"./decorator/relations/ManyToMany\"\nexport * from \"./decorator/relations/ManyToOne\"\nexport * from \"./decorator/relations/OneToMany\"\nexport * from \"./decorator/relations/OneToOne\"\nexport * from \"./decorator/relations/RelationCount\"\nexport * from \"./decorator/relations/RelationId\"\nexport * from \"./decorator/entity/Entity\"\nexport * from \"./decorator/entity/ChildEntity\"\nexport * from \"./decorator/entity/TableInheritance\"\nexport * from \"./decorator/entity-view/ViewEntity\"\nexport * from \"./decorator/tree/TreeLevelColumn\"\nexport * from \"./decorator/tree/TreeParent\"\nexport * from \"./decorator/tree/TreeChildren\"\nexport * from \"./decorator/tree/Tree\"\nexport * from \"./decorator/Index\"\nexport * from \"./decorator/Unique\"\nexport * from \"./decorator/Check\"\nexport * from \"./decorator/Exclusion\"\nexport * from \"./decorator/Generated\"\nexport * from \"./decorator/EntityRepository\"\nexport * from \"./find-options/operator/And\"\nexport * from \"./find-options/operator/Any\"\nexport * from \"./find-options/operator/ArrayContainedBy\"\nexport * from \"./find-options/operator/ArrayContains\"\nexport * from \"./find-options/operator/ArrayOverlap\"\nexport * from \"./find-options/operator/Between\"\nexport * from \"./find-options/operator/Equal\"\nexport * from \"./find-options/operator/In\"\nexport * from \"./find-options/operator/IsNull\"\nexport * from \"./find-options/operator/LessThan\"\nexport * from \"./find-options/operator/LessThanOrEqual\"\nexport * from \"./find-options/operator/ILike\"\nexport * from \"./find-options/operator/Like\"\nexport * from \"./find-options/operator/MoreThan\"\nexport * from \"./find-options/operator/MoreThanOrEqual\"\nexport * from \"./find-options/operator/Not\"\nexport * from \"./find-options/operator/Raw\"\nexport * from \"./find-options/operator/JsonContains\"\nexport * from \"./find-options/EqualOperator\"\nexport * from \"./find-options/FindManyOptions\"\nexport * from \"./find-options/FindOneOptions\"\nexport * from \"./find-options/FindOperator\"\nexport * from \"./find-options/FindOperatorType\"\nexport * from \"./find-options/FindOptionsOrder\"\nexport * from \"./find-options/FindOptionsRelations\"\nexport * from \"./find-options/FindOptionsSelect\"\nexport * from \"./find-options/FindOptionsUtils\"\nexport * from \"./find-options/FindOptionsWhere\"\nexport * from \"./find-options/FindTreeOptions\"\nexport * from \"./find-options/JoinOptions\"\nexport * from \"./find-options/OrderByCondition\"\nexport * from \"./logger/AbstractLogger\"\nexport * from \"./logger/Logger\"\nexport * from \"./logger/LoggerOptions\"\nexport * from \"./logger/AdvancedConsoleLogger\"\nexport * from \"./logger/SimpleConsoleLogger\"\nexport * from \"./logger/FileLogger\"\nexport * from \"./metadata/EntityMetadata\"\nexport * from \"./entity-manager/EntityManager\"\nexport * from \"./repository/AbstractRepository\"\nexport * from \"./repository/Repository\"\nexport * from \"./repository/BaseEntity\"\nexport * from \"./repository/TreeRepository\"\nexport * from \"./repository/MongoRepository\"\nexport * from \"./repository/RemoveOptions\"\nexport * from \"./repository/SaveOptions\"\nexport * from \"./schema-builder/table/TableCheck\"\nexport * from \"./schema-builder/table/TableColumn\"\nexport * from \"./schema-builder/table/TableExclusion\"\nexport * from \"./schema-builder/table/TableForeignKey\"\nexport * from \"./schema-builder/table/TableIndex\"\nexport * from \"./schema-builder/table/TableUnique\"\nexport * from \"./schema-builder/table/Table\"\nexport * from \"./schema-builder/view/View\"\nexport * from \"./schema-builder/options/TableCheckOptions\"\nexport * from \"./schema-builder/options/TableColumnOptions\"\nexport * from \"./schema-builder/options/TableExclusionOptions\"\nexport * from \"./schema-builder/options/TableForeignKeyOptions\"\nexport * from \"./schema-builder/options/TableIndexOptions\"\nexport * from \"./schema-builder/options/TableOptions\"\nexport * from \"./schema-builder/options/TableUniqueOptions\"\nexport * from \"./schema-builder/options/ViewOptions\"\nexport * from \"./driver/mongodb/typings\"\nexport * from \"./driver/types/DatabaseType\"\nexport * from \"./driver/types/GeoJsonTypes\"\nexport * from \"./driver/types/ReplicationMode\"\nexport * from \"./driver/sqlserver/MssqlParameter\"\n\n// export * from \"./data-source\";\n\nexport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"\nexport { ConnectionOptions } from \"./connection/ConnectionOptions\"\nexport { DataSource } from \"./data-source/DataSource\"\nexport { Connection } from \"./connection/Connection\"\nexport { ConnectionManager } from \"./connection/ConnectionManager\"\nexport { DataSourceOptions } from \"./data-source/DataSourceOptions\"\nexport { Driver } from \"./driver/Driver\"\nexport { QueryBuilder } from \"./query-builder/QueryBuilder\"\nexport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\"\nexport { DeleteQueryBuilder } from \"./query-builder/DeleteQueryBuilder\"\nexport { InsertQueryBuilder } from \"./query-builder/InsertQueryBuilder\"\nexport { UpdateQueryBuilder } from \"./query-builder/UpdateQueryBuilder\"\nexport { RelationQueryBuilder } from \"./query-builder/RelationQueryBuilder\"\nexport { Brackets } from \"./query-builder/Brackets\"\nexport { NotBrackets } from \"./query-builder/NotBrackets\"\nexport { WhereExpressionBuilder } from \"./query-builder/WhereExpressionBuilder\"\nexport { WhereExpression } from \"./query-builder/WhereExpressionBuilder\"\nexport { InsertResult } from \"./query-builder/result/InsertResult\"\nexport { UpdateResult } from \"./query-builder/result/UpdateResult\"\nexport { DeleteResult } from \"./query-builder/result/DeleteResult\"\nexport { QueryResult } from \"./query-runner/QueryResult\"\nexport { QueryRunner } from \"./query-runner/QueryRunner\"\nexport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\"\nexport { Migration } from \"./migration/Migration\"\nexport { MigrationExecutor } from \"./migration/MigrationExecutor\"\nexport { MigrationInterface } from \"./migration/MigrationInterface\"\nexport { DefaultNamingStrategy } from \"./naming-strategy/DefaultNamingStrategy\"\nexport { NamingStrategyInterface } from \"./naming-strategy/NamingStrategyInterface\"\nexport { LegacyOracleNamingStrategy } from \"./naming-strategy/LegacyOracleNamingStrategy\"\nexport { InsertEvent } from \"./subscriber/event/InsertEvent\"\nexport { LoadEvent } from \"./subscriber/event/LoadEvent\"\nexport { UpdateEvent } from \"./subscriber/event/UpdateEvent\"\nexport { RemoveEvent } from \"./subscriber/event/RemoveEvent\"\nexport { SoftRemoveEvent } from \"./subscriber/event/SoftRemoveEvent\"\nexport { RecoverEvent } from \"./subscriber/event/RecoverEvent\"\nexport { TransactionCommitEvent } from \"./subscriber/event/TransactionCommitEvent\"\nexport { TransactionRollbackEvent } from \"./subscriber/event/TransactionRollbackEvent\"\nexport { TransactionStartEvent } from \"./subscriber/event/TransactionStartEvent\"\nexport { EntitySubscriberInterface } from \"./subscriber/EntitySubscriberInterface\"\nexport { EntitySchema } from \"./entity-schema/EntitySchema\"\nexport { EntitySchemaColumnOptions } from \"./entity-schema/EntitySchemaColumnOptions\"\nexport { EntitySchemaIndexOptions } from \"./entity-schema/EntitySchemaIndexOptions\"\nexport { EntitySchemaRelationOptions } from \"./entity-schema/EntitySchemaRelationOptions\"\nexport { EntitySchemaEmbeddedColumnOptions } from \"./entity-schema/EntitySchemaEmbeddedColumnOptions\"\nexport { ColumnType } from \"./driver/types/ColumnTypes\"\nexport { EntitySchemaOptions } from \"./entity-schema/EntitySchemaOptions\"\nexport { InstanceChecker } from \"./util/InstanceChecker\"\nexport { TreeRepositoryUtils } from \"./util/TreeRepositoryUtils\"\n"],"sourceRoot":"."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/logger/AbstractLogger.d.ts b/node_modules/typeorm/browser/logger/AbstractLogger.d.ts
index a5dd8b7..d830199 100644
--- a/node_modules/typeorm/browser/logger/AbstractLogger.d.ts
+++ b/node_modules/typeorm/browser/logger/AbstractLogger.d.ts
@@ -1,6 +1,6 @@
-import { Logger, LogLevel, LogMessage, LogMessageType, PrepareLogMessagesOptions } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { LoggerOptions } from "./LoggerOptions";
+import { Logger, LogLevel, LogMessage, LogMessageType, PrepareLogMessagesOptions } from "typeorm/browser/logger/Logger";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { LoggerOptions } from "typeorm/browser/logger/LoggerOptions";
 export declare abstract class AbstractLogger implements Logger {
     protected options?: LoggerOptions | undefined;
     constructor(options?: LoggerOptions | undefined);
diff --git a/node_modules/typeorm/browser/logger/AdvancedConsoleLogger.d.ts b/node_modules/typeorm/browser/logger/AdvancedConsoleLogger.d.ts
index e6cbf50..bba73e2 100644
--- a/node_modules/typeorm/browser/logger/AdvancedConsoleLogger.d.ts
+++ b/node_modules/typeorm/browser/logger/AdvancedConsoleLogger.d.ts
@@ -1,6 +1,6 @@
-import { AbstractLogger } from "./AbstractLogger";
-import { LogLevel, LogMessage } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { AbstractLogger } from "typeorm/browser/logger/AbstractLogger";
+import { LogLevel, LogMessage } from "typeorm/browser/logger/Logger";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * Performs logging of the events in TypeORM.
  * This version of logger uses console to log events and use syntax highlighting.
diff --git a/node_modules/typeorm/browser/logger/FileLogger.d.ts b/node_modules/typeorm/browser/logger/FileLogger.d.ts
index 47bc422..36fc33d 100644
--- a/node_modules/typeorm/browser/logger/FileLogger.d.ts
+++ b/node_modules/typeorm/browser/logger/FileLogger.d.ts
@@ -1,7 +1,7 @@
-import { FileLoggerOptions, LoggerOptions } from "./LoggerOptions";
-import { LogLevel, LogMessage } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { AbstractLogger } from "./AbstractLogger";
+import { FileLoggerOptions, LoggerOptions } from "typeorm/browser/logger/LoggerOptions";
+import { LogLevel, LogMessage } from "typeorm/browser/logger/Logger";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { AbstractLogger } from "typeorm/browser/logger/AbstractLogger";
 /**
  * Performs logging of the events in TypeORM.
  * This version of logger logs everything into ormlogs.log file.
diff --git a/node_modules/typeorm/browser/logger/Logger.d.ts b/node_modules/typeorm/browser/logger/Logger.d.ts
index 91d24b1..ab71235 100644
--- a/node_modules/typeorm/browser/logger/Logger.d.ts
+++ b/node_modules/typeorm/browser/logger/Logger.d.ts
@@ -1,4 +1,4 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * Performs logging of the events in TypeORM.
  */
diff --git a/node_modules/typeorm/browser/logger/LoggerOptions.d.ts b/node_modules/typeorm/browser/logger/LoggerOptions.d.ts
index b36a8e5..92d5462 100644
--- a/node_modules/typeorm/browser/logger/LoggerOptions.d.ts
+++ b/node_modules/typeorm/browser/logger/LoggerOptions.d.ts
@@ -1,4 +1,4 @@
-import { LogLevel } from "./Logger";
+import { LogLevel } from "typeorm/browser/logger/Logger";
 /**
  * Logging options.
  */
diff --git a/node_modules/typeorm/browser/logger/SimpleConsoleLogger.d.ts b/node_modules/typeorm/browser/logger/SimpleConsoleLogger.d.ts
index ab77c03..52c3507 100644
--- a/node_modules/typeorm/browser/logger/SimpleConsoleLogger.d.ts
+++ b/node_modules/typeorm/browser/logger/SimpleConsoleLogger.d.ts
@@ -1,6 +1,6 @@
-import { AbstractLogger } from "./AbstractLogger";
-import { LogLevel, LogMessage } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { AbstractLogger } from "typeorm/browser/logger/AbstractLogger";
+import { LogLevel, LogMessage } from "typeorm/browser/logger/Logger";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * Performs logging of the events in TypeORM.
  * This version of logger uses console to log events and does not use syntax highlighting.
diff --git a/node_modules/typeorm/browser/metadata-args/ColumnMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/ColumnMetadataArgs.d.ts
index f1a67c1..1c3c769 100644
--- a/node_modules/typeorm/browser/metadata-args/ColumnMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/ColumnMetadataArgs.d.ts
@@ -1,5 +1,5 @@
-import { ColumnOptions } from "../decorator/options/ColumnOptions";
-import { ColumnMode } from "./types/ColumnMode";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
+import { ColumnMode } from "typeorm/browser/metadata-args/types/ColumnMode";
 /**
  * Arguments for ColumnMetadata class.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/EntityListenerMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/EntityListenerMetadataArgs.d.ts
index 9465ae7..3627364 100644
--- a/node_modules/typeorm/browser/metadata-args/EntityListenerMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/EntityListenerMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { EventListenerType } from "../metadata/types/EventListenerTypes";
+import { EventListenerType } from "typeorm/browser/metadata/types/EventListenerTypes";
 /**
  * Arguments for EntityListenerMetadata class.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/EntityRepositoryMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/EntityRepositoryMetadataArgs.d.ts
index 5e3ac71..c772433 100644
--- a/node_modules/typeorm/browser/metadata-args/EntityRepositoryMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/EntityRepositoryMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { EntityTarget } from "../common/EntityTarget";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
 /**
  * Arguments for EntityRepositoryMetadata class, helps to construct an EntityRepositoryMetadata object.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/InheritanceMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/InheritanceMetadataArgs.d.ts
index afc3272..e660a87 100644
--- a/node_modules/typeorm/browser/metadata-args/InheritanceMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/InheritanceMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../decorator/options/ColumnOptions";
+import { ColumnOptions } from "typeorm/browser/decorator/options/ColumnOptions";
 /**
  * Arguments for InheritanceMetadata class.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/JoinTableMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/JoinTableMetadataArgs.d.ts
index d8ab79e..638f38b 100644
--- a/node_modules/typeorm/browser/metadata-args/JoinTableMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/JoinTableMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnMetadataArgs } from "./JoinColumnMetadataArgs";
+import { JoinColumnMetadataArgs } from "typeorm/browser/metadata-args/JoinColumnMetadataArgs";
 /**
  * Arguments for JoinTableMetadata class.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.d.ts b/node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.d.ts
index cdbccdb..f85fff9 100644
--- a/node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/MetadataArgsStorage.d.ts
@@ -1,25 +1,25 @@
-import { RelationMetadataArgs } from "./RelationMetadataArgs";
-import { ColumnMetadataArgs } from "./ColumnMetadataArgs";
-import { RelationCountMetadataArgs } from "./RelationCountMetadataArgs";
-import { IndexMetadataArgs } from "./IndexMetadataArgs";
-import { EntityListenerMetadataArgs } from "./EntityListenerMetadataArgs";
-import { TableMetadataArgs } from "./TableMetadataArgs";
-import { NamingStrategyMetadataArgs } from "./NamingStrategyMetadataArgs";
-import { JoinTableMetadataArgs } from "./JoinTableMetadataArgs";
-import { JoinColumnMetadataArgs } from "./JoinColumnMetadataArgs";
-import { EmbeddedMetadataArgs } from "./EmbeddedMetadataArgs";
-import { EntitySubscriberMetadataArgs } from "./EntitySubscriberMetadataArgs";
-import { RelationIdMetadataArgs } from "./RelationIdMetadataArgs";
-import { InheritanceMetadataArgs } from "./InheritanceMetadataArgs";
-import { DiscriminatorValueMetadataArgs } from "./DiscriminatorValueMetadataArgs";
-import { EntityRepositoryMetadataArgs } from "./EntityRepositoryMetadataArgs";
-import { TransactionEntityMetadataArgs } from "./TransactionEntityMetadataArgs";
-import { TransactionRepositoryMetadataArgs } from "./TransactionRepositoryMetadataArgs";
-import { GeneratedMetadataArgs } from "./GeneratedMetadataArgs";
-import { TreeMetadataArgs } from "./TreeMetadataArgs";
-import { UniqueMetadataArgs } from "./UniqueMetadataArgs";
-import { CheckMetadataArgs } from "./CheckMetadataArgs";
-import { ExclusionMetadataArgs } from "./ExclusionMetadataArgs";
+import { RelationMetadataArgs } from "typeorm/browser/metadata-args/RelationMetadataArgs";
+import { ColumnMetadataArgs } from "typeorm/browser/metadata-args/ColumnMetadataArgs";
+import { RelationCountMetadataArgs } from "typeorm/browser/metadata-args/RelationCountMetadataArgs";
+import { IndexMetadataArgs } from "typeorm/browser/metadata-args/IndexMetadataArgs";
+import { EntityListenerMetadataArgs } from "typeorm/browser/metadata-args/EntityListenerMetadataArgs";
+import { TableMetadataArgs } from "typeorm/browser/metadata-args/TableMetadataArgs";
+import { NamingStrategyMetadataArgs } from "typeorm/browser/metadata-args/NamingStrategyMetadataArgs";
+import { JoinTableMetadataArgs } from "typeorm/browser/metadata-args/JoinTableMetadataArgs";
+import { JoinColumnMetadataArgs } from "typeorm/browser/metadata-args/JoinColumnMetadataArgs";
+import { EmbeddedMetadataArgs } from "typeorm/browser/metadata-args/EmbeddedMetadataArgs";
+import { EntitySubscriberMetadataArgs } from "typeorm/browser/metadata-args/EntitySubscriberMetadataArgs";
+import { RelationIdMetadataArgs } from "typeorm/browser/metadata-args/RelationIdMetadataArgs";
+import { InheritanceMetadataArgs } from "typeorm/browser/metadata-args/InheritanceMetadataArgs";
+import { DiscriminatorValueMetadataArgs } from "typeorm/browser/metadata-args/DiscriminatorValueMetadataArgs";
+import { EntityRepositoryMetadataArgs } from "typeorm/browser/metadata-args/EntityRepositoryMetadataArgs";
+import { TransactionEntityMetadataArgs } from "typeorm/browser/metadata-args/TransactionEntityMetadataArgs";
+import { TransactionRepositoryMetadataArgs } from "typeorm/browser/metadata-args/TransactionRepositoryMetadataArgs";
+import { GeneratedMetadataArgs } from "typeorm/browser/metadata-args/GeneratedMetadataArgs";
+import { TreeMetadataArgs } from "typeorm/browser/metadata-args/TreeMetadataArgs";
+import { UniqueMetadataArgs } from "typeorm/browser/metadata-args/UniqueMetadataArgs";
+import { CheckMetadataArgs } from "typeorm/browser/metadata-args/CheckMetadataArgs";
+import { ExclusionMetadataArgs } from "typeorm/browser/metadata-args/ExclusionMetadataArgs";
 /**
  * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.
  * Each metadata args represents some specifications of what it represents.
diff --git a/node_modules/typeorm/browser/metadata-args/RelationCountMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/RelationCountMetadataArgs.d.ts
index f631a56..959b8e0 100644
--- a/node_modules/typeorm/browser/metadata-args/RelationCountMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/RelationCountMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Arguments for RelationCountMetadata class.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/RelationIdMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/RelationIdMetadataArgs.d.ts
index 73d6b20..eaca291 100644
--- a/node_modules/typeorm/browser/metadata-args/RelationIdMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/RelationIdMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Arguments for RelationIdMetadataArgs class.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/RelationMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/RelationMetadataArgs.d.ts
index 49e4afc..4fe8f06 100644
--- a/node_modules/typeorm/browser/metadata-args/RelationMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/RelationMetadataArgs.d.ts
@@ -1,7 +1,7 @@
-import { RelationType } from "../metadata/types/RelationTypes";
-import { RelationOptions } from "../decorator/options/RelationOptions";
-import { PropertyTypeFactory } from "../metadata/types/PropertyTypeInFunction";
-import { RelationTypeInFunction } from "../metadata/types/RelationTypeInFunction";
+import { RelationType } from "typeorm/browser/metadata/types/RelationTypes";
+import { RelationOptions } from "typeorm/browser/decorator/options/RelationOptions";
+import { PropertyTypeFactory } from "typeorm/browser/metadata/types/PropertyTypeInFunction";
+import { RelationTypeInFunction } from "typeorm/browser/metadata/types/RelationTypeInFunction";
 /**
  * Arguments for RelationMetadata class.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/TableMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/TableMetadataArgs.d.ts
index 9f5683f..eae3155 100644
--- a/node_modules/typeorm/browser/metadata-args/TableMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/TableMetadataArgs.d.ts
@@ -1,6 +1,6 @@
-import { DataSource, SelectQueryBuilder } from "..";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { TableType } from "../metadata/types/TableTypes";
+import { DataSource, SelectQueryBuilder } from "typeorm/browser";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
+import { TableType } from "typeorm/browser/metadata/types/TableTypes";
 /**
  * Arguments for TableMetadata class, helps to construct an TableMetadata object.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/TreeMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/TreeMetadataArgs.d.ts
index cff47ed..9115875 100644
--- a/node_modules/typeorm/browser/metadata-args/TreeMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/TreeMetadataArgs.d.ts
@@ -1,5 +1,5 @@
-import { TreeType } from "../metadata/types/TreeTypes";
-import { ClosureTreeOptions } from "../metadata/types/ClosureTreeOptions";
+import { TreeType } from "typeorm/browser/metadata/types/TreeTypes";
+import { ClosureTreeOptions } from "typeorm/browser/metadata/types/ClosureTreeOptions";
 /**
  * Stores metadata collected for Tree entities.
  */
diff --git a/node_modules/typeorm/browser/metadata-args/UniqueMetadataArgs.d.ts b/node_modules/typeorm/browser/metadata-args/UniqueMetadataArgs.d.ts
index 29565ec..5b43122 100644
--- a/node_modules/typeorm/browser/metadata-args/UniqueMetadataArgs.d.ts
+++ b/node_modules/typeorm/browser/metadata-args/UniqueMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { DeferrableType } from "../metadata/types/DeferrableType";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
 /**
  * Arguments for UniqueMetadata class.
  */
diff --git a/node_modules/typeorm/browser/metadata/CheckMetadata.d.ts b/node_modules/typeorm/browser/metadata/CheckMetadata.d.ts
index 191d270..e00e124 100644
--- a/node_modules/typeorm/browser/metadata/CheckMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/CheckMetadata.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { CheckMetadataArgs } from "../metadata-args/CheckMetadataArgs";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { CheckMetadataArgs } from "typeorm/browser/metadata-args/CheckMetadataArgs";
 /**
  * Check metadata contains all information about table's check constraints.
  */
diff --git a/node_modules/typeorm/browser/metadata/ColumnMetadata.d.ts b/node_modules/typeorm/browser/metadata/ColumnMetadata.d.ts
index 434c7ba..f9020c9 100644
--- a/node_modules/typeorm/browser/metadata/ColumnMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/ColumnMetadata.d.ts
@@ -1,11 +1,11 @@
-import { ColumnType } from "../driver/types/ColumnTypes";
-import { EntityMetadata } from "./EntityMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnMetadataArgs } from "../metadata-args/ColumnMetadataArgs";
-import { DataSource } from "../data-source/DataSource";
-import { ValueTransformer } from "../decorator/options/ValueTransformer";
+import { ColumnType } from "typeorm/browser/driver/types/ColumnTypes";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { EmbeddedMetadata } from "typeorm/browser/metadata/EmbeddedMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { ColumnMetadataArgs } from "typeorm/browser/metadata-args/ColumnMetadataArgs";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { ValueTransformer } from "typeorm/browser/decorator/options/ValueTransformer";
 /**
  * This metadata contains all information about entity's column.
  */
diff --git a/node_modules/typeorm/browser/metadata/EmbeddedMetadata.d.ts b/node_modules/typeorm/browser/metadata/EmbeddedMetadata.d.ts
index 2110319..bc40527 100644
--- a/node_modules/typeorm/browser/metadata/EmbeddedMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/EmbeddedMetadata.d.ts
@@ -1,13 +1,13 @@
-import { ColumnMetadata } from "./ColumnMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { EntityMetadata } from "./EntityMetadata";
-import { EmbeddedMetadataArgs } from "../metadata-args/EmbeddedMetadataArgs";
-import { RelationIdMetadata } from "./RelationIdMetadata";
-import { RelationCountMetadata } from "./RelationCountMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { EntityListenerMetadata } from "./EntityListenerMetadata";
-import { IndexMetadata } from "./IndexMetadata";
-import { UniqueMetadata } from "./UniqueMetadata";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { EmbeddedMetadataArgs } from "typeorm/browser/metadata-args/EmbeddedMetadataArgs";
+import { RelationIdMetadata } from "typeorm/browser/metadata/RelationIdMetadata";
+import { RelationCountMetadata } from "typeorm/browser/metadata/RelationCountMetadata";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { EntityListenerMetadata } from "typeorm/browser/metadata/EntityListenerMetadata";
+import { IndexMetadata } from "typeorm/browser/metadata/IndexMetadata";
+import { UniqueMetadata } from "typeorm/browser/metadata/UniqueMetadata";
 /**
  * Contains all information about entity's embedded property.
  */
diff --git a/node_modules/typeorm/browser/metadata/EntityListenerMetadata.d.ts b/node_modules/typeorm/browser/metadata/EntityListenerMetadata.d.ts
index 35463f3..27871d4 100644
--- a/node_modules/typeorm/browser/metadata/EntityListenerMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/EntityListenerMetadata.d.ts
@@ -1,8 +1,8 @@
-import { EventListenerType } from "./types/EventListenerTypes";
-import { EntityListenerMetadataArgs } from "../metadata-args/EntityListenerMetadataArgs";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityMetadata } from "./EntityMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
+import { EventListenerType } from "typeorm/browser/metadata/types/EventListenerTypes";
+import { EntityListenerMetadataArgs } from "typeorm/browser/metadata-args/EntityListenerMetadataArgs";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { EmbeddedMetadata } from "typeorm/browser/metadata/EmbeddedMetadata";
 /**
  * This metadata contains all information about entity's listeners.
  */
diff --git a/node_modules/typeorm/browser/metadata/EntityMetadata.d.ts b/node_modules/typeorm/browser/metadata/EntityMetadata.d.ts
index 7964825..a6c9737 100644
--- a/node_modules/typeorm/browser/metadata/EntityMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/EntityMetadata.d.ts
@@ -1,23 +1,23 @@
-import { QueryRunner, SelectQueryBuilder } from "..";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { DataSource } from "../data-source/DataSource";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { TableMetadataArgs } from "../metadata-args/TableMetadataArgs";
-import { TreeMetadataArgs } from "../metadata-args/TreeMetadataArgs";
-import { CheckMetadata } from "./CheckMetadata";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { EntityListenerMetadata } from "./EntityListenerMetadata";
-import { ExclusionMetadata } from "./ExclusionMetadata";
-import { ForeignKeyMetadata } from "./ForeignKeyMetadata";
-import { IndexMetadata } from "./IndexMetadata";
-import { RelationCountMetadata } from "./RelationCountMetadata";
-import { RelationIdMetadata } from "./RelationIdMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { TableType } from "./types/TableTypes";
-import { TreeType } from "./types/TreeTypes";
-import { UniqueMetadata } from "./UniqueMetadata";
-import { ClosureTreeOptions } from "./types/ClosureTreeOptions";
+import { QueryRunner, SelectQueryBuilder } from "typeorm/browser";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
+import { TableMetadataArgs } from "typeorm/browser/metadata-args/TableMetadataArgs";
+import { TreeMetadataArgs } from "typeorm/browser/metadata-args/TreeMetadataArgs";
+import { CheckMetadata } from "typeorm/browser/metadata/CheckMetadata";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { EmbeddedMetadata } from "typeorm/browser/metadata/EmbeddedMetadata";
+import { EntityListenerMetadata } from "typeorm/browser/metadata/EntityListenerMetadata";
+import { ExclusionMetadata } from "typeorm/browser/metadata/ExclusionMetadata";
+import { ForeignKeyMetadata } from "typeorm/browser/metadata/ForeignKeyMetadata";
+import { IndexMetadata } from "typeorm/browser/metadata/IndexMetadata";
+import { RelationCountMetadata } from "typeorm/browser/metadata/RelationCountMetadata";
+import { RelationIdMetadata } from "typeorm/browser/metadata/RelationIdMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { TableType } from "typeorm/browser/metadata/types/TableTypes";
+import { TreeType } from "typeorm/browser/metadata/types/TreeTypes";
+import { UniqueMetadata } from "typeorm/browser/metadata/UniqueMetadata";
+import { ClosureTreeOptions } from "typeorm/browser/metadata/types/ClosureTreeOptions";
 /**
  * Contains all entity metadata.
  */
diff --git a/node_modules/typeorm/browser/metadata/ExclusionMetadata.d.ts b/node_modules/typeorm/browser/metadata/ExclusionMetadata.d.ts
index 2632892..649cad4 100644
--- a/node_modules/typeorm/browser/metadata/ExclusionMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/ExclusionMetadata.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { ExclusionMetadataArgs } from "../metadata-args/ExclusionMetadataArgs";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { ExclusionMetadataArgs } from "typeorm/browser/metadata-args/ExclusionMetadataArgs";
 /**
  * Exclusion metadata contains all information about table's exclusion constraints.
  */
diff --git a/node_modules/typeorm/browser/metadata/ForeignKeyMetadata.d.ts b/node_modules/typeorm/browser/metadata/ForeignKeyMetadata.d.ts
index 14e2466..b5b89ce 100644
--- a/node_modules/typeorm/browser/metadata/ForeignKeyMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/ForeignKeyMetadata.d.ts
@@ -1,9 +1,9 @@
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { DeferrableType } from "./types/DeferrableType";
-import { OnDeleteType } from "./types/OnDeleteType";
-import { OnUpdateType } from "./types/OnUpdateType";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
+import { OnDeleteType } from "typeorm/browser/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/browser/metadata/types/OnUpdateType";
 /**
  * Contains all information about entity's foreign key.
  */
diff --git a/node_modules/typeorm/browser/metadata/IndexMetadata.d.ts b/node_modules/typeorm/browser/metadata/IndexMetadata.d.ts
index c4c06b8..8818df6 100644
--- a/node_modules/typeorm/browser/metadata/IndexMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/IndexMetadata.d.ts
@@ -1,8 +1,8 @@
-import { EntityMetadata } from "./EntityMetadata";
-import { IndexMetadataArgs } from "../metadata-args/IndexMetadataArgs";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { IndexMetadataArgs } from "typeorm/browser/metadata-args/IndexMetadataArgs";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { EmbeddedMetadata } from "typeorm/browser/metadata/EmbeddedMetadata";
 /**
  * Index metadata contains all information about table's index.
  */
diff --git a/node_modules/typeorm/browser/metadata/RelationCountMetadata.d.ts b/node_modules/typeorm/browser/metadata/RelationCountMetadata.d.ts
index 3e7ea48..9f3557b 100644
--- a/node_modules/typeorm/browser/metadata/RelationCountMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/RelationCountMetadata.d.ts
@@ -1,7 +1,7 @@
-import { RelationCountMetadataArgs } from "../metadata-args/RelationCountMetadataArgs";
-import { EntityMetadata } from "./EntityMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { RelationCountMetadataArgs } from "typeorm/browser/metadata-args/RelationCountMetadataArgs";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Contains all information about entity's relation count.
  */
diff --git a/node_modules/typeorm/browser/metadata/RelationIdMetadata.d.ts b/node_modules/typeorm/browser/metadata/RelationIdMetadata.d.ts
index d698e89..092ca7f 100644
--- a/node_modules/typeorm/browser/metadata/RelationIdMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/RelationIdMetadata.d.ts
@@ -1,8 +1,8 @@
-import { RelationIdMetadataArgs } from "../metadata-args/RelationIdMetadataArgs";
-import { EntityMetadata } from "./EntityMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { RelationIdMetadataArgs } from "typeorm/browser/metadata-args/RelationIdMetadataArgs";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Contains all information about entity's relation count.
  */
diff --git a/node_modules/typeorm/browser/metadata/RelationMetadata.d.ts b/node_modules/typeorm/browser/metadata/RelationMetadata.d.ts
index efcdced..d9b7d89 100644
--- a/node_modules/typeorm/browser/metadata/RelationMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/RelationMetadata.d.ts
@@ -1,14 +1,14 @@
-import { RelationType } from "./types/RelationTypes";
-import { EntityMetadata } from "./EntityMetadata";
-import { ForeignKeyMetadata } from "./ForeignKeyMetadata";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { RelationMetadataArgs } from "../metadata-args/RelationMetadataArgs";
-import { DeferrableType } from "./types/DeferrableType";
-import { OnUpdateType } from "./types/OnUpdateType";
-import { OnDeleteType } from "./types/OnDeleteType";
-import { PropertyTypeFactory } from "./types/PropertyTypeInFunction";
+import { RelationType } from "typeorm/browser/metadata/types/RelationTypes";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { ForeignKeyMetadata } from "typeorm/browser/metadata/ForeignKeyMetadata";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { EmbeddedMetadata } from "typeorm/browser/metadata/EmbeddedMetadata";
+import { RelationMetadataArgs } from "typeorm/browser/metadata-args/RelationMetadataArgs";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
+import { OnUpdateType } from "typeorm/browser/metadata/types/OnUpdateType";
+import { OnDeleteType } from "typeorm/browser/metadata/types/OnDeleteType";
+import { PropertyTypeFactory } from "typeorm/browser/metadata/types/PropertyTypeInFunction";
 /**
  * Contains all information about some entity's relation.
  */
diff --git a/node_modules/typeorm/browser/metadata/UniqueMetadata.d.ts b/node_modules/typeorm/browser/metadata/UniqueMetadata.d.ts
index 20dda6c..ceb25ee 100644
--- a/node_modules/typeorm/browser/metadata/UniqueMetadata.d.ts
+++ b/node_modules/typeorm/browser/metadata/UniqueMetadata.d.ts
@@ -1,9 +1,9 @@
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { UniqueMetadataArgs } from "../metadata-args/UniqueMetadataArgs";
-import { DeferrableType } from "./types/DeferrableType";
+import { EmbeddedMetadata } from "typeorm/browser/metadata/EmbeddedMetadata";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { UniqueMetadataArgs } from "typeorm/browser/metadata-args/UniqueMetadataArgs";
+import { DeferrableType } from "typeorm/browser/metadata/types/DeferrableType";
 /**
  * Unique metadata contains all information about table's unique constraints.
  */
diff --git a/node_modules/typeorm/browser/metadata/types/ClosureTreeOptions.d.ts b/node_modules/typeorm/browser/metadata/types/ClosureTreeOptions.d.ts
index 1c9c9c5..fd7ef00 100644
--- a/node_modules/typeorm/browser/metadata/types/ClosureTreeOptions.d.ts
+++ b/node_modules/typeorm/browser/metadata/types/ClosureTreeOptions.d.ts
@@ -2,7 +2,7 @@
  * Tree type.
  * Specifies what table pattern will be used for the tree entity.
  */
-import { ColumnMetadata } from "../ColumnMetadata";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
 export interface ClosureTreeOptions {
     closureTableName?: string;
     ancestorColumnName?: (column: ColumnMetadata) => string;
diff --git a/node_modules/typeorm/browser/metadata/types/RelationTypeInFunction.d.ts b/node_modules/typeorm/browser/metadata/types/RelationTypeInFunction.d.ts
index 3d65f3e..91b57bc 100644
--- a/node_modules/typeorm/browser/metadata/types/RelationTypeInFunction.d.ts
+++ b/node_modules/typeorm/browser/metadata/types/RelationTypeInFunction.d.ts
@@ -1,4 +1,4 @@
-import { EntityTarget } from "../../common/EntityTarget";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
 /**
  * Function that returns a type of the field. Returned value must be a class used on the relation.
  */
diff --git a/node_modules/typeorm/browser/migration/Migration.d.ts b/node_modules/typeorm/browser/migration/Migration.d.ts
index aadc352..a06825c 100644
--- a/node_modules/typeorm/browser/migration/Migration.d.ts
+++ b/node_modules/typeorm/browser/migration/Migration.d.ts
@@ -1,4 +1,4 @@
-import { MigrationInterface } from "./MigrationInterface";
+import { MigrationInterface } from "typeorm/browser/migration/MigrationInterface";
 /**
  * Represents entity of the migration in the database.
  */
diff --git a/node_modules/typeorm/browser/migration/MigrationExecutor.d.ts b/node_modules/typeorm/browser/migration/MigrationExecutor.d.ts
index efcad3d..5ca3eed 100644
--- a/node_modules/typeorm/browser/migration/MigrationExecutor.d.ts
+++ b/node_modules/typeorm/browser/migration/MigrationExecutor.d.ts
@@ -1,6 +1,6 @@
-import { DataSource } from "../data-source/DataSource";
-import { Migration } from "./Migration";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { Migration } from "typeorm/browser/migration/Migration";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * Executes migrations: runs pending and reverts previously executed migrations.
  */
diff --git a/node_modules/typeorm/browser/migration/MigrationInterface.d.ts b/node_modules/typeorm/browser/migration/MigrationInterface.d.ts
index 6b9eba8..a33c823 100644
--- a/node_modules/typeorm/browser/migration/MigrationInterface.d.ts
+++ b/node_modules/typeorm/browser/migration/MigrationInterface.d.ts
@@ -1,4 +1,4 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * Migrations should implement this interface and all its methods.
  */
diff --git a/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.d.ts b/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.d.ts
index 20c9b57..37e7964 100644
--- a/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.d.ts
+++ b/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.d.ts
@@ -1,5 +1,5 @@
-import { NamingStrategyInterface } from "./NamingStrategyInterface";
-import { Table } from "../schema-builder/table/Table";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { Table } from "typeorm/browser/schema-builder/table/Table";
 /**
  * Naming strategy that is used by default.
  */
@@ -40,7 +40,6 @@ export declare class DefaultNamingStrategy implements NamingStrategyInterface {
      * Note that table name comes here already normalized by #tableName method.
      */
     prefixTableName(prefix: string, tableName: string): string;
-    eagerJoinRelationAlias(alias: string, propertyPath: string): string;
     nestedSetColumnNames: {
         left: string;
         right: string;
diff --git a/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js b/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js
index 7470a1c..22891fd 100644
--- a/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js
+++ b/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js
@@ -136,9 +136,6 @@ export class DefaultNamingStrategy {
     prefixTableName(prefix, tableName) {
         return prefix + tableName;
     }
-    eagerJoinRelationAlias(alias, propertyPath) {
-        return alias + "_" + propertyPath.replace(".", "_");
-    }
 }
 
 //# sourceMappingURL=DefaultNamingStrategy.js.map
diff --git a/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js.map b/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js.map
index e1ab191..1317ab6 100644
--- a/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js.map
+++ b/node_modules/typeorm/browser/naming-strategy/DefaultNamingStrategy.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","file":"DefaultNamingStrategy.js","sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\"\nimport { Table } from \"../schema-builder/table/Table\"\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n    protected getTableName(tableOrName: Table | string): string {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name\n        }\n\n        return tableOrName.split(\".\").pop()!\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(\n        targetName: string,\n        userSpecifiedName: string | undefined,\n    ): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName)\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\"\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const name = customName || propertyName\n\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name)\n\n        return name\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName\n    }\n\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${columnName}`\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        _referencedTablePath?: string,\n        _referencedColumnNames?: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    indexName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26)\n        return isEnum ? `${name}_ENUM` : name\n    }\n\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName)\n    }\n\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string {\n        return snakeCase(\n            firstTableName +\n                \"_\" +\n                firstPropertyName.replace(/\\./gi, \"_\") +\n                \"_\" +\n                secondTableName,\n        )\n    }\n\n    joinTableColumnDuplicationPrefix(\n        columnName: string,\n        index: number,\n    ): string {\n        return columnName + \"_\" + index\n    }\n\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return camelCase(\n            tableName + \"_\" + (columnName ? columnName : propertyName),\n        )\n    }\n\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName)\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName\n    }\n\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\")\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" }\n    materializedPathColumnName = \"mpath\"\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","file":"DefaultNamingStrategy.js","sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\"\nimport { Table } from \"../schema-builder/table/Table\"\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n    protected getTableName(tableOrName: Table | string): string {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name\n        }\n\n        return tableOrName.split(\".\").pop()!\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(\n        targetName: string,\n        userSpecifiedName: string | undefined,\n    ): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName)\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\"\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const name = customName || propertyName\n\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name)\n\n        return name\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName\n    }\n\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${columnName}`\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        _referencedTablePath?: string,\n        _referencedColumnNames?: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    indexName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26)\n        return isEnum ? `${name}_ENUM` : name\n    }\n\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName)\n    }\n\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string {\n        return snakeCase(\n            firstTableName +\n                \"_\" +\n                firstPropertyName.replace(/\\./gi, \"_\") +\n                \"_\" +\n                secondTableName,\n        )\n    }\n\n    joinTableColumnDuplicationPrefix(\n        columnName: string,\n        index: number,\n    ): string {\n        return columnName + \"_\" + index\n    }\n\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return camelCase(\n            tableName + \"_\" + (columnName ? columnName : propertyName),\n        )\n    }\n\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName)\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" }\n    materializedPathColumnName = \"mpath\"\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/naming-strategy/LegacyOracleNamingStrategy.d.ts b/node_modules/typeorm/browser/naming-strategy/LegacyOracleNamingStrategy.d.ts
index a038fbf..026873a 100644
--- a/node_modules/typeorm/browser/naming-strategy/LegacyOracleNamingStrategy.d.ts
+++ b/node_modules/typeorm/browser/naming-strategy/LegacyOracleNamingStrategy.d.ts
@@ -1,5 +1,5 @@
-import { NamingStrategyInterface } from "./NamingStrategyInterface";
-import { DefaultNamingStrategy } from "./DefaultNamingStrategy";
+import { NamingStrategyInterface } from "typeorm/browser/naming-strategy/NamingStrategyInterface";
+import { DefaultNamingStrategy } from "typeorm/browser/naming-strategy/DefaultNamingStrategy";
 /**
  * Shorten strategy
  */
diff --git a/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.d.ts b/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.d.ts
index bd40ab8..ad7aaa0 100644
--- a/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.d.ts
+++ b/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.d.ts
@@ -1,5 +1,5 @@
-import { Table } from "../schema-builder/table/Table";
-import { View } from "../schema-builder/view/View";
+import { Table } from "typeorm/browser/schema-builder/table/Table";
+import { View } from "typeorm/browser/schema-builder/view/View";
 /**
  * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be
  * generated.
@@ -99,10 +99,6 @@ export interface NamingStrategyInterface {
      * Note that table name comes here already normalized by #tableName method.
      */
     prefixTableName(prefix: string, tableName: string): string;
-    /**
-     * Gets the name of the alias used for relation joins.
-     */
-    eagerJoinRelationAlias(alias: string, propertyPath: string): string;
     /**
      * Column names for nested sets.
      */
diff --git a/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.js.map b/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.js.map
index 47e9f94..a20394c 100644
--- a/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.js.map
+++ b/node_modules/typeorm/browser/naming-strategy/NamingStrategyInterface.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/naming-strategy/NamingStrategyInterface.ts"],"names":[],"mappings":"","file":"NamingStrategyInterface.js","sourcesContent":["import { Table } from \"../schema-builder/table/Table\"\nimport { View } from \"../schema-builder/view/View\"\n\n/**\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\n * generated.\n */\nexport interface NamingStrategyInterface {\n    /**\n     * Naming strategy name.\n     */\n    name?: string\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string | undefined): string\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string\n\n    /**\n     * Gets the table's column name from the given property name.\n     */\n    columnName(\n        propertyName: string,\n        customName: string | undefined,\n        embeddedPrefixes: string[],\n    ): string\n\n    /**\n     * Gets the table's relation name from the given property name.\n     */\n    relationName(propertyName: string): string\n\n    /**\n     * Gets the table's primary key name from the given table name and column names.\n     */\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string\n\n    /**\n     * Gets the table's unique constraint name from the given table name and column names.\n     */\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string\n\n    /**\n     * Gets the relation constraint (UNIQUE or UNIQUE INDEX) name from the given table name, column names\n     * and WHERE condition, if UNIQUE INDEX used.\n     */\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the table's default constraint name from the given table name and column name.\n     */\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string\n\n    /**\n     * Gets the name of the foreign key.\n     */\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        referencedTablePath?: string,\n        referencedColumnNames?: string[],\n    ): string\n\n    /**\n     * Gets the name of the index - simple and compose index.\n     */\n    indexName(\n        tableOrName: Table | View | string,\n        columns: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the name of the check constraint.\n     *\n     * \"isEnum\" parameter is used to indicate if this check constraint used\n     * to handle \"simple-enum\" type for databases that are not supporting \"enum\"\n     * type out of the box. If \"true\", constraint is ignored during CHECK constraints\n     * synchronization.\n     */\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string\n\n    /**\n     * Gets the name of the exclusion constraint.\n     */\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string\n\n    /**\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\n     */\n    joinColumnName(relationName: string, referencedColumnName: string): string\n\n    /**\n     * Gets the name of the join table used in the many-to-many relations.\n     */\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string\n\n    /**\n     * Columns in join tables can have duplicate names in case of self-referencing.\n     * This method provide a resolution for such column names.\n     */\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables.\n     *\n     * The reverse?:boolean parameter denotes if the joinTableColumnName is called for the junctionColumn (false)\n     * or the inverseJunctionColumns (true)\n     */\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables from the invers side of the relationship.\n     */\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string\n\n    /**\n     * Gets the name of the alias used for relation joins.\n     */\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string\n\n    /**\n     * Column names for nested sets.\n     */\n    nestedSetColumnNames: { left: string; right: string }\n\n    /**\n     * Column name for materialized paths.\n     */\n    materializedPathColumnName: string\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/naming-strategy/NamingStrategyInterface.ts"],"names":[],"mappings":"","file":"NamingStrategyInterface.js","sourcesContent":["import { Table } from \"../schema-builder/table/Table\"\nimport { View } from \"../schema-builder/view/View\"\n\n/**\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\n * generated.\n */\nexport interface NamingStrategyInterface {\n    /**\n     * Naming strategy name.\n     */\n    name?: string\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string | undefined): string\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string\n\n    /**\n     * Gets the table's column name from the given property name.\n     */\n    columnName(\n        propertyName: string,\n        customName: string | undefined,\n        embeddedPrefixes: string[],\n    ): string\n\n    /**\n     * Gets the table's relation name from the given property name.\n     */\n    relationName(propertyName: string): string\n\n    /**\n     * Gets the table's primary key name from the given table name and column names.\n     */\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string\n\n    /**\n     * Gets the table's unique constraint name from the given table name and column names.\n     */\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string\n\n    /**\n     * Gets the relation constraint (UNIQUE or UNIQUE INDEX) name from the given table name, column names\n     * and WHERE condition, if UNIQUE INDEX used.\n     */\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the table's default constraint name from the given table name and column name.\n     */\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string\n\n    /**\n     * Gets the name of the foreign key.\n     */\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        referencedTablePath?: string,\n        referencedColumnNames?: string[],\n    ): string\n\n    /**\n     * Gets the name of the index - simple and compose index.\n     */\n    indexName(\n        tableOrName: Table | View | string,\n        columns: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the name of the check constraint.\n     *\n     * \"isEnum\" parameter is used to indicate if this check constraint used\n     * to handle \"simple-enum\" type for databases that are not supporting \"enum\"\n     * type out of the box. If \"true\", constraint is ignored during CHECK constraints\n     * synchronization.\n     */\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string\n\n    /**\n     * Gets the name of the exclusion constraint.\n     */\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string\n\n    /**\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\n     */\n    joinColumnName(relationName: string, referencedColumnName: string): string\n\n    /**\n     * Gets the name of the join table used in the many-to-many relations.\n     */\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string\n\n    /**\n     * Columns in join tables can have duplicate names in case of self-referencing.\n     * This method provide a resolution for such column names.\n     */\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables.\n     *\n     * The reverse?:boolean parameter denotes if the joinTableColumnName is called for the junctionColumn (false)\n     * or the inverseJunctionColumns (true)\n     */\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables from the invers side of the relationship.\n     */\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string\n\n    /**\n     * Column names for nested sets.\n     */\n    nestedSetColumnNames: { left: string; right: string }\n\n    /**\n     * Column name for materialized paths.\n     */\n    materializedPathColumnName: string\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/persistence/Subject.d.ts b/node_modules/typeorm/browser/persistence/Subject.d.ts
index 6c56c1c..f819f5f 100644
--- a/node_modules/typeorm/browser/persistence/Subject.d.ts
+++ b/node_modules/typeorm/browser/persistence/Subject.d.ts
@@ -1,8 +1,8 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { SubjectChangeMap } from "./SubjectChangeMap";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { SubjectChangeMap } from "typeorm/browser/persistence/SubjectChangeMap";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
 /**
  * Subject is a subject of persistence.
  * It holds information about each entity that needs to be persisted:
diff --git a/node_modules/typeorm/browser/persistence/Subject.js b/node_modules/typeorm/browser/persistence/Subject.js
index 71c0198..cd097fe 100644
--- a/node_modules/typeorm/browser/persistence/Subject.js
+++ b/node_modules/typeorm/browser/persistence/Subject.js
@@ -115,7 +115,8 @@ export class Subject {
             (this.databaseEntityLoaded === false ||
                 (this.databaseEntityLoaded && this.databaseEntity)) &&
             // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&
-            this.changeMaps.length > 0);
+            // ensure there are one or more changes for updatable columns
+            this.changeMaps.some((change) => !change.column || change.column.isUpdate));
     }
     /**
      * Checks if this subject must be soft-removed into the database.
diff --git a/node_modules/typeorm/browser/persistence/Subject.js.map b/node_modules/typeorm/browser/persistence/Subject.js.map
index d9a377b..6fbaa96 100644
--- a/node_modules/typeorm/browser/persistence/Subject.js.map
+++ b/node_modules/typeorm/browser/persistence/Subject.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/persistence/Subject.ts"],"names":[],"mappings":"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","file":"Subject.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { SubjectChangeMap } from \"./SubjectChangeMap\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n    readonly \"@instanceof\" = Symbol.for(\"Subject\")\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    metadata: EntityMetadata\n\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    identifier: ObjectLiteral | undefined = undefined\n\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    entityWithFulfilledIds: ObjectLiteral | undefined = undefined\n\n    /**\n     * If subject was created by cascades this property will contain subject\n     * from where this subject was created.\n     */\n    parentSubject?: Subject\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * If entity is not set then this subject is created only for the entity loaded from the database,\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\n     */\n    entity?: ObjectLiteral\n\n    /**\n     * Database entity.\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\n     */\n    databaseEntity?: ObjectLiteral\n\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    databaseEntityLoaded: boolean = false\n\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    changeMaps: SubjectChangeMap[] = []\n\n    /**\n     * Generated values returned by a database (for example generated id or default values).\n     * Used in insert and update operations.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMap?: ObjectLiteral\n\n    /**\n     * Inserted values with updated values of special and default columns.\n     * Has entity-like structure (not just column database name and values).\n     */\n    insertedValueSet?: ObjectLiteral\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    canBeSoftRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    canBeRecovered: boolean = false\n\n    /**\n     * Relations updated by the change maps.\n     */\n    updatedRelationMaps: {\n        relation: RelationMetadata\n        value: ObjectLiteral\n    }[] = []\n\n    /**\n     * List of updated columns\n     */\n    diffColumns: ColumnMetadata[] = []\n\n    /**\n     * List of updated relations\n     */\n    diffRelations: RelationMetadata[] = []\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: {\n        metadata: EntityMetadata\n        parentSubject?: Subject\n        entity?: ObjectLiteral\n        canBeInserted?: boolean\n        canBeUpdated?: boolean\n        mustBeRemoved?: boolean\n        canBeSoftRemoved?: boolean\n        canBeRecovered?: boolean\n        identifier?: ObjectLiteral\n        changeMaps?: SubjectChangeMap[]\n    }) {\n        this.metadata = options.metadata\n        this.entity = options.entity\n        this.parentSubject = options.parentSubject\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps)\n\n        this.recompute()\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return (\n            this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            this.changeMaps.length > 0\n        )\n    }\n\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return (\n            this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return (\n            this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap(): ObjectLiteral {\n        const changeMapsWithoutValues: SubjectChangeMap[] = []\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value\n            if (InstanceChecker.isSubject(value)) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet\n                    ? value.insertedValueSet\n                    : value.entity\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n\n            let valueMap: ObjectLiteral | undefined\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(\n                    changeMap.column.referencedColumn!.getEntityValue(value),\n                )\n            } else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value)\n            } else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId =\n                        changeMap.relation!.getRelationIdMap(value)\n\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap)\n                        this.canBeUpdated = true\n                        return updateMap\n                    }\n                    valueMap = changeMap.relation!.createValueMap(relationId)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: relationId,\n                    })\n                } else {\n                    // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation!.createValueMap(value)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: value,\n                    })\n                }\n            }\n\n            OrmUtils.mergeDeep(updateMap, valueMap)\n            return updateMap\n        }, {} as ObjectLiteral)\n        this.changeMaps = changeMapsWithoutValues\n        return changeSet\n    }\n\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute(): void {\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity)\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\n                    if (\n                        primaryColumn.relationMetadata &&\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\n                            this.parentSubject!.metadata\n                    ) {\n                        const value =\n                            primaryColumn.referencedColumn!.getEntityValue(\n                                this.parentSubject!.entity!,\n                            )\n                        primaryColumn.setEntityValue(\n                            this.entityWithFulfilledIds!,\n                            value,\n                        )\n                    }\n                })\n            }\n            this.identifier = this.metadata.getEntityIdMap(\n                this.entityWithFulfilledIds,\n            )\n        } else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity)\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/persistence/Subject.ts"],"names":[],"mappings":"AAGA,OAAO,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAA;AAG3C,OAAO,EAAE,WAAW,EAAE,MAAM,qBAAqB,CAAA;AACjD,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AAEzD;;;;;;;;;GASG;AACH,MAAM,OAAO,OAAO;IAoHhB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,OAWX;QAlIQ,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;QAW9C;;;;;WAKG;QACH,eAAU,GAA8B,SAAS,CAAA;QAEjD;;WAEG;QACH,2BAAsB,GAA8B,SAAS,CAAA;QAqB7D;;;WAGG;QACH,yBAAoB,GAAY,KAAK,CAAA;QAErC;;WAEG;QACH,eAAU,GAAuB,EAAE,CAAA;QAenC;;;WAGG;QACH,kBAAa,GAAY,KAAK,CAAA;QAE9B;;;WAGG;QACH,iBAAY,GAAY,KAAK,CAAA;QAE7B;;;WAGG;QACH,kBAAa,GAAY,KAAK,CAAA;QAE9B;;;WAGG;QACH,qBAAgB,GAAY,KAAK,CAAA;QAEjC;;;WAGG;QACH,mBAAc,GAAY,KAAK,CAAA;QAE/B;;WAEG;QACH,wBAAmB,GAGb,EAAE,CAAA;QAER;;WAEG;QACH,gBAAW,GAAqB,EAAE,CAAA;QAElC;;WAEG;QACH,kBAAa,GAAuB,EAAE,CAAA;QAkBlC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAA;QAChC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;QAC5B,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAA;QAC1C,IAAI,OAAO,CAAC,aAAa,KAAK,SAAS;YACnC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAA;QAC9C,IAAI,OAAO,CAAC,YAAY,KAAK,SAAS;YAClC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAA;QAC5C,IAAI,OAAO,CAAC,aAAa,KAAK,SAAS;YACnC,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAA;QAC9C,IAAI,OAAO,CAAC,gBAAgB,KAAK,SAAS;YACtC,IAAI,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAA;QACpD,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS;YACpC,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,cAAc,CAAA;QAChD,IAAI,OAAO,CAAC,UAAU,KAAK,SAAS;YAChC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAA;QACxC,IAAI,OAAO,CAAC,UAAU,KAAK,SAAS;YAChC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,UAAU,CAAC,CAAA;QAE/C,IAAI,CAAC,SAAS,EAAE,CAAA;IACpB,CAAC;IAED,4EAA4E;IAC5E,YAAY;IACZ,4EAA4E;IAE5E;;;;OAIG;IACH,IAAI,cAAc;QACd,OAAO,IAAI,CAAC,aAAa,IAAI,CAAC,IAAI,CAAC,cAAc,CAAA;IACrD,CAAC;IAED;;;;OAIG;IACH,IAAI,aAAa;QACb,OAAO,CACH,IAAI,CAAC,YAAY;YACjB,IAAI,CAAC,UAAU;YACf,CAAC,IAAI,CAAC,oBAAoB,KAAK,KAAK;gBAChC,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC;YACvD,sFAAsF;YACtF,6DAA6D;YAC7D,IAAI,CAAC,UAAU,CAAC,IAAI,CAChB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,QAAQ,CACvD,CACJ,CAAA;IACL,CAAC;IAED;;;;OAIG;IACH,IAAI,iBAAiB;QACjB,OAAO,CACH,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,UAAU;YACf,CAAC,IAAI,CAAC,oBAAoB,KAAK,KAAK;gBAChC,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAC1D,CAAA;IACL,CAAC;IAED;;;;OAIG;IACH,IAAI,eAAe;QACf,OAAO,CACH,IAAI,CAAC,cAAc;YACnB,IAAI,CAAC,UAAU;YACf,CAAC,IAAI,CAAC,oBAAoB,KAAK,KAAK;gBAChC,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,cAAc,CAAC,CAAC,CAC1D,CAAA;IACL,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;;OAIG;IACH,6BAA6B;QACzB,MAAM,uBAAuB,GAAuB,EAAE,CAAA;QACtD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,SAAS,EAAE,EAAE;YAC9D,IAAI,KAAK,GAAG,SAAS,CAAC,KAAK,CAAA;YAC3B,IAAI,eAAe,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;gBAClC,2GAA2G;gBAC3G,yHAAyH;gBACzH,6GAA6G;gBAC7G,yGAAyG;gBACzG,KAAK,GAAG,KAAK,CAAC,gBAAgB;oBAC1B,CAAC,CAAC,KAAK,CAAC,gBAAgB;oBACxB,CAAC,CAAC,KAAK,CAAC,MAAM,CAAA;aACrB;YACD,2GAA2G;YAE3G,IAAI,QAAmC,CAAA;YACvC,IAAI,IAAI,CAAC,QAAQ,CAAC,UAAU,IAAI,SAAS,CAAC,MAAM,EAAE;gBAC9C,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,cAAc,CACtC,SAAS,CAAC,MAAM,CAAC,gBAAiB,CAAC,cAAc,CAAC,KAAK,CAAC,CAC3D,CAAA;aACJ;iBAAM,IAAI,SAAS,CAAC,MAAM,EAAE;gBACzB,QAAQ,GAAG,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;aACpD;iBAAM,IAAI,SAAS,CAAC,QAAQ,EAAE;gBAC3B,wEAAwE;gBACxE,uEAAuE;gBACvE,sEAAsE;gBACtE,kGAAkG;gBAClG,IAAI,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;oBACxD,8DAA8D;oBAC9D,4FAA4F;oBAC5F,MAAM,UAAU,GACZ,SAAS,CAAC,QAAS,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAA;oBAE/C,iGAAiG;oBACjG,iHAAiH;oBACjH,+GAA+G;oBAC/G,wFAAwF;oBACxF,IAAI,UAAU,KAAK,SAAS,EAAE;wBAC1B,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;wBACvC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAA;wBACxB,OAAO,SAAS,CAAA;qBACnB;oBACD,QAAQ,GAAG,SAAS,CAAC,QAAS,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;oBACzD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;wBAC1B,QAAQ,EAAE,SAAS,CAAC,QAAQ;wBAC5B,KAAK,EAAE,UAAU;qBACpB,CAAC,CAAA;iBACL;qBAAM;oBACH,iDAAiD;oBACjD,QAAQ,GAAG,SAAS,CAAC,QAAS,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;oBACpD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;wBAC1B,QAAQ,EAAE,SAAS,CAAC,QAAQ;wBAC5B,KAAK,EAAE,KAAK;qBACf,CAAC,CAAA;iBACL;aACJ;YAED,QAAQ,CAAC,SAAS,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;YACvC,OAAO,SAAS,CAAA;QACpB,CAAC,EAAE,EAAmB,CAAC,CAAA;QACvB,IAAI,CAAC,UAAU,GAAG,uBAAuB,CAAA;QACzC,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;OAEG;IACH,SAAS;QACL,IAAI,IAAI,CAAC,MAAM,EAAE;YACb,IAAI,CAAC,sBAAsB,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;YAC5D,IAAI,IAAI,CAAC,aAAa,EAAE;gBACpB,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;oBACnD,IACI,aAAa,CAAC,gBAAgB;wBAC9B,aAAa,CAAC,gBAAgB,CAAC,qBAAqB;4BAChD,IAAI,CAAC,aAAc,CAAC,QAAQ,EAClC;wBACE,MAAM,KAAK,GACP,aAAa,CAAC,gBAAiB,CAAC,cAAc,CAC1C,IAAI,CAAC,aAAc,CAAC,MAAO,CAC9B,CAAA;wBACL,aAAa,CAAC,cAAc,CACxB,IAAI,CAAC,sBAAuB,EAC5B,KAAK,CACR,CAAA;qBACJ;gBACL,CAAC,CAAC,CAAA;aACL;YACD,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAC1C,IAAI,CAAC,sBAAsB,CAC9B,CAAA;SACJ;aAAM,IAAI,IAAI,CAAC,cAAc,EAAE;YAC5B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,cAAc,CAAC,CAAA;SACtE;IACL,CAAC;CACJ","file":"Subject.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { SubjectChangeMap } from \"./SubjectChangeMap\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n    readonly \"@instanceof\" = Symbol.for(\"Subject\")\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    metadata: EntityMetadata\n\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    identifier: ObjectLiteral | undefined = undefined\n\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    entityWithFulfilledIds: ObjectLiteral | undefined = undefined\n\n    /**\n     * If subject was created by cascades this property will contain subject\n     * from where this subject was created.\n     */\n    parentSubject?: Subject\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * If entity is not set then this subject is created only for the entity loaded from the database,\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\n     */\n    entity?: ObjectLiteral\n\n    /**\n     * Database entity.\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\n     */\n    databaseEntity?: ObjectLiteral\n\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    databaseEntityLoaded: boolean = false\n\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    changeMaps: SubjectChangeMap[] = []\n\n    /**\n     * Generated values returned by a database (for example generated id or default values).\n     * Used in insert and update operations.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMap?: ObjectLiteral\n\n    /**\n     * Inserted values with updated values of special and default columns.\n     * Has entity-like structure (not just column database name and values).\n     */\n    insertedValueSet?: ObjectLiteral\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    canBeSoftRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    canBeRecovered: boolean = false\n\n    /**\n     * Relations updated by the change maps.\n     */\n    updatedRelationMaps: {\n        relation: RelationMetadata\n        value: ObjectLiteral\n    }[] = []\n\n    /**\n     * List of updated columns\n     */\n    diffColumns: ColumnMetadata[] = []\n\n    /**\n     * List of updated relations\n     */\n    diffRelations: RelationMetadata[] = []\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: {\n        metadata: EntityMetadata\n        parentSubject?: Subject\n        entity?: ObjectLiteral\n        canBeInserted?: boolean\n        canBeUpdated?: boolean\n        mustBeRemoved?: boolean\n        canBeSoftRemoved?: boolean\n        canBeRecovered?: boolean\n        identifier?: ObjectLiteral\n        changeMaps?: SubjectChangeMap[]\n    }) {\n        this.metadata = options.metadata\n        this.entity = options.entity\n        this.parentSubject = options.parentSubject\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps)\n\n        this.recompute()\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return (\n            this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            // ensure there are one or more changes for updatable columns\n            this.changeMaps.some(\n                (change) => !change.column || change.column.isUpdate,\n            )\n        )\n    }\n\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return (\n            this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return (\n            this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap(): ObjectLiteral {\n        const changeMapsWithoutValues: SubjectChangeMap[] = []\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value\n            if (InstanceChecker.isSubject(value)) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet\n                    ? value.insertedValueSet\n                    : value.entity\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n\n            let valueMap: ObjectLiteral | undefined\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(\n                    changeMap.column.referencedColumn!.getEntityValue(value),\n                )\n            } else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value)\n            } else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId =\n                        changeMap.relation!.getRelationIdMap(value)\n\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap)\n                        this.canBeUpdated = true\n                        return updateMap\n                    }\n                    valueMap = changeMap.relation!.createValueMap(relationId)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: relationId,\n                    })\n                } else {\n                    // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation!.createValueMap(value)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: value,\n                    })\n                }\n            }\n\n            OrmUtils.mergeDeep(updateMap, valueMap)\n            return updateMap\n        }, {} as ObjectLiteral)\n        this.changeMaps = changeMapsWithoutValues\n        return changeSet\n    }\n\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute(): void {\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity)\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\n                    if (\n                        primaryColumn.relationMetadata &&\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\n                            this.parentSubject!.metadata\n                    ) {\n                        const value =\n                            primaryColumn.referencedColumn!.getEntityValue(\n                                this.parentSubject!.entity!,\n                            )\n                        primaryColumn.setEntityValue(\n                            this.entityWithFulfilledIds!,\n                            value,\n                        )\n                    }\n                })\n            }\n            this.identifier = this.metadata.getEntityIdMap(\n                this.entityWithFulfilledIds,\n            )\n        } else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity)\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/persistence/SubjectChangeMap.d.ts b/node_modules/typeorm/browser/persistence/SubjectChangeMap.d.ts
index 6f61cc0..758621a 100644
--- a/node_modules/typeorm/browser/persistence/SubjectChangeMap.d.ts
+++ b/node_modules/typeorm/browser/persistence/SubjectChangeMap.d.ts
@@ -1,6 +1,6 @@
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { Subject } from "./Subject";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { Subject } from "typeorm/browser/persistence/Subject";
 /**
  * Change for insertion or updation of the column of the subject.
  */
diff --git a/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js b/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js
index 26c4227..0c2131c 100644
--- a/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js
+++ b/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js
@@ -80,8 +80,12 @@ export class ManyToManySubjectBuilder {
         let databaseRelatedEntityIds = [];
         // if subject don't have database entity it means all related entities in persisted subject are new and must be bind
         // and we don't need to remove something that is not exist
-        if (subject.databaseEntity)
-            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);
+        if (subject.databaseEntity) {
+            const databaseRelatedEntityValue = relation.getEntityValue(subject.databaseEntity);
+            if (databaseRelatedEntityValue) {
+                databaseRelatedEntityIds = databaseRelatedEntityValue.map((e) => relation.inverseEntityMetadata.getEntityIdMap(e));
+            }
+        }
         // extract entity's relation value
         // by example: categories inside our post (subject.entity is post)
         let relatedEntities = relation.getEntityValue(subject.entity);
diff --git a/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js.map b/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js.map
index 0be7fcf..03e3299 100644
--- a/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js.map
+++ b/node_modules/typeorm/browser/persistence/subject-builder/ManyToManySubjectBuilder.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/persistence/subject-builder/ManyToManySubjectBuilder.ts"],"names":[],"mappings":"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","file":"ManyToManySubjectBuilder.js","sourcesContent":["import { Subject } from \"../Subject\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\n\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {}\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build(): void {\n        this.subjects.forEach((subject) => {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity) return\n\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false) return\n\n                this.buildForSubjectRelation(subject, relation)\n            })\n        })\n    }\n\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject: Subject) {\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity) return\n\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach((relation) => {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false) return\n\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase: ObjectLiteral[] =\n                relation.getEntityValue(subject.databaseEntity!)\n\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach((relationId) => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata!,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(\n                        subject,\n                        relation,\n                        relationId,\n                    ),\n                })\n\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject)\n            })\n        })\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(\n        subject: Subject,\n        relation: RelationMetadata,\n    ) {\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds: ObjectLiteral[] = []\n\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(\n                subject.databaseEntity,\n            )\n\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(\n            subject.entity!,\n        )\n        if (relatedEntities === null)\n            // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = []\n        if (!Array.isArray(relatedEntities)) return\n\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is category from categories saved with post\n\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n\n            // extract only relation id from the related entities, since we only need it for comparison\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject) return\n            }\n\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(\n                (databaseRelatedEntityRelationId) => {\n                    return OrmUtils.compareIds(\n                        databaseRelatedEntityRelationId,\n                        relatedEntityRelationIdMap,\n                    )\n                },\n            )\n\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase) return\n\n            const ownerValue = relation.isOwning\n                ? subject\n                : relatedEntitySubject || relatedEntity // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning\n                ? relatedEntitySubject || relatedEntity\n                : subject // by example: inverseEntityMap is category from categories array here\n\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                canBeInserted: true,\n            })\n            this.subjects.push(junctionSubject)\n\n            relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                })\n            })\n\n            relation.junctionEntityMetadata!.inverseColumns.forEach(\n                (column) => {\n                    junctionSubject.changeMaps.push({\n                        column: column,\n                        value: inverseValue,\n                        // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                    })\n                },\n            )\n        })\n\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds: ObjectLiteral[] = []\n        relatedEntities.forEach((relatedEntity) => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            if (\n                relatedEntityRelationIdMap !== undefined &&\n                relatedEntityRelationIdMap !== null\n            )\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap)\n        })\n\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter(\n            (existRelationId) => {\n                return !changedInverseEntityRelationIds.find(\n                    (changedRelationId) => {\n                        return OrmUtils.compareIds(\n                            changedRelationId,\n                            existRelationId,\n                        )\n                    },\n                )\n            },\n        )\n\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach((removedEntityRelationId) => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(\n                    subject,\n                    relation,\n                    removedEntityRelationId,\n                ),\n            })\n            this.subjects.push(junctionSubject)\n        })\n    }\n\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    protected buildJunctionIdentifier(\n        subject: Subject,\n        relation: RelationMetadata,\n        relationId: ObjectLiteral,\n    ) {\n        const ownerEntityMap = relation.isOwning ? subject.entity! : relationId\n        const inverseEntityMap = relation.isOwning\n            ? relationId\n            : subject.entity!\n\n        const identifier: ObjectLiteral = {}\n        relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(ownerEntityMap),\n                ),\n            )\n        })\n        relation.junctionEntityMetadata!.inverseColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(inverseEntityMap),\n                ),\n            )\n        })\n        return identifier\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/persistence/subject-builder/ManyToManySubjectBuilder.ts"],"names":[],"mappings":"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","file":"ManyToManySubjectBuilder.js","sourcesContent":["import { Subject } from \"../Subject\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\n\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {}\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build(): void {\n        this.subjects.forEach((subject) => {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity) return\n\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false) return\n\n                this.buildForSubjectRelation(subject, relation)\n            })\n        })\n    }\n\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject: Subject) {\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity) return\n\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach((relation) => {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false) return\n\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase: ObjectLiteral[] =\n                relation.getEntityValue(subject.databaseEntity!)\n\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach((relationId) => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata!,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(\n                        subject,\n                        relation,\n                        relationId,\n                    ),\n                })\n\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject)\n            })\n        })\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(\n        subject: Subject,\n        relation: RelationMetadata,\n    ) {\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds: ObjectLiteral[] = []\n\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity) {\n            const databaseRelatedEntityValue = relation.getEntityValue(\n                subject.databaseEntity,\n            )\n            if (databaseRelatedEntityValue) {\n                databaseRelatedEntityIds = databaseRelatedEntityValue.map(\n                    (e: any) =>\n                        relation.inverseEntityMetadata.getEntityIdMap(e),\n                )\n            }\n        }\n\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(\n            subject.entity!,\n        )\n        if (relatedEntities === null)\n            // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = []\n        if (!Array.isArray(relatedEntities)) return\n\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is category from categories saved with post\n\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n\n            // extract only relation id from the related entities, since we only need it for comparison\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject) return\n            }\n\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(\n                (databaseRelatedEntityRelationId) => {\n                    return OrmUtils.compareIds(\n                        databaseRelatedEntityRelationId,\n                        relatedEntityRelationIdMap,\n                    )\n                },\n            )\n\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase) return\n\n            const ownerValue = relation.isOwning\n                ? subject\n                : relatedEntitySubject || relatedEntity // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning\n                ? relatedEntitySubject || relatedEntity\n                : subject // by example: inverseEntityMap is category from categories array here\n\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                canBeInserted: true,\n            })\n            this.subjects.push(junctionSubject)\n\n            relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                })\n            })\n\n            relation.junctionEntityMetadata!.inverseColumns.forEach(\n                (column) => {\n                    junctionSubject.changeMaps.push({\n                        column: column,\n                        value: inverseValue,\n                        // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                    })\n                },\n            )\n        })\n\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds: ObjectLiteral[] = []\n        relatedEntities.forEach((relatedEntity) => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            if (\n                relatedEntityRelationIdMap !== undefined &&\n                relatedEntityRelationIdMap !== null\n            )\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap)\n        })\n\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter(\n            (existRelationId) => {\n                return !changedInverseEntityRelationIds.find(\n                    (changedRelationId) => {\n                        return OrmUtils.compareIds(\n                            changedRelationId,\n                            existRelationId,\n                        )\n                    },\n                )\n            },\n        )\n\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach((removedEntityRelationId) => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(\n                    subject,\n                    relation,\n                    removedEntityRelationId,\n                ),\n            })\n            this.subjects.push(junctionSubject)\n        })\n    }\n\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    protected buildJunctionIdentifier(\n        subject: Subject,\n        relation: RelationMetadata,\n        relationId: ObjectLiteral,\n    ) {\n        const ownerEntityMap = relation.isOwning ? subject.entity! : relationId\n        const inverseEntityMap = relation.isOwning\n            ? relationId\n            : subject.entity!\n\n        const identifier: ObjectLiteral = {}\n        relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(ownerEntityMap),\n                ),\n            )\n        })\n        relation.junctionEntityMetadata!.inverseColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(inverseEntityMap),\n                ),\n            )\n        })\n        return identifier\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/platform/BrowserPlatformTools.js b/node_modules/typeorm/browser/platform/BrowserPlatformTools.js
index 4258f91..e7f06d3 100644
--- a/node_modules/typeorm/browser/platform/BrowserPlatformTools.js
+++ b/node_modules/typeorm/browser/platform/BrowserPlatformTools.js
@@ -1,3 +1,4 @@
+import { Buffer } from "buffer";
 /**
  * Browser's implementation of the platform-specific tools.
  *
@@ -130,8 +131,8 @@ export class Readable {
 }
 export class Writable {
 }
-if (typeof window !== "undefined" && typeof require !== "undefined") {
-    window.Buffer = require("buffer/").Buffer;
+if (typeof window !== "undefined") {
+    window.Buffer = Buffer;
 }
 // NativeScript uses global, not window
 if (typeof global !== "undefined" && typeof require !== "undefined") {
diff --git a/node_modules/typeorm/browser/platform/BrowserPlatformTools.js.map b/node_modules/typeorm/browser/platform/BrowserPlatformTools.js.map
index 6feba86..342c82f 100644
--- a/node_modules/typeorm/browser/platform/BrowserPlatformTools.js.map
+++ b/node_modules/typeorm/browser/platform/BrowserPlatformTools.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/platform/BrowserPlatformTools.ts"],"names":[],"mappings":"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","file":"BrowserPlatformTools.js","sourcesContent":["/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        if (typeof window !== \"undefined\") {\n            return window\n        } else {\n            // NativeScript uses global, not window\n            return global\n        }\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    static dotenv(pathStr: string): void {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n    static readFileSync(filename: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n\n    static appendFileSync(filename: string, data: any) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n\n    static writeFile(path: string, data: any): Promise<void> {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        return sql;\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return json;\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix: string, info: any) {\n        console.info(prefix + \" \", info);\n    }\n\n    static logError(prefix: string, error: any) {\n        console.error(prefix + \" \", error);\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.warn(prefix + \" \", warning);\n    }\n\n    static log(message: string) {\n        console.log(message);\n    }\n\n    static warn(message: string) {\n        return message;\n    }\n}\n\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\n\nexport class Readable {}\n\nexport class Writable {}\n\nexport interface ReadStream {}\n\n/**\n * This loads a polyfill to enable Buffers in the browser.\n */\ninterface Window {\n    Buffer: any;\n}\n\ndeclare var window: Window;\nif (typeof window !== \"undefined\" && typeof require !== \"undefined\") {\n    window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/platform/BrowserPlatformTools.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC;;;;;;GAMG;AACH,MAAM,OAAO,aAAa;IAOtB;;OAEG;IACH,MAAM,CAAC,iBAAiB;QACpB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;YAC/B,OAAO,MAAM,CAAA;SAChB;aAAM;YACH,uCAAuC;YACvC,OAAO,MAAM,CAAA;SAChB;IACL,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,IAAI,CAAC,IAAY;QACpB,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,gGAAgG,IAAI,KAAK,CAAC,CAAC;QAE/H,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,aAAa,CAAC,OAAe;QAChC,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,uGAAuG,OAAO,KAAK,CAAC,CAAC;QAEzI,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,WAAW,CAAC,OAAe;QAC9B,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,qGAAqG,OAAO,KAAK,CAAC,CAAC;QAEvI,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,WAAW,CAAC,OAAe;QAC9B,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,qGAAqG,OAAO,KAAK,CAAC,CAAC;QAEvI,OAAO,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,SAAS,CAAC,OAAe;QAC5B,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,sGAAsG,OAAO,KAAK,CAAC,CAAC;QAExI,OAAO,KAAK,CAAC;IACjB,CAAC;IAED,MAAM,CAAC,MAAM,CAAC,OAAe;QACzB,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,8GAA8G,OAAO,OAAO,CAAC,CAAC;IACtJ,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,cAAc,CAAC,IAAY;QAC9B,+BAA+B;QAC/B,sIAAsI;QACtI,OAAO,SAAS,CAAC;IACrB,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,QAAgB;QAChC,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,wGAAwG,QAAQ,KAAK,CAAC,CAAC;QAC3I,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,QAAgB,EAAE,IAAS;QAC7C,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,0GAA0G,QAAQ,KAAK,CAAC,CAAC;IACjJ,CAAC;IAED,MAAM,CAAC,SAAS,CAAC,IAAY,EAAE,IAAS;QACpC,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS;YACvB,MAAM,IAAI,KAAK,CAAC,qGAAqG,IAAI,KAAK,CAAC,CAAC;QACpI,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAChC,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,YAAY,CAAC,GAAW;QAC3B,OAAO,GAAG,CAAC;IACf,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,aAAa,CAAC,IAAY;QAC7B,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,OAAO,CAAC,MAAc,EAAE,IAAS;QACpC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,MAAM,CAAC,QAAQ,CAAC,MAAc,EAAE,KAAU;QACtC,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,CAAC,OAAO,CAAC,MAAc,EAAE,OAAY;QACvC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG,EAAE,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,OAAe;QACtB,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;IACzB,CAAC;IAED,MAAM,CAAC,IAAI,CAAC,OAAe;QACvB,OAAO,OAAO,CAAC;IACnB,CAAC;;AAtID;;GAEG;AACI,kBAAI,GAAqB,SAAS,CAAC;AAsI9C;;;GAGG;AACH,MAAM,OAAO,YAAY;CAAG;AAE5B,MAAM,OAAO,QAAQ;CAAG;AAExB,MAAM,OAAO,QAAQ;CAAG;AAYxB,IAAI,OAAO,MAAM,KAAK,WAAW,EAAE;IAC/B,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC;CAC1B;AACD,uCAAuC;AACvC,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE;IACjE,MAAM,CAAC,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC;CAC7C","file":"BrowserPlatformTools.js","sourcesContent":["import { Buffer } from \"buffer\";\n/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        if (typeof window !== \"undefined\") {\n            return window\n        } else {\n            // NativeScript uses global, not window\n            return global\n        }\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    static dotenv(pathStr: string): void {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n    static readFileSync(filename: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n\n    static appendFileSync(filename: string, data: any) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n\n    static writeFile(path: string, data: any): Promise<void> {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        return sql;\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return json;\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix: string, info: any) {\n        console.info(prefix + \" \", info);\n    }\n\n    static logError(prefix: string, error: any) {\n        console.error(prefix + \" \", error);\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.warn(prefix + \" \", warning);\n    }\n\n    static log(message: string) {\n        console.log(message);\n    }\n\n    static warn(message: string) {\n        return message;\n    }\n}\n\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\n\nexport class Readable {}\n\nexport class Writable {}\n\nexport interface ReadStream {}\n\n/**\n * This loads a polyfill to enable Buffers in the browser.\n */\ninterface Window {\n    Buffer: any;\n}\n\ndeclare var window: Window;\nif (typeof window !== \"undefined\") {\n    window.Buffer = Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\" && typeof require !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/query-builder/Alias.d.ts b/node_modules/typeorm/browser/query-builder/Alias.d.ts
index 3ecd14f..fe6e852 100644
--- a/node_modules/typeorm/browser/query-builder/Alias.d.ts
+++ b/node_modules/typeorm/browser/query-builder/Alias.d.ts
@@ -1,4 +1,4 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
 /**
  */
 export declare class Alias {
diff --git a/node_modules/typeorm/browser/query-builder/Brackets.d.ts b/node_modules/typeorm/browser/query-builder/Brackets.d.ts
index 5305071..78371d3 100644
--- a/node_modules/typeorm/browser/query-builder/Brackets.d.ts
+++ b/node_modules/typeorm/browser/query-builder/Brackets.d.ts
@@ -1,4 +1,4 @@
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
+import { WhereExpressionBuilder } from "typeorm/browser/query-builder/WhereExpressionBuilder";
 /**
  * Syntax sugar.
  * Allows to use brackets in WHERE expressions for better syntax.
diff --git a/node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.d.ts b/node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.d.ts
index 917752b..1dd681a 100644
--- a/node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/DeleteQueryBuilder.d.ts
@@ -1,11 +1,11 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityTarget } from "../common/EntityTarget";
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { DeleteResult } from "./result/DeleteResult";
+import { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/browser/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/browser/query-builder/Brackets";
+import { DeleteResult } from "typeorm/browser/query-builder/result/DeleteResult";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/browser/query-builder/InsertOrUpdateOptions.d.ts b/node_modules/typeorm/browser/query-builder/InsertOrUpdateOptions.d.ts
index 1a5b7c0..d1fd31f 100644
--- a/node_modules/typeorm/browser/query-builder/InsertOrUpdateOptions.d.ts
+++ b/node_modules/typeorm/browser/query-builder/InsertOrUpdateOptions.d.ts
@@ -1,4 +1,4 @@
-import { UpsertType } from "../driver/types/UpsertType";
+import { UpsertType } from "typeorm/browser/driver/types/UpsertType";
 export type InsertOrUpdateOptions = {
     /**
      * If true, postgres will skip the update if no values would be changed (reduces writes)
diff --git a/node_modules/typeorm/browser/query-builder/InsertQueryBuilder.d.ts b/node_modules/typeorm/browser/query-builder/InsertQueryBuilder.d.ts
index 10bb3a9..caf9cb9 100644
--- a/node_modules/typeorm/browser/query-builder/InsertQueryBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/InsertQueryBuilder.d.ts
@@ -1,10 +1,10 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { InsertOrUpdateOptions } from "./InsertOrUpdateOptions";
-import { QueryBuilder } from "./QueryBuilder";
-import { QueryDeepPartialEntity } from "./QueryPartialEntity";
-import { InsertResult } from "./result/InsertResult";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { InsertOrUpdateOptions } from "typeorm/browser/query-builder/InsertOrUpdateOptions";
+import { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+import { QueryDeepPartialEntity } from "typeorm/browser/query-builder/QueryPartialEntity";
+import { InsertResult } from "typeorm/browser/query-builder/result/InsertResult";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/browser/query-builder/JoinAttribute.d.ts b/node_modules/typeorm/browser/query-builder/JoinAttribute.d.ts
index 4145c4b..8810e0f 100644
--- a/node_modules/typeorm/browser/query-builder/JoinAttribute.d.ts
+++ b/node_modules/typeorm/browser/query-builder/JoinAttribute.d.ts
@@ -1,8 +1,8 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { QueryExpressionMap } from "./QueryExpressionMap";
-import { Alias } from "./Alias";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { QueryExpressionMap } from "typeorm/browser/query-builder/QueryExpressionMap";
+import { Alias } from "typeorm/browser/query-builder/Alias";
 /**
  * Stores all join attributes which will be used to build a JOIN query.
  */
diff --git a/node_modules/typeorm/browser/query-builder/NotBrackets.d.ts b/node_modules/typeorm/browser/query-builder/NotBrackets.d.ts
index 44161a0..7825ed5 100644
--- a/node_modules/typeorm/browser/query-builder/NotBrackets.d.ts
+++ b/node_modules/typeorm/browser/query-builder/NotBrackets.d.ts
@@ -1,4 +1,4 @@
-import { Brackets } from "./Brackets";
+import { Brackets } from "typeorm/browser/query-builder/Brackets";
 /**
  * Syntax sugar.
  * Allows to use negate brackets in WHERE expressions for better syntax.
diff --git a/node_modules/typeorm/browser/query-builder/QueryBuilder.d.ts b/node_modules/typeorm/browser/query-builder/QueryBuilder.d.ts
index f01563a..2f37791 100644
--- a/node_modules/typeorm/browser/query-builder/QueryBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/QueryBuilder.d.ts
@@ -1,23 +1,23 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { DataSource } from "../data-source/DataSource";
-import { QueryBuilderCteOptions } from "./QueryBuilderCte";
-import { QueryExpressionMap } from "./QueryExpressionMap";
-import { SelectQueryBuilder } from "./SelectQueryBuilder";
-import { UpdateQueryBuilder } from "./UpdateQueryBuilder";
-import { DeleteQueryBuilder } from "./DeleteQueryBuilder";
-import { SoftDeleteQueryBuilder } from "./SoftDeleteQueryBuilder";
-import { InsertQueryBuilder } from "./InsertQueryBuilder";
-import { RelationQueryBuilder } from "./RelationQueryBuilder";
-import { EntityTarget } from "../common/EntityTarget";
-import { Alias } from "./Alias";
-import { Brackets } from "./Brackets";
-import { QueryDeepPartialEntity } from "./QueryPartialEntity";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { WhereClause, WhereClauseCondition } from "./WhereClause";
-import { NotBrackets } from "./NotBrackets";
-import { ReturningType } from "../driver/Driver";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryBuilderCteOptions } from "typeorm/browser/query-builder/QueryBuilderCte";
+import { QueryExpressionMap } from "typeorm/browser/query-builder/QueryExpressionMap";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { UpdateQueryBuilder } from "typeorm/browser/query-builder/UpdateQueryBuilder";
+import { DeleteQueryBuilder } from "typeorm/browser/query-builder/DeleteQueryBuilder";
+import { SoftDeleteQueryBuilder } from "typeorm/browser/query-builder/SoftDeleteQueryBuilder";
+import { InsertQueryBuilder } from "typeorm/browser/query-builder/InsertQueryBuilder";
+import { RelationQueryBuilder } from "typeorm/browser/query-builder/RelationQueryBuilder";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { Alias } from "typeorm/browser/query-builder/Alias";
+import { Brackets } from "typeorm/browser/query-builder/Brackets";
+import { QueryDeepPartialEntity } from "typeorm/browser/query-builder/QueryPartialEntity";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { WhereClause, WhereClauseCondition } from "typeorm/browser/query-builder/WhereClause";
+import { NotBrackets } from "typeorm/browser/query-builder/NotBrackets";
+import { ReturningType } from "typeorm/browser/driver/Driver";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
@@ -51,6 +51,8 @@ export declare abstract class QueryBuilder<Entity extends ObjectLiteral> {
      * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.
      */
     constructor(connection: DataSource, queryRunner?: QueryRunner);
+    private static queryBuilderRegistry;
+    static registerQueryBuilderClass(name: string, factory: any): void;
     /**
      * Gets generated SQL query without parameters being replaced.
      */
diff --git a/node_modules/typeorm/browser/query-builder/QueryBuilder.js b/node_modules/typeorm/browser/query-builder/QueryBuilder.js
index 3fdc1a9..d978521 100644
--- a/node_modules/typeorm/browser/query-builder/QueryBuilder.js
+++ b/node_modules/typeorm/browser/query-builder/QueryBuilder.js
@@ -1,6 +1,5 @@
 import { QueryExpressionMap } from "./QueryExpressionMap";
 import { Brackets } from "./Brackets";
-import { FindOperator } from "../find-options/FindOperator";
 import { In } from "../find-options/operator/In";
 import { TypeORMError } from "../error";
 import { EntityPropertyNotFoundError } from "../error/EntityPropertyNotFoundError";
@@ -43,6 +42,9 @@ export class QueryBuilder {
             this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();
         }
     }
+    static registerQueryBuilderClass(name, factory) {
+        QueryBuilder.queryBuilderRegistry[name] = factory;
+    }
     // -------------------------------------------------------------------------
     // Accessors
     // -------------------------------------------------------------------------
@@ -70,11 +72,9 @@ export class QueryBuilder {
                 { selection: selection, aliasName: selectionAliasName },
             ];
         }
-        // loading it dynamically because of circular issue
-        const SelectQueryBuilderCls = require("./SelectQueryBuilder").SelectQueryBuilder;
         if (InstanceChecker.isSelectQueryBuilder(this))
             return this;
-        return new SelectQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['SelectQueryBuilder'](this);
     }
     /**
      * Creates INSERT query.
@@ -82,10 +82,9 @@ export class QueryBuilder {
     insert() {
         this.expressionMap.queryType = "insert";
         // loading it dynamically because of circular issue
-        const InsertQueryBuilderCls = require("./InsertQueryBuilder").InsertQueryBuilder;
         if (InstanceChecker.isInsertQueryBuilder(this))
             return this;
-        return new InsertQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['InsertQueryBuilder'](this);
     }
     /**
      * Creates UPDATE query and applies given update values.
@@ -105,10 +104,9 @@ export class QueryBuilder {
         this.expressionMap.queryType = "update";
         this.expressionMap.valuesSet = updateSet;
         // loading it dynamically because of circular issue
-        const UpdateQueryBuilderCls = require("./UpdateQueryBuilder").UpdateQueryBuilder;
         if (InstanceChecker.isUpdateQueryBuilder(this))
             return this;
-        return new UpdateQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['UpdateQueryBuilder'](this);
     }
     /**
      * Creates DELETE query.
@@ -116,26 +114,23 @@ export class QueryBuilder {
     delete() {
         this.expressionMap.queryType = "delete";
         // loading it dynamically because of circular issue
-        const DeleteQueryBuilderCls = require("./DeleteQueryBuilder").DeleteQueryBuilder;
         if (InstanceChecker.isDeleteQueryBuilder(this))
             return this;
-        return new DeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['DeleteQueryBuilder'](this);
     }
     softDelete() {
         this.expressionMap.queryType = "soft-delete";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this);
     }
     restore() {
         this.expressionMap.queryType = "restore";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this);
     }
     /**
      * Sets entity's relation with which this query builder gonna work.
@@ -152,10 +147,9 @@ export class QueryBuilder {
             this.expressionMap.setMainAlias(mainAlias);
         }
         // loading it dynamically because of circular issue
-        const RelationQueryBuilderCls = require("./RelationQueryBuilder").RelationQueryBuilder;
         if (InstanceChecker.isRelationQueryBuilder(this))
             return this;
-        return new RelationQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['RelationQueryBuilder'](this);
     }
     /**
      * Checks if given relation or relations exist in the entity.
@@ -529,7 +523,7 @@ export class QueryBuilder {
         // In some dialects query nesting is available - but not all.  Because of this, we'll need
         // to scrub "ending" characters from the SQL but otherwise we can leave everything else
         // as-is and it should be valid.
-        return `/* ${this.expressionMap.comment.replace("*/", "")} */ `;
+        return `/* ${this.expressionMap.comment.replace(/\*\//g, "")} */ `;
     }
     /**
      * Time travel queries for CockroachDB
@@ -755,7 +749,6 @@ export class QueryBuilder {
             case "and":
                 return condition.parameters.join(" AND ");
         }
-        throw new TypeError(`Unsupported FindOperator ${FindOperator.constructor.name}`);
     }
     createCteExpression() {
         if (!this.hasCommonTableExpressions()) {
@@ -1121,5 +1114,6 @@ export class QueryBuilder {
         return this.expressionMap.commonTableExpressions.length > 0;
     }
 }
+QueryBuilder.queryBuilderRegistry = {};
 
 //# sourceMappingURL=QueryBuilder.js.map
diff --git a/node_modules/typeorm/browser/query-builder/QueryBuilder.js.map b/node_modules/typeorm/browser/query-builder/QueryBuilder.js.map
index 32f2cf1..cf900a1 100644
--- a/node_modules/typeorm/browser/query-builder/QueryBuilder.js.map
+++ b/node_modules/typeorm/browser/query-builder/QueryBuilder.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/query-builder/QueryBuilder.ts"],"names":[],"mappings":"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","file":"QueryBuilder.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { QueryBuilderCteOptions } from \"./QueryBuilderCte\"\nimport { QueryExpressionMap } from \"./QueryExpressionMap\"\nimport { SelectQueryBuilder } from \"./SelectQueryBuilder\"\nimport { UpdateQueryBuilder } from \"./UpdateQueryBuilder\"\nimport { DeleteQueryBuilder } from \"./DeleteQueryBuilder\"\nimport { SoftDeleteQueryBuilder } from \"./SoftDeleteQueryBuilder\"\nimport { InsertQueryBuilder } from \"./InsertQueryBuilder\"\nimport { RelationQueryBuilder } from \"./RelationQueryBuilder\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { Alias } from \"./Alias\"\nimport { Brackets } from \"./Brackets\"\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { FindOperator } from \"../find-options/FindOperator\"\nimport { In } from \"../find-options/operator/In\"\nimport { TypeORMError } from \"../error\"\nimport { WhereClause, WhereClauseCondition } from \"./WhereClause\"\nimport { NotBrackets } from \"./NotBrackets\"\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\"\nimport { ReturningType } from \"../driver/Driver\"\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { escapeRegExp } from \"../util/escapeRegExp\"\n\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport abstract class QueryBuilder<Entity extends ObjectLiteral> {\n    readonly \"@instanceof\" = Symbol.for(\"QueryBuilder\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection on which QueryBuilder was created.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\n     */\n    readonly expressionMap: QueryExpressionMap\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Query runner used to execute query builder query.\n     */\n    protected queryRunner?: QueryRunner\n\n    /**\n     * If QueryBuilder was created in a subquery mode then its parent QueryBuilder (who created subquery) will be stored here.\n     */\n    protected parentQueryBuilder: QueryBuilder<any>\n\n    /**\n     * Memo to help keep place of current parameter index for `createParameter`\n     */\n    private parameterIndex = 0\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(queryBuilder: QueryBuilder<any>)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connection: DataSource, queryRunner?: QueryRunner)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\n        queryRunner?: QueryRunner,\n    ) {\n        if (InstanceChecker.isDataSource(connectionOrQueryBuilder)) {\n            this.connection = connectionOrQueryBuilder\n            this.queryRunner = queryRunner\n            this.expressionMap = new QueryExpressionMap(this.connection)\n        } else {\n            this.connection = connectionOrQueryBuilder.connection\n            this.queryRunner = connectionOrQueryBuilder.queryRunner\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone()\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    abstract getQuery(): string\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(`Main alias is not set`) // todo: better exception\n\n        return this.expressionMap.mainAlias.name\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection: string,\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection?: string | string[],\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\"\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map((selection) => ({\n                selection: selection,\n            }))\n        } else if (selection) {\n            this.expressionMap.selects = [\n                { selection: selection, aliasName: selectionAliasName },\n            ]\n        }\n\n        // loading it dynamically because of circular issue\n        const SelectQueryBuilderCls =\n            require(\"./SelectQueryBuilder\").SelectQueryBuilder\n        if (InstanceChecker.isSelectQueryBuilder(this)) return this as any\n\n        return new SelectQueryBuilderCls(this)\n    }\n\n    /**\n     * Creates INSERT query.\n     */\n    insert(): InsertQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"insert\"\n\n        // loading it dynamically because of circular issue\n        const InsertQueryBuilderCls =\n            require(\"./InsertQueryBuilder\").InsertQueryBuilder\n        if (InstanceChecker.isInsertQueryBuilder(this)) return this as any\n\n        return new InsertQueryBuilderCls(this)\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        updateSet: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<Entity extends ObjectLiteral>(\n        entity: EntityTarget<Entity>,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(\n        tableName: string,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        entityOrTableNameUpdateSet?: EntityTarget<any> | ObjectLiteral,\n        maybeUpdateSet?: ObjectLiteral,\n    ): UpdateQueryBuilder<any> {\n        const updateSet = maybeUpdateSet\n            ? maybeUpdateSet\n            : (entityOrTableNameUpdateSet as ObjectLiteral | undefined)\n        entityOrTableNameUpdateSet = InstanceChecker.isEntitySchema(\n            entityOrTableNameUpdateSet,\n        )\n            ? entityOrTableNameUpdateSet.options.name\n            : entityOrTableNameUpdateSet\n\n        if (\n            typeof entityOrTableNameUpdateSet === \"function\" ||\n            typeof entityOrTableNameUpdateSet === \"string\"\n        ) {\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        this.expressionMap.queryType = \"update\"\n        this.expressionMap.valuesSet = updateSet\n\n        // loading it dynamically because of circular issue\n        const UpdateQueryBuilderCls =\n            require(\"./UpdateQueryBuilder\").UpdateQueryBuilder\n        if (InstanceChecker.isUpdateQueryBuilder(this)) return this as any\n\n        return new UpdateQueryBuilderCls(this)\n    }\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): DeleteQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"delete\"\n\n        // loading it dynamically because of circular issue\n        const DeleteQueryBuilderCls =\n            require(\"./DeleteQueryBuilder\").DeleteQueryBuilder\n        if (InstanceChecker.isDeleteQueryBuilder(this)) return this as any\n\n        return new DeleteQueryBuilderCls(this)\n    }\n\n    softDelete(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"soft-delete\"\n\n        // loading it dynamically because of circular issue\n        const SoftDeleteQueryBuilderCls =\n            require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder\n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return new SoftDeleteQueryBuilderCls(this)\n    }\n\n    restore(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"restore\"\n\n        // loading it dynamically because of circular issue\n        const SoftDeleteQueryBuilderCls =\n            require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder\n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return new SoftDeleteQueryBuilderCls(this)\n    }\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(propertyPath: string): RelationQueryBuilder<Entity>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation<T extends ObjectLiteral>(\n        entityTarget: EntityTarget<T>,\n        propertyPath: string,\n    ): RelationQueryBuilder<T>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(\n        entityTargetOrPropertyPath: Function | string,\n        maybePropertyPath?: string,\n    ): RelationQueryBuilder<Entity> {\n        const entityTarget =\n            arguments.length === 2 ? entityTargetOrPropertyPath : undefined\n        const propertyPath =\n            arguments.length === 2\n                ? (maybePropertyPath as string)\n                : (entityTargetOrPropertyPath as string)\n\n        this.expressionMap.queryType = \"relation\"\n        this.expressionMap.relationPropertyPath = propertyPath\n\n        if (entityTarget) {\n            const mainAlias = this.createFromAlias(entityTarget)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        // loading it dynamically because of circular issue\n        const RelationQueryBuilderCls =\n            require(\"./RelationQueryBuilder\").RelationQueryBuilder\n        if (InstanceChecker.isRelationQueryBuilder(this)) return this as any\n\n        return new RelationQueryBuilderCls(this)\n    }\n\n    /**\n     * Checks if given relation exists in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string): boolean\n\n    /**\n     * Checks if given relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string[]): boolean\n\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(\n        target: EntityTarget<T>,\n        relation: string | string[],\n    ): boolean {\n        const entityMetadata = this.connection.getMetadata(target)\n        const relations = Array.isArray(relation) ? relation : [relation]\n        return relations.every((relation) => {\n            return !!entityMetadata.findRelationWithPropertyPath(relation)\n        })\n    }\n\n    /**\n     * Check the existence of a parameter for this query builder.\n     */\n    hasParameter(key: string): boolean {\n        return (\n            this.parentQueryBuilder?.hasParameter(key) ||\n            key in this.expressionMap.parameters\n        )\n    }\n\n    /**\n     * Sets parameter name and its value.\n     *\n     * The key for this parameter may contain numbers, letters, underscores, or periods.\n     */\n    setParameter(key: string, value: any): this {\n        if (typeof value === \"function\") {\n            throw new TypeORMError(\n                `Function parameter isn't supported in the parameters. Please check \"${key}\" parameter.`,\n            )\n        }\n\n        if (!key.match(/^([A-Za-z0-9_.]+)$/)) {\n            throw new TypeORMError(\n                \"QueryBuilder parameter keys may only contain numbers, letters, underscores, or periods.\",\n            )\n        }\n\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setParameter(key, value)\n        }\n\n        this.expressionMap.parameters[key] = value\n        return this\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n        for (const [key, value] of Object.entries(parameters)) {\n            this.setParameter(key, value)\n        }\n\n        return this\n    }\n\n    protected createParameter(value: any): string {\n        let parameterName\n\n        do {\n            parameterName = `orm_param_${this.parameterIndex++}`\n        } while (this.hasParameter(parameterName))\n\n        this.setParameter(parameterName, value)\n\n        return `:${parameterName}`\n    }\n\n    /**\n     * Adds native parameters from the given object.\n     *\n     * @deprecated Use `setParameters` instead\n     */\n    setNativeParameters(parameters: ObjectLiteral): this {\n        // set parent query builder parameters as well in sub-query mode\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setNativeParameters(parameters)\n        }\n\n        Object.keys(parameters).forEach((key) => {\n            this.expressionMap.nativeParameters[key] = parameters[key]\n        })\n        return this\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign(\n            {},\n            this.expressionMap.parameters,\n        )\n\n        // add discriminator column parameter if it exist\n        if (\n            this.expressionMap.mainAlias &&\n            this.expressionMap.mainAlias.hasMetadata\n        ) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter(\n                        (childMetadata) => childMetadata.discriminatorColumn,\n                    )\n                    .map((childMetadata) => childMetadata.discriminatorValue)\n                values.push(metadata.discriminatorValue)\n                parameters[\"discriminatorColumnValues\"] = values\n            }\n        }\n\n        return parameters\n    }\n\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql(): this {\n        // TODO rename to logSql()\n        const [query, parameters] = this.getQueryAndParameters()\n        this.connection.logger.logQuery(query, parameters)\n        return this\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        return this.getQueryAndParameters()[0]\n    }\n\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    getQueryAndParameters(): [string, any[]] {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        const query = this.getQuery()\n        const parameters = this.getParameters()\n        return this.connection.driver.escapeQueryWithParameters(\n            query,\n            parameters,\n            this.expressionMap.nativeParameters,\n        )\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const [sql, parameters] = this.getQueryAndParameters()\n        const queryRunner = this.obtainQueryRunner()\n        try {\n            return await queryRunner.query(sql, parameters) // await is needed here because we are using finally\n        } finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release()\n            }\n        }\n    }\n\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    createQueryBuilder(): this {\n        return new (this.constructor as any)(this.connection, this.queryRunner)\n    }\n\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone(): this {\n        return new (this.constructor as any)(this)\n    }\n\n    /**\n     * Includes a Query comment in the query builder.  This is helpful for debugging purposes,\n     * such as finding a specific query in the database server's logs, or for categorization using\n     * an APM product.\n     */\n    comment(comment: string): this {\n        this.expressionMap.comment = comment\n        return this\n    }\n\n    /**\n     * Disables escaping.\n     */\n    disableEscaping(): this {\n        this.expressionMap.disableEscaping = false\n        return this\n    }\n\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name: string): string {\n        if (!this.expressionMap.disableEscaping) return name\n        return this.connection.driver.escape(name)\n    }\n\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    setQueryRunner(queryRunner: QueryRunner): this {\n        this.queryRunner = queryRunner\n        return this\n    }\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    callListeners(enabled: boolean): this {\n        this.expressionMap.callListeners = enabled\n        return this\n    }\n\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    useTransaction(enabled: boolean): this {\n        this.expressionMap.useTransaction = enabled\n        return this\n    }\n\n    /**\n     * Adds CTE to query\n     */\n    addCommonTableExpression(\n        queryBuilder: QueryBuilder<any> | string,\n        alias: string,\n        options?: QueryBuilderCteOptions,\n    ): this {\n        this.expressionMap.commonTableExpressions.push({\n            queryBuilder,\n            alias,\n            options: options || {},\n        })\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\") return i\n                return this.escape(i)\n            })\n            .join(\".\")\n    }\n\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    protected getMainTableName(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(\n                `Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`,\n            )\n\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath\n\n        return this.expressionMap.mainAlias.tablePath!\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    protected createFromAlias(\n        entityTarget:\n            | EntityTarget<any>\n            | ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>),\n        aliasName?: string,\n    ): Alias {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            const metadata = this.connection.getMetadata(entityTarget)\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath,\n            })\n        } else {\n            if (typeof entityTarget === \"string\") {\n                const isSubquery =\n                    entityTarget.substr(0, 1) === \"(\" &&\n                    entityTarget.substr(-1) === \")\"\n\n                return this.expressionMap.createAlias({\n                    type: \"from\",\n                    name: aliasName,\n                    tablePath: !isSubquery\n                        ? (entityTarget as string)\n                        : undefined,\n                    subQuery: isSubquery ? entityTarget : undefined,\n                })\n            }\n\n            const subQueryBuilder: SelectQueryBuilder<any> = (\n                entityTarget as any\n            )((this as any as SelectQueryBuilder<any>).subQuery())\n            this.setParameters(subQueryBuilder.getParameters())\n            const subquery = subQueryBuilder.getQuery()\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                subQuery: subquery,\n            })\n        }\n    }\n\n    /**\n     * @deprecated this way of replace property names is too slow.\n     *  Instead, we'll replace property names at the end - once query is build.\n     */\n    protected replacePropertyNames(statement: string) {\n        return statement\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given SQL string.\n     */\n    protected replacePropertyNamesForTheWholeQuery(statement: string) {\n        const replacements: { [key: string]: { [key: string]: string } } = {}\n\n        for (const alias of this.expressionMap.aliases) {\n            if (!alias.hasMetadata) continue\n            const replaceAliasNamePrefix =\n                this.expressionMap.aliasNamePrefixingEnabled && alias.name\n                    ? `${alias.name}.`\n                    : \"\"\n\n            if (!replacements[replaceAliasNamePrefix]) {\n                replacements[replaceAliasNamePrefix] = {}\n            }\n\n            // Insert & overwrite the replacements from least to most relevant in our replacements object.\n            // To do this we iterate and overwrite in the order of relevance.\n            // Least to Most Relevant:\n            // * Relation Property Path to first join column key\n            // * Relation Property Path + Column Path\n            // * Column Database Name\n            // * Column Property Name\n            // * Column Property Path\n\n            for (const relation of alias.metadata.relations) {\n                if (relation.joinColumns.length > 0)\n                    replacements[replaceAliasNamePrefix][\n                        relation.propertyPath\n                    ] = relation.joinColumns[0].databaseName\n            }\n\n            for (const relation of alias.metadata.relations) {\n                const allColumns = [\n                    ...relation.joinColumns,\n                    ...relation.inverseJoinColumns,\n                ]\n                for (const joinColumn of allColumns) {\n                    const propertyKey = `${relation.propertyPath}.${\n                        joinColumn.referencedColumn!.propertyPath\n                    }`\n                    replacements[replaceAliasNamePrefix][propertyKey] =\n                        joinColumn.databaseName\n                }\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.databaseName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyPath] =\n                    column.databaseName\n            }\n        }\n\n        const replacementKeys = Object.keys(replacements)\n        const replaceAliasNamePrefixes = replacementKeys\n            .map((key) => escapeRegExp(key))\n            .join(\"|\")\n\n        if (replacementKeys.length > 0) {\n            statement = statement.replace(\n                new RegExp(\n                    // Avoid a lookbehind here since it's not well supported\n                    `([ =\\(]|^.{0})` + // any of ' =(' or start of line\n                        // followed by our prefix, e.g. 'tablename.' or ''\n                        `${\n                            replaceAliasNamePrefixes\n                                ? \"(\" + replaceAliasNamePrefixes + \")\"\n                                : \"\"\n                        }([^ =\\(\\)\\,]+)` + // a possible property name: sequence of anything but ' =(),'\n                        // terminated by ' =),' or end of line\n                        `(?=[ =\\)\\,]|.{0}$)`,\n                    \"gm\",\n                ),\n                (...matches) => {\n                    let match: string, pre: string, p: string\n                    if (replaceAliasNamePrefixes) {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[3]\n\n                        if (replacements[matches[2]][p]) {\n                            return `${pre}${this.escape(\n                                matches[2].substring(0, matches[2].length - 1),\n                            )}.${this.escape(replacements[matches[2]][p])}`\n                        }\n                    } else {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[2]\n\n                        if (replacements[\"\"][p]) {\n                            return `${pre}${this.escape(replacements[\"\"][p])}`\n                        }\n                    }\n                    return match\n                },\n            )\n        }\n\n        return statement\n    }\n\n    protected createComment(): string {\n        if (!this.expressionMap.comment) {\n            return \"\"\n        }\n\n        // ANSI SQL 2003 support C style comments - comments that start with `/*` and end with `*/`\n        // In some dialects query nesting is available - but not all.  Because of this, we'll need\n        // to scrub \"ending\" characters from the SQL but otherwise we can leave everything else\n        // as-is and it should be valid.\n\n        return `/* ${this.expressionMap.comment.replace(\"*/\", \"\")} */ `\n    }\n\n    /**\n     * Time travel queries for CockroachDB\n     */\n    protected createTimeTravelQuery(): string {\n        if (\n            this.expressionMap.queryType === \"select\" &&\n            this.expressionMap.timeTravel\n        ) {\n            return ` AS OF SYSTEM TIME ${this.expressionMap.timeTravel}`\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    protected createWhereExpression() {\n        const conditionsArray = []\n\n        const whereExpression = this.createWhereClausesExpression(\n            this.expressionMap.wheres,\n        )\n\n        if (whereExpression.length > 0 && whereExpression !== \"1=1\") {\n            conditionsArray.push(this.replacePropertyNames(whereExpression))\n        }\n\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            // Adds the global condition of \"non-deleted\" for the entity with delete date columns in select query.\n            if (\n                this.expressionMap.queryType === \"select\" &&\n                !this.expressionMap.withDeleted &&\n                metadata.deleteDateColumn\n            ) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.deleteDateColumn.propertyName\n                    : metadata.deleteDateColumn.propertyName\n\n                const condition = `${this.replacePropertyNames(column)} IS NULL`\n                conditionsArray.push(condition)\n            }\n\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName\n\n                const condition = `${this.replacePropertyNames(\n                    column,\n                )} IN (:...discriminatorColumnValues)`\n                conditionsArray.push(condition)\n            }\n        }\n\n        if (this.expressionMap.extraAppendedAndWhereCondition) {\n            const condition = this.replacePropertyNames(\n                this.expressionMap.extraAppendedAndWhereCondition,\n            )\n            conditionsArray.push(condition)\n        }\n\n        let condition = \"\"\n\n        // time travel\n        condition += this.createTimeTravelQuery()\n\n        if (!conditionsArray.length) {\n            condition += \"\"\n        } else if (conditionsArray.length === 1) {\n            condition += ` WHERE ${conditionsArray[0]}`\n        } else {\n            condition += ` WHERE ( ${conditionsArray.join(\" ) AND ( \")} )`\n        }\n\n        return condition\n    }\n\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    protected createReturningExpression(returningType: ReturningType): string {\n        const columns = this.getReturningColumns()\n        const driver = this.connection.driver\n\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (\n            typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported(returningType)\n        ) {\n            columns.push(\n                ...this.expressionMap.extraReturningColumns.filter((column) => {\n                    return columns.indexOf(column) === -1\n                }),\n            )\n        }\n\n        if (columns.length) {\n            let columnsExpression = columns\n                .map((column) => {\n                    const name = this.escape(column.databaseName)\n                    if (driver.options.type === \"mssql\") {\n                        if (\n                            this.expressionMap.queryType === \"insert\" ||\n                            this.expressionMap.queryType === \"update\" ||\n                            this.expressionMap.queryType === \"soft-delete\" ||\n                            this.expressionMap.queryType === \"restore\"\n                        ) {\n                            return \"INSERTED.\" + name\n                        } else {\n                            return (\n                                this.escape(this.getMainTableName()) +\n                                \".\" +\n                                name\n                            )\n                        }\n                    } else {\n                        return name\n                    }\n                })\n                .join(\", \")\n\n            if (driver.options.type === \"oracle\") {\n                columnsExpression +=\n                    \" INTO \" +\n                    columns\n                        .map((column) => {\n                            return this.createParameter({\n                                type: (\n                                    driver as OracleDriver\n                                ).columnTypeToNativeParameter(column.type),\n                                dir: (driver as OracleDriver).oracle.BIND_OUT,\n                            })\n                        })\n                        .join(\", \")\n            }\n\n            if (driver.options.type === \"mssql\") {\n                if (\n                    this.expressionMap.queryType === \"insert\" ||\n                    this.expressionMap.queryType === \"update\"\n                ) {\n                    columnsExpression += \" INTO @OutputTable\"\n                }\n            }\n\n            return columnsExpression\n        } else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning\n        }\n\n        return \"\"\n    }\n\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    protected getReturningColumns(): ColumnMetadata[] {\n        const columns: ColumnMetadata[] = []\n        if (Array.isArray(this.expressionMap.returning)) {\n            ;(this.expressionMap.returning as string[]).forEach(\n                (columnName) => {\n                    if (this.expressionMap.mainAlias!.hasMetadata) {\n                        columns.push(\n                            ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(\n                                columnName,\n                            ),\n                        )\n                    }\n                },\n            )\n        }\n        return columns\n    }\n\n    protected createWhereClausesExpression(clauses: WhereClause[]): string {\n        return clauses\n            .map((clause, index) => {\n                const expression = this.createWhereConditionExpression(\n                    clause.condition,\n                )\n\n                switch (clause.type) {\n                    case \"and\":\n                        return (index > 0 ? \"AND \" : \"\") + expression\n                    case \"or\":\n                        return (index > 0 ? \"OR \" : \"\") + expression\n                }\n\n                return expression\n            })\n            .join(\" \")\n            .trim()\n    }\n\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    protected createWhereConditionExpression(\n        condition: WhereClauseCondition,\n        alwaysWrap: boolean = false,\n    ): string {\n        if (typeof condition === \"string\") return condition\n\n        if (Array.isArray(condition)) {\n            if (condition.length === 0) {\n                return \"1=1\"\n            }\n\n            // In the future we should probably remove this entire condition\n            // but for now to prevent any breaking changes it exists.\n            if (condition.length === 1 && !alwaysWrap) {\n                return this.createWhereClausesExpression(condition)\n            }\n\n            return \"(\" + this.createWhereClausesExpression(condition) + \")\"\n        }\n\n        const { driver } = this.connection\n\n        switch (condition.operator) {\n            case \"lessThan\":\n                return `${condition.parameters[0]} < ${condition.parameters[1]}`\n            case \"lessThanOrEqual\":\n                return `${condition.parameters[0]} <= ${condition.parameters[1]}`\n            case \"arrayContains\":\n                return `${condition.parameters[0]} @> ${condition.parameters[1]}`\n            case \"jsonContains\":\n                return `${condition.parameters[0]} ::jsonb @> ${condition.parameters[1]}`\n            case \"arrayContainedBy\":\n                return `${condition.parameters[0]} <@ ${condition.parameters[1]}`\n            case \"arrayOverlap\":\n                return `${condition.parameters[0]} && ${condition.parameters[1]}`\n            case \"moreThan\":\n                return `${condition.parameters[0]} > ${condition.parameters[1]}`\n            case \"moreThanOrEqual\":\n                return `${condition.parameters[0]} >= ${condition.parameters[1]}`\n            case \"notEqual\":\n                return `${condition.parameters[0]} != ${condition.parameters[1]}`\n            case \"equal\":\n                return `${condition.parameters[0]} = ${condition.parameters[1]}`\n            case \"ilike\":\n                if (\n                    driver.options.type === \"postgres\" ||\n                    driver.options.type === \"cockroachdb\"\n                ) {\n                    return `${condition.parameters[0]} ILIKE ${condition.parameters[1]}`\n                }\n\n                return `UPPER(${condition.parameters[0]}) LIKE UPPER(${condition.parameters[1]})`\n            case \"like\":\n                return `${condition.parameters[0]} LIKE ${condition.parameters[1]}`\n            case \"between\":\n                return `${condition.parameters[0]} BETWEEN ${condition.parameters[1]} AND ${condition.parameters[2]}`\n            case \"in\":\n                if (condition.parameters.length <= 1) {\n                    return \"0=1\"\n                }\n                return `${condition.parameters[0]} IN (${condition.parameters\n                    .slice(1)\n                    .join(\", \")})`\n            case \"any\":\n                if (driver.options.type === \"cockroachdb\") {\n                    return `${condition.parameters[0]}::STRING = ANY(${condition.parameters[1]}::STRING[])`\n                }\n\n                return `${condition.parameters[0]} = ANY(${condition.parameters[1]})`\n            case \"isNull\":\n                return `${condition.parameters[0]} IS NULL`\n\n            case \"not\":\n                return `NOT(${this.createWhereConditionExpression(\n                    condition.condition,\n                )})`\n            case \"brackets\":\n                return `${this.createWhereConditionExpression(\n                    condition.condition,\n                    true,\n                )}`\n            case \"and\":\n                return condition.parameters.join(\" AND \")\n        }\n\n        throw new TypeError(\n            `Unsupported FindOperator ${FindOperator.constructor.name}`,\n        )\n    }\n\n    protected createCteExpression(): string {\n        if (!this.hasCommonTableExpressions()) {\n            return \"\"\n        }\n        const databaseRequireRecusiveHint =\n            this.connection.driver.cteCapabilities.requiresRecursiveHint\n\n        const cteStrings = this.expressionMap.commonTableExpressions.map(\n            (cte) => {\n                const cteBodyExpression =\n                    typeof cte.queryBuilder === \"string\"\n                        ? cte.queryBuilder\n                        : cte.queryBuilder.getQuery()\n                if (typeof cte.queryBuilder !== \"string\") {\n                    if (cte.queryBuilder.hasCommonTableExpressions()) {\n                        throw new TypeORMError(\n                            `Nested CTEs aren't supported (CTE: ${cte.alias})`,\n                        )\n                    }\n                    if (\n                        !this.connection.driver.cteCapabilities.writable &&\n                        !InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        throw new TypeORMError(\n                            `Only select queries are supported in CTEs in ${this.connection.options.type} (CTE: ${cte.alias})`,\n                        )\n                    }\n                    this.setParameters(cte.queryBuilder.getParameters())\n                }\n                let cteHeader = this.escape(cte.alias)\n                if (cte.options.columnNames) {\n                    const escapedColumnNames = cte.options.columnNames.map(\n                        (column) => this.escape(column),\n                    )\n                    if (\n                        InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        if (\n                            cte.queryBuilder.expressionMap.selects.length &&\n                            cte.options.columnNames.length !==\n                                cte.queryBuilder.expressionMap.selects.length\n                        ) {\n                            throw new TypeORMError(\n                                `cte.options.columnNames length (${cte.options.columnNames.length}) doesn't match subquery select list length ${cte.queryBuilder.expressionMap.selects.length} (CTE: ${cte.alias})`,\n                            )\n                        }\n                    }\n                    cteHeader += `(${escapedColumnNames.join(\", \")})`\n                }\n                const recursiveClause =\n                    cte.options.recursive && databaseRequireRecusiveHint\n                        ? \"RECURSIVE\"\n                        : \"\"\n                let materializeClause = \"\"\n                if (\n                    this.connection.driver.cteCapabilities.materializedHint &&\n                    cte.options.materialized !== undefined\n                ) {\n                    materializeClause = cte.options.materialized\n                        ? \"MATERIALIZED\"\n                        : \"NOT MATERIALIZED\"\n                }\n\n                return [\n                    recursiveClause,\n                    cteHeader,\n                    \"AS\",\n                    materializeClause,\n                    `(${cteBodyExpression})`,\n                ]\n                    .filter(Boolean)\n                    .join(\" \")\n            },\n        )\n\n        return \"WITH \" + cteStrings.join(\", \") + \" \"\n    }\n\n    /**\n     * Creates \"WHERE\" condition for an in-ids condition.\n     */\n    protected getWhereInIdsCondition(\n        ids: any | any[],\n    ): ObjectLiteral | Brackets {\n        const metadata = this.expressionMap.mainAlias!.metadata\n        const normalized = (Array.isArray(ids) ? ids : [ids]).map((id) =>\n            metadata.ensureEntityIdMap(id),\n        )\n\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys) {\n            const primaryColumn = metadata.primaryColumns[0]\n\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            // This also fails for embedded & relation, so until that is fixed skip it.\n            if (\n                !primaryColumn.transformer &&\n                !primaryColumn.relationMetadata &&\n                !primaryColumn.embeddedMetadata\n            ) {\n                return {\n                    [primaryColumn.propertyName]: In(\n                        normalized.map((id) =>\n                            primaryColumn.getEntityValue(id, false),\n                        ),\n                    ),\n                }\n            }\n        }\n\n        return new Brackets((qb) => {\n            for (const data of normalized) {\n                qb.orWhere(new Brackets((qb) => qb.where(data)))\n            }\n        })\n    }\n\n    protected getExistsCondition(subQuery: any): [string, any[]] {\n        const query = subQuery\n            .clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(\"1\")\n            .setOption(\"disable-global-order\")\n\n        return [`EXISTS (${query.getQuery()})`, query.getParameters()]\n    }\n\n    private findColumnsForPropertyPath(\n        propertyPath: string,\n    ): [Alias, string[], ColumnMetadata[]] {\n        // Make a helper to iterate the entity & relations?\n        // Use that to set the correct alias?  Or the other way around?\n\n        // Start with the main alias with our property paths\n        let alias = this.expressionMap.mainAlias\n        const root: string[] = []\n        const propertyPathParts = propertyPath.split(\".\")\n\n        while (propertyPathParts.length > 1) {\n            const part = propertyPathParts[0]\n\n            if (!alias?.hasMetadata) {\n                // If there's no metadata, we're wasting our time\n                // and can't actually look any of this up.\n                break\n            }\n\n            if (alias.metadata.hasEmbeddedWithPropertyPath(part)) {\n                // If this is an embedded then we should combine the two as part of our lookup.\n                // Instead of just breaking, we keep going with this in case there's an embedded/relation\n                // inside an embedded.\n                propertyPathParts.unshift(\n                    `${propertyPathParts.shift()}.${propertyPathParts.shift()}`,\n                )\n                continue\n            }\n\n            if (alias.metadata.hasRelationWithPropertyPath(part)) {\n                // If this is a relation then we should find the aliases\n                // that match the relation & then continue further down\n                // the property path\n                const joinAttr = this.expressionMap.joinAttributes.find(\n                    (joinAttr) => joinAttr.relationPropertyPath === part,\n                )\n\n                if (!joinAttr?.alias) {\n                    const fullRelationPath =\n                        root.length > 0 ? `${root.join(\".\")}.${part}` : part\n                    throw new Error(\n                        `Cannot find alias for relation at ${fullRelationPath}`,\n                    )\n                }\n\n                alias = joinAttr.alias\n                root.push(...part.split(\".\"))\n                propertyPathParts.shift()\n                continue\n            }\n\n            break\n        }\n\n        if (!alias) {\n            throw new Error(`Cannot find alias for property ${propertyPath}`)\n        }\n\n        // Remaining parts are combined back and used to find the actual property path\n        const aliasPropertyPath = propertyPathParts.join(\".\")\n\n        const columns =\n            alias.metadata.findColumnsWithPropertyPath(aliasPropertyPath)\n\n        if (!columns.length) {\n            throw new EntityPropertyNotFoundError(propertyPath, alias.metadata)\n        }\n\n        return [alias, root, columns]\n    }\n\n    /**\n     * Creates a property paths for a given ObjectLiteral.\n     */\n    protected createPropertyPath(\n        metadata: EntityMetadata,\n        entity: ObjectLiteral,\n        prefix: string = \"\",\n    ) {\n        const paths: string[] = []\n\n        for (const key of Object.keys(entity)) {\n            const path = prefix ? `${prefix}.${key}` : key\n\n            // There's times where we don't actually want to traverse deeper.\n            // If the value is a `FindOperator`, or null, or not an object, then we don't, for example.\n            if (\n                entity[key] === null ||\n                typeof entity[key] !== \"object\" ||\n                InstanceChecker.isFindOperator(entity[key])\n            ) {\n                paths.push(path)\n                continue\n            }\n\n            if (metadata.hasEmbeddedWithPropertyPath(path)) {\n                const subPaths = this.createPropertyPath(\n                    metadata,\n                    entity[key],\n                    path,\n                )\n                paths.push(...subPaths)\n                continue\n            }\n\n            if (metadata.hasRelationWithPropertyPath(path)) {\n                const relation = metadata.findRelationWithPropertyPath(path)!\n\n                // There's also cases where we don't want to return back all of the properties.\n                // These handles the situation where someone passes the model & we don't need to make\n                // a HUGE `where` to uniquely look up the entity.\n\n                // In the case of a *-to-one, there's only ever one possible entity on the other side\n                // so if the join columns are all defined we can return just the relation itself\n                // because it will fetch only the join columns and do the lookup.\n                if (\n                    relation.relationType === \"one-to-one\" ||\n                    relation.relationType === \"many-to-one\"\n                ) {\n                    const joinColumns = relation.joinColumns\n                        .map((j) => j.referencedColumn)\n                        .filter((j): j is ColumnMetadata => !!j)\n\n                    const hasAllJoinColumns =\n                        joinColumns.length > 0 &&\n                        joinColumns.every((column) =>\n                            column.getEntityValue(entity[key], false),\n                        )\n\n                    if (hasAllJoinColumns) {\n                        paths.push(path)\n                        continue\n                    }\n                }\n\n                if (\n                    relation.relationType === \"one-to-many\" ||\n                    relation.relationType === \"many-to-many\"\n                ) {\n                    throw new Error(\n                        `Cannot query across ${relation.relationType} for property ${path}`,\n                    )\n                }\n\n                // For any other case, if the `entity[key]` contains all of the primary keys we can do a\n                // lookup via these.  We don't need to look up via any other values 'cause these are\n                // the unique primary keys.\n                // This handles the situation where someone passes the model & we don't need to make\n                // a HUGE where.\n                const primaryColumns =\n                    relation.inverseEntityMetadata.primaryColumns\n                const hasAllPrimaryKeys =\n                    primaryColumns.length > 0 &&\n                    primaryColumns.every((column) =>\n                        column.getEntityValue(entity[key], false),\n                    )\n\n                if (hasAllPrimaryKeys) {\n                    const subPaths = primaryColumns.map(\n                        (column) => `${path}.${column.propertyPath}`,\n                    )\n                    paths.push(...subPaths)\n                    continue\n                }\n\n                // If nothing else, just return every property that's being passed to us.\n                const subPaths = this.createPropertyPath(\n                    relation.inverseEntityMetadata,\n                    entity[key],\n                ).map((p) => `${path}.${p}`)\n                paths.push(...subPaths)\n                continue\n            }\n\n            paths.push(path)\n        }\n\n        return paths\n    }\n\n    protected *getPredicates(where: ObjectLiteral) {\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const propertyPaths = this.createPropertyPath(\n                this.expressionMap.mainAlias!.metadata,\n                where,\n            )\n\n            for (const propertyPath of propertyPaths) {\n                const [alias, aliasPropertyPath, columns] =\n                    this.findColumnsForPropertyPath(propertyPath)\n\n                for (const column of columns) {\n                    let containedWhere = where\n\n                    for (const part of aliasPropertyPath) {\n                        if (!containedWhere || !(part in containedWhere)) {\n                            containedWhere = {}\n                            break\n                        }\n\n                        containedWhere = containedWhere[part]\n                    }\n\n                    // Use the correct alias & the property path from the column\n                    const aliasPath = this.expressionMap\n                        .aliasNamePrefixingEnabled\n                        ? `${alias.name}.${column.propertyPath}`\n                        : column.propertyPath\n\n                    const parameterValue = column.getEntityValue(\n                        containedWhere,\n                        true,\n                    )\n\n                    yield [aliasPath, parameterValue]\n                }\n            }\n        } else {\n            for (const key of Object.keys(where)) {\n                const parameterValue = where[key]\n                const aliasPath = this.expressionMap.aliasNamePrefixingEnabled\n                    ? `${this.alias}.${key}`\n                    : key\n\n                yield [aliasPath, parameterValue]\n            }\n        }\n    }\n\n    protected getWherePredicateCondition(\n        aliasPath: string,\n        parameterValue: any,\n    ): WhereClauseCondition {\n        if (InstanceChecker.isFindOperator(parameterValue)) {\n            let parameters: any[] = []\n            if (parameterValue.useParameter) {\n                if (parameterValue.objectLiteralParameters) {\n                    this.setParameters(parameterValue.objectLiteralParameters)\n                } else if (parameterValue.multipleParameters) {\n                    for (const v of parameterValue.value) {\n                        parameters.push(this.createParameter(v))\n                    }\n                } else {\n                    parameters.push(this.createParameter(parameterValue.value))\n                }\n            }\n\n            if (parameterValue.type === \"raw\") {\n                if (parameterValue.getSql) {\n                    return parameterValue.getSql(aliasPath)\n                } else {\n                    return {\n                        operator: \"equal\",\n                        parameters: [aliasPath, parameterValue.value],\n                    }\n                }\n            } else if (parameterValue.type === \"not\") {\n                if (parameterValue.child) {\n                    return {\n                        operator: parameterValue.type,\n                        condition: this.getWherePredicateCondition(\n                            aliasPath,\n                            parameterValue.child,\n                        ),\n                    }\n                } else {\n                    return {\n                        operator: \"notEqual\",\n                        parameters: [aliasPath, ...parameters],\n                    }\n                }\n            } else if (parameterValue.type === \"and\") {\n                const values: FindOperator<any>[] = parameterValue.value\n\n                return {\n                    operator: parameterValue.type,\n                    parameters: values.map((operator) =>\n                        this.createWhereConditionExpression(\n                            this.getWherePredicateCondition(\n                                aliasPath,\n                                operator,\n                            ),\n                        ),\n                    ),\n                }\n            } else {\n                return {\n                    operator: parameterValue.type,\n                    parameters: [aliasPath, ...parameters],\n                }\n            }\n            // } else if (parameterValue === null) {\n            //     return {\n            //         operator: \"isNull\",\n            //         parameters: [\n            //             aliasPath,\n            //         ]\n            //     };\n        } else {\n            return {\n                operator: \"equal\",\n                parameters: [aliasPath, this.createParameter(parameterValue)],\n            }\n        }\n    }\n\n    protected getWhereCondition(\n        where:\n            | string\n            | ((qb: this) => string)\n            | Brackets\n            | NotBrackets\n            | ObjectLiteral\n            | ObjectLiteral[],\n    ): WhereClauseCondition {\n        if (typeof where === \"string\") {\n            return where\n        }\n\n        if (InstanceChecker.isBrackets(where)) {\n            const whereQueryBuilder = this.createQueryBuilder()\n\n            whereQueryBuilder.parentQueryBuilder = this\n\n            whereQueryBuilder.expressionMap.mainAlias =\n                this.expressionMap.mainAlias\n            whereQueryBuilder.expressionMap.aliasNamePrefixingEnabled =\n                this.expressionMap.aliasNamePrefixingEnabled\n            whereQueryBuilder.expressionMap.parameters =\n                this.expressionMap.parameters\n            whereQueryBuilder.expressionMap.nativeParameters =\n                this.expressionMap.nativeParameters\n\n            whereQueryBuilder.expressionMap.wheres = []\n\n            where.whereFactory(whereQueryBuilder as any)\n\n            return {\n                operator: InstanceChecker.isNotBrackets(where)\n                    ? \"not\"\n                    : \"brackets\",\n                condition: whereQueryBuilder.expressionMap.wheres,\n            }\n        }\n\n        if (typeof where === \"function\") {\n            return where(this)\n        }\n\n        const wheres: ObjectLiteral[] = Array.isArray(where) ? where : [where]\n        const clauses: WhereClause[] = []\n\n        for (const where of wheres) {\n            const conditions: WhereClauseCondition = []\n\n            // Filter the conditions and set up the parameter values\n            for (const [aliasPath, parameterValue] of this.getPredicates(\n                where,\n            )) {\n                conditions.push({\n                    type: \"and\",\n                    condition: this.getWherePredicateCondition(\n                        aliasPath,\n                        parameterValue,\n                    ),\n                })\n            }\n\n            clauses.push({ type: \"or\", condition: conditions })\n        }\n\n        if (clauses.length === 1) {\n            return clauses[0].condition\n        }\n\n        return clauses\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner()\n    }\n\n    protected hasCommonTableExpressions(): boolean {\n        return this.expressionMap.commonTableExpressions.length > 0\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/query-builder/QueryBuilder.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAA;AASzD,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAA;AAKrC,OAAO,EAAE,EAAE,EAAE,MAAM,6BAA6B,CAAA;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,UAAU,CAAA;AAGvC,OAAO,EAAE,2BAA2B,EAAE,MAAM,sCAAsC,CAAA;AAGlF,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAA;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,sBAAsB,CAAA;AAEnD,kDAAkD;AAClD,kFAAkF;AAClF,sGAAsG;AACtG,gEAAgE;AAChE,oEAAoE;AACpE,yDAAyD;AACzD,iCAAiC;AACjC,2GAA2G;AAC3G,oCAAoC;AACpC,qCAAqC;AAErC,mGAAmG;AACnG,+DAA+D;AAC/D,sDAAsD;AAEtD;;GAEG;AACH,MAAM,OAAgB,YAAY;IAkD9B;;OAEG;IACH,YACI,wBAAwD,EACxD,WAAyB;QAtDpB,mBAAa,GAAG,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAA;QA8BnD;;WAEG;QACK,mBAAc,GAAG,CAAC,CAAA;QAuBtB,IAAI,eAAe,CAAC,YAAY,CAAC,wBAAwB,CAAC,EAAE;YACxD,IAAI,CAAC,UAAU,GAAG,wBAAwB,CAAA;YAC1C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;YAC9B,IAAI,CAAC,aAAa,GAAG,IAAI,kBAAkB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAA;SAC/D;aAAM;YACH,IAAI,CAAC,UAAU,GAAG,wBAAwB,CAAC,UAAU,CAAA;YACrD,IAAI,CAAC,WAAW,GAAG,wBAAwB,CAAC,WAAW,CAAA;YACvD,IAAI,CAAC,aAAa,GAAG,wBAAwB,CAAC,aAAa,CAAC,KAAK,EAAE,CAAA;SACtE;IACL,CAAC;IAID,MAAM,CAAC,yBAAyB,CAAC,IAAY,EAAE,OAAY;QACvD,YAAY,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,OAAO,CAAA;IACrD,CAAC;IAWD,4EAA4E;IAC5E,YAAY;IACZ,4EAA4E;IAE5E;;OAEG;IACH,IAAI,KAAK;QACL,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS;YAC7B,MAAM,IAAI,YAAY,CAAC,uBAAuB,CAAC,CAAA,CAAC,yBAAyB;QAE7E,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAA;IAC5C,CAAC;IA2BD;;;OAGG;IACH,MAAM,CACF,SAA6B,EAC7B,kBAA2B;QAE3B,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,QAAQ,CAAA;QACvC,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC1B,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;gBACvD,SAAS,EAAE,SAAS;aACvB,CAAC,CAAC,CAAA;SACN;aAAM,IAAI,SAAS,EAAE;YAClB,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG;gBACzB,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,kBAAkB,EAAE;aAC1D,CAAA;SACJ;QAGD,IAAI,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAW,CAAA;QAElE,OAAO,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,CAAA;IACxE,CAAC;IAED;;OAEG;IACH,MAAM;QACF,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,QAAQ,CAAA;QAEvC,mDAAmD;QAEnD,IAAI,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAW,CAAA;QAElE,OAAO,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,CAAA;IACxE,CAAC;IA8BD;;OAEG;IACH,MAAM,CACF,0BAA8D,EAC9D,cAA8B;QAE9B,MAAM,SAAS,GAAG,cAAc;YAC5B,CAAC,CAAC,cAAc;YAChB,CAAC,CAAE,0BAAwD,CAAA;QAC/D,0BAA0B,GAAG,eAAe,CAAC,cAAc,CACvD,0BAA0B,CAC7B;YACG,CAAC,CAAC,0BAA0B,CAAC,OAAO,CAAC,IAAI;YACzC,CAAC,CAAC,0BAA0B,CAAA;QAEhC,IACI,OAAO,0BAA0B,KAAK,UAAU;YAChD,OAAO,0BAA0B,KAAK,QAAQ,EAChD;YACE,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,0BAA0B,CAAC,CAAA;YAClE,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;SAC7C;QAED,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,QAAQ,CAAA;QACvC,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,SAAS,CAAA;QAExC,mDAAmD;QAEnD,IAAI,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAW,CAAA;QAElE,OAAO,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,CAAA;IACxE,CAAC;IAED;;OAEG;IACH,MAAM;QACF,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,QAAQ,CAAA;QAEvC,mDAAmD;QAEnD,IAAI,eAAe,CAAC,oBAAoB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAW,CAAA;QAEjE,OAAO,YAAY,CAAC,oBAAoB,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,CAAA;IACzE,CAAC;IAED,UAAU;QACN,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,aAAa,CAAA;QAE5C,mDAAmD;QAEnD,IAAI,eAAe,CAAC,wBAAwB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAW,CAAA;QAEtE,OAAO,YAAY,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,CAAA;IAC5E,CAAC;IAED,OAAO;QACH,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,SAAS,CAAA;QAExC,mDAAmD;QAEnD,IAAI,eAAe,CAAC,wBAAwB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAW,CAAA;QAEtE,OAAO,YAAY,CAAC,oBAAoB,CAAC,wBAAwB,CAAC,CAAC,IAAI,CAAC,CAAA;IAC5E,CAAC;IAeD;;OAEG;IACH,QAAQ,CACJ,0BAA6C,EAC7C,iBAA0B;QAE1B,MAAM,YAAY,GACd,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,0BAA0B,CAAC,CAAC,CAAC,SAAS,CAAA;QACnE,MAAM,YAAY,GACd,SAAS,CAAC,MAAM,KAAK,CAAC;YAClB,CAAC,CAAE,iBAA4B;YAC/B,CAAC,CAAE,0BAAqC,CAAA;QAEhD,IAAI,CAAC,aAAa,CAAC,SAAS,GAAG,UAAU,CAAA;QACzC,IAAI,CAAC,aAAa,CAAC,oBAAoB,GAAG,YAAY,CAAA;QAEtD,IAAI,YAAY,EAAE;YACd,MAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAA;YACpD,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,SAAS,CAAC,CAAA;SAC7C;QAED,mDAAmD;QAEnD,IAAI,eAAe,CAAC,sBAAsB,CAAC,IAAI,CAAC;YAAE,OAAO,IAAW,CAAA;QAEpE,OAAO,YAAY,CAAC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC,IAAI,CAAC,CAAA;IAC1E,CAAC;IAkBD;;;;;OAKG;IACH,WAAW,CACP,MAAuB,EACvB,QAA2B;QAE3B,MAAM,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,CAAA;QAC1D,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAA;QACjE,OAAO,SAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,EAAE;YAChC,OAAO,CAAC,CAAC,cAAc,CAAC,4BAA4B,CAAC,QAAQ,CAAC,CAAA;QAClE,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACH,YAAY,CAAC,GAAW;;QACpB,OAAO,CACH,CAAA,MAAA,IAAI,CAAC,kBAAkB,0CAAE,YAAY,CAAC,GAAG,CAAC;YAC1C,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CACvC,CAAA;IACL,CAAC;IAED;;;;OAIG;IACH,YAAY,CAAC,GAAW,EAAE,KAAU;QAChC,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;YAC7B,MAAM,IAAI,YAAY,CAClB,uEAAuE,GAAG,cAAc,CAC3F,CAAA;SACJ;QAED,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,oBAAoB,CAAC,EAAE;YAClC,MAAM,IAAI,YAAY,CAClB,yFAAyF,CAC5F,CAAA;SACJ;QAED,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,kBAAkB,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;SACnD;QAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,KAAK,CAAA;QAC1C,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,aAAa,CAAC,UAAyB;QACnC,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACnD,IAAI,CAAC,YAAY,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;SAChC;QAED,OAAO,IAAI,CAAA;IACf,CAAC;IAES,eAAe,CAAC,KAAU;QAChC,IAAI,aAAa,CAAA;QAEjB,GAAG;YACC,aAAa,GAAG,aAAa,IAAI,CAAC,cAAc,EAAE,EAAE,CAAA;SACvD,QAAQ,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,EAAC;QAE1C,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,KAAK,CAAC,CAAA;QAEvC,OAAO,IAAI,aAAa,EAAE,CAAA;IAC9B,CAAC;IAED;;;;OAIG;IACH,mBAAmB,CAAC,UAAyB;QACzC,gEAAgE;QAChE,IAAI,IAAI,CAAC,kBAAkB,EAAE;YACzB,IAAI,CAAC,kBAAkB,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAA;SAC1D;QAED,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACpC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,GAAG,CAAC,GAAG,UAAU,CAAC,GAAG,CAAC,CAAA;QAC9D,CAAC,CAAC,CAAA;QACF,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,aAAa;QACT,MAAM,UAAU,GAAkB,MAAM,CAAC,MAAM,CAC3C,EAAE,EACF,IAAI,CAAC,aAAa,CAAC,UAAU,CAChC,CAAA;QAED,iDAAiD;QACjD,IACI,IAAI,CAAC,aAAa,CAAC,SAAS;YAC5B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW,EAC1C;YACE,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,QAAQ,CAAA;YACvD,IAAI,QAAQ,CAAC,mBAAmB,IAAI,QAAQ,CAAC,oBAAoB,EAAE;gBAC/D,MAAM,MAAM,GAAG,QAAQ,CAAC,oBAAoB;qBACvC,MAAM,CACH,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,mBAAmB,CACvD;qBACA,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAA;gBAC7D,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAA;gBACxC,UAAU,CAAC,2BAA2B,CAAC,GAAG,MAAM,CAAA;aACnD;SACJ;QAED,OAAO,UAAU,CAAA;IACrB,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,0BAA0B;QAC1B,MAAM,CAAC,KAAK,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAA;QACxD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QAClD,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;;OAGG;IACH,MAAM;QACF,OAAO,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,CAAA;IAC1C,CAAC;IAED;;OAEG;IACH,qBAAqB;QACjB,iHAAiH;QACjH,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAA;QAC7B,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,yBAAyB,CACnD,KAAK,EACL,UAAU,EACV,IAAI,CAAC,aAAa,CAAC,gBAAgB,CACtC,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACT,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAA;QACtD,MAAM,WAAW,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAA;QAC5C,IAAI;YACA,OAAO,MAAM,WAAW,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,CAAC,CAAA,CAAC,oDAAoD;SACvG;gBAAS;YACN,IAAI,WAAW,KAAK,IAAI,CAAC,WAAW,EAAE;gBAClC,wCAAwC;gBACxC,MAAM,WAAW,CAAC,OAAO,EAAE,CAAA;aAC9B;SACJ;IACL,CAAC;IAED;;;OAGG;IACH,kBAAkB;QACd,OAAO,IAAK,IAAI,CAAC,WAAmB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;IAC3E,CAAC;IAED;;;;;OAKG;IACH,KAAK;QACD,OAAO,IAAK,IAAI,CAAC,WAAmB,CAAC,IAAI,CAAC,CAAA;IAC9C,CAAC;IAED;;;;OAIG;IACH,OAAO,CAAC,OAAe;QACnB,IAAI,CAAC,aAAa,CAAC,OAAO,GAAG,OAAO,CAAA;QACpC,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,eAAe;QACX,IAAI,CAAC,aAAa,CAAC,eAAe,GAAG,KAAK,CAAA;QAC1C,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,MAAM,CAAC,IAAY;QACf,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,eAAe;YAAE,OAAO,IAAI,CAAA;QACpD,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC9C,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,WAAwB;QACnC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAA;QAC9B,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;;OAGG;IACH,aAAa,CAAC,OAAgB;QAC1B,IAAI,CAAC,aAAa,CAAC,aAAa,GAAG,OAAO,CAAA;QAC1C,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,cAAc,CAAC,OAAgB;QAC3B,IAAI,CAAC,aAAa,CAAC,cAAc,GAAG,OAAO,CAAA;QAC3C,OAAO,IAAI,CAAA;IACf,CAAC;IAED;;OAEG;IACH,wBAAwB,CACpB,YAAwC,EACxC,KAAa,EACb,OAAgC;QAEhC,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,IAAI,CAAC;YAC3C,YAAY;YACZ,KAAK;YACL,OAAO,EAAE,OAAO,IAAI,EAAE;SACzB,CAAC,CAAA;QACF,OAAO,IAAI,CAAA;IACf,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAE5E;;;OAGG;IACO,YAAY,CAAC,SAAiB;QACpC,OAAO,SAAS;aACX,KAAK,CAAC,GAAG,CAAC;aACV,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;YACP,sMAAsM;YACtM,IAAI,CAAC,KAAK,EAAE;gBAAE,OAAO,CAAC,CAAA;YACtB,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAA;QACzB,CAAC,CAAC;aACD,IAAI,CAAC,GAAG,CAAC,CAAA;IAClB,CAAC;IAED;;OAEG;IACO,gBAAgB;QACtB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS;YAC7B,MAAM,IAAI,YAAY,CAClB,uGAAuG,CAC1G,CAAA;QAEL,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,WAAW;YACxC,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAA;QAE1D,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,SAAU,CAAA;IAClD,CAAC;IAED;;;OAGG;IACO,eAAe,CACrB,YAEgE,EAChE,SAAkB;QAElB,yEAAyE;QACzE,uGAAuG;QACvG,IAAI,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE;YAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC,CAAA;YAE1D,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;gBAClC,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,YAAY,CAAC;gBACnD,SAAS,EAAE,QAAQ,CAAC,SAAS;aAChC,CAAC,CAAA;SACL;aAAM;YACH,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;gBAClC,MAAM,UAAU,GACZ,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG;oBACjC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAA;gBAEnC,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;oBAClC,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,SAAS;oBACf,SAAS,EAAE,CAAC,UAAU;wBAClB,CAAC,CAAE,YAAuB;wBAC1B,CAAC,CAAC,SAAS;oBACf,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,SAAS;iBAClD,CAAC,CAAA;aACL;YAED,MAAM,eAAe,GACjB,YACH,CAAE,IAAuC,CAAC,QAAQ,EAAE,CAAC,CAAA;YACtD,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,aAAa,EAAE,CAAC,CAAA;YACnD,MAAM,QAAQ,GAAG,eAAe,CAAC,QAAQ,EAAE,CAAA;YAE3C,OAAO,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC;gBAClC,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,SAAS;gBACf,QAAQ,EAAE,QAAQ;aACrB,CAAC,CAAA;SACL;IACL,CAAC;IAED;;;OAGG;IACO,oBAAoB,CAAC,SAAiB;QAC5C,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;OAEG;IACO,oCAAoC,CAAC,SAAiB;QAC5D,MAAM,YAAY,GAAiD,EAAE,CAAA;QAErE,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAC5C,IAAI,CAAC,KAAK,CAAC,WAAW;gBAAE,SAAQ;YAChC,MAAM,sBAAsB,GACxB,IAAI,CAAC,aAAa,CAAC,yBAAyB,IAAI,KAAK,CAAC,IAAI;gBACtD,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,GAAG;gBAClB,CAAC,CAAC,EAAE,CAAA;YAEZ,IAAI,CAAC,YAAY,CAAC,sBAAsB,CAAC,EAAE;gBACvC,YAAY,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAA;aAC5C;YAED,8FAA8F;YAC9F,iEAAiE;YACjE,0BAA0B;YAC1B,oDAAoD;YACpD,yCAAyC;YACzC,yBAAyB;YACzB,yBAAyB;YACzB,yBAAyB;YAEzB,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC7C,IAAI,QAAQ,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC;oBAC/B,YAAY,CAAC,sBAAsB,CAAC,CAChC,QAAQ,CAAC,YAAY,CACxB,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,YAAY,CAAA;aAC/C;YAED,KAAK,MAAM,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,SAAS,EAAE;gBAC7C,MAAM,UAAU,GAAG;oBACf,GAAG,QAAQ,CAAC,WAAW;oBACvB,GAAG,QAAQ,CAAC,kBAAkB;iBACjC,CAAA;gBACD,KAAK,MAAM,UAAU,IAAI,UAAU,EAAE;oBACjC,MAAM,WAAW,GAAG,GAAG,QAAQ,CAAC,YAAY,IACxC,UAAU,CAAC,gBAAiB,CAAC,YACjC,EAAE,CAAA;oBACF,YAAY,CAAC,sBAAsB,CAAC,CAAC,WAAW,CAAC;wBAC7C,UAAU,CAAC,YAAY,CAAA;iBAC9B;aACJ;YAED,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE;gBACzC,YAAY,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;oBACrD,MAAM,CAAC,YAAY,CAAA;aAC1B;YAED,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE;gBACzC,YAAY,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;oBACrD,MAAM,CAAC,YAAY,CAAA;aAC1B;YAED,KAAK,MAAM,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,OAAO,EAAE;gBACzC,YAAY,CAAC,sBAAsB,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC;oBACrD,MAAM,CAAC,YAAY,CAAA;aAC1B;SACJ;QAED,MAAM,eAAe,GAAG,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;QACjD,MAAM,wBAAwB,GAAG,eAAe;aAC3C,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;aAC/B,IAAI,CAAC,GAAG,CAAC,CAAA;QAEd,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,SAAS,GAAG,SAAS,CAAC,OAAO,CACzB,IAAI,MAAM;YACN,wDAAwD;YACxD,gBAAgB,GAAG,gCAAgC;gBAC/C,kDAAkD;gBAClD,GACI,wBAAwB;oBACpB,CAAC,CAAC,GAAG,GAAG,wBAAwB,GAAG,GAAG;oBACtC,CAAC,CAAC,EACV,gBAAgB,GAAG,6DAA6D;gBAChF,sCAAsC;gBACtC,oBAAoB,EACxB,IAAI,CACP,EACD,CAAC,GAAG,OAAO,EAAE,EAAE;gBACX,IAAI,KAAa,EAAE,GAAW,EAAE,CAAS,CAAA;gBACzC,IAAI,wBAAwB,EAAE;oBAC1B,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;oBAClB,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;oBAChB,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;oBAEd,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;wBAC7B,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CACvB,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CACjD,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;qBAClD;iBACJ;qBAAM;oBACH,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;oBAClB,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;oBAChB,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,CAAA;oBAEd,IAAI,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE;wBACrB,OAAO,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAA;qBACrD;iBACJ;gBACD,OAAO,KAAK,CAAA;YAChB,CAAC,CACJ,CAAA;SACJ;QAED,OAAO,SAAS,CAAA;IACpB,CAAC;IAES,aAAa;QACnB,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;YAC7B,OAAO,EAAE,CAAA;SACZ;QAED,2FAA2F;QAC3F,0FAA0F;QAC1F,uFAAuF;QACvF,gCAAgC;QAEhC,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,MAAM,CAAA;IACtE,CAAC;IAED;;OAEG;IACO,qBAAqB;QAC3B,IACI,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ;YACzC,IAAI,CAAC,aAAa,CAAC,UAAU,EAC/B;YACE,OAAO,sBAAsB,IAAI,CAAC,aAAa,CAAC,UAAU,EAAE,CAAA;SAC/D;QAED,OAAO,EAAE,CAAA;IACb,CAAC;IAED;;OAEG;IACO,qBAAqB;QAC3B,MAAM,eAAe,GAAG,EAAE,CAAA;QAE1B,MAAM,eAAe,GAAG,IAAI,CAAC,4BAA4B,CACrD,IAAI,CAAC,aAAa,CAAC,MAAM,CAC5B,CAAA;QAED,IAAI,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,eAAe,KAAK,KAAK,EAAE;YACzD,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,eAAe,CAAC,CAAC,CAAA;SACnE;QAED,IAAI,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,WAAW,EAAE;YAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,QAAQ,CAAA;YACvD,sGAAsG;YACtG,IACI,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ;gBACzC,CAAC,IAAI,CAAC,aAAa,CAAC,WAAW;gBAC/B,QAAQ,CAAC,gBAAgB,EAC3B;gBACE,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB;oBACvD,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,IAAI;wBAClC,GAAG;wBACH,QAAQ,CAAC,gBAAgB,CAAC,YAAY;oBACxC,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,YAAY,CAAA;gBAE5C,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,UAAU,CAAA;gBAChE,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;aAClC;YAED,IAAI,QAAQ,CAAC,mBAAmB,IAAI,QAAQ,CAAC,oBAAoB,EAAE;gBAC/D,MAAM,MAAM,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB;oBACvD,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,IAAI;wBAClC,GAAG;wBACH,QAAQ,CAAC,mBAAmB,CAAC,YAAY;oBAC3C,CAAC,CAAC,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAA;gBAE/C,MAAM,SAAS,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAC1C,MAAM,CACT,qCAAqC,CAAA;gBACtC,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;aAClC;SACJ;QAED,IAAI,IAAI,CAAC,aAAa,CAAC,8BAA8B,EAAE;YACnD,MAAM,SAAS,GAAG,IAAI,CAAC,oBAAoB,CACvC,IAAI,CAAC,aAAa,CAAC,8BAA8B,CACpD,CAAA;YACD,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;SAClC;QAED,IAAI,SAAS,GAAG,EAAE,CAAA;QAElB,cAAc;QACd,SAAS,IAAI,IAAI,CAAC,qBAAqB,EAAE,CAAA;QAEzC,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACzB,SAAS,IAAI,EAAE,CAAA;SAClB;aAAM,IAAI,eAAe,CAAC,MAAM,KAAK,CAAC,EAAE;YACrC,SAAS,IAAI,UAAU,eAAe,CAAC,CAAC,CAAC,EAAE,CAAA;SAC9C;aAAM;YACH,SAAS,IAAI,YAAY,eAAe,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAA;SACjE;QAED,OAAO,SAAS,CAAA;IACpB,CAAC;IAED;;OAEG;IACO,yBAAyB,CAAC,aAA4B;QAC5D,MAAM,OAAO,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAA;QAC1C,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAA;QAErC,kEAAkE;QAClE,iCAAiC;QACjC,IACI,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ;YAChD,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,MAAM,GAAG,CAAC;YACnD,MAAM,CAAC,uBAAuB,CAAC,aAAa,CAAC,EAC/C;YACE,OAAO,CAAC,IAAI,CACR,GAAG,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE;gBAC1D,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAA;YACzC,CAAC,CAAC,CACL,CAAA;SACJ;QAED,IAAI,OAAO,CAAC,MAAM,EAAE;YAChB,IAAI,iBAAiB,GAAG,OAAO;iBAC1B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBACZ,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAA;gBAC7C,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE;oBACjC,IACI,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ;wBACzC,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ;wBACzC,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,aAAa;wBAC9C,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,SAAS,EAC5C;wBACE,OAAO,WAAW,GAAG,IAAI,CAAA;qBAC5B;yBAAM;wBACH,OAAO,CACH,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;4BACpC,GAAG;4BACH,IAAI,CACP,CAAA;qBACJ;iBACJ;qBAAM;oBACH,OAAO,IAAI,CAAA;iBACd;YACL,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,QAAQ,EAAE;gBAClC,iBAAiB;oBACb,QAAQ;wBACR,OAAO;6BACF,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;4BACZ,OAAO,IAAI,CAAC,eAAe,CAAC;gCACxB,IAAI,EACA,MACH,CAAC,2BAA2B,CAAC,MAAM,CAAC,IAAI,CAAC;gCAC1C,GAAG,EAAG,MAAuB,CAAC,MAAM,CAAC,QAAQ;6BAChD,CAAC,CAAA;wBACN,CAAC,CAAC;6BACD,IAAI,CAAC,IAAI,CAAC,CAAA;aACtB;YAED,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,OAAO,EAAE;gBACjC,IACI,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ;oBACzC,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ,EAC3C;oBACE,iBAAiB,IAAI,oBAAoB,CAAA;iBAC5C;aACJ;YAED,OAAO,iBAAiB,CAAA;SAC3B;aAAM,IAAI,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,KAAK,QAAQ,EAAE;YACzD,OAAO,IAAI,CAAC,aAAa,CAAC,SAAS,CAAA;SACtC;QAED,OAAO,EAAE,CAAA;IACb,CAAC;IAED;;;OAGG;IACO,mBAAmB;QACzB,MAAM,OAAO,GAAqB,EAAE,CAAA;QACpC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE;YAC7C,CAAC;YAAC,IAAI,CAAC,aAAa,CAAC,SAAsB,CAAC,OAAO,CAC/C,CAAC,UAAU,EAAE,EAAE;gBACX,IAAI,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,WAAW,EAAE;oBAC3C,OAAO,CAAC,IAAI,CACR,GAAG,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,QAAQ,CAAC,2BAA2B,CACjE,UAAU,CACb,CACJ,CAAA;iBACJ;YACL,CAAC,CACJ,CAAA;SACJ;QACD,OAAO,OAAO,CAAA;IAClB,CAAC;IAES,4BAA4B,CAAC,OAAsB;QACzD,OAAO,OAAO;aACT,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;YACnB,MAAM,UAAU,GAAG,IAAI,CAAC,8BAA8B,CAClD,MAAM,CAAC,SAAS,CACnB,CAAA;YAED,QAAQ,MAAM,CAAC,IAAI,EAAE;gBACjB,KAAK,KAAK;oBACN,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,UAAU,CAAA;gBACjD,KAAK,IAAI;oBACL,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,UAAU,CAAA;aACnD;YAED,OAAO,UAAU,CAAA;QACrB,CAAC,CAAC;aACD,IAAI,CAAC,GAAG,CAAC;aACT,IAAI,EAAE,CAAA;IACf,CAAC;IAED;;OAEG;IACO,8BAA8B,CACpC,SAA+B,EAC/B,aAAsB,KAAK;QAE3B,IAAI,OAAO,SAAS,KAAK,QAAQ;YAAE,OAAO,SAAS,CAAA;QAEnD,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;YAC1B,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxB,OAAO,KAAK,CAAA;aACf;YAED,gEAAgE;YAChE,yDAAyD;YACzD,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE;gBACvC,OAAO,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAA;aACtD;YAED,OAAO,GAAG,GAAG,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,GAAG,GAAG,CAAA;SAClE;QAED,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAA;QAElC,QAAQ,SAAS,CAAC,QAAQ,EAAE;YACxB,KAAK,UAAU;gBACX,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACpE,KAAK,iBAAiB;gBAClB,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACrE,KAAK,eAAe;gBAChB,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACrE,KAAK,cAAc;gBACf,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YAC7E,KAAK,kBAAkB;gBACnB,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACrE,KAAK,cAAc;gBACf,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACrE,KAAK,UAAU;gBACX,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACpE,KAAK,iBAAiB;gBAClB,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACrE,KAAK,UAAU;gBACX,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACrE,KAAK,OAAO;gBACR,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACpE,KAAK,OAAO;gBACR,IACI,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,UAAU;oBAClC,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,aAAa,EACvC;oBACE,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;iBACvE;gBAED,OAAO,SAAS,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,gBAAgB,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAA;YACrF,KAAK,MAAM;gBACP,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACvE,KAAK,SAAS;gBACV,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,YAAY,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAA;YACzG,KAAK,IAAI;gBACL,IAAI,SAAS,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,EAAE;oBAClC,OAAO,KAAK,CAAA;iBACf;gBACD,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,QAAQ,SAAS,CAAC,UAAU;qBACxD,KAAK,CAAC,CAAC,CAAC;qBACR,IAAI,CAAC,IAAI,CAAC,GAAG,CAAA;YACtB,KAAK,KAAK;gBACN,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,KAAK,aAAa,EAAE;oBACvC,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,kBAAkB,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,aAAa,CAAA;iBAC1F;gBAED,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,CAAA;YACzE,KAAK,QAAQ;gBACT,OAAO,GAAG,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAA;YAE/C,KAAK,KAAK;gBACN,OAAO,OAAO,IAAI,CAAC,8BAA8B,CAC7C,SAAS,CAAC,SAAS,CACtB,GAAG,CAAA;YACR,KAAK,UAAU;gBACX,OAAO,GAAG,IAAI,CAAC,8BAA8B,CACzC,SAAS,CAAC,SAAS,EACnB,IAAI,CACP,EAAE,CAAA;YACP,KAAK,KAAK;gBACN,OAAO,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;SAChD;IAEL,CAAC;IAES,mBAAmB;QACzB,IAAI,CAAC,IAAI,CAAC,yBAAyB,EAAE,EAAE;YACnC,OAAO,EAAE,CAAA;SACZ;QACD,MAAM,2BAA2B,GAC7B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,qBAAqB,CAAA;QAEhE,MAAM,UAAU,GAAG,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,GAAG,CAC5D,CAAC,GAAG,EAAE,EAAE;YACJ,MAAM,iBAAiB,GACnB,OAAO,GAAG,CAAC,YAAY,KAAK,QAAQ;gBAChC,CAAC,CAAC,GAAG,CAAC,YAAY;gBAClB,CAAC,CAAC,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAA;YACrC,IAAI,OAAO,GAAG,CAAC,YAAY,KAAK,QAAQ,EAAE;gBACtC,IAAI,GAAG,CAAC,YAAY,CAAC,yBAAyB,EAAE,EAAE;oBAC9C,MAAM,IAAI,YAAY,CAClB,sCAAsC,GAAG,CAAC,KAAK,GAAG,CACrD,CAAA;iBACJ;gBACD,IACI,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,QAAQ;oBAChD,CAAC,eAAe,CAAC,oBAAoB,CAAC,GAAG,CAAC,YAAY,CAAC,EACzD;oBACE,MAAM,IAAI,YAAY,CAClB,gDAAgD,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,UAAU,GAAG,CAAC,KAAK,GAAG,CACrG,CAAA;iBACJ;gBACD,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC,CAAA;aACvD;YACD,IAAI,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;YACtC,IAAI,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE;gBACzB,MAAM,kBAAkB,GAAG,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAClD,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAClC,CAAA;gBACD,IACI,eAAe,CAAC,oBAAoB,CAAC,GAAG,CAAC,YAAY,CAAC,EACxD;oBACE,IACI,GAAG,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM;wBAC7C,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM;4BAC1B,GAAG,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,EACnD;wBACE,MAAM,IAAI,YAAY,CAClB,mCAAmC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,MAAM,+CAA+C,GAAG,CAAC,YAAY,CAAC,aAAa,CAAC,OAAO,CAAC,MAAM,UAAU,GAAG,CAAC,KAAK,GAAG,CACtL,CAAA;qBACJ;iBACJ;gBACD,SAAS,IAAI,IAAI,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAA;aACpD;YACD,MAAM,eAAe,GACjB,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,2BAA2B;gBAChD,CAAC,CAAC,WAAW;gBACb,CAAC,CAAC,EAAE,CAAA;YACZ,IAAI,iBAAiB,GAAG,EAAE,CAAA;YAC1B,IACI,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,eAAe,CAAC,gBAAgB;gBACvD,GAAG,CAAC,OAAO,CAAC,YAAY,KAAK,SAAS,EACxC;gBACE,iBAAiB,GAAG,GAAG,CAAC,OAAO,CAAC,YAAY;oBACxC,CAAC,CAAC,cAAc;oBAChB,CAAC,CAAC,kBAAkB,CAAA;aAC3B;YAED,OAAO;gBACH,eAAe;gBACf,SAAS;gBACT,IAAI;gBACJ,iBAAiB;gBACjB,IAAI,iBAAiB,GAAG;aAC3B;iBACI,MAAM,CAAC,OAAO,CAAC;iBACf,IAAI,CAAC,GAAG,CAAC,CAAA;QAClB,CAAC,CACJ,CAAA;QAED,OAAO,OAAO,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAA;IAChD,CAAC;IAED;;OAEG;IACO,sBAAsB,CAC5B,GAAgB;QAEhB,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,QAAQ,CAAA;QACvD,MAAM,UAAU,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAC7D,QAAQ,CAAC,iBAAiB,CAAC,EAAE,CAAC,CACjC,CAAA;QAED,mDAAmD;QACnD,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE;YAClC,MAAM,aAAa,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAA;YAEhD,yDAAyD;YACzD,2DAA2D;YAC3D,2EAA2E;YAC3E,IACI,CAAC,aAAa,CAAC,WAAW;gBAC1B,CAAC,aAAa,CAAC,gBAAgB;gBAC/B,CAAC,aAAa,CAAC,gBAAgB,EACjC;gBACE,OAAO;oBACH,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,EAAE,CAC5B,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAClB,aAAa,CAAC,cAAc,CAAC,EAAE,EAAE,KAAK,CAAC,CAC1C,CACJ;iBACJ,CAAA;aACJ;SACJ;QAED,OAAO,IAAI,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE;YACvB,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;gBAC3B,EAAE,CAAC,OAAO,CAAC,IAAI,QAAQ,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;aACnD;QACL,CAAC,CAAC,CAAA;IACN,CAAC;IAES,kBAAkB,CAAC,QAAa;QACtC,MAAM,KAAK,GAAG,QAAQ;aACjB,KAAK,EAAE;aACP,OAAO,EAAE;aACT,OAAO,EAAE;aACT,MAAM,CAAC,SAAS,CAAC;aACjB,KAAK,CAAC,SAAS,CAAC;aAChB,IAAI,CAAC,SAAS,CAAC;aACf,IAAI,CAAC,SAAS,CAAC;aACf,MAAM,CAAC,GAAG,CAAC;aACX,SAAS,CAAC,sBAAsB,CAAC,CAAA;QAEtC,OAAO,CAAC,WAAW,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,CAAA;IAClE,CAAC;IAEO,0BAA0B,CAC9B,YAAoB;QAEpB,mDAAmD;QACnD,+DAA+D;QAE/D,oDAAoD;QACpD,IAAI,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAA;QACxC,MAAM,IAAI,GAAa,EAAE,CAAA;QACzB,MAAM,iBAAiB,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAEjD,OAAO,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YACjC,MAAM,IAAI,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAA;YAEjC,IAAI,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,WAAW,CAAA,EAAE;gBACrB,iDAAiD;gBACjD,0CAA0C;gBAC1C,MAAK;aACR;YAED,IAAI,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE;gBAClD,+EAA+E;gBAC/E,yFAAyF;gBACzF,sBAAsB;gBACtB,iBAAiB,CAAC,OAAO,CACrB,GAAG,iBAAiB,CAAC,KAAK,EAAE,IAAI,iBAAiB,CAAC,KAAK,EAAE,EAAE,CAC9D,CAAA;gBACD,SAAQ;aACX;YAED,IAAI,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE;gBAClD,wDAAwD;gBACxD,uDAAuD;gBACvD,oBAAoB;gBACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,IAAI,CACnD,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,oBAAoB,KAAK,IAAI,CACvD,CAAA;gBAED,IAAI,CAAC,CAAA,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,KAAK,CAAA,EAAE;oBAClB,MAAM,gBAAgB,GAClB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAA;oBACxD,MAAM,IAAI,KAAK,CACX,qCAAqC,gBAAgB,EAAE,CAC1D,CAAA;iBACJ;gBAED,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAA;gBACtB,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAA;gBAC7B,iBAAiB,CAAC,KAAK,EAAE,CAAA;gBACzB,SAAQ;aACX;YAED,MAAK;SACR;QAED,IAAI,CAAC,KAAK,EAAE;YACR,MAAM,IAAI,KAAK,CAAC,kCAAkC,YAAY,EAAE,CAAC,CAAA;SACpE;QAED,8EAA8E;QAC9E,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;QAErD,MAAM,OAAO,GACT,KAAK,CAAC,QAAQ,CAAC,2BAA2B,CAAC,iBAAiB,CAAC,CAAA;QAEjE,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACjB,MAAM,IAAI,2BAA2B,CAAC,YAAY,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAA;SACtE;QAED,OAAO,CAAC,KAAK,EAAE,IAAI,EAAE,OAAO,CAAC,CAAA;IACjC,CAAC;IAED;;OAEG;IACO,kBAAkB,CACxB,QAAwB,EACxB,MAAqB,EACrB,SAAiB,EAAE;QAEnB,MAAM,KAAK,GAAa,EAAE,CAAA;QAE1B,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;YACnC,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAA;YAE9C,iEAAiE;YACjE,2FAA2F;YAC3F,IACI,MAAM,CAAC,GAAG,CAAC,KAAK,IAAI;gBACpB,OAAO,MAAM,CAAC,GAAG,CAAC,KAAK,QAAQ;gBAC/B,eAAe,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAC7C;gBACE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAChB,SAAQ;aACX;YAED,IAAI,QAAQ,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE;gBAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CACpC,QAAQ,EACR,MAAM,CAAC,GAAG,CAAC,EACX,IAAI,CACP,CAAA;gBACD,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAA;gBACvB,SAAQ;aACX;YAED,IAAI,QAAQ,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE;gBAC5C,MAAM,QAAQ,GAAG,QAAQ,CAAC,4BAA4B,CAAC,IAAI,CAAE,CAAA;gBAE7D,+EAA+E;gBAC/E,qFAAqF;gBACrF,iDAAiD;gBAEjD,qFAAqF;gBACrF,gFAAgF;gBAChF,iEAAiE;gBACjE,IACI,QAAQ,CAAC,YAAY,KAAK,YAAY;oBACtC,QAAQ,CAAC,YAAY,KAAK,aAAa,EACzC;oBACE,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW;yBACnC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC;yBAC9B,MAAM,CAAC,CAAC,CAAC,EAAuB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;oBAE5C,MAAM,iBAAiB,GACnB,WAAW,CAAC,MAAM,GAAG,CAAC;wBACtB,WAAW,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CACzB,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAC5C,CAAA;oBAEL,IAAI,iBAAiB,EAAE;wBACnB,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;wBAChB,SAAQ;qBACX;iBACJ;gBAED,IACI,QAAQ,CAAC,YAAY,KAAK,aAAa;oBACvC,QAAQ,CAAC,YAAY,KAAK,cAAc,EAC1C;oBACE,MAAM,IAAI,KAAK,CACX,uBAAuB,QAAQ,CAAC,YAAY,iBAAiB,IAAI,EAAE,CACtE,CAAA;iBACJ;gBAED,wFAAwF;gBACxF,oFAAoF;gBACpF,2BAA2B;gBAC3B,oFAAoF;gBACpF,gBAAgB;gBAChB,MAAM,cAAc,GAChB,QAAQ,CAAC,qBAAqB,CAAC,cAAc,CAAA;gBACjD,MAAM,iBAAiB,GACnB,cAAc,CAAC,MAAM,GAAG,CAAC;oBACzB,cAAc,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE,EAAE,CAC5B,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAC5C,CAAA;gBAEL,IAAI,iBAAiB,EAAE;oBACnB,MAAM,QAAQ,GAAG,cAAc,CAAC,GAAG,CAC/B,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,IAAI,IAAI,MAAM,CAAC,YAAY,EAAE,CAC/C,CAAA;oBACD,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAA;oBACvB,SAAQ;iBACX;gBAED,yEAAyE;gBACzE,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,CACpC,QAAQ,CAAC,qBAAqB,EAC9B,MAAM,CAAC,GAAG,CAAC,CACd,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,IAAI,CAAC,EAAE,CAAC,CAAA;gBAC5B,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAA;gBACvB,SAAQ;aACX;YAED,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;SACnB;QAED,OAAO,KAAK,CAAA;IAChB,CAAC;IAES,CAAC,aAAa,CAAC,KAAoB;QACzC,IAAI,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,WAAW,EAAE;YAC3C,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CACzC,IAAI,CAAC,aAAa,CAAC,SAAU,CAAC,QAAQ,EACtC,KAAK,CACR,CAAA;YAED,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;gBACtC,MAAM,CAAC,KAAK,EAAE,iBAAiB,EAAE,OAAO,CAAC,GACrC,IAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,CAAA;gBAEjD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC1B,IAAI,cAAc,GAAG,KAAK,CAAA;oBAE1B,KAAK,MAAM,IAAI,IAAI,iBAAiB,EAAE;wBAClC,IAAI,CAAC,cAAc,IAAI,CAAC,CAAC,IAAI,IAAI,cAAc,CAAC,EAAE;4BAC9C,cAAc,GAAG,EAAE,CAAA;4BACnB,MAAK;yBACR;wBAED,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,CAAA;qBACxC;oBAED,4DAA4D;oBAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa;yBAC/B,yBAAyB;wBAC1B,CAAC,CAAC,GAAG,KAAK,CAAC,IAAI,IAAI,MAAM,CAAC,YAAY,EAAE;wBACxC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAA;oBAEzB,MAAM,cAAc,GAAG,MAAM,CAAC,cAAc,CACxC,cAAc,EACd,IAAI,CACP,CAAA;oBAED,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,CAAA;iBACpC;aACJ;SACJ;aAAM;YACH,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAClC,MAAM,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,CAAA;gBACjC,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,yBAAyB;oBAC1D,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,IAAI,GAAG,EAAE;oBACxB,CAAC,CAAC,GAAG,CAAA;gBAET,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,CAAA;aACpC;SACJ;IACL,CAAC;IAES,0BAA0B,CAChC,SAAiB,EACjB,cAAmB;QAEnB,IAAI,eAAe,CAAC,cAAc,CAAC,cAAc,CAAC,EAAE;YAChD,IAAI,UAAU,GAAU,EAAE,CAAA;YAC1B,IAAI,cAAc,CAAC,YAAY,EAAE;gBAC7B,IAAI,cAAc,CAAC,uBAAuB,EAAE;oBACxC,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,uBAAuB,CAAC,CAAA;iBAC7D;qBAAM,IAAI,cAAc,CAAC,kBAAkB,EAAE;oBAC1C,KAAK,MAAM,CAAC,IAAI,cAAc,CAAC,KAAK,EAAE;wBAClC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,CAAA;qBAC3C;iBACJ;qBAAM;oBACH,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAA;iBAC9D;aACJ;YAED,IAAI,cAAc,CAAC,IAAI,KAAK,KAAK,EAAE;gBAC/B,IAAI,cAAc,CAAC,MAAM,EAAE;oBACvB,OAAO,cAAc,CAAC,MAAM,CAAC,SAAS,CAAC,CAAA;iBAC1C;qBAAM;oBACH,OAAO;wBACH,QAAQ,EAAE,OAAO;wBACjB,UAAU,EAAE,CAAC,SAAS,EAAE,cAAc,CAAC,KAAK,CAAC;qBAChD,CAAA;iBACJ;aACJ;iBAAM,IAAI,cAAc,CAAC,IAAI,KAAK,KAAK,EAAE;gBACtC,IAAI,cAAc,CAAC,KAAK,EAAE;oBACtB,OAAO;wBACH,QAAQ,EAAE,cAAc,CAAC,IAAI;wBAC7B,SAAS,EAAE,IAAI,CAAC,0BAA0B,CACtC,SAAS,EACT,cAAc,CAAC,KAAK,CACvB;qBACJ,CAAA;iBACJ;qBAAM;oBACH,OAAO;wBACH,QAAQ,EAAE,UAAU;wBACpB,UAAU,EAAE,CAAC,SAAS,EAAE,GAAG,UAAU,CAAC;qBACzC,CAAA;iBACJ;aACJ;iBAAM,IAAI,cAAc,CAAC,IAAI,KAAK,KAAK,EAAE;gBACtC,MAAM,MAAM,GAAwB,cAAc,CAAC,KAAK,CAAA;gBAExD,OAAO;oBACH,QAAQ,EAAE,cAAc,CAAC,IAAI;oBAC7B,UAAU,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAChC,IAAI,CAAC,8BAA8B,CAC/B,IAAI,CAAC,0BAA0B,CAC3B,SAAS,EACT,QAAQ,CACX,CACJ,CACJ;iBACJ,CAAA;aACJ;iBAAM;gBACH,OAAO;oBACH,QAAQ,EAAE,cAAc,CAAC,IAAI;oBAC7B,UAAU,EAAE,CAAC,SAAS,EAAE,GAAG,UAAU,CAAC;iBACzC,CAAA;aACJ;YACD,wCAAwC;YACxC,eAAe;YACf,8BAA8B;YAC9B,wBAAwB;YACxB,yBAAyB;YACzB,YAAY;YACZ,SAAS;SACZ;aAAM;YACH,OAAO;gBACH,QAAQ,EAAE,OAAO;gBACjB,UAAU,EAAE,CAAC,SAAS,EAAE,IAAI,CAAC,eAAe,CAAC,cAAc,CAAC,CAAC;aAChE,CAAA;SACJ;IACL,CAAC;IAES,iBAAiB,CACvB,KAMqB;QAErB,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YAC3B,OAAO,KAAK,CAAA;SACf;QAED,IAAI,eAAe,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;YACnC,MAAM,iBAAiB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAA;YAEnD,iBAAiB,CAAC,kBAAkB,GAAG,IAAI,CAAA;YAE3C,iBAAiB,CAAC,aAAa,CAAC,SAAS;gBACrC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAA;YAChC,iBAAiB,CAAC,aAAa,CAAC,yBAAyB;gBACrD,IAAI,CAAC,aAAa,CAAC,yBAAyB,CAAA;YAChD,iBAAiB,CAAC,aAAa,CAAC,UAAU;gBACtC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAA;YACjC,iBAAiB,CAAC,aAAa,CAAC,gBAAgB;gBAC5C,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAA;YAEvC,iBAAiB,CAAC,aAAa,CAAC,MAAM,GAAG,EAAE,CAAA;YAE3C,KAAK,CAAC,YAAY,CAAC,iBAAwB,CAAC,CAAA;YAE5C,OAAO;gBACH,QAAQ,EAAE,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC;oBAC1C,CAAC,CAAC,KAAK;oBACP,CAAC,CAAC,UAAU;gBAChB,SAAS,EAAE,iBAAiB,CAAC,aAAa,CAAC,MAAM;aACpD,CAAA;SACJ;QAED,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;YAC7B,OAAO,KAAK,CAAC,IAAI,CAAC,CAAA;SACrB;QAED,MAAM,MAAM,GAAoB,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAA;QACtE,MAAM,OAAO,GAAkB,EAAE,CAAA;QAEjC,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;YACxB,MAAM,UAAU,GAAyB,EAAE,CAAA;YAE3C,wDAAwD;YACxD,KAAK,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,IAAI,IAAI,CAAC,aAAa,CACxD,KAAK,CACR,EAAE;gBACC,UAAU,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,KAAK;oBACX,SAAS,EAAE,IAAI,CAAC,0BAA0B,CACtC,SAAS,EACT,cAAc,CACjB;iBACJ,CAAC,CAAA;aACL;YAED,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,CAAC,CAAA;SACtD;QAED,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;YACtB,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,SAAS,CAAA;SAC9B;QAED,OAAO,OAAO,CAAA;IAClB,CAAC;IAED;;OAEG;IACO,iBAAiB;QACvB,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAA;IAClE,CAAC;IAES,yBAAyB;QAC/B,OAAO,IAAI,CAAC,aAAa,CAAC,sBAAsB,CAAC,MAAM,GAAG,CAAC,CAAA;IAC/D,CAAC;;AA5/Cc,iCAAoB,GAAwB,EAAE,CAAA","file":"QueryBuilder.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { QueryBuilderCteOptions } from \"./QueryBuilderCte\"\nimport { QueryExpressionMap } from \"./QueryExpressionMap\"\nimport { SelectQueryBuilder } from \"./SelectQueryBuilder\"\nimport { UpdateQueryBuilder } from \"./UpdateQueryBuilder\"\nimport { DeleteQueryBuilder } from \"./DeleteQueryBuilder\"\nimport { SoftDeleteQueryBuilder } from \"./SoftDeleteQueryBuilder\"\nimport { InsertQueryBuilder } from \"./InsertQueryBuilder\"\nimport { RelationQueryBuilder } from \"./RelationQueryBuilder\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { Alias } from \"./Alias\"\nimport { Brackets } from \"./Brackets\"\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { FindOperator } from \"../find-options/FindOperator\"\nimport { In } from \"../find-options/operator/In\"\nimport { TypeORMError } from \"../error\"\nimport { WhereClause, WhereClauseCondition } from \"./WhereClause\"\nimport { NotBrackets } from \"./NotBrackets\"\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\"\nimport { ReturningType } from \"../driver/Driver\"\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { escapeRegExp } from \"../util/escapeRegExp\"\n\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport abstract class QueryBuilder<Entity extends ObjectLiteral> {\n    readonly \"@instanceof\" = Symbol.for(\"QueryBuilder\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection on which QueryBuilder was created.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\n     */\n    readonly expressionMap: QueryExpressionMap\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Query runner used to execute query builder query.\n     */\n    protected queryRunner?: QueryRunner\n\n    /**\n     * If QueryBuilder was created in a subquery mode then its parent QueryBuilder (who created subquery) will be stored here.\n     */\n    protected parentQueryBuilder: QueryBuilder<any>\n\n    /**\n     * Memo to help keep place of current parameter index for `createParameter`\n     */\n    private parameterIndex = 0\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(queryBuilder: QueryBuilder<any>)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connection: DataSource, queryRunner?: QueryRunner)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\n        queryRunner?: QueryRunner,\n    ) {\n        if (InstanceChecker.isDataSource(connectionOrQueryBuilder)) {\n            this.connection = connectionOrQueryBuilder\n            this.queryRunner = queryRunner\n            this.expressionMap = new QueryExpressionMap(this.connection)\n        } else {\n            this.connection = connectionOrQueryBuilder.connection\n            this.queryRunner = connectionOrQueryBuilder.queryRunner\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone()\n        }\n    }\n\n    private static queryBuilderRegistry: Record<string, any> = {}\n\n    static registerQueryBuilderClass(name: string, factory: any) {\n        QueryBuilder.queryBuilderRegistry[name] = factory\n    }\n    \n    // -------------------------------------------------------------------------\n    // Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    abstract getQuery(): string\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(`Main alias is not set`) // todo: better exception\n\n        return this.expressionMap.mainAlias.name\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection: string,\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection?: string | string[],\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\"\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map((selection) => ({\n                selection: selection,\n            }))\n        } else if (selection) {\n            this.expressionMap.selects = [\n                { selection: selection, aliasName: selectionAliasName },\n            ]\n        }\n\n     \n        if (InstanceChecker.isSelectQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['SelectQueryBuilder'](this)\n    }\n\n    /**\n     * Creates INSERT query.\n     */\n    insert(): InsertQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"insert\"\n\n        // loading it dynamically because of circular issue\n   \n        if (InstanceChecker.isInsertQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['InsertQueryBuilder'](this)\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        updateSet: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<Entity extends ObjectLiteral>(\n        entity: EntityTarget<Entity>,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(\n        tableName: string,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        entityOrTableNameUpdateSet?: EntityTarget<any> | ObjectLiteral,\n        maybeUpdateSet?: ObjectLiteral,\n    ): UpdateQueryBuilder<any> {\n        const updateSet = maybeUpdateSet\n            ? maybeUpdateSet\n            : (entityOrTableNameUpdateSet as ObjectLiteral | undefined)\n        entityOrTableNameUpdateSet = InstanceChecker.isEntitySchema(\n            entityOrTableNameUpdateSet,\n        )\n            ? entityOrTableNameUpdateSet.options.name\n            : entityOrTableNameUpdateSet\n\n        if (\n            typeof entityOrTableNameUpdateSet === \"function\" ||\n            typeof entityOrTableNameUpdateSet === \"string\"\n        ) {\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        this.expressionMap.queryType = \"update\"\n        this.expressionMap.valuesSet = updateSet\n\n        // loading it dynamically because of circular issue\n        \n        if (InstanceChecker.isUpdateQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['UpdateQueryBuilder'](this)\n    }\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): DeleteQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"delete\"\n\n        // loading it dynamically because of circular issue\n  \n        if (InstanceChecker.isDeleteQueryBuilder(this)) return this as any\n\n         return QueryBuilder.queryBuilderRegistry['DeleteQueryBuilder'](this)\n    }\n\n    softDelete(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"soft-delete\"\n\n        // loading it dynamically because of circular issue\n    \n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this)\n    }\n\n    restore(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"restore\"\n\n        // loading it dynamically because of circular issue\n       \n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this)\n    }\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(propertyPath: string): RelationQueryBuilder<Entity>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation<T extends ObjectLiteral>(\n        entityTarget: EntityTarget<T>,\n        propertyPath: string,\n    ): RelationQueryBuilder<T>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(\n        entityTargetOrPropertyPath: Function | string,\n        maybePropertyPath?: string,\n    ): RelationQueryBuilder<Entity> {\n        const entityTarget =\n            arguments.length === 2 ? entityTargetOrPropertyPath : undefined\n        const propertyPath =\n            arguments.length === 2\n                ? (maybePropertyPath as string)\n                : (entityTargetOrPropertyPath as string)\n\n        this.expressionMap.queryType = \"relation\"\n        this.expressionMap.relationPropertyPath = propertyPath\n\n        if (entityTarget) {\n            const mainAlias = this.createFromAlias(entityTarget)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        // loading it dynamically because of circular issue\n        \n        if (InstanceChecker.isRelationQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['RelationQueryBuilder'](this)\n    }\n\n    /**\n     * Checks if given relation exists in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string): boolean\n\n    /**\n     * Checks if given relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string[]): boolean\n\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(\n        target: EntityTarget<T>,\n        relation: string | string[],\n    ): boolean {\n        const entityMetadata = this.connection.getMetadata(target)\n        const relations = Array.isArray(relation) ? relation : [relation]\n        return relations.every((relation) => {\n            return !!entityMetadata.findRelationWithPropertyPath(relation)\n        })\n    }\n\n    /**\n     * Check the existence of a parameter for this query builder.\n     */\n    hasParameter(key: string): boolean {\n        return (\n            this.parentQueryBuilder?.hasParameter(key) ||\n            key in this.expressionMap.parameters\n        )\n    }\n\n    /**\n     * Sets parameter name and its value.\n     *\n     * The key for this parameter may contain numbers, letters, underscores, or periods.\n     */\n    setParameter(key: string, value: any): this {\n        if (typeof value === \"function\") {\n            throw new TypeORMError(\n                `Function parameter isn't supported in the parameters. Please check \"${key}\" parameter.`,\n            )\n        }\n\n        if (!key.match(/^([A-Za-z0-9_.]+)$/)) {\n            throw new TypeORMError(\n                \"QueryBuilder parameter keys may only contain numbers, letters, underscores, or periods.\",\n            )\n        }\n\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setParameter(key, value)\n        }\n\n        this.expressionMap.parameters[key] = value\n        return this\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n        for (const [key, value] of Object.entries(parameters)) {\n            this.setParameter(key, value)\n        }\n\n        return this\n    }\n\n    protected createParameter(value: any): string {\n        let parameterName\n\n        do {\n            parameterName = `orm_param_${this.parameterIndex++}`\n        } while (this.hasParameter(parameterName))\n\n        this.setParameter(parameterName, value)\n\n        return `:${parameterName}`\n    }\n\n    /**\n     * Adds native parameters from the given object.\n     *\n     * @deprecated Use `setParameters` instead\n     */\n    setNativeParameters(parameters: ObjectLiteral): this {\n        // set parent query builder parameters as well in sub-query mode\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setNativeParameters(parameters)\n        }\n\n        Object.keys(parameters).forEach((key) => {\n            this.expressionMap.nativeParameters[key] = parameters[key]\n        })\n        return this\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign(\n            {},\n            this.expressionMap.parameters,\n        )\n\n        // add discriminator column parameter if it exist\n        if (\n            this.expressionMap.mainAlias &&\n            this.expressionMap.mainAlias.hasMetadata\n        ) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter(\n                        (childMetadata) => childMetadata.discriminatorColumn,\n                    )\n                    .map((childMetadata) => childMetadata.discriminatorValue)\n                values.push(metadata.discriminatorValue)\n                parameters[\"discriminatorColumnValues\"] = values\n            }\n        }\n\n        return parameters\n    }\n\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql(): this {\n        // TODO rename to logSql()\n        const [query, parameters] = this.getQueryAndParameters()\n        this.connection.logger.logQuery(query, parameters)\n        return this\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        return this.getQueryAndParameters()[0]\n    }\n\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    getQueryAndParameters(): [string, any[]] {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        const query = this.getQuery()\n        const parameters = this.getParameters()\n        return this.connection.driver.escapeQueryWithParameters(\n            query,\n            parameters,\n            this.expressionMap.nativeParameters,\n        )\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const [sql, parameters] = this.getQueryAndParameters()\n        const queryRunner = this.obtainQueryRunner()\n        try {\n            return await queryRunner.query(sql, parameters) // await is needed here because we are using finally\n        } finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release()\n            }\n        }\n    }\n\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    createQueryBuilder(): this {\n        return new (this.constructor as any)(this.connection, this.queryRunner)\n    }\n\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone(): this {\n        return new (this.constructor as any)(this)\n    }\n\n    /**\n     * Includes a Query comment in the query builder.  This is helpful for debugging purposes,\n     * such as finding a specific query in the database server's logs, or for categorization using\n     * an APM product.\n     */\n    comment(comment: string): this {\n        this.expressionMap.comment = comment\n        return this\n    }\n\n    /**\n     * Disables escaping.\n     */\n    disableEscaping(): this {\n        this.expressionMap.disableEscaping = false\n        return this\n    }\n\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name: string): string {\n        if (!this.expressionMap.disableEscaping) return name\n        return this.connection.driver.escape(name)\n    }\n\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    setQueryRunner(queryRunner: QueryRunner): this {\n        this.queryRunner = queryRunner\n        return this\n    }\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    callListeners(enabled: boolean): this {\n        this.expressionMap.callListeners = enabled\n        return this\n    }\n\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    useTransaction(enabled: boolean): this {\n        this.expressionMap.useTransaction = enabled\n        return this\n    }\n\n    /**\n     * Adds CTE to query\n     */\n    addCommonTableExpression(\n        queryBuilder: QueryBuilder<any> | string,\n        alias: string,\n        options?: QueryBuilderCteOptions,\n    ): this {\n        this.expressionMap.commonTableExpressions.push({\n            queryBuilder,\n            alias,\n            options: options || {},\n        })\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\") return i\n                return this.escape(i)\n            })\n            .join(\".\")\n    }\n\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    protected getMainTableName(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(\n                `Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`,\n            )\n\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath\n\n        return this.expressionMap.mainAlias.tablePath!\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    protected createFromAlias(\n        entityTarget:\n            | EntityTarget<any>\n            | ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>),\n        aliasName?: string,\n    ): Alias {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            const metadata = this.connection.getMetadata(entityTarget)\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath,\n            })\n        } else {\n            if (typeof entityTarget === \"string\") {\n                const isSubquery =\n                    entityTarget.substr(0, 1) === \"(\" &&\n                    entityTarget.substr(-1) === \")\"\n\n                return this.expressionMap.createAlias({\n                    type: \"from\",\n                    name: aliasName,\n                    tablePath: !isSubquery\n                        ? (entityTarget as string)\n                        : undefined,\n                    subQuery: isSubquery ? entityTarget : undefined,\n                })\n            }\n\n            const subQueryBuilder: SelectQueryBuilder<any> = (\n                entityTarget as any\n            )((this as any as SelectQueryBuilder<any>).subQuery())\n            this.setParameters(subQueryBuilder.getParameters())\n            const subquery = subQueryBuilder.getQuery()\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                subQuery: subquery,\n            })\n        }\n    }\n\n    /**\n     * @deprecated this way of replace property names is too slow.\n     *  Instead, we'll replace property names at the end - once query is build.\n     */\n    protected replacePropertyNames(statement: string) {\n        return statement\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given SQL string.\n     */\n    protected replacePropertyNamesForTheWholeQuery(statement: string) {\n        const replacements: { [key: string]: { [key: string]: string } } = {}\n\n        for (const alias of this.expressionMap.aliases) {\n            if (!alias.hasMetadata) continue\n            const replaceAliasNamePrefix =\n                this.expressionMap.aliasNamePrefixingEnabled && alias.name\n                    ? `${alias.name}.`\n                    : \"\"\n\n            if (!replacements[replaceAliasNamePrefix]) {\n                replacements[replaceAliasNamePrefix] = {}\n            }\n\n            // Insert & overwrite the replacements from least to most relevant in our replacements object.\n            // To do this we iterate and overwrite in the order of relevance.\n            // Least to Most Relevant:\n            // * Relation Property Path to first join column key\n            // * Relation Property Path + Column Path\n            // * Column Database Name\n            // * Column Property Name\n            // * Column Property Path\n\n            for (const relation of alias.metadata.relations) {\n                if (relation.joinColumns.length > 0)\n                    replacements[replaceAliasNamePrefix][\n                        relation.propertyPath\n                    ] = relation.joinColumns[0].databaseName\n            }\n\n            for (const relation of alias.metadata.relations) {\n                const allColumns = [\n                    ...relation.joinColumns,\n                    ...relation.inverseJoinColumns,\n                ]\n                for (const joinColumn of allColumns) {\n                    const propertyKey = `${relation.propertyPath}.${\n                        joinColumn.referencedColumn!.propertyPath\n                    }`\n                    replacements[replaceAliasNamePrefix][propertyKey] =\n                        joinColumn.databaseName\n                }\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.databaseName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyPath] =\n                    column.databaseName\n            }\n        }\n\n        const replacementKeys = Object.keys(replacements)\n        const replaceAliasNamePrefixes = replacementKeys\n            .map((key) => escapeRegExp(key))\n            .join(\"|\")\n\n        if (replacementKeys.length > 0) {\n            statement = statement.replace(\n                new RegExp(\n                    // Avoid a lookbehind here since it's not well supported\n                    `([ =\\(]|^.{0})` + // any of ' =(' or start of line\n                        // followed by our prefix, e.g. 'tablename.' or ''\n                        `${\n                            replaceAliasNamePrefixes\n                                ? \"(\" + replaceAliasNamePrefixes + \")\"\n                                : \"\"\n                        }([^ =\\(\\)\\,]+)` + // a possible property name: sequence of anything but ' =(),'\n                        // terminated by ' =),' or end of line\n                        `(?=[ =\\)\\,]|.{0}$)`,\n                    \"gm\",\n                ),\n                (...matches) => {\n                    let match: string, pre: string, p: string\n                    if (replaceAliasNamePrefixes) {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[3]\n\n                        if (replacements[matches[2]][p]) {\n                            return `${pre}${this.escape(\n                                matches[2].substring(0, matches[2].length - 1),\n                            )}.${this.escape(replacements[matches[2]][p])}`\n                        }\n                    } else {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[2]\n\n                        if (replacements[\"\"][p]) {\n                            return `${pre}${this.escape(replacements[\"\"][p])}`\n                        }\n                    }\n                    return match\n                },\n            )\n        }\n\n        return statement\n    }\n\n    protected createComment(): string {\n        if (!this.expressionMap.comment) {\n            return \"\"\n        }\n\n        // ANSI SQL 2003 support C style comments - comments that start with `/*` and end with `*/`\n        // In some dialects query nesting is available - but not all.  Because of this, we'll need\n        // to scrub \"ending\" characters from the SQL but otherwise we can leave everything else\n        // as-is and it should be valid.\n\n        return `/* ${this.expressionMap.comment.replace(/\\*\\//g, \"\")} */ `\n    }\n\n    /**\n     * Time travel queries for CockroachDB\n     */\n    protected createTimeTravelQuery(): string {\n        if (\n            this.expressionMap.queryType === \"select\" &&\n            this.expressionMap.timeTravel\n        ) {\n            return ` AS OF SYSTEM TIME ${this.expressionMap.timeTravel}`\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    protected createWhereExpression() {\n        const conditionsArray = []\n\n        const whereExpression = this.createWhereClausesExpression(\n            this.expressionMap.wheres,\n        )\n\n        if (whereExpression.length > 0 && whereExpression !== \"1=1\") {\n            conditionsArray.push(this.replacePropertyNames(whereExpression))\n        }\n\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            // Adds the global condition of \"non-deleted\" for the entity with delete date columns in select query.\n            if (\n                this.expressionMap.queryType === \"select\" &&\n                !this.expressionMap.withDeleted &&\n                metadata.deleteDateColumn\n            ) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.deleteDateColumn.propertyName\n                    : metadata.deleteDateColumn.propertyName\n\n                const condition = `${this.replacePropertyNames(column)} IS NULL`\n                conditionsArray.push(condition)\n            }\n\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName\n\n                const condition = `${this.replacePropertyNames(\n                    column,\n                )} IN (:...discriminatorColumnValues)`\n                conditionsArray.push(condition)\n            }\n        }\n\n        if (this.expressionMap.extraAppendedAndWhereCondition) {\n            const condition = this.replacePropertyNames(\n                this.expressionMap.extraAppendedAndWhereCondition,\n            )\n            conditionsArray.push(condition)\n        }\n\n        let condition = \"\"\n\n        // time travel\n        condition += this.createTimeTravelQuery()\n\n        if (!conditionsArray.length) {\n            condition += \"\"\n        } else if (conditionsArray.length === 1) {\n            condition += ` WHERE ${conditionsArray[0]}`\n        } else {\n            condition += ` WHERE ( ${conditionsArray.join(\" ) AND ( \")} )`\n        }\n\n        return condition\n    }\n\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    protected createReturningExpression(returningType: ReturningType): string {\n        const columns = this.getReturningColumns()\n        const driver = this.connection.driver\n\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (\n            typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported(returningType)\n        ) {\n            columns.push(\n                ...this.expressionMap.extraReturningColumns.filter((column) => {\n                    return columns.indexOf(column) === -1\n                }),\n            )\n        }\n\n        if (columns.length) {\n            let columnsExpression = columns\n                .map((column) => {\n                    const name = this.escape(column.databaseName)\n                    if (driver.options.type === \"mssql\") {\n                        if (\n                            this.expressionMap.queryType === \"insert\" ||\n                            this.expressionMap.queryType === \"update\" ||\n                            this.expressionMap.queryType === \"soft-delete\" ||\n                            this.expressionMap.queryType === \"restore\"\n                        ) {\n                            return \"INSERTED.\" + name\n                        } else {\n                            return (\n                                this.escape(this.getMainTableName()) +\n                                \".\" +\n                                name\n                            )\n                        }\n                    } else {\n                        return name\n                    }\n                })\n                .join(\", \")\n\n            if (driver.options.type === \"oracle\") {\n                columnsExpression +=\n                    \" INTO \" +\n                    columns\n                        .map((column) => {\n                            return this.createParameter({\n                                type: (\n                                    driver as OracleDriver\n                                ).columnTypeToNativeParameter(column.type),\n                                dir: (driver as OracleDriver).oracle.BIND_OUT,\n                            })\n                        })\n                        .join(\", \")\n            }\n\n            if (driver.options.type === \"mssql\") {\n                if (\n                    this.expressionMap.queryType === \"insert\" ||\n                    this.expressionMap.queryType === \"update\"\n                ) {\n                    columnsExpression += \" INTO @OutputTable\"\n                }\n            }\n\n            return columnsExpression\n        } else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning\n        }\n\n        return \"\"\n    }\n\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    protected getReturningColumns(): ColumnMetadata[] {\n        const columns: ColumnMetadata[] = []\n        if (Array.isArray(this.expressionMap.returning)) {\n            ;(this.expressionMap.returning as string[]).forEach(\n                (columnName) => {\n                    if (this.expressionMap.mainAlias!.hasMetadata) {\n                        columns.push(\n                            ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(\n                                columnName,\n                            ),\n                        )\n                    }\n                },\n            )\n        }\n        return columns\n    }\n\n    protected createWhereClausesExpression(clauses: WhereClause[]): string {\n        return clauses\n            .map((clause, index) => {\n                const expression = this.createWhereConditionExpression(\n                    clause.condition,\n                )\n\n                switch (clause.type) {\n                    case \"and\":\n                        return (index > 0 ? \"AND \" : \"\") + expression\n                    case \"or\":\n                        return (index > 0 ? \"OR \" : \"\") + expression\n                }\n\n                return expression\n            })\n            .join(\" \")\n            .trim()\n    }\n\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    protected createWhereConditionExpression(\n        condition: WhereClauseCondition,\n        alwaysWrap: boolean = false,\n    ): string {\n        if (typeof condition === \"string\") return condition\n\n        if (Array.isArray(condition)) {\n            if (condition.length === 0) {\n                return \"1=1\"\n            }\n\n            // In the future we should probably remove this entire condition\n            // but for now to prevent any breaking changes it exists.\n            if (condition.length === 1 && !alwaysWrap) {\n                return this.createWhereClausesExpression(condition)\n            }\n\n            return \"(\" + this.createWhereClausesExpression(condition) + \")\"\n        }\n\n        const { driver } = this.connection\n\n        switch (condition.operator) {\n            case \"lessThan\":\n                return `${condition.parameters[0]} < ${condition.parameters[1]}`\n            case \"lessThanOrEqual\":\n                return `${condition.parameters[0]} <= ${condition.parameters[1]}`\n            case \"arrayContains\":\n                return `${condition.parameters[0]} @> ${condition.parameters[1]}`\n            case \"jsonContains\":\n                return `${condition.parameters[0]} ::jsonb @> ${condition.parameters[1]}`\n            case \"arrayContainedBy\":\n                return `${condition.parameters[0]} <@ ${condition.parameters[1]}`\n            case \"arrayOverlap\":\n                return `${condition.parameters[0]} && ${condition.parameters[1]}`\n            case \"moreThan\":\n                return `${condition.parameters[0]} > ${condition.parameters[1]}`\n            case \"moreThanOrEqual\":\n                return `${condition.parameters[0]} >= ${condition.parameters[1]}`\n            case \"notEqual\":\n                return `${condition.parameters[0]} != ${condition.parameters[1]}`\n            case \"equal\":\n                return `${condition.parameters[0]} = ${condition.parameters[1]}`\n            case \"ilike\":\n                if (\n                    driver.options.type === \"postgres\" ||\n                    driver.options.type === \"cockroachdb\"\n                ) {\n                    return `${condition.parameters[0]} ILIKE ${condition.parameters[1]}`\n                }\n\n                return `UPPER(${condition.parameters[0]}) LIKE UPPER(${condition.parameters[1]})`\n            case \"like\":\n                return `${condition.parameters[0]} LIKE ${condition.parameters[1]}`\n            case \"between\":\n                return `${condition.parameters[0]} BETWEEN ${condition.parameters[1]} AND ${condition.parameters[2]}`\n            case \"in\":\n                if (condition.parameters.length <= 1) {\n                    return \"0=1\"\n                }\n                return `${condition.parameters[0]} IN (${condition.parameters\n                    .slice(1)\n                    .join(\", \")})`\n            case \"any\":\n                if (driver.options.type === \"cockroachdb\") {\n                    return `${condition.parameters[0]}::STRING = ANY(${condition.parameters[1]}::STRING[])`\n                }\n\n                return `${condition.parameters[0]} = ANY(${condition.parameters[1]})`\n            case \"isNull\":\n                return `${condition.parameters[0]} IS NULL`\n\n            case \"not\":\n                return `NOT(${this.createWhereConditionExpression(\n                    condition.condition,\n                )})`\n            case \"brackets\":\n                return `${this.createWhereConditionExpression(\n                    condition.condition,\n                    true,\n                )}`\n            case \"and\":\n                return condition.parameters.join(\" AND \")\n        }\n\n    }\n\n    protected createCteExpression(): string {\n        if (!this.hasCommonTableExpressions()) {\n            return \"\"\n        }\n        const databaseRequireRecusiveHint =\n            this.connection.driver.cteCapabilities.requiresRecursiveHint\n\n        const cteStrings = this.expressionMap.commonTableExpressions.map(\n            (cte) => {\n                const cteBodyExpression =\n                    typeof cte.queryBuilder === \"string\"\n                        ? cte.queryBuilder\n                        : cte.queryBuilder.getQuery()\n                if (typeof cte.queryBuilder !== \"string\") {\n                    if (cte.queryBuilder.hasCommonTableExpressions()) {\n                        throw new TypeORMError(\n                            `Nested CTEs aren't supported (CTE: ${cte.alias})`,\n                        )\n                    }\n                    if (\n                        !this.connection.driver.cteCapabilities.writable &&\n                        !InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        throw new TypeORMError(\n                            `Only select queries are supported in CTEs in ${this.connection.options.type} (CTE: ${cte.alias})`,\n                        )\n                    }\n                    this.setParameters(cte.queryBuilder.getParameters())\n                }\n                let cteHeader = this.escape(cte.alias)\n                if (cte.options.columnNames) {\n                    const escapedColumnNames = cte.options.columnNames.map(\n                        (column) => this.escape(column),\n                    )\n                    if (\n                        InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        if (\n                            cte.queryBuilder.expressionMap.selects.length &&\n                            cte.options.columnNames.length !==\n                                cte.queryBuilder.expressionMap.selects.length\n                        ) {\n                            throw new TypeORMError(\n                                `cte.options.columnNames length (${cte.options.columnNames.length}) doesn't match subquery select list length ${cte.queryBuilder.expressionMap.selects.length} (CTE: ${cte.alias})`,\n                            )\n                        }\n                    }\n                    cteHeader += `(${escapedColumnNames.join(\", \")})`\n                }\n                const recursiveClause =\n                    cte.options.recursive && databaseRequireRecusiveHint\n                        ? \"RECURSIVE\"\n                        : \"\"\n                let materializeClause = \"\"\n                if (\n                    this.connection.driver.cteCapabilities.materializedHint &&\n                    cte.options.materialized !== undefined\n                ) {\n                    materializeClause = cte.options.materialized\n                        ? \"MATERIALIZED\"\n                        : \"NOT MATERIALIZED\"\n                }\n\n                return [\n                    recursiveClause,\n                    cteHeader,\n                    \"AS\",\n                    materializeClause,\n                    `(${cteBodyExpression})`,\n                ]\n                    .filter(Boolean)\n                    .join(\" \")\n            },\n        )\n\n        return \"WITH \" + cteStrings.join(\", \") + \" \"\n    }\n\n    /**\n     * Creates \"WHERE\" condition for an in-ids condition.\n     */\n    protected getWhereInIdsCondition(\n        ids: any | any[],\n    ): ObjectLiteral | Brackets {\n        const metadata = this.expressionMap.mainAlias!.metadata\n        const normalized = (Array.isArray(ids) ? ids : [ids]).map((id) =>\n            metadata.ensureEntityIdMap(id),\n        )\n\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys) {\n            const primaryColumn = metadata.primaryColumns[0]\n\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            // This also fails for embedded & relation, so until that is fixed skip it.\n            if (\n                !primaryColumn.transformer &&\n                !primaryColumn.relationMetadata &&\n                !primaryColumn.embeddedMetadata\n            ) {\n                return {\n                    [primaryColumn.propertyName]: In(\n                        normalized.map((id) =>\n                            primaryColumn.getEntityValue(id, false),\n                        ),\n                    ),\n                }\n            }\n        }\n\n        return new Brackets((qb) => {\n            for (const data of normalized) {\n                qb.orWhere(new Brackets((qb) => qb.where(data)))\n            }\n        })\n    }\n\n    protected getExistsCondition(subQuery: any): [string, any[]] {\n        const query = subQuery\n            .clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(\"1\")\n            .setOption(\"disable-global-order\")\n\n        return [`EXISTS (${query.getQuery()})`, query.getParameters()]\n    }\n\n    private findColumnsForPropertyPath(\n        propertyPath: string,\n    ): [Alias, string[], ColumnMetadata[]] {\n        // Make a helper to iterate the entity & relations?\n        // Use that to set the correct alias?  Or the other way around?\n\n        // Start with the main alias with our property paths\n        let alias = this.expressionMap.mainAlias\n        const root: string[] = []\n        const propertyPathParts = propertyPath.split(\".\")\n\n        while (propertyPathParts.length > 1) {\n            const part = propertyPathParts[0]\n\n            if (!alias?.hasMetadata) {\n                // If there's no metadata, we're wasting our time\n                // and can't actually look any of this up.\n                break\n            }\n\n            if (alias.metadata.hasEmbeddedWithPropertyPath(part)) {\n                // If this is an embedded then we should combine the two as part of our lookup.\n                // Instead of just breaking, we keep going with this in case there's an embedded/relation\n                // inside an embedded.\n                propertyPathParts.unshift(\n                    `${propertyPathParts.shift()}.${propertyPathParts.shift()}`,\n                )\n                continue\n            }\n\n            if (alias.metadata.hasRelationWithPropertyPath(part)) {\n                // If this is a relation then we should find the aliases\n                // that match the relation & then continue further down\n                // the property path\n                const joinAttr = this.expressionMap.joinAttributes.find(\n                    (joinAttr) => joinAttr.relationPropertyPath === part,\n                )\n\n                if (!joinAttr?.alias) {\n                    const fullRelationPath =\n                        root.length > 0 ? `${root.join(\".\")}.${part}` : part\n                    throw new Error(\n                        `Cannot find alias for relation at ${fullRelationPath}`,\n                    )\n                }\n\n                alias = joinAttr.alias\n                root.push(...part.split(\".\"))\n                propertyPathParts.shift()\n                continue\n            }\n\n            break\n        }\n\n        if (!alias) {\n            throw new Error(`Cannot find alias for property ${propertyPath}`)\n        }\n\n        // Remaining parts are combined back and used to find the actual property path\n        const aliasPropertyPath = propertyPathParts.join(\".\")\n\n        const columns =\n            alias.metadata.findColumnsWithPropertyPath(aliasPropertyPath)\n\n        if (!columns.length) {\n            throw new EntityPropertyNotFoundError(propertyPath, alias.metadata)\n        }\n\n        return [alias, root, columns]\n    }\n\n    /**\n     * Creates a property paths for a given ObjectLiteral.\n     */\n    protected createPropertyPath(\n        metadata: EntityMetadata,\n        entity: ObjectLiteral,\n        prefix: string = \"\",\n    ) {\n        const paths: string[] = []\n\n        for (const key of Object.keys(entity)) {\n            const path = prefix ? `${prefix}.${key}` : key\n\n            // There's times where we don't actually want to traverse deeper.\n            // If the value is a `FindOperator`, or null, or not an object, then we don't, for example.\n            if (\n                entity[key] === null ||\n                typeof entity[key] !== \"object\" ||\n                InstanceChecker.isFindOperator(entity[key])\n            ) {\n                paths.push(path)\n                continue\n            }\n\n            if (metadata.hasEmbeddedWithPropertyPath(path)) {\n                const subPaths = this.createPropertyPath(\n                    metadata,\n                    entity[key],\n                    path,\n                )\n                paths.push(...subPaths)\n                continue\n            }\n\n            if (metadata.hasRelationWithPropertyPath(path)) {\n                const relation = metadata.findRelationWithPropertyPath(path)!\n\n                // There's also cases where we don't want to return back all of the properties.\n                // These handles the situation where someone passes the model & we don't need to make\n                // a HUGE `where` to uniquely look up the entity.\n\n                // In the case of a *-to-one, there's only ever one possible entity on the other side\n                // so if the join columns are all defined we can return just the relation itself\n                // because it will fetch only the join columns and do the lookup.\n                if (\n                    relation.relationType === \"one-to-one\" ||\n                    relation.relationType === \"many-to-one\"\n                ) {\n                    const joinColumns = relation.joinColumns\n                        .map((j) => j.referencedColumn)\n                        .filter((j): j is ColumnMetadata => !!j)\n\n                    const hasAllJoinColumns =\n                        joinColumns.length > 0 &&\n                        joinColumns.every((column) =>\n                            column.getEntityValue(entity[key], false),\n                        )\n\n                    if (hasAllJoinColumns) {\n                        paths.push(path)\n                        continue\n                    }\n                }\n\n                if (\n                    relation.relationType === \"one-to-many\" ||\n                    relation.relationType === \"many-to-many\"\n                ) {\n                    throw new Error(\n                        `Cannot query across ${relation.relationType} for property ${path}`,\n                    )\n                }\n\n                // For any other case, if the `entity[key]` contains all of the primary keys we can do a\n                // lookup via these.  We don't need to look up via any other values 'cause these are\n                // the unique primary keys.\n                // This handles the situation where someone passes the model & we don't need to make\n                // a HUGE where.\n                const primaryColumns =\n                    relation.inverseEntityMetadata.primaryColumns\n                const hasAllPrimaryKeys =\n                    primaryColumns.length > 0 &&\n                    primaryColumns.every((column) =>\n                        column.getEntityValue(entity[key], false),\n                    )\n\n                if (hasAllPrimaryKeys) {\n                    const subPaths = primaryColumns.map(\n                        (column) => `${path}.${column.propertyPath}`,\n                    )\n                    paths.push(...subPaths)\n                    continue\n                }\n\n                // If nothing else, just return every property that's being passed to us.\n                const subPaths = this.createPropertyPath(\n                    relation.inverseEntityMetadata,\n                    entity[key],\n                ).map((p) => `${path}.${p}`)\n                paths.push(...subPaths)\n                continue\n            }\n\n            paths.push(path)\n        }\n\n        return paths\n    }\n\n    protected *getPredicates(where: ObjectLiteral) {\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const propertyPaths = this.createPropertyPath(\n                this.expressionMap.mainAlias!.metadata,\n                where,\n            )\n\n            for (const propertyPath of propertyPaths) {\n                const [alias, aliasPropertyPath, columns] =\n                    this.findColumnsForPropertyPath(propertyPath)\n\n                for (const column of columns) {\n                    let containedWhere = where\n\n                    for (const part of aliasPropertyPath) {\n                        if (!containedWhere || !(part in containedWhere)) {\n                            containedWhere = {}\n                            break\n                        }\n\n                        containedWhere = containedWhere[part]\n                    }\n\n                    // Use the correct alias & the property path from the column\n                    const aliasPath = this.expressionMap\n                        .aliasNamePrefixingEnabled\n                        ? `${alias.name}.${column.propertyPath}`\n                        : column.propertyPath\n\n                    const parameterValue = column.getEntityValue(\n                        containedWhere,\n                        true,\n                    )\n\n                    yield [aliasPath, parameterValue]\n                }\n            }\n        } else {\n            for (const key of Object.keys(where)) {\n                const parameterValue = where[key]\n                const aliasPath = this.expressionMap.aliasNamePrefixingEnabled\n                    ? `${this.alias}.${key}`\n                    : key\n\n                yield [aliasPath, parameterValue]\n            }\n        }\n    }\n\n    protected getWherePredicateCondition(\n        aliasPath: string,\n        parameterValue: any,\n    ): WhereClauseCondition {\n        if (InstanceChecker.isFindOperator(parameterValue)) {\n            let parameters: any[] = []\n            if (parameterValue.useParameter) {\n                if (parameterValue.objectLiteralParameters) {\n                    this.setParameters(parameterValue.objectLiteralParameters)\n                } else if (parameterValue.multipleParameters) {\n                    for (const v of parameterValue.value) {\n                        parameters.push(this.createParameter(v))\n                    }\n                } else {\n                    parameters.push(this.createParameter(parameterValue.value))\n                }\n            }\n\n            if (parameterValue.type === \"raw\") {\n                if (parameterValue.getSql) {\n                    return parameterValue.getSql(aliasPath)\n                } else {\n                    return {\n                        operator: \"equal\",\n                        parameters: [aliasPath, parameterValue.value],\n                    }\n                }\n            } else if (parameterValue.type === \"not\") {\n                if (parameterValue.child) {\n                    return {\n                        operator: parameterValue.type,\n                        condition: this.getWherePredicateCondition(\n                            aliasPath,\n                            parameterValue.child,\n                        ),\n                    }\n                } else {\n                    return {\n                        operator: \"notEqual\",\n                        parameters: [aliasPath, ...parameters],\n                    }\n                }\n            } else if (parameterValue.type === \"and\") {\n                const values: FindOperator<any>[] = parameterValue.value\n\n                return {\n                    operator: parameterValue.type,\n                    parameters: values.map((operator) =>\n                        this.createWhereConditionExpression(\n                            this.getWherePredicateCondition(\n                                aliasPath,\n                                operator,\n                            ),\n                        ),\n                    ),\n                }\n            } else {\n                return {\n                    operator: parameterValue.type,\n                    parameters: [aliasPath, ...parameters],\n                }\n            }\n            // } else if (parameterValue === null) {\n            //     return {\n            //         operator: \"isNull\",\n            //         parameters: [\n            //             aliasPath,\n            //         ]\n            //     };\n        } else {\n            return {\n                operator: \"equal\",\n                parameters: [aliasPath, this.createParameter(parameterValue)],\n            }\n        }\n    }\n\n    protected getWhereCondition(\n        where:\n            | string\n            | ((qb: this) => string)\n            | Brackets\n            | NotBrackets\n            | ObjectLiteral\n            | ObjectLiteral[],\n    ): WhereClauseCondition {\n        if (typeof where === \"string\") {\n            return where\n        }\n\n        if (InstanceChecker.isBrackets(where)) {\n            const whereQueryBuilder = this.createQueryBuilder()\n\n            whereQueryBuilder.parentQueryBuilder = this\n\n            whereQueryBuilder.expressionMap.mainAlias =\n                this.expressionMap.mainAlias\n            whereQueryBuilder.expressionMap.aliasNamePrefixingEnabled =\n                this.expressionMap.aliasNamePrefixingEnabled\n            whereQueryBuilder.expressionMap.parameters =\n                this.expressionMap.parameters\n            whereQueryBuilder.expressionMap.nativeParameters =\n                this.expressionMap.nativeParameters\n\n            whereQueryBuilder.expressionMap.wheres = []\n\n            where.whereFactory(whereQueryBuilder as any)\n\n            return {\n                operator: InstanceChecker.isNotBrackets(where)\n                    ? \"not\"\n                    : \"brackets\",\n                condition: whereQueryBuilder.expressionMap.wheres,\n            }\n        }\n\n        if (typeof where === \"function\") {\n            return where(this)\n        }\n\n        const wheres: ObjectLiteral[] = Array.isArray(where) ? where : [where]\n        const clauses: WhereClause[] = []\n\n        for (const where of wheres) {\n            const conditions: WhereClauseCondition = []\n\n            // Filter the conditions and set up the parameter values\n            for (const [aliasPath, parameterValue] of this.getPredicates(\n                where,\n            )) {\n                conditions.push({\n                    type: \"and\",\n                    condition: this.getWherePredicateCondition(\n                        aliasPath,\n                        parameterValue,\n                    ),\n                })\n            }\n\n            clauses.push({ type: \"or\", condition: conditions })\n        }\n\n        if (clauses.length === 1) {\n            return clauses[0].condition\n        }\n\n        return clauses\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner()\n    }\n\n    protected hasCommonTableExpressions(): boolean {\n        return this.expressionMap.commonTableExpressions.length > 0\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/query-builder/QueryExpressionMap.d.ts b/node_modules/typeorm/browser/query-builder/QueryExpressionMap.d.ts
index fd5e3b9..6c60a6d 100644
--- a/node_modules/typeorm/browser/query-builder/QueryExpressionMap.d.ts
+++ b/node_modules/typeorm/browser/query-builder/QueryExpressionMap.d.ts
@@ -1,19 +1,19 @@
-import { Alias } from "./Alias";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { JoinAttribute } from "./JoinAttribute";
-import { QueryBuilder } from "./QueryBuilder";
-import { QueryBuilderCteOptions } from "./QueryBuilderCte";
-import { RelationIdAttribute } from "./relation-id/RelationIdAttribute";
-import { RelationCountAttribute } from "./relation-count/RelationCountAttribute";
-import { DataSource } from "../data-source/DataSource";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { SelectQuery } from "./SelectQuery";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { SelectQueryBuilderOption } from "./SelectQueryBuilderOption";
-import { WhereClause } from "./WhereClause";
-import { UpsertType } from "../driver/types/UpsertType";
+import { Alias } from "typeorm/browser/query-builder/Alias";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
+import { JoinAttribute } from "typeorm/browser/query-builder/JoinAttribute";
+import { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+import { QueryBuilderCteOptions } from "typeorm/browser/query-builder/QueryBuilderCte";
+import { RelationIdAttribute } from "typeorm/browser/query-builder/relation-id/RelationIdAttribute";
+import { RelationCountAttribute } from "typeorm/browser/query-builder/relation-count/RelationCountAttribute";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { SelectQuery } from "typeorm/browser/query-builder/SelectQuery";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { SelectQueryBuilderOption } from "typeorm/browser/query-builder/SelectQueryBuilderOption";
+import { WhereClause } from "typeorm/browser/query-builder/WhereClause";
+import { UpsertType } from "typeorm/browser/driver/types/UpsertType";
 /**
  * Contains all properties of the QueryBuilder that needs to be build a final query.
  */
diff --git a/node_modules/typeorm/browser/query-builder/QueryPartialEntity.d.ts b/node_modules/typeorm/browser/query-builder/QueryPartialEntity.d.ts
index b30253a..04ad86f 100644
--- a/node_modules/typeorm/browser/query-builder/QueryPartialEntity.d.ts
+++ b/node_modules/typeorm/browser/query-builder/QueryPartialEntity.d.ts
@@ -1,4 +1,4 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Make all properties in T optional
  */
diff --git a/node_modules/typeorm/browser/query-builder/RelationIdLoader.d.ts b/node_modules/typeorm/browser/query-builder/RelationIdLoader.d.ts
index 1ca2ed6..8692370 100644
--- a/node_modules/typeorm/browser/query-builder/RelationIdLoader.d.ts
+++ b/node_modules/typeorm/browser/query-builder/RelationIdLoader.d.ts
@@ -1,8 +1,8 @@
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { SelectQueryBuilder } from "./SelectQueryBuilder";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * Loads relation ids for the given entities.
  */
diff --git a/node_modules/typeorm/browser/query-builder/RelationLoader.d.ts b/node_modules/typeorm/browser/query-builder/RelationLoader.d.ts
index d23d012..e038746 100644
--- a/node_modules/typeorm/browser/query-builder/RelationLoader.d.ts
+++ b/node_modules/typeorm/browser/query-builder/RelationLoader.d.ts
@@ -1,8 +1,8 @@
-import { DataSource } from "../data-source/DataSource";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { SelectQueryBuilder } from "./SelectQueryBuilder";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Wraps entities and creates getters/setters for their relations
  * to be able to lazily load relations when accessing these relations.
diff --git a/node_modules/typeorm/browser/query-builder/RelationQueryBuilder.d.ts b/node_modules/typeorm/browser/query-builder/RelationQueryBuilder.d.ts
index e635fd7..5d86d10 100644
--- a/node_modules/typeorm/browser/query-builder/RelationQueryBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/RelationQueryBuilder.d.ts
@@ -1,5 +1,5 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Allows to work with entity relations and perform specific operations with those relations.
  *
diff --git a/node_modules/typeorm/browser/query-builder/SelectQueryBuilder.d.ts b/node_modules/typeorm/browser/query-builder/SelectQueryBuilder.d.ts
index 18d1d4d..c7d7a94 100644
--- a/node_modules/typeorm/browser/query-builder/SelectQueryBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/SelectQueryBuilder.d.ts
@@ -1,22 +1,22 @@
 
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryBuilder } from "./QueryBuilder";
-import { ReadStream } from "../platform/PlatformTools";
-import { SelectQuery } from "./SelectQuery";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { QueryExpressionMap } from "./QueryExpressionMap";
-import { EntityTarget } from "../common/EntityTarget";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { SelectQueryBuilderOption } from "./SelectQueryBuilderOption";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { FindOptionsSelect } from "../find-options/FindOptionsSelect";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { FindOptionsOrder } from "../find-options/FindOptionsOrder";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { FindOptionsRelations } from "../find-options/FindOptionsRelations";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+import { ReadStream } from "typeorm/browser/platform/PlatformTools";
+import { SelectQuery } from "typeorm/browser/query-builder/SelectQuery";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
+import { QueryExpressionMap } from "typeorm/browser/query-builder/QueryExpressionMap";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/browser/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/browser/query-builder/Brackets";
+import { SelectQueryBuilderOption } from "typeorm/browser/query-builder/SelectQueryBuilderOption";
+import { FindManyOptions } from "typeorm/browser/find-options/FindManyOptions";
+import { FindOptionsSelect } from "typeorm/browser/find-options/FindOptionsSelect";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { FindOptionsOrder } from "typeorm/browser/find-options/FindOptionsOrder";
+import { FindOptionsWhere } from "typeorm/browser/find-options/FindOptionsWhere";
+import { FindOptionsRelations } from "typeorm/browser/find-options/FindOptionsRelations";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.d.ts b/node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.d.ts
index f178248..9096ee0 100644
--- a/node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/SoftDeleteQueryBuilder.d.ts
@@ -1,12 +1,12 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityTarget } from "../common/EntityTarget";
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { UpdateResult } from "./result/UpdateResult";
-import { OrderByCondition } from "../find-options/OrderByCondition";
+import { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/browser/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/browser/query-builder/Brackets";
+import { UpdateResult } from "typeorm/browser/query-builder/result/UpdateResult";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.d.ts b/node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.d.ts
index 3ee2933..243914e 100644
--- a/node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/UpdateQueryBuilder.d.ts
@@ -1,12 +1,12 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { UpdateResult } from "./result/UpdateResult";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { QueryDeepPartialEntity } from "./QueryPartialEntity";
+import { QueryBuilder } from "typeorm/browser/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/browser/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/browser/query-builder/Brackets";
+import { UpdateResult } from "typeorm/browser/query-builder/result/UpdateResult";
+import { OrderByCondition } from "typeorm/browser/find-options/OrderByCondition";
+import { QueryDeepPartialEntity } from "typeorm/browser/query-builder/QueryPartialEntity";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/browser/query-builder/WhereExpressionBuilder.d.ts b/node_modules/typeorm/browser/query-builder/WhereExpressionBuilder.d.ts
index e29f6c5..70d97cc 100644
--- a/node_modules/typeorm/browser/query-builder/WhereExpressionBuilder.d.ts
+++ b/node_modules/typeorm/browser/query-builder/WhereExpressionBuilder.d.ts
@@ -1,5 +1,5 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { Brackets } from "./Brackets";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { Brackets } from "typeorm/browser/query-builder/Brackets";
 /**
  * Query Builders can implement this interface to support where expression
  */
diff --git a/node_modules/typeorm/browser/query-builder/index.d.ts b/node_modules/typeorm/browser/query-builder/index.d.ts
new file mode 100644
index 0000000..1714e09
--- /dev/null
+++ b/node_modules/typeorm/browser/query-builder/index.d.ts
@@ -0,0 +1 @@
+export declare function registerQueryBuilders(): void;
diff --git a/node_modules/typeorm/browser/query-builder/index.js b/node_modules/typeorm/browser/query-builder/index.js
new file mode 100644
index 0000000..3e55a55
--- /dev/null
+++ b/node_modules/typeorm/browser/query-builder/index.js
@@ -0,0 +1,17 @@
+import { DeleteQueryBuilder } from "./DeleteQueryBuilder";
+import { InsertQueryBuilder } from "./InsertQueryBuilder";
+import { QueryBuilder } from "./QueryBuilder";
+import { RelationQueryBuilder } from "./RelationQueryBuilder";
+import { SelectQueryBuilder } from ".//SelectQueryBuilder";
+import { SoftDeleteQueryBuilder } from "./SoftDeleteQueryBuilder";
+import { UpdateQueryBuilder } from "./UpdateQueryBuilder";
+export function registerQueryBuilders() {
+    QueryBuilder.registerQueryBuilderClass('DeleteQueryBuilder', (qb) => new DeleteQueryBuilder(qb));
+    QueryBuilder.registerQueryBuilderClass('InsertQueryBuilder', (qb) => new InsertQueryBuilder(qb));
+    QueryBuilder.registerQueryBuilderClass('RelationQueryBuilder', (qb) => new RelationQueryBuilder(qb));
+    QueryBuilder.registerQueryBuilderClass('SelectQueryBuilder', (qb) => new SelectQueryBuilder(qb));
+    QueryBuilder.registerQueryBuilderClass('SoftDeleteQueryBuilder', (qb) => new SoftDeleteQueryBuilder(qb));
+    QueryBuilder.registerQueryBuilderClass('UpdateQueryBuilder', (qb) => new UpdateQueryBuilder(qb));
+}
+
+//# sourceMappingURL=index.js.map
diff --git a/node_modules/typeorm/browser/query-builder/index.js.map b/node_modules/typeorm/browser/query-builder/index.js.map
new file mode 100644
index 0000000..e56407a
--- /dev/null
+++ b/node_modules/typeorm/browser/query-builder/index.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../browser/src/query-builder/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,kBAAkB,EAAG,MAAM,sBAAsB,CAAA;AAC1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAA;AACzD,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAA;AAC7C,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAA;AAC7D,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAA;AAC1D,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAA;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAA;AAEzD,MAAM,UAAU,qBAAqB;IACjC,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;IACnH,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;IACnH,YAAY,CAAC,yBAAyB,CAAC,sBAAsB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,oBAAoB,CAAC,EAAE,CAAC,CAAC,CAAA;IACvH,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;IACnH,YAAY,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,sBAAsB,CAAC,EAAE,CAAC,CAAC,CAAA;IAC3H,YAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;AACvH,CAAC","file":"index.js","sourcesContent":["import { DeleteQueryBuilder  } from \"./DeleteQueryBuilder\"\nimport { InsertQueryBuilder } from \"./InsertQueryBuilder\"\nimport { QueryBuilder } from \"./QueryBuilder\"\nimport { RelationQueryBuilder } from \"./RelationQueryBuilder\"\nimport { SelectQueryBuilder } from \".//SelectQueryBuilder\"\nimport { SoftDeleteQueryBuilder } from \"./SoftDeleteQueryBuilder\"\nimport { UpdateQueryBuilder } from \"./UpdateQueryBuilder\"\n\nexport function registerQueryBuilders () {\n    QueryBuilder.registerQueryBuilderClass('DeleteQueryBuilder', (qb: QueryBuilder<any>) => new DeleteQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('InsertQueryBuilder', (qb: QueryBuilder<any>) => new InsertQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('RelationQueryBuilder', (qb: QueryBuilder<any>) => new RelationQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('SelectQueryBuilder', (qb: QueryBuilder<any>) => new SelectQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('SoftDeleteQueryBuilder', (qb: QueryBuilder<any>) => new SoftDeleteQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('UpdateQueryBuilder', (qb: QueryBuilder<any>) => new UpdateQueryBuilder(qb))\n}"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.d.ts b/node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.d.ts
index bfd274c..16037d1 100644
--- a/node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.d.ts
+++ b/node_modules/typeorm/browser/query-builder/relation-count/RelationCountAttribute.d.ts
@@ -1,7 +1,7 @@
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { RelationMetadata } from "../../metadata/RelationMetadata";
-import { QueryExpressionMap } from "../QueryExpressionMap";
-import { SelectQueryBuilder } from "../SelectQueryBuilder";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { QueryExpressionMap } from "typeorm/browser/query-builder/QueryExpressionMap";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 export declare class RelationCountAttribute {
     private expressionMap;
     /**
diff --git a/node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.d.ts b/node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.d.ts
index 9ca47bd..a6a37c6 100644
--- a/node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.d.ts
+++ b/node_modules/typeorm/browser/query-builder/relation-id/RelationIdAttribute.d.ts
@@ -1,7 +1,7 @@
-import { RelationMetadata } from "../../metadata/RelationMetadata";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { QueryExpressionMap } from "../QueryExpressionMap";
-import { SelectQueryBuilder } from "../SelectQueryBuilder";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { QueryExpressionMap } from "typeorm/browser/query-builder/QueryExpressionMap";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Stores all join relation id attributes which will be used to build a JOIN query.
  */
diff --git a/node_modules/typeorm/browser/query-builder/result/DeleteResult.d.ts b/node_modules/typeorm/browser/query-builder/result/DeleteResult.d.ts
index 9c98830..c22b45d 100644
--- a/node_modules/typeorm/browser/query-builder/result/DeleteResult.d.ts
+++ b/node_modules/typeorm/browser/query-builder/result/DeleteResult.d.ts
@@ -1,4 +1,4 @@
-import { QueryResult } from "../../query-runner/QueryResult";
+import { QueryResult } from "typeorm/browser/query-runner/QueryResult";
 /**
  * Result object returned by DeleteQueryBuilder execution.
  */
diff --git a/node_modules/typeorm/browser/query-builder/result/InsertResult.d.ts b/node_modules/typeorm/browser/query-builder/result/InsertResult.d.ts
index e52d72f..c37e71b 100644
--- a/node_modules/typeorm/browser/query-builder/result/InsertResult.d.ts
+++ b/node_modules/typeorm/browser/query-builder/result/InsertResult.d.ts
@@ -1,5 +1,5 @@
-import { ObjectLiteral } from "../../common/ObjectLiteral";
-import { QueryResult } from "../../query-runner/QueryResult";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { QueryResult } from "typeorm/browser/query-runner/QueryResult";
 /**
  * Result object returned by InsertQueryBuilder execution.
  */
diff --git a/node_modules/typeorm/browser/query-builder/result/UpdateResult.d.ts b/node_modules/typeorm/browser/query-builder/result/UpdateResult.d.ts
index a9c6844..4a742b8 100644
--- a/node_modules/typeorm/browser/query-builder/result/UpdateResult.d.ts
+++ b/node_modules/typeorm/browser/query-builder/result/UpdateResult.d.ts
@@ -1,5 +1,5 @@
-import { ObjectLiteral } from "../../common/ObjectLiteral";
-import { QueryResult } from "../../query-runner/QueryResult";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { QueryResult } from "typeorm/browser/query-runner/QueryResult";
 /**
  * Result object returned by UpdateQueryBuilder execution.
  */
diff --git a/node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts b/node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts
index d695803..6291e1a 100644
--- a/node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts
+++ b/node_modules/typeorm/browser/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * Transforms plain old javascript object
  * Entity is constructed based on its entity metadata.
diff --git a/node_modules/typeorm/browser/query-runner/QueryRunner.d.ts b/node_modules/typeorm/browser/query-runner/QueryRunner.d.ts
index b5f269f..0146db0 100644
--- a/node_modules/typeorm/browser/query-runner/QueryRunner.d.ts
+++ b/node_modules/typeorm/browser/query-runner/QueryRunner.d.ts
@@ -1,21 +1,21 @@
 
-import { TableColumn } from "../schema-builder/table/TableColumn";
-import { Table } from "../schema-builder/table/Table";
-import { TableForeignKey } from "../schema-builder/table/TableForeignKey";
-import { TableIndex } from "../schema-builder/table/TableIndex";
-import { DataSource } from "../data-source/DataSource";
-import { ReadStream } from "../platform/PlatformTools";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { SqlInMemory } from "../driver/SqlInMemory";
-import { TableUnique } from "../schema-builder/table/TableUnique";
-import { View } from "../schema-builder/view/View";
-import { Broadcaster } from "../subscriber/Broadcaster";
-import { TableCheck } from "../schema-builder/table/TableCheck";
-import { IsolationLevel } from "../driver/types/IsolationLevel";
-import { TableExclusion } from "../schema-builder/table/TableExclusion";
-import { QueryResult } from "./QueryResult";
-import { ReplicationMode } from "../driver/types/ReplicationMode";
+import { TableColumn } from "typeorm/browser/schema-builder/table/TableColumn";
+import { Table } from "typeorm/browser/schema-builder/table/Table";
+import { TableForeignKey } from "typeorm/browser/schema-builder/table/TableForeignKey";
+import { TableIndex } from "typeorm/browser/schema-builder/table/TableIndex";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { ReadStream } from "typeorm/browser/platform/PlatformTools";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { SqlInMemory } from "typeorm/browser/driver/SqlInMemory";
+import { TableUnique } from "typeorm/browser/schema-builder/table/TableUnique";
+import { View } from "typeorm/browser/schema-builder/view/View";
+import { Broadcaster } from "typeorm/browser/subscriber/Broadcaster";
+import { TableCheck } from "typeorm/browser/schema-builder/table/TableCheck";
+import { IsolationLevel } from "typeorm/browser/driver/types/IsolationLevel";
+import { TableExclusion } from "typeorm/browser/schema-builder/table/TableExclusion";
+import { QueryResult } from "typeorm/browser/query-runner/QueryResult";
+import { ReplicationMode } from "typeorm/browser/driver/types/ReplicationMode";
 /**
  * Runs queries on a single database connection.
  */
diff --git a/node_modules/typeorm/browser/repository/AbstractRepository.d.ts b/node_modules/typeorm/browser/repository/AbstractRepository.d.ts
index 49b57c0..36fe7f1 100644
--- a/node_modules/typeorm/browser/repository/AbstractRepository.d.ts
+++ b/node_modules/typeorm/browser/repository/AbstractRepository.d.ts
@@ -1,9 +1,9 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { Repository } from "./Repository";
-import { TreeRepository } from "./TreeRepository";
-import { ObjectType } from "../common/ObjectType";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { Repository } from "typeorm/browser/repository/Repository";
+import { TreeRepository } from "typeorm/browser/repository/TreeRepository";
+import { ObjectType } from "typeorm/browser/common/ObjectType";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
 /**
  * Provides abstract class for custom repositories that do not inherit from original orm Repository.
  * Contains all most-necessary methods to simplify code in the custom repository.
diff --git a/node_modules/typeorm/browser/repository/BaseEntity.d.ts b/node_modules/typeorm/browser/repository/BaseEntity.d.ts
index 6825e57..edf6a37 100644
--- a/node_modules/typeorm/browser/repository/BaseEntity.d.ts
+++ b/node_modules/typeorm/browser/repository/BaseEntity.d.ts
@@ -1,20 +1,20 @@
-import { Repository } from "./Repository";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { DeepPartial } from "../common/DeepPartial";
-import { SaveOptions } from "./SaveOptions";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { RemoveOptions } from "./RemoveOptions";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { DataSource } from "../data-source";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { ObjectId } from "../driver/mongodb/typings";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { UpsertOptions } from "./UpsertOptions";
-import { EntityTarget } from "../common/EntityTarget";
-import { PickKeysByType } from "../common/PickKeysByType";
+import { Repository } from "typeorm/browser/repository/Repository";
+import { FindOptionsWhere } from "typeorm/browser/find-options/FindOptionsWhere";
+import { DeepPartial } from "typeorm/browser/common/DeepPartial";
+import { SaveOptions } from "typeorm/browser/repository/SaveOptions";
+import { FindOneOptions } from "typeorm/browser/find-options/FindOneOptions";
+import { RemoveOptions } from "typeorm/browser/repository/RemoveOptions";
+import { FindManyOptions } from "typeorm/browser/find-options/FindManyOptions";
+import { DataSource } from "typeorm/browser/data-source";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { InsertResult } from "typeorm/browser/query-builder/result/InsertResult";
+import { UpdateResult } from "typeorm/browser/query-builder/result/UpdateResult";
+import { DeleteResult } from "typeorm/browser/query-builder/result/DeleteResult";
+import { ObjectId } from "typeorm/browser/driver/mongodb/typings";
+import { QueryDeepPartialEntity } from "typeorm/browser/query-builder/QueryPartialEntity";
+import { UpsertOptions } from "typeorm/browser/repository/UpsertOptions";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { PickKeysByType } from "typeorm/browser/common/PickKeysByType";
 /**
  * Base abstract entity for all entities, used in ActiveRecord patterns.
  */
diff --git a/node_modules/typeorm/browser/repository/MongoRepository.d.ts b/node_modules/typeorm/browser/repository/MongoRepository.d.ts
index 6cb8b58..82d3ab1 100644
--- a/node_modules/typeorm/browser/repository/MongoRepository.d.ts
+++ b/node_modules/typeorm/browser/repository/MongoRepository.d.ts
@@ -1,13 +1,13 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { Repository } from "./Repository";
-import { MongoFindManyOptions } from "../find-options/mongodb/MongoFindManyOptions";
-import { MongoEntityManager } from "../entity-manager/MongoEntityManager";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { MongoFindOneOptions } from "../find-options/mongodb/MongoFindOneOptions";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { CreateIndexesOptions, ObjectId, ReplaceOptions, AggregateOptions, AggregationCursor, AnyBulkWriteOperation, BulkWriteOptions, BulkWriteResult, Collection, CollStats, CollStatsOptions, CommandOperationOptions, CountOptions, DeleteOptions, DeleteResult, Document, Filter, FilterOperators, FindCursor, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, IndexDescription, InsertManyResult, InsertOneOptions, InsertOneResult, ListIndexesCursor, ListIndexesOptions, OrderedBulkOperation, UnorderedBulkOperation, UpdateFilter, UpdateOptions, UpdateResult } from "../driver/mongodb/typings";
-import { FindManyOptions } from "../find-options/FindManyOptions";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { Repository } from "typeorm/browser/repository/Repository";
+import { MongoFindManyOptions } from "typeorm/browser/find-options/mongodb/MongoFindManyOptions";
+import { MongoEntityManager } from "typeorm/browser/entity-manager/MongoEntityManager";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { MongoFindOneOptions } from "typeorm/browser/find-options/mongodb/MongoFindOneOptions";
+import { FindOneOptions } from "typeorm/browser/find-options/FindOneOptions";
+import { CreateIndexesOptions, ObjectId, ReplaceOptions, AggregateOptions, AggregationCursor, AnyBulkWriteOperation, BulkWriteOptions, BulkWriteResult, Collection, CollStats, CollStatsOptions, CommandOperationOptions, CountOptions, DeleteOptions, DeleteResult, Document, Filter, FilterOperators, FindCursor, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, IndexDescription, InsertManyResult, InsertOneOptions, InsertOneResult, ListIndexesCursor, ListIndexesOptions, OrderedBulkOperation, UnorderedBulkOperation, UpdateFilter, UpdateOptions, UpdateResult, CountDocumentsOptions } from "typeorm/browser/driver/mongodb/typings";
+import { FindManyOptions } from "typeorm/browser/find-options/FindManyOptions";
 /**
  * Repository used to manage mongodb documents of a single entity type.
  */
@@ -111,6 +111,10 @@ export declare class MongoRepository<Entity extends ObjectLiteral> extends Repos
      * Count number of matching documents in the db to a query.
      */
     count(query?: ObjectLiteral, options?: CountOptions): Promise<number>;
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments(query?: ObjectLiteral, options?: CountDocumentsOptions): Promise<number>;
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/browser/repository/MongoRepository.js b/node_modules/typeorm/browser/repository/MongoRepository.js
index 38704df..b448c37 100644
--- a/node_modules/typeorm/browser/repository/MongoRepository.js
+++ b/node_modules/typeorm/browser/repository/MongoRepository.js
@@ -138,6 +138,12 @@ export class MongoRepository extends Repository {
     count(query, options) {
         return this.manager.count(this.metadata.target, query || {}, options);
     }
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments(query, options) {
+        return this.manager.countDocuments(this.metadata.target, query || {}, options);
+    }
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/browser/repository/MongoRepository.js.map b/node_modules/typeorm/browser/repository/MongoRepository.js.map
index 657b367..1dbef7f 100644
--- a/node_modules/typeorm/browser/repository/MongoRepository.js.map
+++ b/node_modules/typeorm/browser/repository/MongoRepository.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/repository/MongoRepository.ts"],"names":[],"mappings":"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","file":"MongoRepository.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { Repository } from \"./Repository\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TypeORMError } from \"../error/TypeORMError\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\n\nimport {\n    CreateIndexesOptions,\n    ObjectId,\n    ReplaceOptions,\n    //\n    AggregateOptions,\n    AggregationCursor,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    BulkWriteResult,\n    Collection,\n    CollStats,\n    CollStatsOptions,\n    CommandOperationOptions,\n    CountOptions,\n    DeleteOptions,\n    DeleteResult,\n    Document,\n    Filter,\n    FilterOperators,\n    FindCursor,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    FindOneAndUpdateOptions,\n    IndexDescription,\n    InsertManyResult,\n    InsertOneOptions,\n    InsertOneResult,\n    ListIndexesCursor,\n    ListIndexesOptions,\n    OrderedBulkOperation,\n    UnorderedBulkOperation,\n    UpdateFilter,\n    UpdateOptions,\n    UpdateResult,\n} from \"../driver/mongodb/typings\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\n\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nexport class MongoRepository<\n    Entity extends ObjectLiteral,\n> extends Repository<Entity> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: MongoEntityManager\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n    }\n\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    createQueryBuilder(\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(\n        options?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    findBy(where: any): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(where: any): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    findByIds(ids: any[], options?: any): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, options)\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne(\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy(where: any): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(where: any): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<T = any>(query?: Filter<Entity>): FindCursor<T> {\n        return this.manager.createCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor(query?: Filter<Entity>): FindCursor<Entity> {\n        return this.manager.createEntityCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<R = any>(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregate<R>(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregateEntity(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite(\n        operations: AnyBulkWriteOperation[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        return this.manager.bulkWrite(this.metadata.target, operations, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.count(this.metadata.target, query || {}, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.countBy(this.metadata.target, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex(\n        fieldOrSpec: string | any,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        return this.manager.createCollectionIndex(\n            this.metadata.target,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes(indexSpecs: IndexDescription[]): Promise<string[]> {\n        return this.manager.createCollectionIndexes(\n            this.metadata.target,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteMany(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteOne(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct(\n        key: string,\n        query: ObjectLiteral,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.distinct(\n            this.metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex(\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.dropCollectionIndex(\n            this.metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes(): Promise<any> {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete(\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndDelete(\n            this.metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace(\n        query: ObjectLiteral,\n        replacement: Object,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndReplace(\n            this.metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate(\n        query: ObjectLiteral,\n        update: Object,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndUpdate(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes(): Promise<any> {\n        return this.manager.collectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists(indexes: string | string[]): Promise<boolean> {\n        return this.manager.collectionIndexExists(\n            this.metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n        return this.manager.collectionIndexInformation(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n        return this.manager.initializeOrderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        return this.manager.initializeUnorderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany(\n        docs: ObjectLiteral[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult<Document>> {\n        return this.manager.insertMany(this.metadata.tableName, docs, options)\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne(\n        doc: ObjectLiteral,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        return this.manager.insertOne(this.metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped(): Promise<any> {\n        return this.manager.isCapped(this.metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n        return this.manager.listCollectionIndexes(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename(\n        newName: string,\n        options?: { dropTarget?: boolean },\n    ): Promise<Collection<Document>> {\n        return this.manager.rename(this.metadata.tableName, newName, options)\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne(\n        query: ObjectLiteral,\n        doc: ObjectLiteral,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.replaceOne(\n            this.metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats(options?: CollStatsOptions): Promise<CollStats> {\n        return this.manager.stats(this.metadata.tableName, options)\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateMany(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateOne(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/repository/MongoRepository.ts"],"names":[],"mappings":"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","file":"MongoRepository.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { Repository } from \"./Repository\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TypeORMError } from \"../error/TypeORMError\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\n\nimport {\n    CreateIndexesOptions,\n    ObjectId,\n    ReplaceOptions,\n    //\n    AggregateOptions,\n    AggregationCursor,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    BulkWriteResult,\n    Collection,\n    CollStats,\n    CollStatsOptions,\n    CommandOperationOptions,\n    CountOptions,\n    DeleteOptions,\n    DeleteResult,\n    Document,\n    Filter,\n    FilterOperators,\n    FindCursor,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    FindOneAndUpdateOptions,\n    IndexDescription,\n    InsertManyResult,\n    InsertOneOptions,\n    InsertOneResult,\n    ListIndexesCursor,\n    ListIndexesOptions,\n    OrderedBulkOperation,\n    UnorderedBulkOperation,\n    UpdateFilter,\n    UpdateOptions,\n    UpdateResult,\n    CountDocumentsOptions,\n} from \"../driver/mongodb/typings\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\n\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nexport class MongoRepository<\n    Entity extends ObjectLiteral,\n> extends Repository<Entity> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: MongoEntityManager\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n    }\n\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    createQueryBuilder(\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(\n        options?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    findBy(where: any): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(where: any): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    findByIds(ids: any[], options?: any): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, options)\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne(\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy(where: any): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(where: any): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<T = any>(query?: Filter<Entity>): FindCursor<T> {\n        return this.manager.createCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor(query?: Filter<Entity>): FindCursor<Entity> {\n        return this.manager.createEntityCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<R = any>(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregate<R>(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregateEntity(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite(\n        operations: AnyBulkWriteOperation[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        return this.manager.bulkWrite(this.metadata.target, operations, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.count(this.metadata.target, query || {}, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countDocuments(\n        query?: ObjectLiteral,\n        options?: CountDocumentsOptions,\n    ): Promise<number> {\n        return this.manager.countDocuments(\n            this.metadata.target,\n            query || {},\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.countBy(this.metadata.target, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex(\n        fieldOrSpec: string | any,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        return this.manager.createCollectionIndex(\n            this.metadata.target,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes(indexSpecs: IndexDescription[]): Promise<string[]> {\n        return this.manager.createCollectionIndexes(\n            this.metadata.target,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteMany(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteOne(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct(\n        key: string,\n        query: ObjectLiteral,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.distinct(\n            this.metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex(\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.dropCollectionIndex(\n            this.metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes(): Promise<any> {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete(\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndDelete(\n            this.metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace(\n        query: ObjectLiteral,\n        replacement: Object,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndReplace(\n            this.metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate(\n        query: ObjectLiteral,\n        update: Object,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndUpdate(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes(): Promise<any> {\n        return this.manager.collectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists(indexes: string | string[]): Promise<boolean> {\n        return this.manager.collectionIndexExists(\n            this.metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n        return this.manager.collectionIndexInformation(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n        return this.manager.initializeOrderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        return this.manager.initializeUnorderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany(\n        docs: ObjectLiteral[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult<Document>> {\n        return this.manager.insertMany(this.metadata.tableName, docs, options)\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne(\n        doc: ObjectLiteral,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        return this.manager.insertOne(this.metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped(): Promise<any> {\n        return this.manager.isCapped(this.metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n        return this.manager.listCollectionIndexes(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename(\n        newName: string,\n        options?: { dropTarget?: boolean },\n    ): Promise<Collection<Document>> {\n        return this.manager.rename(this.metadata.tableName, newName, options)\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne(\n        query: ObjectLiteral,\n        doc: ObjectLiteral,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.replaceOne(\n            this.metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats(options?: CollStatsOptions): Promise<CollStats> {\n        return this.manager.stats(this.metadata.tableName, options)\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateMany(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateOne(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/repository/Repository.d.ts b/node_modules/typeorm/browser/repository/Repository.d.ts
index 16cd4b1..b73cede 100644
--- a/node_modules/typeorm/browser/repository/Repository.d.ts
+++ b/node_modules/typeorm/browser/repository/Repository.d.ts
@@ -1,21 +1,21 @@
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { DeepPartial } from "../common/DeepPartial";
-import { SaveOptions } from "./SaveOptions";
-import { RemoveOptions } from "./RemoveOptions";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { ObjectId } from "../driver/mongodb/typings";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { UpsertOptions } from "./UpsertOptions";
-import { EntityTarget } from "../common/EntityTarget";
-import { PickKeysByType } from "../common/PickKeysByType";
+import { FindManyOptions } from "typeorm/browser/find-options/FindManyOptions";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { FindOneOptions } from "typeorm/browser/find-options/FindOneOptions";
+import { DeepPartial } from "typeorm/browser/common/DeepPartial";
+import { SaveOptions } from "typeorm/browser/repository/SaveOptions";
+import { RemoveOptions } from "typeorm/browser/repository/RemoveOptions";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { DeleteResult } from "typeorm/browser/query-builder/result/DeleteResult";
+import { UpdateResult } from "typeorm/browser/query-builder/result/UpdateResult";
+import { InsertResult } from "typeorm/browser/query-builder/result/InsertResult";
+import { QueryDeepPartialEntity } from "typeorm/browser/query-builder/QueryPartialEntity";
+import { ObjectId } from "typeorm/browser/driver/mongodb/typings";
+import { FindOptionsWhere } from "typeorm/browser/find-options/FindOptionsWhere";
+import { UpsertOptions } from "typeorm/browser/repository/UpsertOptions";
+import { EntityTarget } from "typeorm/browser/common/EntityTarget";
+import { PickKeysByType } from "typeorm/browser/common/PickKeysByType";
 /**
  * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.
  */
@@ -37,7 +37,7 @@ export declare class Repository<Entity extends ObjectLiteral> {
     /**
      * Entity metadata of the entity current repository manages.
      */
-    get metadata(): import("..").EntityMetadata;
+    get metadata(): import("typeorm/browser").EntityMetadata;
     constructor(target: EntityTarget<Entity>, manager: EntityManager, queryRunner?: QueryRunner);
     /**
      * Creates a new query builder that can be used to build a SQL query.
@@ -308,5 +308,5 @@ export declare class Repository<Entity extends ObjectLiteral> {
     /**
      * Extends repository with provided functions.
      */
-    extend<CustomRepository>(custom: CustomRepository & ThisType<this & CustomRepository>): this & CustomRepository;
+    extend<CustomRepository>(customs: CustomRepository & ThisType<this & CustomRepository>): this & CustomRepository;
 }
diff --git a/node_modules/typeorm/browser/repository/Repository.js b/node_modules/typeorm/browser/repository/Repository.js
index c28c0e5..2226688 100644
--- a/node_modules/typeorm/browser/repository/Repository.js
+++ b/node_modules/typeorm/browser/repository/Repository.js
@@ -300,17 +300,21 @@ export class Repository {
     /**
      * Extends repository with provided functions.
      */
-    extend(custom) {
+    extend(customs) {
         // return {
         //     ...this,
         //     ...custom
         // };
         const thisRepo = this.constructor;
         const { target, manager, queryRunner } = this;
-        const cls = new (class extends thisRepo {
-        })(target, manager, queryRunner);
-        Object.assign(cls, custom);
-        return cls;
+        const ChildClass = class extends thisRepo {
+            constructor(target, manager, queryRunner) {
+                super(target, manager, queryRunner);
+            }
+        };
+        for (const custom in customs)
+            ChildClass.prototype[custom] = customs[custom];
+        return new ChildClass(target, manager, queryRunner);
     }
 }
 
diff --git a/node_modules/typeorm/browser/repository/Repository.js.map b/node_modules/typeorm/browser/repository/Repository.js.map
index 57676b2..696eb7d 100644
--- a/node_modules/typeorm/browser/repository/Repository.js.map
+++ b/node_modules/typeorm/browser/repository/Repository.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../browser/src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity target that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    readonly target: EntityTarget<Entity>\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    get metadata() {\n        return this.manager.connection.getMetadata(this.target)\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        target: EntityTarget<Entity>,\n        manager: EntityManager,\n        queryRunner?: QueryRunner,\n    ) {\n        this.target = target\n        this.manager = manager\n        this.queryRunner = queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(\n            this.metadata.target as any,\n            alias || this.metadata.targetName,\n            queryRunner || this.queryRunner,\n        )\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity\n\n    /**\n     * Creates new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(\n        plainEntityLikeOrPlainEntityLikes?:\n            | DeepPartial<Entity>\n            | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        return this.manager.create<any>(\n            this.metadata.target as any,\n            plainEntityLikeOrPlainEntityLikes as any,\n        )\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        return this.manager.merge(\n            this.metadata.target as any,\n            mergeIntoEntity,\n            ...entityLikes,\n        )\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.save<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(\n        entityOrEntities: Entity | Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        return this.manager.remove(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.softRemove<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.recover<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.update(\n            this.metadata.target as any,\n            criteria as any,\n            partialEntity,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    upsert(\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        return this.manager.upsert(\n            this.metadata.target as any,\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target as any, criteria as any)\n    }\n\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.softDelete(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.restore(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Checks whether any entity exists that match given options.\n     */\n    exist(options?: FindManyOptions<Entity>): Promise<boolean> {\n        return this.manager.exists(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        return this.manager.countBy(this.metadata.target, where)\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.sum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.average(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.minimum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.maximum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find(options?: FindManyOptions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds(ids: any[]): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne(options: FindOneOptions<Entity>): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target)\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.increment(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.decrement(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Extends repository with provided functions.\n     */\n    extend<CustomRepository>(\n        custom: CustomRepository & ThisType<this & CustomRepository>,\n    ): this & CustomRepository {\n        // return {\n        //     ...this,\n        //     ...custom\n        // };\n        const thisRepo = this.constructor as new (...args: any[]) => typeof this\n        const { target, manager, queryRunner } = this\n        const cls = new (class extends thisRepo {})(\n            target,\n            manager,\n            queryRunner,\n        )\n        Object.assign(cls, custom)\n        return cls as any\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../browser/src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity target that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    readonly target: EntityTarget<Entity>\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    get metadata() {\n        return this.manager.connection.getMetadata(this.target)\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        target: EntityTarget<Entity>,\n        manager: EntityManager,\n        queryRunner?: QueryRunner,\n    ) {\n        this.target = target\n        this.manager = manager\n        this.queryRunner = queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(\n            this.metadata.target as any,\n            alias || this.metadata.targetName,\n            queryRunner || this.queryRunner,\n        )\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity\n\n    /**\n     * Creates new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(\n        plainEntityLikeOrPlainEntityLikes?:\n            | DeepPartial<Entity>\n            | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        return this.manager.create<any>(\n            this.metadata.target as any,\n            plainEntityLikeOrPlainEntityLikes as any,\n        )\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        return this.manager.merge(\n            this.metadata.target as any,\n            mergeIntoEntity,\n            ...entityLikes,\n        )\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.save<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(\n        entityOrEntities: Entity | Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        return this.manager.remove(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.softRemove<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.recover<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.update(\n            this.metadata.target as any,\n            criteria as any,\n            partialEntity,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    upsert(\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        return this.manager.upsert(\n            this.metadata.target as any,\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target as any, criteria as any)\n    }\n\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.softDelete(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.restore(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Checks whether any entity exists that match given options.\n     */\n    exist(options?: FindManyOptions<Entity>): Promise<boolean> {\n        return this.manager.exists(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        return this.manager.countBy(this.metadata.target, where)\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.sum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.average(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.minimum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.maximum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find(options?: FindManyOptions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds(ids: any[]): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne(options: FindOneOptions<Entity>): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target)\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.increment(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.decrement(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Extends repository with provided functions.\n     */\n    extend<CustomRepository>(\n        customs: CustomRepository & ThisType<this & CustomRepository>,\n    ): this & CustomRepository {\n        // return {\n        //     ...this,\n        //     ...custom\n        // };\n        const thisRepo: any = this.constructor\n        const { target, manager, queryRunner } = this\n        const ChildClass = class extends thisRepo {\n            constructor(\n                target: EntityTarget<Entity>,\n                manager: EntityManager,\n                queryRunner?: QueryRunner,\n            ) {\n                super(target, manager, queryRunner)\n            }\n        }\n        for (const custom in customs)\n            ChildClass.prototype[custom] = customs[custom]\n        return new ChildClass(target, manager, queryRunner) as any\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/browser/repository/TreeRepository.d.ts b/node_modules/typeorm/browser/repository/TreeRepository.d.ts
index 1564efe..2bdf78a 100644
--- a/node_modules/typeorm/browser/repository/TreeRepository.d.ts
+++ b/node_modules/typeorm/browser/repository/TreeRepository.d.ts
@@ -1,7 +1,7 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { FindTreeOptions } from "../find-options/FindTreeOptions";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { Repository } from "./Repository";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { FindTreeOptions } from "typeorm/browser/find-options/FindTreeOptions";
+import { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import { Repository } from "typeorm/browser/repository/Repository";
 /**
  * Repository with additional functions to work with trees.
  *
diff --git a/node_modules/typeorm/browser/repository/UpsertOptions.d.ts b/node_modules/typeorm/browser/repository/UpsertOptions.d.ts
index 3cad660..1fb1907 100644
--- a/node_modules/typeorm/browser/repository/UpsertOptions.d.ts
+++ b/node_modules/typeorm/browser/repository/UpsertOptions.d.ts
@@ -1,5 +1,5 @@
-import { InsertOrUpdateOptions } from "../query-builder/InsertOrUpdateOptions";
-import { UpsertType } from "../driver/types/UpsertType";
+import { InsertOrUpdateOptions } from "typeorm/browser/query-builder/InsertOrUpdateOptions";
+import { UpsertType } from "typeorm/browser/driver/types/UpsertType";
 /**
  * Special options passed to Repository#upsert
  */
diff --git a/node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.d.ts b/node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.d.ts
index e1b3d01..8cccf4e 100644
--- a/node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/RdbmsSchemaBuilder.d.ts
@@ -1,10 +1,10 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { SchemaBuilder } from "./SchemaBuilder";
-import { SqlInMemory } from "../driver/SqlInMemory";
-import { TableColumnOptions } from "./options/TableColumnOptions";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { SchemaBuilder } from "typeorm/browser/schema-builder/SchemaBuilder";
+import { SqlInMemory } from "typeorm/browser/driver/SqlInMemory";
+import { TableColumnOptions } from "typeorm/browser/schema-builder/options/TableColumnOptions";
 /**
  * Creates complete tables schemas in the database based on the entity metadatas.
  *
diff --git a/node_modules/typeorm/browser/schema-builder/SchemaBuilder.d.ts b/node_modules/typeorm/browser/schema-builder/SchemaBuilder.d.ts
index d705d14..4cac533 100644
--- a/node_modules/typeorm/browser/schema-builder/SchemaBuilder.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/SchemaBuilder.d.ts
@@ -1,4 +1,4 @@
-import { SqlInMemory } from "../driver/SqlInMemory";
+import { SqlInMemory } from "typeorm/browser/driver/SqlInMemory";
 /**
  * Creates complete tables schemas in the database based on the entity metadatas.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/options/TableOptions.d.ts b/node_modules/typeorm/browser/schema-builder/options/TableOptions.d.ts
index e3b2354..c3a279f 100644
--- a/node_modules/typeorm/browser/schema-builder/options/TableOptions.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/options/TableOptions.d.ts
@@ -1,9 +1,9 @@
-import { TableColumnOptions } from "./TableColumnOptions";
-import { TableIndexOptions } from "./TableIndexOptions";
-import { TableForeignKeyOptions } from "./TableForeignKeyOptions";
-import { TableUniqueOptions } from "./TableUniqueOptions";
-import { TableCheckOptions } from "./TableCheckOptions";
-import { TableExclusionOptions } from "./TableExclusionOptions";
+import { TableColumnOptions } from "typeorm/browser/schema-builder/options/TableColumnOptions";
+import { TableIndexOptions } from "typeorm/browser/schema-builder/options/TableIndexOptions";
+import { TableForeignKeyOptions } from "typeorm/browser/schema-builder/options/TableForeignKeyOptions";
+import { TableUniqueOptions } from "typeorm/browser/schema-builder/options/TableUniqueOptions";
+import { TableCheckOptions } from "typeorm/browser/schema-builder/options/TableCheckOptions";
+import { TableExclusionOptions } from "typeorm/browser/schema-builder/options/TableExclusionOptions";
 /**
  * Table options.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/options/ViewOptions.d.ts b/node_modules/typeorm/browser/schema-builder/options/ViewOptions.d.ts
index 6349c30..f07cce4 100644
--- a/node_modules/typeorm/browser/schema-builder/options/ViewOptions.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/options/ViewOptions.d.ts
@@ -1,4 +1,4 @@
-import { DataSource, SelectQueryBuilder } from "../..";
+import { DataSource, SelectQueryBuilder } from "typeorm/browser";
 /**
  * View options.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/table/Table.d.ts b/node_modules/typeorm/browser/schema-builder/table/Table.d.ts
index 0b38f0a..cc845dd 100644
--- a/node_modules/typeorm/browser/schema-builder/table/Table.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/table/Table.d.ts
@@ -1,12 +1,12 @@
-import { TableColumn } from "./TableColumn";
-import { TableIndex } from "./TableIndex";
-import { TableForeignKey } from "./TableForeignKey";
-import { Driver } from "../../driver/Driver";
-import { TableOptions } from "../options/TableOptions";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { TableUnique } from "./TableUnique";
-import { TableCheck } from "./TableCheck";
-import { TableExclusion } from "./TableExclusion";
+import { TableColumn } from "typeorm/browser/schema-builder/table/TableColumn";
+import { TableIndex } from "typeorm/browser/schema-builder/table/TableIndex";
+import { TableForeignKey } from "typeorm/browser/schema-builder/table/TableForeignKey";
+import { Driver } from "typeorm/browser/driver/Driver";
+import { TableOptions } from "typeorm/browser/schema-builder/options/TableOptions";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { TableUnique } from "typeorm/browser/schema-builder/table/TableUnique";
+import { TableCheck } from "typeorm/browser/schema-builder/table/TableCheck";
+import { TableExclusion } from "typeorm/browser/schema-builder/table/TableExclusion";
 /**
  * Table in the database represented in this class.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/table/TableCheck.d.ts b/node_modules/typeorm/browser/schema-builder/table/TableCheck.d.ts
index 14bb786..edbf979 100644
--- a/node_modules/typeorm/browser/schema-builder/table/TableCheck.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/table/TableCheck.d.ts
@@ -1,5 +1,5 @@
-import { TableCheckOptions } from "../options/TableCheckOptions";
-import { CheckMetadata } from "../../metadata/CheckMetadata";
+import { TableCheckOptions } from "typeorm/browser/schema-builder/options/TableCheckOptions";
+import { CheckMetadata } from "typeorm/browser/metadata/CheckMetadata";
 /**
  * Database's table check constraint stored in this class.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/table/TableColumn.d.ts b/node_modules/typeorm/browser/schema-builder/table/TableColumn.d.ts
index 0eec9b3..e7809ad 100644
--- a/node_modules/typeorm/browser/schema-builder/table/TableColumn.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/table/TableColumn.d.ts
@@ -1,4 +1,4 @@
-import { TableColumnOptions } from "../options/TableColumnOptions";
+import { TableColumnOptions } from "typeorm/browser/schema-builder/options/TableColumnOptions";
 /**
  * Table's columns in the database represented in this class.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/table/TableExclusion.d.ts b/node_modules/typeorm/browser/schema-builder/table/TableExclusion.d.ts
index 51e7f6a..5d43fe2 100644
--- a/node_modules/typeorm/browser/schema-builder/table/TableExclusion.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/table/TableExclusion.d.ts
@@ -1,5 +1,5 @@
-import { TableExclusionOptions } from "../options/TableExclusionOptions";
-import { ExclusionMetadata } from "../../metadata/ExclusionMetadata";
+import { TableExclusionOptions } from "typeorm/browser/schema-builder/options/TableExclusionOptions";
+import { ExclusionMetadata } from "typeorm/browser/metadata/ExclusionMetadata";
 /**
  * Database's table exclusion constraint stored in this class.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/table/TableForeignKey.d.ts b/node_modules/typeorm/browser/schema-builder/table/TableForeignKey.d.ts
index 9979786..5c966f5 100644
--- a/node_modules/typeorm/browser/schema-builder/table/TableForeignKey.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/table/TableForeignKey.d.ts
@@ -1,6 +1,6 @@
-import { ForeignKeyMetadata } from "../../metadata/ForeignKeyMetadata";
-import { TableForeignKeyOptions } from "../options/TableForeignKeyOptions";
-import { Driver } from "../../driver/Driver";
+import { ForeignKeyMetadata } from "typeorm/browser/metadata/ForeignKeyMetadata";
+import { TableForeignKeyOptions } from "typeorm/browser/schema-builder/options/TableForeignKeyOptions";
+import { Driver } from "typeorm/browser/driver/Driver";
 /**
  * Foreign key from the database stored in this class.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/table/TableIndex.d.ts b/node_modules/typeorm/browser/schema-builder/table/TableIndex.d.ts
index 4cc4e3f..1b76233 100644
--- a/node_modules/typeorm/browser/schema-builder/table/TableIndex.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/table/TableIndex.d.ts
@@ -1,5 +1,5 @@
-import { IndexMetadata } from "../../metadata/IndexMetadata";
-import { TableIndexOptions } from "../options/TableIndexOptions";
+import { IndexMetadata } from "typeorm/browser/metadata/IndexMetadata";
+import { TableIndexOptions } from "typeorm/browser/schema-builder/options/TableIndexOptions";
 /**
  * Database's table index stored in this class.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/table/TableUnique.d.ts b/node_modules/typeorm/browser/schema-builder/table/TableUnique.d.ts
index a658eef..85f119c 100644
--- a/node_modules/typeorm/browser/schema-builder/table/TableUnique.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/table/TableUnique.d.ts
@@ -1,5 +1,5 @@
-import { TableUniqueOptions } from "../options/TableUniqueOptions";
-import { UniqueMetadata } from "../../metadata/UniqueMetadata";
+import { TableUniqueOptions } from "typeorm/browser/schema-builder/options/TableUniqueOptions";
+import { UniqueMetadata } from "typeorm/browser/metadata/UniqueMetadata";
 /**
  * Database's table unique constraint stored in this class.
  */
diff --git a/node_modules/typeorm/browser/schema-builder/view/View.d.ts b/node_modules/typeorm/browser/schema-builder/view/View.d.ts
index 7726301..5f552f1 100644
--- a/node_modules/typeorm/browser/schema-builder/view/View.d.ts
+++ b/node_modules/typeorm/browser/schema-builder/view/View.d.ts
@@ -1,5 +1,5 @@
-import { DataSource, Driver, EntityMetadata, SelectQueryBuilder, TableIndex } from "../..";
-import { ViewOptions } from "../options/ViewOptions";
+import { DataSource, Driver, EntityMetadata, SelectQueryBuilder, TableIndex } from "typeorm/browser";
+import { ViewOptions } from "typeorm/browser/schema-builder/options/ViewOptions";
 /**
  * View in the database represented in this class.
  */
diff --git a/node_modules/typeorm/browser/subscriber/Broadcaster.d.ts b/node_modules/typeorm/browser/subscriber/Broadcaster.d.ts
index d6ea4e2..9f1e1b1 100644
--- a/node_modules/typeorm/browser/subscriber/Broadcaster.d.ts
+++ b/node_modules/typeorm/browser/subscriber/Broadcaster.d.ts
@@ -1,10 +1,10 @@
-import { EntitySubscriberInterface } from "./EntitySubscriberInterface";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { BroadcasterResult } from "./BroadcasterResult";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
+import { EntitySubscriberInterface } from "typeorm/browser/subscriber/EntitySubscriberInterface";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { BroadcasterResult } from "typeorm/browser/subscriber/BroadcasterResult";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
 interface BroadcasterEvents {
     BeforeTransactionCommit: () => void;
     AfterTransactionCommit: () => void;
diff --git a/node_modules/typeorm/browser/subscriber/EntitySubscriberInterface.d.ts b/node_modules/typeorm/browser/subscriber/EntitySubscriberInterface.d.ts
index 2449b4c..01ce943 100644
--- a/node_modules/typeorm/browser/subscriber/EntitySubscriberInterface.d.ts
+++ b/node_modules/typeorm/browser/subscriber/EntitySubscriberInterface.d.ts
@@ -1,12 +1,12 @@
-import { TransactionCommitEvent } from "./event/TransactionCommitEvent";
-import { TransactionRollbackEvent } from "./event/TransactionRollbackEvent";
-import { TransactionStartEvent } from "./event/TransactionStartEvent";
-import { UpdateEvent } from "./event/UpdateEvent";
-import { RemoveEvent } from "./event/RemoveEvent";
-import { InsertEvent } from "./event/InsertEvent";
-import { LoadEvent } from "./event/LoadEvent";
-import { SoftRemoveEvent } from "./event/SoftRemoveEvent";
-import { RecoverEvent } from "./event/RecoverEvent";
+import { TransactionCommitEvent } from "typeorm/browser/subscriber/event/TransactionCommitEvent";
+import { TransactionRollbackEvent } from "typeorm/browser/subscriber/event/TransactionRollbackEvent";
+import { TransactionStartEvent } from "typeorm/browser/subscriber/event/TransactionStartEvent";
+import { UpdateEvent } from "typeorm/browser/subscriber/event/UpdateEvent";
+import { RemoveEvent } from "typeorm/browser/subscriber/event/RemoveEvent";
+import { InsertEvent } from "typeorm/browser/subscriber/event/InsertEvent";
+import { LoadEvent } from "typeorm/browser/subscriber/event/LoadEvent";
+import { SoftRemoveEvent } from "typeorm/browser/subscriber/event/SoftRemoveEvent";
+import { RecoverEvent } from "typeorm/browser/subscriber/event/RecoverEvent";
 /**
  * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/InsertEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/InsertEvent.d.ts
index 93ff38c..2143571 100644
--- a/node_modules/typeorm/browser/subscriber/event/InsertEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/InsertEvent.d.ts
@@ -1,7 +1,7 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
 /**
  * InsertEvent is an object that broadcaster sends to the entity subscriber when entity is inserted to the database.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/LoadEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/LoadEvent.d.ts
index 3967696..f66f8a3 100644
--- a/node_modules/typeorm/browser/subscriber/event/LoadEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/LoadEvent.d.ts
@@ -1,7 +1,7 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
 /**
  * LoadEvent is an object that broadcaster sends to the entity subscriber when an entity is loaded from the database.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/RecoverEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/RecoverEvent.d.ts
index 0a2e2c3..208515e 100644
--- a/node_modules/typeorm/browser/subscriber/event/RecoverEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/RecoverEvent.d.ts
@@ -1,4 +1,4 @@
-import { RemoveEvent } from "./RemoveEvent";
+import { RemoveEvent } from "typeorm/browser/subscriber/event/RemoveEvent";
 /**
  * RecoverEvent is an object that broadcaster sends to the entity subscriber when entity is being recovered in the database.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/RemoveEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/RemoveEvent.d.ts
index 9b561ae..abe69f2 100644
--- a/node_modules/typeorm/browser/subscriber/event/RemoveEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/RemoveEvent.d.ts
@@ -1,7 +1,7 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
 /**
  * RemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being removed to the database.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/SoftRemoveEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/SoftRemoveEvent.d.ts
index 8c77e8f..a5ccf24 100644
--- a/node_modules/typeorm/browser/subscriber/event/SoftRemoveEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/SoftRemoveEvent.d.ts
@@ -1,4 +1,4 @@
-import { RemoveEvent } from "./RemoveEvent";
+import { RemoveEvent } from "typeorm/browser/subscriber/event/RemoveEvent";
 /**
  * SoftRemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being soft removed to the database.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/TransactionCommitEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/TransactionCommitEvent.d.ts
index 4fb3fca..4ef77f1 100644
--- a/node_modules/typeorm/browser/subscriber/event/TransactionCommitEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/TransactionCommitEvent.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * TransactionCommitEvent is an object that broadcaster sends to the entity subscriber when an transaction is committed.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/TransactionRollbackEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/TransactionRollbackEvent.d.ts
index 263f620..f3c95c5 100644
--- a/node_modules/typeorm/browser/subscriber/event/TransactionRollbackEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/TransactionRollbackEvent.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * TransactionRollbackEvent is an object that broadcaster sends to the entity subscriber on transaction rollback.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/TransactionStartEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/TransactionStartEvent.d.ts
index 1833ee8..e53b38d 100644
--- a/node_modules/typeorm/browser/subscriber/event/TransactionStartEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/TransactionStartEvent.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
 /**
  * TransactionStartEvent is an object that broadcaster sends to the entity subscriber before transaction is started.
  */
diff --git a/node_modules/typeorm/browser/subscriber/event/UpdateEvent.d.ts b/node_modules/typeorm/browser/subscriber/event/UpdateEvent.d.ts
index 80b2ffc..e234d1a 100644
--- a/node_modules/typeorm/browser/subscriber/event/UpdateEvent.d.ts
+++ b/node_modules/typeorm/browser/subscriber/event/UpdateEvent.d.ts
@@ -1,10 +1,10 @@
-import { ColumnMetadata } from "../../metadata/ColumnMetadata";
-import { RelationMetadata } from "../../metadata/RelationMetadata";
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { DataSource } from "../../data-source/DataSource";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/browser/metadata/RelationMetadata";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { QueryRunner } from "typeorm/browser/query-runner/QueryRunner";
+import { DataSource } from "typeorm/browser/data-source/DataSource";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { ObjectLiteral } from "typeorm/browser/common/ObjectLiteral";
 /**
  * UpdateEvent is an object that broadcaster sends to the entity subscriber when entity is being updated in the database.
  */
diff --git a/node_modules/typeorm/browser/util/InstanceChecker.d.ts b/node_modules/typeorm/browser/util/InstanceChecker.d.ts
index f5367e6..a587f77 100644
--- a/node_modules/typeorm/browser/util/InstanceChecker.d.ts
+++ b/node_modules/typeorm/browser/util/InstanceChecker.d.ts
@@ -1,32 +1,32 @@
-import type { MongoEntityManager } from "../entity-manager/MongoEntityManager";
-import type { SqljsEntityManager } from "../entity-manager/SqljsEntityManager";
-import type { EntitySchema } from "../entity-schema/EntitySchema";
-import type { FindOperator } from "../find-options/FindOperator";
-import type { EqualOperator } from "../find-options/EqualOperator";
-import type { Query } from "../driver/Query";
-import type { RdbmsSchemaBuilder } from "../schema-builder/RdbmsSchemaBuilder";
-import type { Subject } from "../persistence/Subject";
-import type { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import type { UpdateQueryBuilder } from "../query-builder/UpdateQueryBuilder";
-import type { DeleteQueryBuilder } from "../query-builder/DeleteQueryBuilder";
-import type { SoftDeleteQueryBuilder } from "../query-builder/SoftDeleteQueryBuilder";
-import type { InsertQueryBuilder } from "../query-builder/InsertQueryBuilder";
-import type { RelationQueryBuilder } from "../query-builder/RelationQueryBuilder";
-import type { Brackets } from "../query-builder/Brackets";
-import type { Table } from "../schema-builder/table/Table";
-import type { TableCheck } from "../schema-builder/table/TableCheck";
-import type { TableColumn } from "../schema-builder/table/TableColumn";
-import type { TableExclusion } from "../schema-builder/table/TableExclusion";
-import type { TableForeignKey } from "../schema-builder/table/TableForeignKey";
-import type { TableIndex } from "../schema-builder/table/TableIndex";
-import type { TableUnique } from "../schema-builder/table/TableUnique";
-import type { View } from "../schema-builder/view/View";
-import type { NotBrackets } from "../query-builder/NotBrackets";
-import type { EntityMetadata } from "../metadata/EntityMetadata";
-import type { ColumnMetadata } from "../metadata/ColumnMetadata";
-import type { MssqlParameter } from "../driver/sqlserver/MssqlParameter";
-import { DataSource } from "../data-source";
-import { BaseEntity } from "../repository/BaseEntity";
+import type { MongoEntityManager } from "typeorm/browser/entity-manager/MongoEntityManager";
+import type { SqljsEntityManager } from "typeorm/browser/entity-manager/SqljsEntityManager";
+import type { EntitySchema } from "typeorm/browser/entity-schema/EntitySchema";
+import type { FindOperator } from "typeorm/browser/find-options/FindOperator";
+import type { EqualOperator } from "typeorm/browser/find-options/EqualOperator";
+import type { Query } from "typeorm/browser/driver/Query";
+import type { RdbmsSchemaBuilder } from "typeorm/browser/schema-builder/RdbmsSchemaBuilder";
+import type { Subject } from "typeorm/browser/persistence/Subject";
+import type { SelectQueryBuilder } from "typeorm/browser/query-builder/SelectQueryBuilder";
+import type { UpdateQueryBuilder } from "typeorm/browser/query-builder/UpdateQueryBuilder";
+import type { DeleteQueryBuilder } from "typeorm/browser/query-builder/DeleteQueryBuilder";
+import type { SoftDeleteQueryBuilder } from "typeorm/browser/query-builder/SoftDeleteQueryBuilder";
+import type { InsertQueryBuilder } from "typeorm/browser/query-builder/InsertQueryBuilder";
+import type { RelationQueryBuilder } from "typeorm/browser/query-builder/RelationQueryBuilder";
+import type { Brackets } from "typeorm/browser/query-builder/Brackets";
+import type { Table } from "typeorm/browser/schema-builder/table/Table";
+import type { TableCheck } from "typeorm/browser/schema-builder/table/TableCheck";
+import type { TableColumn } from "typeorm/browser/schema-builder/table/TableColumn";
+import type { TableExclusion } from "typeorm/browser/schema-builder/table/TableExclusion";
+import type { TableForeignKey } from "typeorm/browser/schema-builder/table/TableForeignKey";
+import type { TableIndex } from "typeorm/browser/schema-builder/table/TableIndex";
+import type { TableUnique } from "typeorm/browser/schema-builder/table/TableUnique";
+import type { View } from "typeorm/browser/schema-builder/view/View";
+import type { NotBrackets } from "typeorm/browser/query-builder/NotBrackets";
+import type { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import type { ColumnMetadata } from "typeorm/browser/metadata/ColumnMetadata";
+import type { MssqlParameter } from "typeorm/browser/driver/sqlserver/MssqlParameter";
+import { DataSource } from "typeorm/browser/data-source";
+import { BaseEntity } from "typeorm/browser/repository/BaseEntity";
 export declare class InstanceChecker {
     static isMssqlParameter(obj: unknown): obj is MssqlParameter;
     static isEntityMetadata(obj: unknown): obj is EntityMetadata;
diff --git a/node_modules/typeorm/browser/util/TreeRepositoryUtils.d.ts b/node_modules/typeorm/browser/util/TreeRepositoryUtils.d.ts
index f3110c6..92f1df0 100644
--- a/node_modules/typeorm/browser/util/TreeRepositoryUtils.d.ts
+++ b/node_modules/typeorm/browser/util/TreeRepositoryUtils.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../entity-manager/EntityManager";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { FindTreesOptions } from "../repository/FindTreesOptions";
+import { EntityManager } from "typeorm/browser/entity-manager/EntityManager";
+import { EntityMetadata } from "typeorm/browser/metadata/EntityMetadata";
+import { FindTreesOptions } from "typeorm/browser/repository/FindTreesOptions";
 /**
  * Provides utilities for manipulating tree structures.
  *
diff --git a/node_modules/typeorm/cache/QueryResultCache.d.ts b/node_modules/typeorm/cache/QueryResultCache.d.ts
index 222f82c..b2f8e37 100644
--- a/node_modules/typeorm/cache/QueryResultCache.d.ts
+++ b/node_modules/typeorm/cache/QueryResultCache.d.ts
@@ -1,5 +1,5 @@
-import { QueryResultCacheOptions } from "./QueryResultCacheOptions";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { QueryResultCacheOptions } from "typeorm/cache/QueryResultCacheOptions";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * Implementations of this interface provide different strategies to cache query builder results.
  */
diff --git a/node_modules/typeorm/cli-ts-node-commonjs.js b/node_modules/typeorm/cli-ts-node-commonjs.js
old mode 100755
new mode 100644
diff --git a/node_modules/typeorm/cli-ts-node-esm.js b/node_modules/typeorm/cli-ts-node-esm.js
old mode 100755
new mode 100644
diff --git a/node_modules/typeorm/cli.js b/node_modules/typeorm/cli.js
old mode 100755
new mode 100644
diff --git a/node_modules/typeorm/commands/CommandUtils.js b/node_modules/typeorm/commands/CommandUtils.js
index 90359cc..a981ace 100644
--- a/node_modules/typeorm/commands/CommandUtils.js
+++ b/node_modules/typeorm/commands/CommandUtils.js
@@ -25,12 +25,17 @@ class CommandUtils {
             typeof dataSourceFileExports !== "object") {
             throw new Error(`Given data source file must contain export of a DataSource instance`);
         }
+        if (InstanceChecker_1.InstanceChecker.isDataSource(dataSourceFileExports)) {
+            return dataSourceFileExports;
+        }
         const dataSourceExports = [];
         for (const fileExportKey in dataSourceFileExports) {
             const fileExport = dataSourceFileExports[fileExportKey];
             // It is necessary to await here in case of the exported async value (Promise<DataSource>).
             // e.g. the DataSource is instantiated with an async factory in the source file
-            const awaitedFileExport = fileExport instanceof Promise ? await fileExport : fileExport;
+            // It is safe to await regardless of the export being async or not due to `awaits` definition:
+            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#return_value
+            const awaitedFileExport = await fileExport;
             if (InstanceChecker_1.InstanceChecker.isDataSource(awaitedFileExport)) {
                 dataSourceExports.push(awaitedFileExport);
             }
diff --git a/node_modules/typeorm/commands/CommandUtils.js.map b/node_modules/typeorm/commands/CommandUtils.js.map
index e953780..b151b42 100644
--- a/node_modules/typeorm/commands/CommandUtils.js.map
+++ b/node_modules/typeorm/commands/CommandUtils.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/CommandUtils.ts"],"names":[],"mappings":"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","file":"CommandUtils.js","sourcesContent":["import * as fs from \"fs\"\nimport * as path from \"path\"\nimport mkdirp from \"mkdirp\"\nimport { TypeORMError } from \"../error\"\nimport { DataSource } from \"../data-source\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { importOrRequireFile } from \"../util/ImportUtils\"\n\n/**\n * Command line utils functions.\n */\nexport class CommandUtils {\n    static async loadDataSource(\n        dataSourceFilePath: string,\n    ): Promise<DataSource> {\n        let dataSourceFileExports\n        try {\n            ;[dataSourceFileExports] = await importOrRequireFile(\n                dataSourceFilePath,\n            )\n        } catch (err) {\n            throw new Error(\n                `Unable to open file: \"${dataSourceFilePath}\". ${err.message}`,\n            )\n        }\n\n        if (\n            !dataSourceFileExports ||\n            typeof dataSourceFileExports !== \"object\"\n        ) {\n            throw new Error(\n                `Given data source file must contain export of a DataSource instance`,\n            )\n        }\n\n        const dataSourceExports = []\n        for (const fileExportKey in dataSourceFileExports) {\n            const fileExport = dataSourceFileExports[fileExportKey]\n            // It is necessary to await here in case of the exported async value (Promise<DataSource>).\n            // e.g. the DataSource is instantiated with an async factory in the source file\n            const awaitedFileExport =\n                fileExport instanceof Promise ? await fileExport : fileExport\n            if (InstanceChecker.isDataSource(awaitedFileExport)) {\n                dataSourceExports.push(awaitedFileExport)\n            }\n        }\n\n        if (dataSourceExports.length === 0) {\n            throw new Error(\n                `Given data source file must contain export of a DataSource instance`,\n            )\n        }\n        if (dataSourceExports.length > 1) {\n            throw new Error(\n                `Given data source file must contain only one export of DataSource instance`,\n            )\n        }\n        return dataSourceExports[0]\n    }\n\n    /**\n     * Creates directories recursively.\n     */\n    static createDirectories(directory: string) {\n        return mkdirp(directory)\n    }\n\n    /**\n     * Creates a file with the given content in the given path.\n     */\n    static async createFile(\n        filePath: string,\n        content: string,\n        override: boolean = true,\n    ): Promise<void> {\n        await CommandUtils.createDirectories(path.dirname(filePath))\n        return new Promise<void>((ok, fail) => {\n            if (override === false && fs.existsSync(filePath)) return ok()\n\n            fs.writeFile(filePath, content, (err) => (err ? fail(err) : ok()))\n        })\n    }\n\n    /**\n     * Reads everything from a given file and returns its content as a string.\n     */\n    static async readFile(filePath: string): Promise<string> {\n        return new Promise<string>((ok, fail) => {\n            fs.readFile(filePath, (err, data) =>\n                err ? fail(err) : ok(data.toString()),\n            )\n        })\n    }\n\n    static async fileExists(filePath: string) {\n        return fs.existsSync(filePath)\n    }\n\n    /**\n     * Gets migration timestamp and validates argument (if sent)\n     */\n    static getTimestamp(timestampOptionArgument: any): number {\n        if (\n            timestampOptionArgument &&\n            (isNaN(timestampOptionArgument) || timestampOptionArgument < 0)\n        ) {\n            throw new TypeORMError(\n                `timestamp option should be a non-negative number. received: ${timestampOptionArgument}`,\n            )\n        }\n        return timestampOptionArgument\n            ? new Date(Number(timestampOptionArgument)).getTime()\n            : Date.now()\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/CommandUtils.ts"],"names":[],"mappings":"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","file":"CommandUtils.js","sourcesContent":["import * as fs from \"fs\"\nimport * as path from \"path\"\nimport mkdirp from \"mkdirp\"\nimport { TypeORMError } from \"../error\"\nimport { DataSource } from \"../data-source\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { importOrRequireFile } from \"../util/ImportUtils\"\n\n/**\n * Command line utils functions.\n */\nexport class CommandUtils {\n    static async loadDataSource(\n        dataSourceFilePath: string,\n    ): Promise<DataSource> {\n        let dataSourceFileExports\n        try {\n            ;[dataSourceFileExports] = await importOrRequireFile(\n                dataSourceFilePath,\n            )\n        } catch (err) {\n            throw new Error(\n                `Unable to open file: \"${dataSourceFilePath}\". ${err.message}`,\n            )\n        }\n\n        if (\n            !dataSourceFileExports ||\n            typeof dataSourceFileExports !== \"object\"\n        ) {\n            throw new Error(\n                `Given data source file must contain export of a DataSource instance`,\n            )\n        }\n\n        if (InstanceChecker.isDataSource(dataSourceFileExports)) {\n            return dataSourceFileExports\n        }\n\n        const dataSourceExports = []\n        for (const fileExportKey in dataSourceFileExports) {\n            const fileExport = dataSourceFileExports[fileExportKey]\n            // It is necessary to await here in case of the exported async value (Promise<DataSource>).\n            // e.g. the DataSource is instantiated with an async factory in the source file\n            // It is safe to await regardless of the export being async or not due to `awaits` definition:\n            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await#return_value\n            const awaitedFileExport = await fileExport\n            if (InstanceChecker.isDataSource(awaitedFileExport)) {\n                dataSourceExports.push(awaitedFileExport)\n            }\n        }\n\n        if (dataSourceExports.length === 0) {\n            throw new Error(\n                `Given data source file must contain export of a DataSource instance`,\n            )\n        }\n        if (dataSourceExports.length > 1) {\n            throw new Error(\n                `Given data source file must contain only one export of DataSource instance`,\n            )\n        }\n        return dataSourceExports[0]\n    }\n\n    /**\n     * Creates directories recursively.\n     */\n    static createDirectories(directory: string) {\n        return mkdirp(directory)\n    }\n\n    /**\n     * Creates a file with the given content in the given path.\n     */\n    static async createFile(\n        filePath: string,\n        content: string,\n        override: boolean = true,\n    ): Promise<void> {\n        await CommandUtils.createDirectories(path.dirname(filePath))\n        return new Promise<void>((ok, fail) => {\n            if (override === false && fs.existsSync(filePath)) return ok()\n\n            fs.writeFile(filePath, content, (err) => (err ? fail(err) : ok()))\n        })\n    }\n\n    /**\n     * Reads everything from a given file and returns its content as a string.\n     */\n    static async readFile(filePath: string): Promise<string> {\n        return new Promise<string>((ok, fail) => {\n            fs.readFile(filePath, (err, data) =>\n                err ? fail(err) : ok(data.toString()),\n            )\n        })\n    }\n\n    static async fileExists(filePath: string) {\n        return fs.existsSync(filePath)\n    }\n\n    /**\n     * Gets migration timestamp and validates argument (if sent)\n     */\n    static getTimestamp(timestampOptionArgument: any): number {\n        if (\n            timestampOptionArgument &&\n            (isNaN(timestampOptionArgument) || timestampOptionArgument < 0)\n        ) {\n            throw new TypeORMError(\n                `timestamp option should be a non-negative number. received: ${timestampOptionArgument}`,\n            )\n        }\n        return timestampOptionArgument\n            ? new Date(Number(timestampOptionArgument)).getTime()\n            : Date.now()\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/commands/EntityCreateCommand.d.ts b/node_modules/typeorm/commands/EntityCreateCommand.d.ts
index 82a662b..8ef6cb0 100644
--- a/node_modules/typeorm/commands/EntityCreateCommand.d.ts
+++ b/node_modules/typeorm/commands/EntityCreateCommand.d.ts
@@ -5,6 +5,9 @@ import * as yargs from "yargs";
 export declare class EntityCreateCommand implements yargs.CommandModule {
     command: string;
     describe: string;
+    builder(args: yargs.Argv): yargs.Argv<{
+        path: string;
+    }>;
     handler(args: yargs.Arguments): Promise<void>;
     /**
      * Gets contents of the entity file.
diff --git a/node_modules/typeorm/commands/EntityCreateCommand.js b/node_modules/typeorm/commands/EntityCreateCommand.js
index 5a79475..387577c 100644
--- a/node_modules/typeorm/commands/EntityCreateCommand.js
+++ b/node_modules/typeorm/commands/EntityCreateCommand.js
@@ -14,6 +14,13 @@ class EntityCreateCommand {
         this.command = "entity:create <path>";
         this.describe = "Generates a new entity.";
     }
+    builder(args) {
+        return args.positional("path", {
+            type: "string",
+            describe: "Path of the entity file",
+            demandOption: true,
+        });
+    }
     async handler(args) {
         try {
             const fullPath = args.path.startsWith("/")
diff --git a/node_modules/typeorm/commands/EntityCreateCommand.js.map b/node_modules/typeorm/commands/EntityCreateCommand.js.map
index 34e1b75..02e692c 100644
--- a/node_modules/typeorm/commands/EntityCreateCommand.js.map
+++ b/node_modules/typeorm/commands/EntityCreateCommand.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/EntityCreateCommand.ts"],"names":[],"mappings":";;;;AAAA,iDAA6C;AAE7C,0DAAyB;AACzB,6DAAyD;AACzD,wDAAuB;AAEvB;;GAEG;AACH,MAAa,mBAAmB;IAAhC;QACI,YAAO,GAAG,sBAAsB,CAAA;QAChC,aAAQ,GAAG,yBAAyB,CAAA;IA2CxC,CAAC;IAzCG,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI;YACA,MAAM,QAAQ,GAAI,IAAI,CAAC,IAAe,CAAC,UAAU,CAAC,GAAG,CAAC;gBAClD,CAAC,CAAE,IAAI,CAAC,IAAe;gBACvB,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAc,CAAC,CAAA;YACtD,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YACxC,MAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;YAC7D,MAAM,UAAU,GAAG,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAA;YAClE,IAAI,UAAU,EAAE;gBACZ,MAAM,QAAQ,eAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,iBAAiB,CAAA;aAC9D;YACD,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,EAAE,WAAW,CAAC,CAAA;YAC5D,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,KAAK,CACP,UAAU,eAAK,CAAC,IAAI,CAChB,QAAQ,GAAG,KAAK,CACnB,iCAAiC,CACrC,CACJ,CAAA;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,6BAAa,CAAC,SAAS,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAA;YAC7D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACO,MAAM,CAAC,WAAW,CAAC,IAAY;QACrC,OAAO;;;eAGA,IAAI;;;CAGlB,CAAA;IACG,CAAC;CACJ;AA7CD,kDA6CC","file":"EntityCreateCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport path from \"path\"\n\n/**\n * Generates a new entity.\n */\nexport class EntityCreateCommand implements yargs.CommandModule {\n    command = \"entity:create <path>\"\n    describe = \"Generates a new entity.\"\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const fullPath = (args.path as string).startsWith(\"/\")\n                ? (args.path as string)\n                : path.resolve(process.cwd(), args.path as string)\n            const filename = path.basename(fullPath)\n            const fileContent = EntityCreateCommand.getTemplate(filename)\n            const fileExists = await CommandUtils.fileExists(fullPath + \".ts\")\n            if (fileExists) {\n                throw `File ${chalk.blue(fullPath + \".ts\")} already exists`\n            }\n            await CommandUtils.createFile(fullPath + \".ts\", fileContent)\n            console.log(\n                chalk.green(\n                    `Entity ${chalk.blue(\n                        fullPath + \".ts\",\n                    )} has been created successfully.`,\n                ),\n            )\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during entity creation:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the entity file.\n     */\n    protected static getTemplate(name: string): string {\n        return `import { Entity } from \"typeorm\"\n\n@Entity()\nexport class ${name} {\n\n}\n`\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/EntityCreateCommand.ts"],"names":[],"mappings":";;;;AAAA,iDAA6C;AAE7C,0DAAyB;AACzB,6DAAyD;AACzD,wDAAuB;AAEvB;;GAEG;AACH,MAAa,mBAAmB;IAAhC;QACI,YAAO,GAAG,sBAAsB,CAAA;QAChC,aAAQ,GAAG,yBAAyB,CAAA;IAmDxC,CAAC;IAjDG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YAC3B,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,yBAAyB;YACnC,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACN,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI;YACA,MAAM,QAAQ,GAAI,IAAI,CAAC,IAAe,CAAC,UAAU,CAAC,GAAG,CAAC;gBAClD,CAAC,CAAE,IAAI,CAAC,IAAe;gBACvB,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAc,CAAC,CAAA;YACtD,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YACxC,MAAM,WAAW,GAAG,mBAAmB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;YAC7D,MAAM,UAAU,GAAG,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAA;YAClE,IAAI,UAAU,EAAE;gBACZ,MAAM,QAAQ,eAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,iBAAiB,CAAA;aAC9D;YACD,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,EAAE,WAAW,CAAC,CAAA;YAC5D,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,KAAK,CACP,UAAU,eAAK,CAAC,IAAI,CAChB,QAAQ,GAAG,KAAK,CACnB,iCAAiC,CACrC,CACJ,CAAA;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,6BAAa,CAAC,SAAS,CAAC,+BAA+B,EAAE,GAAG,CAAC,CAAA;YAC7D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACO,MAAM,CAAC,WAAW,CAAC,IAAY;QACrC,OAAO;;;eAGA,IAAI;;;CAGlB,CAAA;IACG,CAAC;CACJ;AArDD,kDAqDC","file":"EntityCreateCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport path from \"path\"\n\n/**\n * Generates a new entity.\n */\nexport class EntityCreateCommand implements yargs.CommandModule {\n    command = \"entity:create <path>\"\n    describe = \"Generates a new entity.\"\n\n    builder(args: yargs.Argv) {\n        return args.positional(\"path\", {\n            type: \"string\",\n            describe: \"Path of the entity file\",\n            demandOption: true,\n        })\n    }\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const fullPath = (args.path as string).startsWith(\"/\")\n                ? (args.path as string)\n                : path.resolve(process.cwd(), args.path as string)\n            const filename = path.basename(fullPath)\n            const fileContent = EntityCreateCommand.getTemplate(filename)\n            const fileExists = await CommandUtils.fileExists(fullPath + \".ts\")\n            if (fileExists) {\n                throw `File ${chalk.blue(fullPath + \".ts\")} already exists`\n            }\n            await CommandUtils.createFile(fullPath + \".ts\", fileContent)\n            console.log(\n                chalk.green(\n                    `Entity ${chalk.blue(\n                        fullPath + \".ts\",\n                    )} has been created successfully.`,\n                ),\n            )\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during entity creation:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the entity file.\n     */\n    protected static getTemplate(name: string): string {\n        return `import { Entity } from \"typeorm\"\n\n@Entity()\nexport class ${name} {\n\n}\n`\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/commands/InitCommand.js b/node_modules/typeorm/commands/InitCommand.js
index fe113ae..6fdedf7 100644
--- a/node_modules/typeorm/commands/InitCommand.js
+++ b/node_modules/typeorm/commands/InitCommand.js
@@ -586,7 +586,7 @@ Steps to run this project:
         if (!packageJson.devDependencies)
             packageJson.devDependencies = {};
         Object.assign(packageJson.devDependencies, {
-            "ts-node": "10.7.0",
+            "ts-node": "10.9.1",
             "@types/node": "^16.11.10",
             typescript: "4.5.2",
         });
diff --git a/node_modules/typeorm/commands/InitCommand.js.map b/node_modules/typeorm/commands/InitCommand.js.map
index 63926ca..ac29d3c 100644
--- a/node_modules/typeorm/commands/InitCommand.js.map
+++ b/node_modules/typeorm/commands/InitCommand.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/InitCommand.ts"],"names":[],"mappings":"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","file":"InitCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport * as path from \"path\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { exec } from \"child_process\"\nimport { TypeORMError } from \"../error\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\n\n/**\n * Generates a new project with TypeORM.\n */\nexport class InitCommand implements yargs.CommandModule {\n    command = \"init\"\n    describe =\n        \"Generates initial TypeORM project structure. \" +\n        \"If name specified then creates files inside directory called as name. \" +\n        \"If its not specified then creates files inside current directory.\"\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the project directory.\",\n            })\n            .option(\"db\", {\n                alias: \"database\",\n                describe: \"Database type you'll use in your project.\",\n            })\n            .option(\"express\", {\n                describe:\n                    \"Indicates if express server sample code should be included in the project. False by default.\",\n            })\n            .option(\"docker\", {\n                describe:\n                    \"Set to true if docker-compose must be generated as well. False by default.\",\n            })\n            .option(\"pm\", {\n                alias: \"manager\",\n                choices: [\"npm\", \"yarn\"],\n                default: \"npm\",\n                describe: \"Install packages, expected values are npm or yarn.\",\n            })\n            .option(\"ms\", {\n                alias: \"module\",\n                choices: [\"commonjs\", \"esm\"],\n                default: \"commonjs\",\n                describe:\n                    \"Module system to use for project, expected values are commonjs or esm.\",\n            })\n    }\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const database: string = (args.database as any) || \"postgres\"\n            const isExpress = args.express !== undefined ? true : false\n            const isDocker = args.docker !== undefined ? true : false\n            const basePath = process.cwd() + (args.name ? \"/\" + args.name : \"\")\n            const projectName = args.name\n                ? path.basename(args.name as any)\n                : undefined\n            const installNpm = args.pm === \"yarn\" ? false : true\n            const projectIsEsm = args.ms === \"esm\"\n            await CommandUtils.createFile(\n                basePath + \"/package.json\",\n                InitCommand.getPackageJsonTemplate(projectName, projectIsEsm),\n                false,\n            )\n            if (isDocker)\n                await CommandUtils.createFile(\n                    basePath + \"/docker-compose.yml\",\n                    InitCommand.getDockerComposeTemplate(database),\n                    false,\n                )\n            await CommandUtils.createFile(\n                basePath + \"/.gitignore\",\n                InitCommand.getGitIgnoreFile(),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/README.md\",\n                InitCommand.getReadmeTemplate({ docker: isDocker }),\n                false,\n            )\n            await CommandUtils.createFile(\n                basePath + \"/tsconfig.json\",\n                InitCommand.getTsConfigTemplate(projectIsEsm),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/src/entity/User.ts\",\n                InitCommand.getUserEntityTemplate(database),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/src/data-source.ts\",\n                InitCommand.getAppDataSourceTemplate(projectIsEsm, database),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/src/index.ts\",\n                InitCommand.getAppIndexTemplate(isExpress, projectIsEsm),\n            )\n            await CommandUtils.createDirectories(basePath + \"/src/migration\")\n\n            // generate extra files for express application\n            if (isExpress) {\n                await CommandUtils.createFile(\n                    basePath + \"/src/routes.ts\",\n                    InitCommand.getRoutesTemplate(projectIsEsm),\n                )\n                await CommandUtils.createFile(\n                    basePath + \"/src/controller/UserController.ts\",\n                    InitCommand.getControllerTemplate(projectIsEsm),\n                )\n            }\n\n            const packageJsonContents = await CommandUtils.readFile(\n                basePath + \"/package.json\",\n            )\n            await CommandUtils.createFile(\n                basePath + \"/package.json\",\n                InitCommand.appendPackageJson(\n                    packageJsonContents,\n                    database,\n                    isExpress,\n                    projectIsEsm,\n                ),\n            )\n\n            if (args.name) {\n                console.log(\n                    chalk.green(\n                        `Project created inside ${chalk.blue(\n                            basePath,\n                        )} directory.`,\n                    ),\n                )\n            } else {\n                console.log(\n                    chalk.green(`Project created inside current directory.`),\n                )\n            }\n\n            console.log(chalk.green(`Please wait, installing dependencies...`))\n            if (args.pm && installNpm) {\n                await InitCommand.executeCommand(\"npm install\", basePath)\n            } else {\n                await InitCommand.executeCommand(\"yarn install\", basePath)\n            }\n\n            console.log(chalk.green(`Done! Start playing with a new project!`))\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during project initialization:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    protected static executeCommand(command: string, cwd: string) {\n        return new Promise<string>((ok, fail) => {\n            exec(command, { cwd }, (error: any, stdout: any, stderr: any) => {\n                if (stdout) return ok(stdout)\n                if (stderr) return fail(stderr)\n                if (error) return fail(error)\n                ok(\"\")\n            })\n        })\n    }\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getAppDataSourceTemplate(\n        isEsm: boolean,\n        database: string,\n    ): string {\n        let dbSettings = \"\"\n        switch (database) {\n            case \"mysql\":\n                dbSettings = `type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",`\n                break\n            case \"mariadb\":\n                dbSettings = `type: \"mariadb\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",`\n                break\n            case \"sqlite\":\n                dbSettings = `type: \"sqlite\",\n    database: \"database.sqlite\",`\n                break\n            case \"better-sqlite3\":\n                dbSettings = `type: \"better-sqlite3\",\n    database: \"database.sqlite\",`\n                break\n            case \"postgres\":\n                dbSettings = `type: \"postgres\",\n    host: \"localhost\",\n    port: 5432,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",`\n                break\n            case \"cockroachdb\":\n                dbSettings = `type: \"cockroachdb\",\n    host: \"localhost\",\n    port: 26257,\n    username: \"root\",\n    password: \"\",\n    database: \"defaultdb\",`\n                break\n            case \"mssql\":\n                dbSettings = `type: \"mssql\",\n    host: \"localhost\",\n    username: \"sa\",\n    password: \"Admin12345\",\n    database: \"tempdb\",`\n                break\n            case \"oracle\":\n                dbSettings = `type: \"oracle\",\nhost: \"localhost\",\nusername: \"system\",\npassword: \"oracle\",\nport: 1521,\nsid: \"xe.oracle.docker\",`\n                break\n            case \"mongodb\":\n                dbSettings = `type: \"mongodb\",\n    database: \"test\",`\n                break\n            case \"spanner\":\n                dbSettings = `type: \"spanner\",\n    projectId: \"test\",\n    instanceId: \"test\",\n    databaseId: \"test\",`\n                break\n        }\n        return `import \"reflect-metadata\"\nimport { DataSource } from \"typeorm\"\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\n\nexport const AppDataSource = new DataSource({\n    ${dbSettings}\n    synchronize: true,\n    logging: false,\n    entities: [User],\n    migrations: [],\n    subscribers: [],\n})\n`\n    }\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getTsConfigTemplate(esmModule: boolean): string {\n        if (esmModule)\n            return JSON.stringify(\n                {\n                    compilerOptions: {\n                        lib: [\"es2021\"],\n                        target: \"es2021\",\n                        module: \"es2022\",\n                        moduleResolution: \"node\",\n                        allowSyntheticDefaultImports: true,\n                        outDir: \"./build\",\n                        emitDecoratorMetadata: true,\n                        experimentalDecorators: true,\n                        sourceMap: true,\n                    },\n                },\n                undefined,\n                3,\n            )\n        else\n            return JSON.stringify(\n                {\n                    compilerOptions: {\n                        lib: [\"es5\", \"es6\"],\n                        target: \"es5\",\n                        module: \"commonjs\",\n                        moduleResolution: \"node\",\n                        outDir: \"./build\",\n                        emitDecoratorMetadata: true,\n                        experimentalDecorators: true,\n                        sourceMap: true,\n                    },\n                },\n                undefined,\n                3,\n            )\n    }\n\n    /**\n     * Gets contents of the .gitignore file.\n     */\n    protected static getGitIgnoreFile(): string {\n        return `.idea/\n.vscode/\nnode_modules/\nbuild/\ntmp/\ntemp/`\n    }\n\n    /**\n     * Gets contents of the user entity.\n     */\n    protected static getUserEntityTemplate(database: string): string {\n        return `import { Entity, ${\n            database === \"mongodb\"\n                ? \"ObjectIdColumn, ObjectId\"\n                : \"PrimaryGeneratedColumn\"\n        }, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n\n    ${\n        database === \"mongodb\"\n            ? \"@ObjectIdColumn()\"\n            : \"@PrimaryGeneratedColumn()\"\n    }\n    id: ${database === \"mongodb\" ? \"ObjectId\" : \"number\"}\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n\n}\n`\n    }\n\n    /**\n     * Gets contents of the route file (used when express is enabled).\n     */\n    protected static getRoutesTemplate(isEsm: boolean): string {\n        return `import { UserController } from \"./controller/UserController${\n            isEsm ? \".js\" : \"\"\n        }\"\n\nexport const Routes = [{\n    method: \"get\",\n    route: \"/users\",\n    controller: UserController,\n    action: \"all\"\n}, {\n    method: \"get\",\n    route: \"/users/:id\",\n    controller: UserController,\n    action: \"one\"\n}, {\n    method: \"post\",\n    route: \"/users\",\n    controller: UserController,\n    action: \"save\"\n}, {\n    method: \"delete\",\n    route: \"/users/:id\",\n    controller: UserController,\n    action: \"remove\"\n}]`\n    }\n\n    /**\n     * Gets contents of the user controller file (used when express is enabled).\n     */\n    protected static getControllerTemplate(isEsm: boolean): string {\n        return `import { AppDataSource } from \"../data-source${\n            isEsm ? \".js\" : \"\"\n        }\"\nimport { NextFunction, Request, Response } from \"express\"\nimport { User } from \"../entity/User${isEsm ? \".js\" : \"\"}\"\n\nexport class UserController {\n\n    private userRepository = AppDataSource.getRepository(User)\n\n    async all(request: Request, response: Response, next: NextFunction) {\n        return this.userRepository.find()\n    }\n\n    async one(request: Request, response: Response, next: NextFunction) {\n        const id = parseInt(request.params.id)\n\n\n        const user = await this.userRepository.findOne({\n            where: { id }\n        })\n\n        if (!user) {\n            return \"unregistered user\"\n        }\n        return user\n    }\n\n    async save(request: Request, response: Response, next: NextFunction) {\n        const { firstName, lastName, age } = request.body;\n\n        const user = Object.assign(new User(), {\n            firstName,\n            lastName,\n            age\n        })\n\n        return this.userRepository.save(user)\n    }\n\n    async remove(request: Request, response: Response, next: NextFunction) {\n        const id = parseInt(request.params.id)\n\n        let userToRemove = await this.userRepository.findOneBy({ id })\n\n        if (!userToRemove) {\n            return \"this user not exist\"\n        }\n\n        await this.userRepository.remove(userToRemove)\n\n        return \"user has been removed\"\n    }\n\n}`\n    }\n\n    /**\n     * Gets contents of the main (index) application file.\n     */\n    protected static getAppIndexTemplate(\n        express: boolean,\n        isEsm: boolean,\n    ): string {\n        if (express) {\n            return `import ${!isEsm ? \"* as \" : \"\"}express from \"express\"\nimport ${!isEsm ? \"* as \" : \"\"}bodyParser from \"body-parser\"\nimport { Request, Response } from \"express\"\nimport { AppDataSource } from \"./data-source${isEsm ? \".js\" : \"\"}\"\nimport { Routes } from \"./routes${isEsm ? \".js\" : \"\"}\"\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\n\nAppDataSource.initialize().then(async () => {\n\n    // create express app\n    const app = express()\n    app.use(bodyParser.json())\n\n    // register express routes from defined application routes\n    Routes.forEach(route => {\n        (app as any)[route.method](route.route, (req: Request, res: Response, next: Function) => {\n            const result = (new (route.controller as any))[route.action](req, res, next)\n            if (result instanceof Promise) {\n                result.then(result => result !== null && result !== undefined ? res.send(result) : undefined)\n\n            } else if (result !== null && result !== undefined) {\n                res.json(result)\n            }\n        })\n    })\n\n    // setup express app here\n    // ...\n\n    // start express server\n    app.listen(3000)\n\n    // insert new users for test\n    await AppDataSource.manager.save(\n        AppDataSource.manager.create(User, {\n            firstName: \"Timber\",\n            lastName: \"Saw\",\n            age: 27\n        })\n    )\n\n    await AppDataSource.manager.save(\n        AppDataSource.manager.create(User, {\n            firstName: \"Phantom\",\n            lastName: \"Assassin\",\n            age: 24\n        })\n    )\n\n    console.log(\"Express server has started on port 3000. Open http://localhost:3000/users to see results\")\n\n}).catch(error => console.log(error))\n`\n        } else {\n            return `import { AppDataSource } from \"./data-source${\n                isEsm ? \".js\" : \"\"\n            }\"\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\n\nAppDataSource.initialize().then(async () => {\n\n    console.log(\"Inserting a new user into the database...\")\n    const user = new User()\n    user.firstName = \"Timber\"\n    user.lastName = \"Saw\"\n    user.age = 25\n    await AppDataSource.manager.save(user)\n    console.log(\"Saved a new user with id: \" + user.id)\n\n    console.log(\"Loading users from the database...\")\n    const users = await AppDataSource.manager.find(User)\n    console.log(\"Loaded users: \", users)\n\n    console.log(\"Here you can setup and run express / fastify / any other framework.\")\n\n}).catch(error => console.log(error))\n`\n        }\n    }\n\n    /**\n     * Gets contents of the new package.json file.\n     */\n    protected static getPackageJsonTemplate(\n        projectName?: string,\n        projectIsEsm?: boolean,\n    ): string {\n        return JSON.stringify(\n            {\n                name: projectName || \"typeorm-sample\",\n                version: \"0.0.1\",\n                description: \"Awesome project developed with TypeORM.\",\n                type: projectIsEsm ? \"module\" : \"commonjs\",\n                devDependencies: {},\n                dependencies: {},\n                scripts: {},\n            },\n            undefined,\n            3,\n        )\n    }\n\n    /**\n     * Gets contents of the new docker-compose.yml file.\n     */\n    protected static getDockerComposeTemplate(database: string): string {\n        switch (database) {\n            case \"mysql\":\n                return `version: '3'\nservices:\n\n  mysql:\n    image: \"mysql:8.0.30\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`\n            case \"mariadb\":\n                return `version: '3'\nservices:\n\n  mariadb:\n    image: \"mariadb:10.8.4\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`\n            case \"postgres\":\n                return `version: '3'\nservices:\n\n  postgres:\n    image: \"postgres:14.5\"\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: \"test\"\n      POSTGRES_PASSWORD: \"test\"\n      POSTGRES_DB: \"test\"\n\n`\n            case \"cockroachdb\":\n                return `version: '3'\nservices:\n\n  cockroachdb:\n    image: \"cockroachdb/cockroach:v22.1.6\"\n    command: start --insecure\n    ports:\n      - \"26257:26257\"\n\n`\n            case \"sqlite\":\n            case \"better-sqlite3\":\n                return `version: '3'\nservices:\n`\n            case \"oracle\":\n                throw new TypeORMError(\n                    `You cannot initialize a project with docker for Oracle driver yet.`,\n                ) // todo: implement for oracle as well\n\n            case \"mssql\":\n                return `version: '3'\nservices:\n\n  mssql:\n    image: \"microsoft/mssql-server-linux:rc2\"\n    ports:\n      - \"1433:1433\"\n    environment:\n      SA_PASSWORD: \"Admin12345\"\n      ACCEPT_EULA: \"Y\"\n\n`\n            case \"mongodb\":\n                return `version: '3'\nservices:\n\n  mongodb:\n    image: \"mongo:5.0.12\"\n    container_name: \"typeorm-mongodb\"\n    ports:\n      - \"27017:27017\"\n\n`\n            case \"spanner\":\n                return `version: '3'\nservices:\n\n  spanner:\n    image: gcr.io/cloud-spanner-emulator/emulator:1.4.1\n    ports:\n      - \"9010:9010\"\n      - \"9020:9020\"\n\n`\n        }\n        return \"\"\n    }\n\n    /**\n     * Gets contents of the new readme.md file.\n     */\n    protected static getReadmeTemplate(options: { docker: boolean }): string {\n        let template = `# Awesome Project Build with TypeORM\n\nSteps to run this project:\n\n1. Run \\`npm i\\` command\n`\n\n        if (options.docker) {\n            template += `2. Run \\`docker-compose up\\` command\n`\n        } else {\n            template += `2. Setup database settings inside \\`data-source.ts\\` file\n`\n        }\n\n        template += `3. Run \\`npm start\\` command\n`\n        return template\n    }\n\n    /**\n     * Appends to a given package.json template everything needed.\n     */\n    protected static appendPackageJson(\n        packageJsonContents: string,\n        database: string,\n        express: boolean,\n        projectIsEsm: boolean /*, docker: boolean*/,\n    ): string {\n        const packageJson = JSON.parse(packageJsonContents)\n\n        if (!packageJson.devDependencies) packageJson.devDependencies = {}\n        Object.assign(packageJson.devDependencies, {\n            \"ts-node\": \"10.7.0\",\n            \"@types/node\": \"^16.11.10\",\n            typescript: \"4.5.2\",\n        })\n\n        if (!packageJson.dependencies) packageJson.dependencies = {}\n        Object.assign(packageJson.dependencies, {\n            typeorm:\n                require(\"../package.json\").version !== \"0.0.0\"\n                    ? require(\"../package.json\").version // install version from package.json if present\n                    : require(\"../package.json\").installFrom, // else use custom source\n            \"reflect-metadata\": \"^0.1.13\",\n        })\n\n        switch (database) {\n            case \"mysql\":\n            case \"mariadb\":\n                packageJson.dependencies[\"mysql\"] = \"^2.14.1\"\n                break\n            case \"postgres\":\n            case \"cockroachdb\":\n                packageJson.dependencies[\"pg\"] = \"^8.4.0\"\n                break\n            case \"sqlite\":\n                packageJson.dependencies[\"sqlite3\"] = \"^5.0.2\"\n                break\n            case \"better-sqlite3\":\n                packageJson.dependencies[\"better-sqlite3\"] = \"^7.0.0\"\n                break\n            case \"oracle\":\n                packageJson.dependencies[\"oracledb\"] = \"^5.1.0\"\n                break\n            case \"mssql\":\n                packageJson.dependencies[\"mssql\"] = \"^9.1.1\"\n                break\n            case \"mongodb\":\n                packageJson.dependencies[\"mongodb\"] = \"^5.2.0\"\n                break\n            case \"spanner\":\n                packageJson.dependencies[\"@google-cloud/spanner\"] = \"^5.18.0\"\n                break\n        }\n\n        if (express) {\n            packageJson.dependencies[\"express\"] = \"^4.17.2\"\n            packageJson.dependencies[\"body-parser\"] = \"^1.19.1\"\n        }\n\n        if (!packageJson.scripts) packageJson.scripts = {}\n\n        if (projectIsEsm)\n            Object.assign(packageJson.scripts, {\n                start: /*(docker ? \"docker-compose up && \" : \"\") + */ \"node --loader ts-node/esm src/index.ts\",\n                typeorm: \"typeorm-ts-node-esm\",\n            })\n        else\n            Object.assign(packageJson.scripts, {\n                start: /*(docker ? \"docker-compose up && \" : \"\") + */ \"ts-node src/index.ts\",\n                typeorm: \"typeorm-ts-node-commonjs\",\n            })\n\n        return JSON.stringify(packageJson, undefined, 3)\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/InitCommand.ts"],"names":[],"mappings":"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","file":"InitCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport * as path from \"path\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { exec } from \"child_process\"\nimport { TypeORMError } from \"../error\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\n\n/**\n * Generates a new project with TypeORM.\n */\nexport class InitCommand implements yargs.CommandModule {\n    command = \"init\"\n    describe =\n        \"Generates initial TypeORM project structure. \" +\n        \"If name specified then creates files inside directory called as name. \" +\n        \"If its not specified then creates files inside current directory.\"\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"n\", {\n                alias: \"name\",\n                describe: \"Name of the project directory.\",\n            })\n            .option(\"db\", {\n                alias: \"database\",\n                describe: \"Database type you'll use in your project.\",\n            })\n            .option(\"express\", {\n                describe:\n                    \"Indicates if express server sample code should be included in the project. False by default.\",\n            })\n            .option(\"docker\", {\n                describe:\n                    \"Set to true if docker-compose must be generated as well. False by default.\",\n            })\n            .option(\"pm\", {\n                alias: \"manager\",\n                choices: [\"npm\", \"yarn\"],\n                default: \"npm\",\n                describe: \"Install packages, expected values are npm or yarn.\",\n            })\n            .option(\"ms\", {\n                alias: \"module\",\n                choices: [\"commonjs\", \"esm\"],\n                default: \"commonjs\",\n                describe:\n                    \"Module system to use for project, expected values are commonjs or esm.\",\n            })\n    }\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const database: string = (args.database as any) || \"postgres\"\n            const isExpress = args.express !== undefined ? true : false\n            const isDocker = args.docker !== undefined ? true : false\n            const basePath = process.cwd() + (args.name ? \"/\" + args.name : \"\")\n            const projectName = args.name\n                ? path.basename(args.name as any)\n                : undefined\n            const installNpm = args.pm === \"yarn\" ? false : true\n            const projectIsEsm = args.ms === \"esm\"\n            await CommandUtils.createFile(\n                basePath + \"/package.json\",\n                InitCommand.getPackageJsonTemplate(projectName, projectIsEsm),\n                false,\n            )\n            if (isDocker)\n                await CommandUtils.createFile(\n                    basePath + \"/docker-compose.yml\",\n                    InitCommand.getDockerComposeTemplate(database),\n                    false,\n                )\n            await CommandUtils.createFile(\n                basePath + \"/.gitignore\",\n                InitCommand.getGitIgnoreFile(),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/README.md\",\n                InitCommand.getReadmeTemplate({ docker: isDocker }),\n                false,\n            )\n            await CommandUtils.createFile(\n                basePath + \"/tsconfig.json\",\n                InitCommand.getTsConfigTemplate(projectIsEsm),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/src/entity/User.ts\",\n                InitCommand.getUserEntityTemplate(database),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/src/data-source.ts\",\n                InitCommand.getAppDataSourceTemplate(projectIsEsm, database),\n            )\n            await CommandUtils.createFile(\n                basePath + \"/src/index.ts\",\n                InitCommand.getAppIndexTemplate(isExpress, projectIsEsm),\n            )\n            await CommandUtils.createDirectories(basePath + \"/src/migration\")\n\n            // generate extra files for express application\n            if (isExpress) {\n                await CommandUtils.createFile(\n                    basePath + \"/src/routes.ts\",\n                    InitCommand.getRoutesTemplate(projectIsEsm),\n                )\n                await CommandUtils.createFile(\n                    basePath + \"/src/controller/UserController.ts\",\n                    InitCommand.getControllerTemplate(projectIsEsm),\n                )\n            }\n\n            const packageJsonContents = await CommandUtils.readFile(\n                basePath + \"/package.json\",\n            )\n            await CommandUtils.createFile(\n                basePath + \"/package.json\",\n                InitCommand.appendPackageJson(\n                    packageJsonContents,\n                    database,\n                    isExpress,\n                    projectIsEsm,\n                ),\n            )\n\n            if (args.name) {\n                console.log(\n                    chalk.green(\n                        `Project created inside ${chalk.blue(\n                            basePath,\n                        )} directory.`,\n                    ),\n                )\n            } else {\n                console.log(\n                    chalk.green(`Project created inside current directory.`),\n                )\n            }\n\n            console.log(chalk.green(`Please wait, installing dependencies...`))\n            if (args.pm && installNpm) {\n                await InitCommand.executeCommand(\"npm install\", basePath)\n            } else {\n                await InitCommand.executeCommand(\"yarn install\", basePath)\n            }\n\n            console.log(chalk.green(`Done! Start playing with a new project!`))\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during project initialization:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    protected static executeCommand(command: string, cwd: string) {\n        return new Promise<string>((ok, fail) => {\n            exec(command, { cwd }, (error: any, stdout: any, stderr: any) => {\n                if (stdout) return ok(stdout)\n                if (stderr) return fail(stderr)\n                if (error) return fail(error)\n                ok(\"\")\n            })\n        })\n    }\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getAppDataSourceTemplate(\n        isEsm: boolean,\n        database: string,\n    ): string {\n        let dbSettings = \"\"\n        switch (database) {\n            case \"mysql\":\n                dbSettings = `type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",`\n                break\n            case \"mariadb\":\n                dbSettings = `type: \"mariadb\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",`\n                break\n            case \"sqlite\":\n                dbSettings = `type: \"sqlite\",\n    database: \"database.sqlite\",`\n                break\n            case \"better-sqlite3\":\n                dbSettings = `type: \"better-sqlite3\",\n    database: \"database.sqlite\",`\n                break\n            case \"postgres\":\n                dbSettings = `type: \"postgres\",\n    host: \"localhost\",\n    port: 5432,\n    username: \"test\",\n    password: \"test\",\n    database: \"test\",`\n                break\n            case \"cockroachdb\":\n                dbSettings = `type: \"cockroachdb\",\n    host: \"localhost\",\n    port: 26257,\n    username: \"root\",\n    password: \"\",\n    database: \"defaultdb\",`\n                break\n            case \"mssql\":\n                dbSettings = `type: \"mssql\",\n    host: \"localhost\",\n    username: \"sa\",\n    password: \"Admin12345\",\n    database: \"tempdb\",`\n                break\n            case \"oracle\":\n                dbSettings = `type: \"oracle\",\nhost: \"localhost\",\nusername: \"system\",\npassword: \"oracle\",\nport: 1521,\nsid: \"xe.oracle.docker\",`\n                break\n            case \"mongodb\":\n                dbSettings = `type: \"mongodb\",\n    database: \"test\",`\n                break\n            case \"spanner\":\n                dbSettings = `type: \"spanner\",\n    projectId: \"test\",\n    instanceId: \"test\",\n    databaseId: \"test\",`\n                break\n        }\n        return `import \"reflect-metadata\"\nimport { DataSource } from \"typeorm\"\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\n\nexport const AppDataSource = new DataSource({\n    ${dbSettings}\n    synchronize: true,\n    logging: false,\n    entities: [User],\n    migrations: [],\n    subscribers: [],\n})\n`\n    }\n\n    /**\n     * Gets contents of the ormconfig file.\n     */\n    protected static getTsConfigTemplate(esmModule: boolean): string {\n        if (esmModule)\n            return JSON.stringify(\n                {\n                    compilerOptions: {\n                        lib: [\"es2021\"],\n                        target: \"es2021\",\n                        module: \"es2022\",\n                        moduleResolution: \"node\",\n                        allowSyntheticDefaultImports: true,\n                        outDir: \"./build\",\n                        emitDecoratorMetadata: true,\n                        experimentalDecorators: true,\n                        sourceMap: true,\n                    },\n                },\n                undefined,\n                3,\n            )\n        else\n            return JSON.stringify(\n                {\n                    compilerOptions: {\n                        lib: [\"es5\", \"es6\"],\n                        target: \"es5\",\n                        module: \"commonjs\",\n                        moduleResolution: \"node\",\n                        outDir: \"./build\",\n                        emitDecoratorMetadata: true,\n                        experimentalDecorators: true,\n                        sourceMap: true,\n                    },\n                },\n                undefined,\n                3,\n            )\n    }\n\n    /**\n     * Gets contents of the .gitignore file.\n     */\n    protected static getGitIgnoreFile(): string {\n        return `.idea/\n.vscode/\nnode_modules/\nbuild/\ntmp/\ntemp/`\n    }\n\n    /**\n     * Gets contents of the user entity.\n     */\n    protected static getUserEntityTemplate(database: string): string {\n        return `import { Entity, ${\n            database === \"mongodb\"\n                ? \"ObjectIdColumn, ObjectId\"\n                : \"PrimaryGeneratedColumn\"\n        }, Column } from \"typeorm\"\n\n@Entity()\nexport class User {\n\n    ${\n        database === \"mongodb\"\n            ? \"@ObjectIdColumn()\"\n            : \"@PrimaryGeneratedColumn()\"\n    }\n    id: ${database === \"mongodb\" ? \"ObjectId\" : \"number\"}\n\n    @Column()\n    firstName: string\n\n    @Column()\n    lastName: string\n\n    @Column()\n    age: number\n\n}\n`\n    }\n\n    /**\n     * Gets contents of the route file (used when express is enabled).\n     */\n    protected static getRoutesTemplate(isEsm: boolean): string {\n        return `import { UserController } from \"./controller/UserController${\n            isEsm ? \".js\" : \"\"\n        }\"\n\nexport const Routes = [{\n    method: \"get\",\n    route: \"/users\",\n    controller: UserController,\n    action: \"all\"\n}, {\n    method: \"get\",\n    route: \"/users/:id\",\n    controller: UserController,\n    action: \"one\"\n}, {\n    method: \"post\",\n    route: \"/users\",\n    controller: UserController,\n    action: \"save\"\n}, {\n    method: \"delete\",\n    route: \"/users/:id\",\n    controller: UserController,\n    action: \"remove\"\n}]`\n    }\n\n    /**\n     * Gets contents of the user controller file (used when express is enabled).\n     */\n    protected static getControllerTemplate(isEsm: boolean): string {\n        return `import { AppDataSource } from \"../data-source${\n            isEsm ? \".js\" : \"\"\n        }\"\nimport { NextFunction, Request, Response } from \"express\"\nimport { User } from \"../entity/User${isEsm ? \".js\" : \"\"}\"\n\nexport class UserController {\n\n    private userRepository = AppDataSource.getRepository(User)\n\n    async all(request: Request, response: Response, next: NextFunction) {\n        return this.userRepository.find()\n    }\n\n    async one(request: Request, response: Response, next: NextFunction) {\n        const id = parseInt(request.params.id)\n\n\n        const user = await this.userRepository.findOne({\n            where: { id }\n        })\n\n        if (!user) {\n            return \"unregistered user\"\n        }\n        return user\n    }\n\n    async save(request: Request, response: Response, next: NextFunction) {\n        const { firstName, lastName, age } = request.body;\n\n        const user = Object.assign(new User(), {\n            firstName,\n            lastName,\n            age\n        })\n\n        return this.userRepository.save(user)\n    }\n\n    async remove(request: Request, response: Response, next: NextFunction) {\n        const id = parseInt(request.params.id)\n\n        let userToRemove = await this.userRepository.findOneBy({ id })\n\n        if (!userToRemove) {\n            return \"this user not exist\"\n        }\n\n        await this.userRepository.remove(userToRemove)\n\n        return \"user has been removed\"\n    }\n\n}`\n    }\n\n    /**\n     * Gets contents of the main (index) application file.\n     */\n    protected static getAppIndexTemplate(\n        express: boolean,\n        isEsm: boolean,\n    ): string {\n        if (express) {\n            return `import ${!isEsm ? \"* as \" : \"\"}express from \"express\"\nimport ${!isEsm ? \"* as \" : \"\"}bodyParser from \"body-parser\"\nimport { Request, Response } from \"express\"\nimport { AppDataSource } from \"./data-source${isEsm ? \".js\" : \"\"}\"\nimport { Routes } from \"./routes${isEsm ? \".js\" : \"\"}\"\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\n\nAppDataSource.initialize().then(async () => {\n\n    // create express app\n    const app = express()\n    app.use(bodyParser.json())\n\n    // register express routes from defined application routes\n    Routes.forEach(route => {\n        (app as any)[route.method](route.route, (req: Request, res: Response, next: Function) => {\n            const result = (new (route.controller as any))[route.action](req, res, next)\n            if (result instanceof Promise) {\n                result.then(result => result !== null && result !== undefined ? res.send(result) : undefined)\n\n            } else if (result !== null && result !== undefined) {\n                res.json(result)\n            }\n        })\n    })\n\n    // setup express app here\n    // ...\n\n    // start express server\n    app.listen(3000)\n\n    // insert new users for test\n    await AppDataSource.manager.save(\n        AppDataSource.manager.create(User, {\n            firstName: \"Timber\",\n            lastName: \"Saw\",\n            age: 27\n        })\n    )\n\n    await AppDataSource.manager.save(\n        AppDataSource.manager.create(User, {\n            firstName: \"Phantom\",\n            lastName: \"Assassin\",\n            age: 24\n        })\n    )\n\n    console.log(\"Express server has started on port 3000. Open http://localhost:3000/users to see results\")\n\n}).catch(error => console.log(error))\n`\n        } else {\n            return `import { AppDataSource } from \"./data-source${\n                isEsm ? \".js\" : \"\"\n            }\"\nimport { User } from \"./entity/User${isEsm ? \".js\" : \"\"}\"\n\nAppDataSource.initialize().then(async () => {\n\n    console.log(\"Inserting a new user into the database...\")\n    const user = new User()\n    user.firstName = \"Timber\"\n    user.lastName = \"Saw\"\n    user.age = 25\n    await AppDataSource.manager.save(user)\n    console.log(\"Saved a new user with id: \" + user.id)\n\n    console.log(\"Loading users from the database...\")\n    const users = await AppDataSource.manager.find(User)\n    console.log(\"Loaded users: \", users)\n\n    console.log(\"Here you can setup and run express / fastify / any other framework.\")\n\n}).catch(error => console.log(error))\n`\n        }\n    }\n\n    /**\n     * Gets contents of the new package.json file.\n     */\n    protected static getPackageJsonTemplate(\n        projectName?: string,\n        projectIsEsm?: boolean,\n    ): string {\n        return JSON.stringify(\n            {\n                name: projectName || \"typeorm-sample\",\n                version: \"0.0.1\",\n                description: \"Awesome project developed with TypeORM.\",\n                type: projectIsEsm ? \"module\" : \"commonjs\",\n                devDependencies: {},\n                dependencies: {},\n                scripts: {},\n            },\n            undefined,\n            3,\n        )\n    }\n\n    /**\n     * Gets contents of the new docker-compose.yml file.\n     */\n    protected static getDockerComposeTemplate(database: string): string {\n        switch (database) {\n            case \"mysql\":\n                return `version: '3'\nservices:\n\n  mysql:\n    image: \"mysql:8.0.30\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`\n            case \"mariadb\":\n                return `version: '3'\nservices:\n\n  mariadb:\n    image: \"mariadb:10.8.4\"\n    ports:\n      - \"3306:3306\"\n    environment:\n      MYSQL_ROOT_PASSWORD: \"admin\"\n      MYSQL_USER: \"test\"\n      MYSQL_PASSWORD: \"test\"\n      MYSQL_DATABASE: \"test\"\n\n`\n            case \"postgres\":\n                return `version: '3'\nservices:\n\n  postgres:\n    image: \"postgres:14.5\"\n    ports:\n      - \"5432:5432\"\n    environment:\n      POSTGRES_USER: \"test\"\n      POSTGRES_PASSWORD: \"test\"\n      POSTGRES_DB: \"test\"\n\n`\n            case \"cockroachdb\":\n                return `version: '3'\nservices:\n\n  cockroachdb:\n    image: \"cockroachdb/cockroach:v22.1.6\"\n    command: start --insecure\n    ports:\n      - \"26257:26257\"\n\n`\n            case \"sqlite\":\n            case \"better-sqlite3\":\n                return `version: '3'\nservices:\n`\n            case \"oracle\":\n                throw new TypeORMError(\n                    `You cannot initialize a project with docker for Oracle driver yet.`,\n                ) // todo: implement for oracle as well\n\n            case \"mssql\":\n                return `version: '3'\nservices:\n\n  mssql:\n    image: \"microsoft/mssql-server-linux:rc2\"\n    ports:\n      - \"1433:1433\"\n    environment:\n      SA_PASSWORD: \"Admin12345\"\n      ACCEPT_EULA: \"Y\"\n\n`\n            case \"mongodb\":\n                return `version: '3'\nservices:\n\n  mongodb:\n    image: \"mongo:5.0.12\"\n    container_name: \"typeorm-mongodb\"\n    ports:\n      - \"27017:27017\"\n\n`\n            case \"spanner\":\n                return `version: '3'\nservices:\n\n  spanner:\n    image: gcr.io/cloud-spanner-emulator/emulator:1.4.1\n    ports:\n      - \"9010:9010\"\n      - \"9020:9020\"\n\n`\n        }\n        return \"\"\n    }\n\n    /**\n     * Gets contents of the new readme.md file.\n     */\n    protected static getReadmeTemplate(options: { docker: boolean }): string {\n        let template = `# Awesome Project Build with TypeORM\n\nSteps to run this project:\n\n1. Run \\`npm i\\` command\n`\n\n        if (options.docker) {\n            template += `2. Run \\`docker-compose up\\` command\n`\n        } else {\n            template += `2. Setup database settings inside \\`data-source.ts\\` file\n`\n        }\n\n        template += `3. Run \\`npm start\\` command\n`\n        return template\n    }\n\n    /**\n     * Appends to a given package.json template everything needed.\n     */\n    protected static appendPackageJson(\n        packageJsonContents: string,\n        database: string,\n        express: boolean,\n        projectIsEsm: boolean /*, docker: boolean*/,\n    ): string {\n        const packageJson = JSON.parse(packageJsonContents)\n\n        if (!packageJson.devDependencies) packageJson.devDependencies = {}\n        Object.assign(packageJson.devDependencies, {\n            \"ts-node\": \"10.9.1\",\n            \"@types/node\": \"^16.11.10\",\n            typescript: \"4.5.2\",\n        })\n\n        if (!packageJson.dependencies) packageJson.dependencies = {}\n        Object.assign(packageJson.dependencies, {\n            typeorm:\n                require(\"../package.json\").version !== \"0.0.0\"\n                    ? require(\"../package.json\").version // install version from package.json if present\n                    : require(\"../package.json\").installFrom, // else use custom source\n            \"reflect-metadata\": \"^0.1.13\",\n        })\n\n        switch (database) {\n            case \"mysql\":\n            case \"mariadb\":\n                packageJson.dependencies[\"mysql\"] = \"^2.14.1\"\n                break\n            case \"postgres\":\n            case \"cockroachdb\":\n                packageJson.dependencies[\"pg\"] = \"^8.4.0\"\n                break\n            case \"sqlite\":\n                packageJson.dependencies[\"sqlite3\"] = \"^5.0.2\"\n                break\n            case \"better-sqlite3\":\n                packageJson.dependencies[\"better-sqlite3\"] = \"^7.0.0\"\n                break\n            case \"oracle\":\n                packageJson.dependencies[\"oracledb\"] = \"^5.1.0\"\n                break\n            case \"mssql\":\n                packageJson.dependencies[\"mssql\"] = \"^9.1.1\"\n                break\n            case \"mongodb\":\n                packageJson.dependencies[\"mongodb\"] = \"^5.2.0\"\n                break\n            case \"spanner\":\n                packageJson.dependencies[\"@google-cloud/spanner\"] = \"^5.18.0\"\n                break\n        }\n\n        if (express) {\n            packageJson.dependencies[\"express\"] = \"^4.17.2\"\n            packageJson.dependencies[\"body-parser\"] = \"^1.19.1\"\n        }\n\n        if (!packageJson.scripts) packageJson.scripts = {}\n\n        if (projectIsEsm)\n            Object.assign(packageJson.scripts, {\n                start: /*(docker ? \"docker-compose up && \" : \"\") + */ \"node --loader ts-node/esm src/index.ts\",\n                typeorm: \"typeorm-ts-node-esm\",\n            })\n        else\n            Object.assign(packageJson.scripts, {\n                start: /*(docker ? \"docker-compose up && \" : \"\") + */ \"ts-node src/index.ts\",\n                typeorm: \"typeorm-ts-node-commonjs\",\n            })\n\n        return JSON.stringify(packageJson, undefined, 3)\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/commands/MigrationCreateCommand.d.ts b/node_modules/typeorm/commands/MigrationCreateCommand.d.ts
index c0678a1..f2335be 100644
--- a/node_modules/typeorm/commands/MigrationCreateCommand.d.ts
+++ b/node_modules/typeorm/commands/MigrationCreateCommand.d.ts
@@ -6,11 +6,15 @@ export declare class MigrationCreateCommand implements yargs.CommandModule {
     command: string;
     describe: string;
     builder(args: yargs.Argv): yargs.Argv<{
+        path: string;
+    } & {
         o: boolean;
     } & {
         t: number | boolean;
     }>;
-    handler(args: yargs.Arguments): Promise<void>;
+    handler(args: yargs.Arguments<any & {
+        path: string;
+    }>): Promise<void>;
     /**
      * Gets contents of the migration file.
      */
diff --git a/node_modules/typeorm/commands/MigrationCreateCommand.js b/node_modules/typeorm/commands/MigrationCreateCommand.js
index 9e7ec11..244da86 100644
--- a/node_modules/typeorm/commands/MigrationCreateCommand.js
+++ b/node_modules/typeorm/commands/MigrationCreateCommand.js
@@ -17,6 +17,11 @@ class MigrationCreateCommand {
     }
     builder(args) {
         return args
+            .positional("path", {
+            type: "string",
+            describe: "Path of the migration file",
+            demandOption: true,
+        })
             .option("o", {
             alias: "outputJs",
             type: "boolean",
@@ -56,7 +61,7 @@ class MigrationCreateCommand {
      * Gets contents of the migration file.
      */
     static getTemplate(name, timestamp) {
-        return `import { MigrationInterface, QueryRunner } from "typeorm"
+        return `import { MigrationInterface, QueryRunner } from "typeorm";
 
 export class ${(0, StringUtils_1.camelCase)(name, true)}${timestamp} implements MigrationInterface {
 
diff --git a/node_modules/typeorm/commands/MigrationCreateCommand.js.map b/node_modules/typeorm/commands/MigrationCreateCommand.js.map
index 3f0481d..f85c309 100644
--- a/node_modules/typeorm/commands/MigrationCreateCommand.js.map
+++ b/node_modules/typeorm/commands/MigrationCreateCommand.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/MigrationCreateCommand.ts"],"names":[],"mappings":";;;;AAAA,iDAA6C;AAC7C,qDAA+C;AAE/C,0DAAyB;AACzB,6DAAyD;AACzD,wDAAuB;AAEvB;;GAEG;AACH,MAAa,sBAAsB;IAAnC;QACI,YAAO,GAAG,yBAAyB,CAAA;QACnC,aAAQ,GAAG,+BAA+B,CAAA;IAgG9C,CAAC;IA9FG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,KAAK;YACd,QAAQ,EACJ,+DAA+D;SACtE,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,WAAW;YAClB,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,yCAAyC;SACtD,CAAC,CAAA;IACV,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI;YACA,MAAM,SAAS,GAAG,2BAAY,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YAC3D,MAAM,SAAS,GAAI,IAAI,CAAC,IAAe,CAAC,UAAU,CAAC,GAAG,CAAC;gBACnD,CAAC,CAAE,IAAI,CAAC,IAAe;gBACvB,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAc,CAAC,CAAA;YACtD,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;YACzC,MAAM,QAAQ,GACV,cAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,QAAQ,CAAA;YAE9D,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ;gBAC7B,CAAC,CAAC,sBAAsB,CAAC,qBAAqB,CACxC,QAAQ,EACR,SAAS,CACZ;gBACH,CAAC,CAAC,sBAAsB,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAA;YAE7D,MAAM,2BAAY,CAAC,UAAU,CACzB,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAC1C,WAAW,CACd,CAAA;YACD,OAAO,CAAC,GAAG,CACP,aAAa,eAAK,CAAC,IAAI,CACnB,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAC7C,mCAAmC,CACvC,CAAA;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,6BAAa,CAAC,SAAS,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAA;YAChE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACO,MAAM,CAAC,WAAW,CAAC,IAAY,EAAE,SAAiB;QACxD,OAAO;;eAEA,IAAA,uBAAS,EACZ,IAAI,EACJ,IAAI,CACP,GAAG,SAAS;;;;;;;;;CASpB,CAAA;IACG,CAAC;IAED;;OAEG;IACO,MAAM,CAAC,qBAAqB,CAClC,IAAY,EACZ,SAAiB;QAEjB,OAAO;;yBAEU,IAAA,uBAAS,EAAC,IAAI,EAAE,IAAI,CAAC,GAAG,SAAS;;;;;;;;;CASzD,CAAA;IACG,CAAC;CACJ;AAlGD,wDAkGC","file":"MigrationCreateCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport { camelCase } from \"../util/StringUtils\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport path from \"path\"\n\n/**\n * Creates a new migration file.\n */\nexport class MigrationCreateCommand implements yargs.CommandModule {\n    command = \"migration:create <path>\"\n    describe = \"Creates a new migration file.\"\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"o\", {\n                alias: \"outputJs\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Generate a migration file on Javascript instead of Typescript\",\n            })\n            .option(\"t\", {\n                alias: \"timestamp\",\n                type: \"number\",\n                default: false,\n                describe: \"Custom timestamp for the migration name\",\n            })\n    }\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const timestamp = CommandUtils.getTimestamp(args.timestamp)\n            const inputPath = (args.path as string).startsWith(\"/\")\n                ? (args.path as string)\n                : path.resolve(process.cwd(), args.path as string)\n            const filename = path.basename(inputPath)\n            const fullPath =\n                path.dirname(inputPath) + \"/\" + timestamp + \"-\" + filename\n\n            const fileContent = args.outputJs\n                ? MigrationCreateCommand.getJavascriptTemplate(\n                      filename,\n                      timestamp,\n                  )\n                : MigrationCreateCommand.getTemplate(filename, timestamp)\n\n            await CommandUtils.createFile(\n                fullPath + (args.outputJs ? \".js\" : \".ts\"),\n                fileContent,\n            )\n            console.log(\n                `Migration ${chalk.blue(\n                    fullPath + (args.outputJs ? \".js\" : \".ts\"),\n                )} has been generated successfully.`,\n            )\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during migration creation:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the migration file.\n     */\n    protected static getTemplate(name: string, timestamp: number): string {\n        return `import { MigrationInterface, QueryRunner } from \"typeorm\"\n\nexport class ${camelCase(\n            name,\n            true,\n        )}${timestamp} implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n    }\n\n}\n`\n    }\n\n    /**\n     * Gets contents of the migration file in Javascript.\n     */\n    protected static getJavascriptTemplate(\n        name: string,\n        timestamp: number,\n    ): string {\n        return `const { MigrationInterface, QueryRunner } = require(\"typeorm\");\n\nmodule.exports = class ${camelCase(name, true)}${timestamp} {\n\n    async up(queryRunner) {\n    }\n\n    async down(queryRunner) {\n    }\n\n}\n`\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/MigrationCreateCommand.ts"],"names":[],"mappings":";;;;AAAA,iDAA6C;AAC7C,qDAA+C;AAE/C,0DAAyB;AACzB,6DAAyD;AACzD,wDAAuB;AAEvB;;GAEG;AACH,MAAa,sBAAsB;IAAnC;QACI,YAAO,GAAG,yBAAyB,CAAA;QACnC,aAAQ,GAAG,+BAA+B,CAAA;IAqG9C,CAAC;IAnGG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI;aACN,UAAU,CAAC,MAAM,EAAE;YAChB,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,4BAA4B;YACtC,YAAY,EAAE,IAAI;SACrB,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,UAAU;YACjB,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,KAAK;YACd,QAAQ,EACJ,+DAA+D;SACtE,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACT,KAAK,EAAE,WAAW;YAClB,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE,KAAK;YACd,QAAQ,EAAE,yCAAyC;SACtD,CAAC,CAAA;IACV,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAA6C;QACvD,IAAI;YACA,MAAM,SAAS,GAAG,2BAAY,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;YAC3D,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;gBACvC,CAAC,CAAC,IAAI,CAAC,IAAI;gBACX,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAI,CAAC,CAAA;YAC5C,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAA;YACzC,MAAM,QAAQ,GACV,cAAI,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,GAAG,GAAG,SAAS,GAAG,GAAG,GAAG,QAAQ,CAAA;YAE9D,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ;gBAC7B,CAAC,CAAC,sBAAsB,CAAC,qBAAqB,CACxC,QAAQ,EACR,SAAS,CACZ;gBACH,CAAC,CAAC,sBAAsB,CAAC,WAAW,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAA;YAE7D,MAAM,2BAAY,CAAC,UAAU,CACzB,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,EAC1C,WAAW,CACd,CAAA;YACD,OAAO,CAAC,GAAG,CACP,aAAa,eAAK,CAAC,IAAI,CACnB,QAAQ,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAC7C,mCAAmC,CACvC,CAAA;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,6BAAa,CAAC,SAAS,CAAC,kCAAkC,EAAE,GAAG,CAAC,CAAA;YAChE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACO,MAAM,CAAC,WAAW,CAAC,IAAY,EAAE,SAAiB;QACxD,OAAO;;eAEA,IAAA,uBAAS,EACZ,IAAI,EACJ,IAAI,CACP,GAAG,SAAS;;;;;;;;;CASpB,CAAA;IACG,CAAC;IAED;;OAEG;IACO,MAAM,CAAC,qBAAqB,CAClC,IAAY,EACZ,SAAiB;QAEjB,OAAO;;yBAEU,IAAA,uBAAS,EAAC,IAAI,EAAE,IAAI,CAAC,GAAG,SAAS;;;;;;;;;CASzD,CAAA;IACG,CAAC;CACJ;AAvGD,wDAuGC","file":"MigrationCreateCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport { camelCase } from \"../util/StringUtils\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport path from \"path\"\n\n/**\n * Creates a new migration file.\n */\nexport class MigrationCreateCommand implements yargs.CommandModule {\n    command = \"migration:create <path>\"\n    describe = \"Creates a new migration file.\"\n\n    builder(args: yargs.Argv) {\n        return args\n            .positional(\"path\", {\n                type: \"string\",\n                describe: \"Path of the migration file\",\n                demandOption: true,\n            })\n            .option(\"o\", {\n                alias: \"outputJs\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Generate a migration file on Javascript instead of Typescript\",\n            })\n            .option(\"t\", {\n                alias: \"timestamp\",\n                type: \"number\",\n                default: false,\n                describe: \"Custom timestamp for the migration name\",\n            })\n    }\n\n    async handler(args: yargs.Arguments<any & { path: string }>) {\n        try {\n            const timestamp = CommandUtils.getTimestamp(args.timestamp)\n            const inputPath = args.path.startsWith(\"/\")\n                ? args.path\n                : path.resolve(process.cwd(), args.path)\n            const filename = path.basename(inputPath)\n            const fullPath =\n                path.dirname(inputPath) + \"/\" + timestamp + \"-\" + filename\n\n            const fileContent = args.outputJs\n                ? MigrationCreateCommand.getJavascriptTemplate(\n                      filename,\n                      timestamp,\n                  )\n                : MigrationCreateCommand.getTemplate(filename, timestamp)\n\n            await CommandUtils.createFile(\n                fullPath + (args.outputJs ? \".js\" : \".ts\"),\n                fileContent,\n            )\n            console.log(\n                `Migration ${chalk.blue(\n                    fullPath + (args.outputJs ? \".js\" : \".ts\"),\n                )} has been generated successfully.`,\n            )\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during migration creation:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the migration file.\n     */\n    protected static getTemplate(name: string, timestamp: number): string {\n        return `import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class ${camelCase(\n            name,\n            true,\n        )}${timestamp} implements MigrationInterface {\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n    }\n\n}\n`\n    }\n\n    /**\n     * Gets contents of the migration file in Javascript.\n     */\n    protected static getJavascriptTemplate(\n        name: string,\n        timestamp: number,\n    ): string {\n        return `const { MigrationInterface, QueryRunner } = require(\"typeorm\");\n\nmodule.exports = class ${camelCase(name, true)}${timestamp} {\n\n    async up(queryRunner) {\n    }\n\n    async down(queryRunner) {\n    }\n\n}\n`\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/commands/MigrationGenerateCommand.d.ts b/node_modules/typeorm/commands/MigrationGenerateCommand.d.ts
index 9837e2b..fcc2557 100644
--- a/node_modules/typeorm/commands/MigrationGenerateCommand.d.ts
+++ b/node_modules/typeorm/commands/MigrationGenerateCommand.d.ts
@@ -6,6 +6,8 @@ export declare class MigrationGenerateCommand implements yargs.CommandModule {
     command: string;
     describe: string;
     builder(args: yargs.Argv): yargs.Argv<{
+        path: string;
+    } & {
         dataSource: string;
     } & {
         p: boolean;
@@ -18,7 +20,9 @@ export declare class MigrationGenerateCommand implements yargs.CommandModule {
     } & {
         t: number | boolean;
     }>;
-    handler(args: yargs.Arguments): Promise<void>;
+    handler(args: yargs.Arguments<any & {
+        path: string;
+    }>): Promise<void>;
     /**
      * Formats query parameters for migration queries if parameters actually exist
      */
diff --git a/node_modules/typeorm/commands/MigrationGenerateCommand.js b/node_modules/typeorm/commands/MigrationGenerateCommand.js
index 5d29937..a3d7a82 100644
--- a/node_modules/typeorm/commands/MigrationGenerateCommand.js
+++ b/node_modules/typeorm/commands/MigrationGenerateCommand.js
@@ -19,6 +19,11 @@ class MigrationGenerateCommand {
     }
     builder(args) {
         return args
+            .positional("path", {
+            type: "string",
+            describe: "Path of the migration file",
+            demandOption: true,
+        })
             .option("dataSource", {
             alias: "d",
             type: "string",
diff --git a/node_modules/typeorm/commands/MigrationGenerateCommand.js.map b/node_modules/typeorm/commands/MigrationGenerateCommand.js.map
index d0c4e98..a9965f0 100644
--- a/node_modules/typeorm/commands/MigrationGenerateCommand.js.map
+++ b/node_modules/typeorm/commands/MigrationGenerateCommand.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/MigrationGenerateCommand.ts"],"names":[],"mappings":"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","file":"MigrationGenerateCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport { camelCase } from \"../util/StringUtils\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { format } from \"@sqltools/formatter/lib/sqlFormatter\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { DataSource } from \"../data-source\"\nimport * as path from \"path\"\nimport process from \"process\"\n\n/**\n * Generates a new migration file with sql needs to be executed to update schema.\n */\nexport class MigrationGenerateCommand implements yargs.CommandModule {\n    command = \"migration:generate <path>\"\n    describe =\n        \"Generates a new migration file with sql needs to be executed to update schema.\"\n\n    builder(args: yargs.Argv) {\n        return args\n            .option(\"dataSource\", {\n                alias: \"d\",\n                type: \"string\",\n                describe:\n                    \"Path to the file where your DataSource instance is defined.\",\n                demandOption: true,\n            })\n            .option(\"p\", {\n                alias: \"pretty\",\n                type: \"boolean\",\n                default: false,\n                describe: \"Pretty-print generated SQL\",\n            })\n            .option(\"o\", {\n                alias: \"outputJs\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Generate a migration file on Javascript instead of Typescript\",\n            })\n            .option(\"dr\", {\n                alias: \"dryrun\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Prints out the contents of the migration instead of writing it to a file\",\n            })\n            .option(\"ch\", {\n                alias: \"check\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Verifies that the current database is up to date and that no migrations are needed. Otherwise exits with code 1.\",\n            })\n            .option(\"t\", {\n                alias: \"timestamp\",\n                type: \"number\",\n                default: false,\n                describe: \"Custom timestamp for the migration name\",\n            })\n    }\n\n    async handler(args: yargs.Arguments) {\n        const timestamp = CommandUtils.getTimestamp(args.timestamp)\n        const extension = args.outputJs ? \".js\" : \".ts\"\n        const fullPath = (args.path as string).startsWith(\"/\")\n            ? (args.path as string)\n            : path.resolve(process.cwd(), args.path as string)\n        const filename = timestamp + \"-\" + path.basename(fullPath) + extension\n\n        let dataSource: DataSource | undefined = undefined\n        try {\n            dataSource = await CommandUtils.loadDataSource(\n                path.resolve(process.cwd(), args.dataSource as string),\n            )\n            dataSource.setOptions({\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false,\n            })\n            await dataSource.initialize()\n\n            const upSqls: string[] = [],\n                downSqls: string[] = []\n\n            try {\n                const sqlInMemory = await dataSource.driver\n                    .createSchemaBuilder()\n                    .log()\n\n                if (args.pretty) {\n                    sqlInMemory.upQueries.forEach((upQuery) => {\n                        upQuery.query = MigrationGenerateCommand.prettifyQuery(\n                            upQuery.query,\n                        )\n                    })\n                    sqlInMemory.downQueries.forEach((downQuery) => {\n                        downQuery.query =\n                            MigrationGenerateCommand.prettifyQuery(\n                                downQuery.query,\n                            )\n                    })\n                }\n\n                sqlInMemory.upQueries.forEach((upQuery) => {\n                    upSqls.push(\n                        \"        await queryRunner.query(`\" +\n                            upQuery.query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") +\n                            \"`\" +\n                            MigrationGenerateCommand.queryParams(\n                                upQuery.parameters,\n                            ) +\n                            \");\",\n                    )\n                })\n                sqlInMemory.downQueries.forEach((downQuery) => {\n                    downSqls.push(\n                        \"        await queryRunner.query(`\" +\n                            downQuery.query.replace(\n                                new RegExp(\"`\", \"g\"),\n                                \"\\\\`\",\n                            ) +\n                            \"`\" +\n                            MigrationGenerateCommand.queryParams(\n                                downQuery.parameters,\n                            ) +\n                            \");\",\n                    )\n                })\n            } finally {\n                await dataSource.destroy()\n            }\n\n            if (!upSqls.length) {\n                if (args.check) {\n                    console.log(\n                        chalk.green(`No changes in database schema were found`),\n                    )\n                    process.exit(0)\n                } else {\n                    console.log(\n                        chalk.yellow(\n                            `No changes in database schema were found - cannot generate a migration. To create a new empty migration use \"typeorm migration:create\" command`,\n                        ),\n                    )\n                    process.exit(1)\n                }\n            } else if (!args.path) {\n                console.log(chalk.yellow(\"Please specify a migration path\"))\n                process.exit(1)\n            }\n\n            const fileContent = args.outputJs\n                ? MigrationGenerateCommand.getJavascriptTemplate(\n                      path.basename(fullPath),\n                      timestamp,\n                      upSqls,\n                      downSqls.reverse(),\n                  )\n                : MigrationGenerateCommand.getTemplate(\n                      path.basename(fullPath),\n                      timestamp,\n                      upSqls,\n                      downSqls.reverse(),\n                  )\n\n            if (args.check) {\n                console.log(\n                    chalk.yellow(\n                        `Unexpected changes in database schema were found in check mode:\\n\\n${chalk.white(\n                            fileContent,\n                        )}`,\n                    ),\n                )\n                process.exit(1)\n            }\n\n            if (args.dryrun) {\n                console.log(\n                    chalk.green(\n                        `Migration ${chalk.blue(\n                            fullPath + extension,\n                        )} has content:\\n\\n${chalk.white(fileContent)}`,\n                    ),\n                )\n            } else {\n                const migrationFileName =\n                    path.dirname(fullPath) + \"/\" + filename\n                await CommandUtils.createFile(migrationFileName, fileContent)\n\n                console.log(\n                    chalk.green(\n                        `Migration ${chalk.blue(\n                            migrationFileName,\n                        )} has been generated successfully.`,\n                    ),\n                )\n                process.exit(0)\n            }\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during migration generation:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats query parameters for migration queries if parameters actually exist\n     */\n    protected static queryParams(parameters: any[] | undefined): string {\n        if (!parameters || !parameters.length) {\n            return \"\"\n        }\n\n        return `, ${JSON.stringify(parameters)}`\n    }\n\n    /**\n     * Gets contents of the migration file.\n     */\n    protected static getTemplate(\n        name: string,\n        timestamp: number,\n        upSqls: string[],\n        downSqls: string[],\n    ): string {\n        const migrationName = `${camelCase(name, true)}${timestamp}`\n\n        return `import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class ${migrationName} implements MigrationInterface {\n    name = '${migrationName}'\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n${upSqls.join(`\n`)}\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n${downSqls.join(`\n`)}\n    }\n\n}\n`\n    }\n\n    /**\n     * Gets contents of the migration file in Javascript.\n     */\n    protected static getJavascriptTemplate(\n        name: string,\n        timestamp: number,\n        upSqls: string[],\n        downSqls: string[],\n    ): string {\n        const migrationName = `${camelCase(name, true)}${timestamp}`\n\n        return `const { MigrationInterface, QueryRunner } = require(\"typeorm\");\n\nmodule.exports = class ${migrationName} {\n    name = '${migrationName}'\n\n    async up(queryRunner) {\n${upSqls.join(`\n`)}\n    }\n\n    async down(queryRunner) {\n${downSqls.join(`\n`)}\n    }\n}\n`\n    }\n\n    /**\n     *\n     */\n    protected static prettifyQuery(query: string) {\n        const formattedQuery = format(query, { indent: \"    \" })\n        return (\n            \"\\n\" + formattedQuery.replace(/^/gm, \"            \") + \"\\n        \"\n        )\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/MigrationGenerateCommand.ts"],"names":[],"mappings":"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","file":"MigrationGenerateCommand.js","sourcesContent":["import { CommandUtils } from \"./CommandUtils\"\nimport { camelCase } from \"../util/StringUtils\"\nimport * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport { format } from \"@sqltools/formatter/lib/sqlFormatter\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { DataSource } from \"../data-source\"\nimport * as path from \"path\"\nimport process from \"process\"\n\n/**\n * Generates a new migration file with sql needs to be executed to update schema.\n */\nexport class MigrationGenerateCommand implements yargs.CommandModule {\n    command = \"migration:generate <path>\"\n    describe =\n        \"Generates a new migration file with sql needs to be executed to update schema.\"\n\n    builder(args: yargs.Argv) {\n        return args\n            .positional(\"path\", {\n                type: \"string\",\n                describe: \"Path of the migration file\",\n                demandOption: true,\n            })\n            .option(\"dataSource\", {\n                alias: \"d\",\n                type: \"string\",\n                describe:\n                    \"Path to the file where your DataSource instance is defined.\",\n                demandOption: true,\n            })\n            .option(\"p\", {\n                alias: \"pretty\",\n                type: \"boolean\",\n                default: false,\n                describe: \"Pretty-print generated SQL\",\n            })\n            .option(\"o\", {\n                alias: \"outputJs\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Generate a migration file on Javascript instead of Typescript\",\n            })\n            .option(\"dr\", {\n                alias: \"dryrun\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Prints out the contents of the migration instead of writing it to a file\",\n            })\n            .option(\"ch\", {\n                alias: \"check\",\n                type: \"boolean\",\n                default: false,\n                describe:\n                    \"Verifies that the current database is up to date and that no migrations are needed. Otherwise exits with code 1.\",\n            })\n            .option(\"t\", {\n                alias: \"timestamp\",\n                type: \"number\",\n                default: false,\n                describe: \"Custom timestamp for the migration name\",\n            })\n    }\n\n    async handler(args: yargs.Arguments<any & { path: string }>) {\n        const timestamp = CommandUtils.getTimestamp(args.timestamp)\n        const extension = args.outputJs ? \".js\" : \".ts\"\n        const fullPath = args.path.startsWith(\"/\")\n            ? args.path\n            : path.resolve(process.cwd(), args.path)\n        const filename = timestamp + \"-\" + path.basename(fullPath) + extension\n\n        let dataSource: DataSource | undefined = undefined\n        try {\n            dataSource = await CommandUtils.loadDataSource(\n                path.resolve(process.cwd(), args.dataSource as string),\n            )\n            dataSource.setOptions({\n                synchronize: false,\n                migrationsRun: false,\n                dropSchema: false,\n                logging: false,\n            })\n            await dataSource.initialize()\n\n            const upSqls: string[] = [],\n                downSqls: string[] = []\n\n            try {\n                const sqlInMemory = await dataSource.driver\n                    .createSchemaBuilder()\n                    .log()\n\n                if (args.pretty) {\n                    sqlInMemory.upQueries.forEach((upQuery) => {\n                        upQuery.query = MigrationGenerateCommand.prettifyQuery(\n                            upQuery.query,\n                        )\n                    })\n                    sqlInMemory.downQueries.forEach((downQuery) => {\n                        downQuery.query =\n                            MigrationGenerateCommand.prettifyQuery(\n                                downQuery.query,\n                            )\n                    })\n                }\n\n                sqlInMemory.upQueries.forEach((upQuery) => {\n                    upSqls.push(\n                        \"        await queryRunner.query(`\" +\n                            upQuery.query.replace(new RegExp(\"`\", \"g\"), \"\\\\`\") +\n                            \"`\" +\n                            MigrationGenerateCommand.queryParams(\n                                upQuery.parameters,\n                            ) +\n                            \");\",\n                    )\n                })\n                sqlInMemory.downQueries.forEach((downQuery) => {\n                    downSqls.push(\n                        \"        await queryRunner.query(`\" +\n                            downQuery.query.replace(\n                                new RegExp(\"`\", \"g\"),\n                                \"\\\\`\",\n                            ) +\n                            \"`\" +\n                            MigrationGenerateCommand.queryParams(\n                                downQuery.parameters,\n                            ) +\n                            \");\",\n                    )\n                })\n            } finally {\n                await dataSource.destroy()\n            }\n\n            if (!upSqls.length) {\n                if (args.check) {\n                    console.log(\n                        chalk.green(`No changes in database schema were found`),\n                    )\n                    process.exit(0)\n                } else {\n                    console.log(\n                        chalk.yellow(\n                            `No changes in database schema were found - cannot generate a migration. To create a new empty migration use \"typeorm migration:create\" command`,\n                        ),\n                    )\n                    process.exit(1)\n                }\n            } else if (!args.path) {\n                console.log(chalk.yellow(\"Please specify a migration path\"))\n                process.exit(1)\n            }\n\n            const fileContent = args.outputJs\n                ? MigrationGenerateCommand.getJavascriptTemplate(\n                      path.basename(fullPath),\n                      timestamp,\n                      upSqls,\n                      downSqls.reverse(),\n                  )\n                : MigrationGenerateCommand.getTemplate(\n                      path.basename(fullPath),\n                      timestamp,\n                      upSqls,\n                      downSqls.reverse(),\n                  )\n\n            if (args.check) {\n                console.log(\n                    chalk.yellow(\n                        `Unexpected changes in database schema were found in check mode:\\n\\n${chalk.white(\n                            fileContent,\n                        )}`,\n                    ),\n                )\n                process.exit(1)\n            }\n\n            if (args.dryrun) {\n                console.log(\n                    chalk.green(\n                        `Migration ${chalk.blue(\n                            fullPath + extension,\n                        )} has content:\\n\\n${chalk.white(fileContent)}`,\n                    ),\n                )\n            } else {\n                const migrationFileName =\n                    path.dirname(fullPath) + \"/\" + filename\n                await CommandUtils.createFile(migrationFileName, fileContent)\n\n                console.log(\n                    chalk.green(\n                        `Migration ${chalk.blue(\n                            migrationFileName,\n                        )} has been generated successfully.`,\n                    ),\n                )\n                process.exit(0)\n            }\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during migration generation:\", err)\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats query parameters for migration queries if parameters actually exist\n     */\n    protected static queryParams(parameters: any[] | undefined): string {\n        if (!parameters || !parameters.length) {\n            return \"\"\n        }\n\n        return `, ${JSON.stringify(parameters)}`\n    }\n\n    /**\n     * Gets contents of the migration file.\n     */\n    protected static getTemplate(\n        name: string,\n        timestamp: number,\n        upSqls: string[],\n        downSqls: string[],\n    ): string {\n        const migrationName = `${camelCase(name, true)}${timestamp}`\n\n        return `import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class ${migrationName} implements MigrationInterface {\n    name = '${migrationName}'\n\n    public async up(queryRunner: QueryRunner): Promise<void> {\n${upSqls.join(`\n`)}\n    }\n\n    public async down(queryRunner: QueryRunner): Promise<void> {\n${downSqls.join(`\n`)}\n    }\n\n}\n`\n    }\n\n    /**\n     * Gets contents of the migration file in Javascript.\n     */\n    protected static getJavascriptTemplate(\n        name: string,\n        timestamp: number,\n        upSqls: string[],\n        downSqls: string[],\n    ): string {\n        const migrationName = `${camelCase(name, true)}${timestamp}`\n\n        return `const { MigrationInterface, QueryRunner } = require(\"typeorm\");\n\nmodule.exports = class ${migrationName} {\n    name = '${migrationName}'\n\n    async up(queryRunner) {\n${upSqls.join(`\n`)}\n    }\n\n    async down(queryRunner) {\n${downSqls.join(`\n`)}\n    }\n}\n`\n    }\n\n    /**\n     *\n     */\n    protected static prettifyQuery(query: string) {\n        const formattedQuery = format(query, { indent: \"    \" })\n        return (\n            \"\\n\" + formattedQuery.replace(/^/gm, \"            \") + \"\\n        \"\n        )\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/commands/SubscriberCreateCommand.d.ts b/node_modules/typeorm/commands/SubscriberCreateCommand.d.ts
index dd18e8d..2a5dac8 100644
--- a/node_modules/typeorm/commands/SubscriberCreateCommand.d.ts
+++ b/node_modules/typeorm/commands/SubscriberCreateCommand.d.ts
@@ -5,6 +5,9 @@ import * as yargs from "yargs";
 export declare class SubscriberCreateCommand implements yargs.CommandModule {
     command: string;
     describe: string;
+    builder(args: yargs.Argv): yargs.Argv<{
+        path: string;
+    }>;
     handler(args: yargs.Arguments): Promise<void>;
     /**
      * Gets contents of the entity file.
diff --git a/node_modules/typeorm/commands/SubscriberCreateCommand.js b/node_modules/typeorm/commands/SubscriberCreateCommand.js
index eb6dca1..e5d35c0 100644
--- a/node_modules/typeorm/commands/SubscriberCreateCommand.js
+++ b/node_modules/typeorm/commands/SubscriberCreateCommand.js
@@ -14,6 +14,13 @@ class SubscriberCreateCommand {
         this.command = "subscriber:create <path>";
         this.describe = "Generates a new subscriber.";
     }
+    builder(args) {
+        return args.positional("path", {
+            type: "string",
+            describe: "Path of the subscriber file",
+            demandOption: true,
+        });
+    }
     async handler(args) {
         try {
             const fullPath = args.path.startsWith("/")
diff --git a/node_modules/typeorm/commands/SubscriberCreateCommand.js.map b/node_modules/typeorm/commands/SubscriberCreateCommand.js.map
index 3f888fc..1b3b72d 100644
--- a/node_modules/typeorm/commands/SubscriberCreateCommand.js.map
+++ b/node_modules/typeorm/commands/SubscriberCreateCommand.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/commands/SubscriberCreateCommand.ts"],"names":[],"mappings":";;;;AACA,0DAAyB;AACzB,wDAAuB;AACvB,6DAAyD;AACzD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,uBAAuB;IAApC;QACI,YAAO,GAAG,0BAA0B,CAAA;QACpC,aAAQ,GAAG,6BAA6B,CAAA;IA2C5C,CAAC;IAzCG,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI;YACA,MAAM,QAAQ,GAAI,IAAI,CAAC,IAAe,CAAC,UAAU,CAAC,GAAG,CAAC;gBAClD,CAAC,CAAE,IAAI,CAAC,IAAe;gBACvB,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAc,CAAC,CAAA;YACtD,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YACxC,MAAM,WAAW,GAAG,uBAAuB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;YACjE,MAAM,UAAU,GAAG,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAA;YAClE,IAAI,UAAU,EAAE;gBACZ,MAAM,QAAQ,eAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,iBAAiB,CAAA;aAC9D;YACD,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,EAAE,WAAW,CAAC,CAAA;YAC5D,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,KAAK,CACP,cAAc,eAAK,CAAC,IAAI,CACpB,QAAQ,CACX,iCAAiC,CACrC,CACJ,CAAA;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,6BAAa,CAAC,SAAS,CAAC,mCAAmC,CAAC,CAAA;YAC5D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACO,MAAM,CAAC,WAAW,CAAC,IAAY;QACrC,OAAO;;;eAGA,IAAI;;;CAGlB,CAAA;IACG,CAAC;CACJ;AA7CD,0DA6CC","file":"SubscriberCreateCommand.js","sourcesContent":["import * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport path from \"path\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { CommandUtils } from \"./CommandUtils\"\n\n/**\n * Generates a new subscriber.\n */\nexport class SubscriberCreateCommand implements yargs.CommandModule {\n    command = \"subscriber:create <path>\"\n    describe = \"Generates a new subscriber.\"\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const fullPath = (args.path as string).startsWith(\"/\")\n                ? (args.path as string)\n                : path.resolve(process.cwd(), args.path as string)\n            const filename = path.basename(fullPath)\n            const fileContent = SubscriberCreateCommand.getTemplate(filename)\n            const fileExists = await CommandUtils.fileExists(fullPath + \".ts\")\n            if (fileExists) {\n                throw `File ${chalk.blue(fullPath + \".ts\")} already exists`\n            }\n            await CommandUtils.createFile(fullPath + \".ts\", fileContent)\n            console.log(\n                chalk.green(\n                    `Subscriber ${chalk.blue(\n                        fullPath,\n                    )} has been created successfully.`,\n                ),\n            )\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during subscriber creation:\")\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the entity file.\n     */\n    protected static getTemplate(name: string): string {\n        return `import { EventSubscriber, EntitySubscriberInterface } from \"typeorm\"\n\n@EventSubscriber()\nexport class ${name} implements EntitySubscriberInterface {\n\n}\n`\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/commands/SubscriberCreateCommand.ts"],"names":[],"mappings":";;;;AACA,0DAAyB;AACzB,wDAAuB;AACvB,6DAAyD;AACzD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,uBAAuB;IAApC;QACI,YAAO,GAAG,0BAA0B,CAAA;QACpC,aAAQ,GAAG,6BAA6B,CAAA;IAmD5C,CAAC;IAjDG,OAAO,CAAC,IAAgB;QACpB,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;YAC3B,IAAI,EAAE,QAAQ;YACd,QAAQ,EAAE,6BAA6B;YACvC,YAAY,EAAE,IAAI;SACrB,CAAC,CAAA;IACN,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAqB;QAC/B,IAAI;YACA,MAAM,QAAQ,GAAI,IAAI,CAAC,IAAe,CAAC,UAAU,CAAC,GAAG,CAAC;gBAClD,CAAC,CAAE,IAAI,CAAC,IAAe;gBACvB,CAAC,CAAC,cAAI,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,IAAI,CAAC,IAAc,CAAC,CAAA;YACtD,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;YACxC,MAAM,WAAW,GAAG,uBAAuB,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;YACjE,MAAM,UAAU,GAAG,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAA;YAClE,IAAI,UAAU,EAAE;gBACZ,MAAM,QAAQ,eAAK,CAAC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC,iBAAiB,CAAA;aAC9D;YACD,MAAM,2BAAY,CAAC,UAAU,CAAC,QAAQ,GAAG,KAAK,EAAE,WAAW,CAAC,CAAA;YAC5D,OAAO,CAAC,GAAG,CACP,eAAK,CAAC,KAAK,CACP,cAAc,eAAK,CAAC,IAAI,CACpB,QAAQ,CACX,iCAAiC,CACrC,CACJ,CAAA;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,6BAAa,CAAC,SAAS,CAAC,mCAAmC,CAAC,CAAA;YAC5D,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAA;SAClB;IACL,CAAC;IAED,4EAA4E;IAC5E,2BAA2B;IAC3B,4EAA4E;IAE5E;;OAEG;IACO,MAAM,CAAC,WAAW,CAAC,IAAY;QACrC,OAAO;;;eAGA,IAAI;;;CAGlB,CAAA;IACG,CAAC;CACJ;AArDD,0DAqDC","file":"SubscriberCreateCommand.js","sourcesContent":["import * as yargs from \"yargs\"\nimport chalk from \"chalk\"\nimport path from \"path\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { CommandUtils } from \"./CommandUtils\"\n\n/**\n * Generates a new subscriber.\n */\nexport class SubscriberCreateCommand implements yargs.CommandModule {\n    command = \"subscriber:create <path>\"\n    describe = \"Generates a new subscriber.\"\n\n    builder(args: yargs.Argv) {\n        return args.positional(\"path\", {\n            type: \"string\",\n            describe: \"Path of the subscriber file\",\n            demandOption: true,\n        })\n    }\n\n    async handler(args: yargs.Arguments) {\n        try {\n            const fullPath = (args.path as string).startsWith(\"/\")\n                ? (args.path as string)\n                : path.resolve(process.cwd(), args.path as string)\n            const filename = path.basename(fullPath)\n            const fileContent = SubscriberCreateCommand.getTemplate(filename)\n            const fileExists = await CommandUtils.fileExists(fullPath + \".ts\")\n            if (fileExists) {\n                throw `File ${chalk.blue(fullPath + \".ts\")} already exists`\n            }\n            await CommandUtils.createFile(fullPath + \".ts\", fileContent)\n            console.log(\n                chalk.green(\n                    `Subscriber ${chalk.blue(\n                        fullPath,\n                    )} has been created successfully.`,\n                ),\n            )\n        } catch (err) {\n            PlatformTools.logCmdErr(\"Error during subscriber creation:\")\n            process.exit(1)\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets contents of the entity file.\n     */\n    protected static getTemplate(name: string): string {\n        return `import { EventSubscriber, EntitySubscriberInterface } from \"typeorm\"\n\n@EventSubscriber()\nexport class ${name} implements EntitySubscriberInterface {\n\n}\n`\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/common/EntityTarget.d.ts b/node_modules/typeorm/common/EntityTarget.d.ts
index c763f4f..015e46b 100644
--- a/node_modules/typeorm/common/EntityTarget.d.ts
+++ b/node_modules/typeorm/common/EntityTarget.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "./ObjectType";
-import { EntitySchema } from "..";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { EntitySchema } from "typeorm";
 /**
  * Entity target.
  */
diff --git a/node_modules/typeorm/connection/BaseConnectionOptions.d.ts b/node_modules/typeorm/connection/BaseConnectionOptions.d.ts
index 1f5c661..81d59de 100644
--- a/node_modules/typeorm/connection/BaseConnectionOptions.d.ts
+++ b/node_modules/typeorm/connection/BaseConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * BaseConnectionOptions is set of connection options shared by all database types.
  *
diff --git a/node_modules/typeorm/connection/Connection.d.ts b/node_modules/typeorm/connection/Connection.d.ts
index ca4e268..0517421 100644
--- a/node_modules/typeorm/connection/Connection.d.ts
+++ b/node_modules/typeorm/connection/Connection.d.ts
@@ -1,4 +1,4 @@
-import { DataSource } from "../data-source/DataSource";
+import { DataSource } from "typeorm/data-source/DataSource";
 /**
  * Connection is a single database ORM connection to a specific database.
  * Its not required to be a database connection, depend on database type it can create connection pool.
diff --git a/node_modules/typeorm/connection/ConnectionManager.d.ts b/node_modules/typeorm/connection/ConnectionManager.d.ts
index ca873ba..c602666 100644
--- a/node_modules/typeorm/connection/ConnectionManager.d.ts
+++ b/node_modules/typeorm/connection/ConnectionManager.d.ts
@@ -1,5 +1,5 @@
-import { DataSource } from "../data-source/DataSource";
-import { DataSourceOptions } from "../data-source/DataSourceOptions";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { DataSourceOptions } from "typeorm/data-source/DataSourceOptions";
 /**
  * ConnectionManager is used to store and manage multiple orm connections.
  * It also provides useful factory methods to simplify connection creation.
diff --git a/node_modules/typeorm/connection/ConnectionOptions.d.ts b/node_modules/typeorm/connection/ConnectionOptions.d.ts
index 1119187..a424e82 100644
--- a/node_modules/typeorm/connection/ConnectionOptions.d.ts
+++ b/node_modules/typeorm/connection/ConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { DataSourceOptions } from "../data-source/DataSourceOptions";
+import { DataSourceOptions } from "typeorm/data-source/DataSourceOptions";
 /**
  * ConnectionOptions is an interface with settings and options for specific connection.
  * Options contain database and other connection-related settings.
diff --git a/node_modules/typeorm/connection/ConnectionOptionsReader.d.ts b/node_modules/typeorm/connection/ConnectionOptionsReader.d.ts
index 2b1708c..f8009d1 100644
--- a/node_modules/typeorm/connection/ConnectionOptionsReader.d.ts
+++ b/node_modules/typeorm/connection/ConnectionOptionsReader.d.ts
@@ -1,4 +1,4 @@
-import { DataSourceOptions } from "../data-source/DataSourceOptions";
+import { DataSourceOptions } from "typeorm/data-source/DataSourceOptions";
 /**
  * Reads connection options from the ormconfig.
  */
diff --git a/node_modules/typeorm/data-source/BaseDataSourceOptions.d.ts b/node_modules/typeorm/data-source/BaseDataSourceOptions.d.ts
index 1592f5b..c177239 100644
--- a/node_modules/typeorm/data-source/BaseDataSourceOptions.d.ts
+++ b/node_modules/typeorm/data-source/BaseDataSourceOptions.d.ts
@@ -1,11 +1,11 @@
-import { EntitySchema } from "../entity-schema/EntitySchema";
-import { LoggerOptions } from "../logger/LoggerOptions";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { DatabaseType } from "../driver/types/DatabaseType";
-import { Logger } from "../logger/Logger";
-import { DataSource } from "../data-source/DataSource";
-import { QueryResultCache } from "../cache/QueryResultCache";
-import { MixedList } from "../common/MixedList";
+import { EntitySchema } from "typeorm/entity-schema/EntitySchema";
+import { LoggerOptions } from "typeorm/logger/LoggerOptions";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { DatabaseType } from "typeorm/driver/types/DatabaseType";
+import { Logger } from "typeorm/logger/Logger";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryResultCache } from "typeorm/cache/QueryResultCache";
+import { MixedList } from "typeorm/common/MixedList";
 /**
  * BaseDataSourceOptions is set of DataSourceOptions shared by all database types.
  */
diff --git a/node_modules/typeorm/data-source/DataSource.d.ts b/node_modules/typeorm/data-source/DataSource.d.ts
index ae58161..8ca94a8 100644
--- a/node_modules/typeorm/data-source/DataSource.d.ts
+++ b/node_modules/typeorm/data-source/DataSource.d.ts
@@ -1,27 +1,27 @@
-import { Driver } from "../driver/Driver";
-import { Repository } from "../repository/Repository";
-import { EntitySubscriberInterface } from "../subscriber/EntitySubscriberInterface";
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectType } from "../common/ObjectType";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { TreeRepository } from "../repository/TreeRepository";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { Logger } from "../logger/Logger";
-import { MigrationInterface } from "../migration/MigrationInterface";
-import { Migration } from "../migration/Migration";
-import { MongoRepository } from "../repository/MongoRepository";
-import { MongoEntityManager } from "../entity-manager/MongoEntityManager";
-import { DataSourceOptions } from "./DataSourceOptions";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { QueryResultCache } from "../cache/QueryResultCache";
-import { SqljsEntityManager } from "../entity-manager/SqljsEntityManager";
-import { RelationLoader } from "../query-builder/RelationLoader";
-import { IsolationLevel } from "../driver/types/IsolationLevel";
-import { ReplicationMode } from "../driver/types/ReplicationMode";
-import { RelationIdLoader } from "../query-builder/RelationIdLoader";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { Driver } from "typeorm/driver/Driver";
+import { Repository } from "typeorm/repository/Repository";
+import { EntitySubscriberInterface } from "typeorm/subscriber/EntitySubscriberInterface";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { TreeRepository } from "typeorm/repository/TreeRepository";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { Logger } from "typeorm/logger/Logger";
+import { MigrationInterface } from "typeorm/migration/MigrationInterface";
+import { Migration } from "typeorm/migration/Migration";
+import { MongoRepository } from "typeorm/repository/MongoRepository";
+import { MongoEntityManager } from "typeorm/entity-manager/MongoEntityManager";
+import { DataSourceOptions } from "typeorm/data-source/DataSourceOptions";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { QueryResultCache } from "typeorm/cache/QueryResultCache";
+import { SqljsEntityManager } from "typeorm/entity-manager/SqljsEntityManager";
+import { RelationLoader } from "typeorm/query-builder/RelationLoader";
+import { IsolationLevel } from "typeorm/driver/types/IsolationLevel";
+import { ReplicationMode } from "typeorm/driver/types/ReplicationMode";
+import { RelationIdLoader } from "typeorm/query-builder/RelationIdLoader";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * DataSource is a pre-defined connection configuration to a specific database.
  * You can have multiple data sources connected (with multiple connections in it),
diff --git a/node_modules/typeorm/data-source/DataSource.js b/node_modules/typeorm/data-source/DataSource.js
index 1aedd23..f1c8dbe 100644
--- a/node_modules/typeorm/data-source/DataSource.js
+++ b/node_modules/typeorm/data-source/DataSource.js
@@ -8,6 +8,7 @@ const EntityMetadataValidator_1 = require("../metadata-builder/EntityMetadataVal
 const EntityManagerFactory_1 = require("../entity-manager/EntityManagerFactory");
 const DriverFactory_1 = require("../driver/DriverFactory");
 const ConnectionMetadataBuilder_1 = require("../connection/ConnectionMetadataBuilder");
+const query_builder_1 = require("../query-builder");
 const SelectQueryBuilder_1 = require("../query-builder/SelectQueryBuilder");
 const LoggerFactory_1 = require("../logger/LoggerFactory");
 const QueryResultCacheFactory_1 = require("../cache/QueryResultCacheFactory");
@@ -16,6 +17,7 @@ const ObjectUtils_1 = require("../util/ObjectUtils");
 const RelationIdLoader_1 = require("../query-builder/RelationIdLoader");
 const DriverUtils_1 = require("../driver/DriverUtils");
 const InstanceChecker_1 = require("../util/InstanceChecker");
+(0, query_builder_1.registerQueryBuilders)();
 /**
  * DataSource is a pre-defined connection configuration to a specific database.
  * You can have multiple data sources connected (with multiple connections in it),
diff --git a/node_modules/typeorm/data-source/DataSource.js.map b/node_modules/typeorm/data-source/DataSource.js.map
index 083981f..98f34b7 100644
--- a/node_modules/typeorm/data-source/DataSource.js.map
+++ b/node_modules/typeorm/data-source/DataSource.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/data-source/DataSource.ts"],"names":[],"mappings":"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","file":"DataSource.js","sourcesContent":["import { Driver } from \"../driver/Driver\"\nimport { Repository } from \"../repository/Repository\"\nimport { EntitySubscriberInterface } from \"../subscriber/EntitySubscriberInterface\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\"\nimport {\n    CannotConnectAlreadyConnectedError,\n    CannotExecuteNotConnectedError,\n    EntityMetadataNotFoundError,\n    QueryRunnerProviderAlreadyReleasedError,\n    TypeORMError,\n} from \"../error\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { Logger } from \"../logger/Logger\"\nimport { MigrationInterface } from \"../migration/MigrationInterface\"\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\"\nimport { Migration } from \"../migration/Migration\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\"\nimport { DataSourceOptions } from \"./DataSourceOptions\"\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\"\nimport { DriverFactory } from \"../driver/DriverFactory\"\nimport { ConnectionMetadataBuilder } from \"../connection/ConnectionMetadataBuilder\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { LoggerFactory } from \"../logger/LoggerFactory\"\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\"\nimport { QueryResultCache } from \"../cache/QueryResultCache\"\nimport { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\"\nimport { RelationLoader } from \"../query-builder/RelationLoader\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ReplicationMode } from \"../driver/types/ReplicationMode\"\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\n\n/**\n * DataSource is a pre-defined connection configuration to a specific database.\n * You can have multiple data sources connected (with multiple connections in it),\n * connected to multiple databases in your application.\n *\n * Before, it was called `Connection`, but now `Connection` is deprecated\n * because `Connection` isn't the best name for what it's actually is.\n */\nexport class DataSource {\n    readonly \"@instanceof\" = Symbol.for(\"DataSource\")\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     *\n     * @deprecated we don't need names anymore since we are going to drop all related methods relying on this property.\n     */\n    readonly name: string\n\n    /**\n     * Connection options.\n     */\n    readonly options: DataSourceOptions\n\n    /**\n     * Indicates if DataSource is initialized or not.\n     */\n    readonly isInitialized: boolean\n\n    /**\n     * Database driver used by this connection.\n     */\n    driver: Driver\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    namingStrategy: NamingStrategyInterface\n\n    /**\n     * Name for the metadata table\n     */\n    readonly metadataTableName: string\n\n    /**\n     * Logger used to log orm events.\n     */\n    logger: Logger\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = []\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     * This is a copy of #.entityMetadatas property -> used for more performant searches.\n     */\n    readonly entityMetadatasMap = new Map<EntityTarget<any>, EntityMetadata>()\n\n    /**\n     * Used to work with query result cache.\n     */\n    queryResultCache?: QueryResultCache\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader\n\n    readonly relationIdLoader: RelationIdLoader\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DataSourceOptions) {\n        this.name = options.name || \"default\"\n        this.options = options\n        this.logger = new LoggerFactory().create(\n            this.options.logger,\n            this.options.logging,\n        )\n        this.driver = new DriverFactory().create(this)\n        this.manager = this.createEntityManager()\n        this.namingStrategy =\n            options.namingStrategy || new DefaultNamingStrategy()\n        this.metadataTableName = options.metadataTableName || \"typeorm_metadata\"\n        this.queryResultCache = options.cache\n            ? new QueryResultCacheFactory(this).create()\n            : undefined\n        this.relationLoader = new RelationLoader(this)\n        this.relationIdLoader = new RelationIdLoader(this)\n        this.isInitialized = false\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     Indicates if DataSource is initialized or not.\n     *\n     * @deprecated use .isInitialized instead\n     */\n    get isConnected() {\n        return this.isInitialized\n    }\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(\n                `MongoEntityManager is only available for MongoDB databases.`,\n            )\n\n        return this.manager as MongoEntityManager\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!InstanceChecker.isSqljsEntityManager(this.manager))\n            throw new TypeORMError(\n                `SqljsEntityManager is only available for Sqljs databases.`,\n            )\n\n        return this.manager\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates current connection options with provided options.\n     */\n    setOptions(options: Partial<DataSourceOptions>): this {\n        Object.assign(this.options, options)\n\n        if (options.logger || options.logging) {\n            this.logger = new LoggerFactory().create(\n                options.logger || this.options.logger,\n                options.logging || this.options.logging,\n            )\n        }\n\n        if (options.namingStrategy) {\n            this.namingStrategy = options.namingStrategy\n        }\n\n        if (options.cache) {\n            this.queryResultCache = new QueryResultCacheFactory(this).create()\n        }\n\n        // todo: we must update the database in the driver as well, if it was set by setOptions method\n        //  in the future we need to refactor the code and remove \"database\" from the driver, and instead\n        //  use database (and options) from a single place - data source.\n        if (options.database) {\n            this.driver.database = DriverUtils.buildDriverOptions(\n                this.options,\n            ).database\n        }\n\n        // todo: need to take a look if we need to update schema and other \"poor\" properties\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async initialize(): Promise<this> {\n        if (this.isInitialized)\n            throw new CannotConnectAlreadyConnectedError(this.name)\n\n        // connect to the database via its driver\n        await this.driver.connect()\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache) await this.queryResultCache.connect()\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isInitialized: true })\n\n        try {\n            // build all metadatas registered in the current connection\n            await this.buildMetadatas()\n\n            await this.driver.afterConnect()\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema) await this.dropDatabase()\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({\n                    transaction: this.options.migrationsTransactionMode,\n                })\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize) await this.synchronize()\n        } catch (error) {\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.destroy()\n            throw error\n        }\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     *\n     * @deprecated use .initialize method instead\n     */\n    async connect(): Promise<this> {\n        return this.initialize()\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async destroy(): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        await this.driver.disconnect()\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache) await this.queryResultCache.disconnect()\n\n        ObjectUtils.assign(this, { isInitialized: false })\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     *\n     * @deprecated use .destroy method instead\n     */\n    async close(): Promise<void> {\n        return this.destroy()\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        if (dropBeforeSync) await this.dropDatabase()\n\n        const schemaBuilder = this.driver.createSchemaBuilder()\n        await schemaBuilder.build()\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner()\n        try {\n            if (\n                this.driver.options.type === \"mssql\" ||\n                DriverUtils.isMySQLFamily(this.driver) ||\n                this.driver.options.type === \"aurora-mysql\" ||\n                DriverUtils.isSQLiteFamily(this.driver)\n            ) {\n                const databases: string[] = []\n                this.entityMetadatas.forEach((metadata) => {\n                    if (\n                        metadata.database &&\n                        databases.indexOf(metadata.database) === -1\n                    )\n                        databases.push(metadata.database)\n                })\n                if (databases.length === 0 && this.driver.database) {\n                    databases.push(this.driver.database)\n                }\n\n                if (databases.length === 0) {\n                    await queryRunner.clearDatabase()\n                } else {\n                    for (const database of databases) {\n                        await queryRunner.clearDatabase(database)\n                    }\n                }\n            } else {\n                await queryRunner.clearDatabase()\n            }\n        } finally {\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<Migration[]> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        const successMigrations =\n            await migrationExecutor.executePendingMigrations()\n        return successMigrations\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        await migrationExecutor.undoLastMigration()\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isInitialized) {\n            throw new CannotExecuteNotConnectedError(this.name)\n        }\n        const migrationExecutor = new MigrationExecutor(this)\n        return await migrationExecutor.showMigrations()\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target)\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target)\n        if (!metadata) throw new EntityMetadataNotFoundError(target)\n\n        return metadata\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        return this.manager.getRepository(target)\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target)\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        if (!(this.driver.options.type === \"mongodb\"))\n            throw new TypeORMError(\n                `You can use getMongoRepository only for MongoDB connections.`,\n            )\n\n        return this.manager.getRepository(target) as any\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend function to create a custom repository\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository)\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any,\n        )\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ): Promise<T> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner()\n\n        try {\n            return await usedQueryRunner.query(query, parameters) // await is needed here because we are using finally\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release()\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n\n        if (alias) {\n            alias = DriverUtils.buildAlias(this.driver, undefined, alias)\n            const metadata = this.getMetadata(\n                entityOrRunner as EntityTarget<Entity>,\n            )\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias)\n        } else {\n            return new SelectQueryBuilder(\n                this,\n                entityOrRunner as QueryRunner | undefined,\n            )\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode)\n        const manager = this.createEntityManager(queryRunner)\n        Object.assign(queryRunner, { manager: manager })\n        return queryRunner\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(\n        entityTarget: EntityTarget<any>,\n        relationPropertyPath: string,\n    ) {\n        const relationMetadata =\n            this.getMetadata(entityTarget).findRelationWithPropertyPath(\n                relationPropertyPath,\n            )\n        if (!relationMetadata)\n            throw new TypeORMError(\n                `Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`,\n            )\n        if (!relationMetadata.isManyToMany)\n            throw new TypeORMError(\n                `Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                    `You can use this method only on many-to-many relations.`,\n            )\n\n        return relationMetadata.junctionEntityMetadata\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(\n        target: EntityTarget<any>,\n    ): EntityMetadata | undefined {\n        const metadataFromMap = this.entityMetadatasMap.get(target)\n        if (metadataFromMap) return metadataFromMap\n\n        for (let [_, metadata] of this.entityMetadatasMap) {\n            if (\n                InstanceChecker.isEntitySchema(target) &&\n                metadata.name === target.options.name\n            ) {\n                return metadata\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target ||\n                        metadata.tableName === target\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n            if (\n                ObjectUtils.isObjectWithName(target) &&\n                typeof target.name === \"string\"\n            ) {\n                if (target.name.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target.name) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target.name ||\n                        metadata.tableName === target.name\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected async buildMetadatas(): Promise<void> {\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this)\n        const entityMetadataValidator = new EntityMetadataValidator()\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const flattenedSubscribers = ObjectUtils.mixedListToArray(\n            this.options.subscribers || [],\n        )\n        const subscribers = await connectionMetadataBuilder.buildSubscribers(\n            flattenedSubscribers,\n        )\n        ObjectUtils.assign(this, { subscribers: subscribers })\n\n        // build entity metadatas\n        const flattenedEntities = ObjectUtils.mixedListToArray(\n            this.options.entities || [],\n        )\n        const entityMetadatas =\n            await connectionMetadataBuilder.buildEntityMetadatas(\n                flattenedEntities,\n            )\n        ObjectUtils.assign(this, {\n            entityMetadatas: entityMetadatas,\n            entityMetadatasMap: new Map(\n                entityMetadatas.map((metadata) => [metadata.target, metadata]),\n            ),\n        })\n\n        // create migration instances\n        const flattenedMigrations = ObjectUtils.mixedListToArray(\n            this.options.migrations || [],\n        )\n        const migrations = await connectionMetadataBuilder.buildMigrations(\n            flattenedMigrations,\n        )\n        ObjectUtils.assign(this, { migrations: migrations })\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(\n            this.entityMetadatas.filter(\n                (metadata) => metadata.tableType !== \"view\",\n            ),\n            this.driver,\n        )\n\n        // set current data source to the entities\n        for (let entityMetadata of entityMetadatas) {\n            if (\n                InstanceChecker.isBaseEntityConstructor(entityMetadata.target)\n            ) {\n                entityMetadata.target.useDataSource(this)\n            }\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/data-source/DataSource.ts"],"names":[],"mappings":"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","file":"DataSource.js","sourcesContent":["import { Driver } from \"../driver/Driver\"\nimport { Repository } from \"../repository/Repository\"\nimport { EntitySubscriberInterface } from \"../subscriber/EntitySubscriberInterface\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\"\nimport {\n    CannotConnectAlreadyConnectedError,\n    CannotExecuteNotConnectedError,\n    EntityMetadataNotFoundError,\n    QueryRunnerProviderAlreadyReleasedError,\n    TypeORMError,\n} from \"../error\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { NamingStrategyInterface } from \"../naming-strategy/NamingStrategyInterface\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { Logger } from \"../logger/Logger\"\nimport { MigrationInterface } from \"../migration/MigrationInterface\"\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\"\nimport { Migration } from \"../migration/Migration\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\"\nimport { DataSourceOptions } from \"./DataSourceOptions\"\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\"\nimport { DriverFactory } from \"../driver/DriverFactory\"\nimport { ConnectionMetadataBuilder } from \"../connection/ConnectionMetadataBuilder\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { registerQueryBuilders} from \"../query-builder\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { LoggerFactory } from \"../logger/LoggerFactory\"\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\"\nimport { QueryResultCache } from \"../cache/QueryResultCache\"\nimport { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\"\nimport { RelationLoader } from \"../query-builder/RelationLoader\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ReplicationMode } from \"../driver/types/ReplicationMode\"\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\n\nregisterQueryBuilders()\n\n/**\n * DataSource is a pre-defined connection configuration to a specific database.\n * You can have multiple data sources connected (with multiple connections in it),\n * connected to multiple databases in your application.\n *\n * Before, it was called `Connection`, but now `Connection` is deprecated\n * because `Connection` isn't the best name for what it's actually is.\n */\nexport class DataSource {\n    readonly \"@instanceof\" = Symbol.for(\"DataSource\")\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     *\n     * @deprecated we don't need names anymore since we are going to drop all related methods relying on this property.\n     */\n    readonly name: string\n\n    /**\n     * Connection options.\n     */\n    readonly options: DataSourceOptions\n\n    /**\n     * Indicates if DataSource is initialized or not.\n     */\n    readonly isInitialized: boolean\n\n    /**\n     * Database driver used by this connection.\n     */\n    driver: Driver\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    namingStrategy: NamingStrategyInterface\n\n    /**\n     * Name for the metadata table\n     */\n    readonly metadataTableName: string\n\n    /**\n     * Logger used to log orm events.\n     */\n    logger: Logger\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = []\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = []\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     * This is a copy of #.entityMetadatas property -> used for more performant searches.\n     */\n    readonly entityMetadatasMap = new Map<EntityTarget<any>, EntityMetadata>()\n\n    /**\n     * Used to work with query result cache.\n     */\n    queryResultCache?: QueryResultCache\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader\n\n    readonly relationIdLoader: RelationIdLoader\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: DataSourceOptions) {\n        this.name = options.name || \"default\"\n        this.options = options\n        this.logger = new LoggerFactory().create(\n            this.options.logger,\n            this.options.logging,\n        )\n        this.driver = new DriverFactory().create(this)\n        this.manager = this.createEntityManager()\n        this.namingStrategy =\n            options.namingStrategy || new DefaultNamingStrategy()\n        this.metadataTableName = options.metadataTableName || \"typeorm_metadata\"\n        this.queryResultCache = options.cache\n            ? new QueryResultCacheFactory(this).create()\n            : undefined\n        this.relationLoader = new RelationLoader(this)\n        this.relationIdLoader = new RelationIdLoader(this)\n        this.isInitialized = false\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     Indicates if DataSource is initialized or not.\n     *\n     * @deprecated use .isInitialized instead\n     */\n    get isConnected() {\n        return this.isInitialized\n    }\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(\n                `MongoEntityManager is only available for MongoDB databases.`,\n            )\n\n        return this.manager as MongoEntityManager\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!InstanceChecker.isSqljsEntityManager(this.manager))\n            throw new TypeORMError(\n                `SqljsEntityManager is only available for Sqljs databases.`,\n            )\n\n        return this.manager\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    /**\n     * Updates current connection options with provided options.\n     */\n    setOptions(options: Partial<DataSourceOptions>): this {\n        Object.assign(this.options, options)\n\n        if (options.logger || options.logging) {\n            this.logger = new LoggerFactory().create(\n                options.logger || this.options.logger,\n                options.logging || this.options.logging,\n            )\n        }\n\n        if (options.namingStrategy) {\n            this.namingStrategy = options.namingStrategy\n        }\n\n        if (options.cache) {\n            this.queryResultCache = new QueryResultCacheFactory(this).create()\n        }\n\n        // todo: we must update the database in the driver as well, if it was set by setOptions method\n        //  in the future we need to refactor the code and remove \"database\" from the driver, and instead\n        //  use database (and options) from a single place - data source.\n        if (options.database) {\n            this.driver.database = DriverUtils.buildDriverOptions(\n                this.options,\n            ).database\n        }\n\n        // todo: need to take a look if we need to update schema and other \"poor\" properties\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async initialize(): Promise<this> {\n        if (this.isInitialized)\n            throw new CannotConnectAlreadyConnectedError(this.name)\n\n        // connect to the database via its driver\n        await this.driver.connect()\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache) await this.queryResultCache.connect()\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isInitialized: true })\n\n        try {\n            // build all metadatas registered in the current connection\n            await this.buildMetadatas()\n\n            await this.driver.afterConnect()\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema) await this.dropDatabase()\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({\n                    transaction: this.options.migrationsTransactionMode,\n                })\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize) await this.synchronize()\n        } catch (error) {\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.destroy()\n            throw error\n        }\n\n        return this\n    }\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     *\n     * @deprecated use .initialize method instead\n     */\n    async connect(): Promise<this> {\n        return this.initialize()\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async destroy(): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        await this.driver.disconnect()\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache) await this.queryResultCache.disconnect()\n\n        ObjectUtils.assign(this, { isInitialized: false })\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     *\n     * @deprecated use .destroy method instead\n     */\n    async close(): Promise<void> {\n        return this.destroy()\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        if (dropBeforeSync) await this.dropDatabase()\n\n        const schemaBuilder = this.driver.createSchemaBuilder()\n        await schemaBuilder.build()\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner()\n        try {\n            if (\n                this.driver.options.type === \"mssql\" ||\n                DriverUtils.isMySQLFamily(this.driver) ||\n                this.driver.options.type === \"aurora-mysql\" ||\n                DriverUtils.isSQLiteFamily(this.driver)\n            ) {\n                const databases: string[] = []\n                this.entityMetadatas.forEach((metadata) => {\n                    if (\n                        metadata.database &&\n                        databases.indexOf(metadata.database) === -1\n                    )\n                        databases.push(metadata.database)\n                })\n                if (databases.length === 0 && this.driver.database) {\n                    databases.push(this.driver.database)\n                }\n\n                if (databases.length === 0) {\n                    await queryRunner.clearDatabase()\n                } else {\n                    for (const database of databases) {\n                        await queryRunner.clearDatabase(database)\n                    }\n                }\n            } else {\n                await queryRunner.clearDatabase()\n            }\n        } finally {\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<Migration[]> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        const successMigrations =\n            await migrationExecutor.executePendingMigrations()\n        return successMigrations\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: {\n        transaction?: \"all\" | \"none\" | \"each\"\n        fake?: boolean\n    }): Promise<void> {\n        if (!this.isInitialized)\n            throw new CannotExecuteNotConnectedError(this.name)\n\n        const migrationExecutor = new MigrationExecutor(this)\n        migrationExecutor.transaction =\n            (options && options.transaction) || \"all\"\n        migrationExecutor.fake = (options && options.fake) || false\n\n        await migrationExecutor.undoLastMigration()\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isInitialized) {\n            throw new CannotExecuteNotConnectedError(this.name)\n        }\n        const migrationExecutor = new MigrationExecutor(this)\n        return await migrationExecutor.showMigrations()\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target)\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target)\n        if (!metadata) throw new EntityMetadataNotFoundError(target)\n\n        return metadata\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        return this.manager.getRepository(target)\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target)\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        if (!(this.driver.options.type === \"mongodb\"))\n            throw new TypeORMError(\n                `You can use getMongoRepository only for MongoDB connections.`,\n            )\n\n        return this.manager.getRepository(target) as any\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend function to create a custom repository\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository)\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any,\n        )\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(\n        query: string,\n        parameters?: any[],\n        queryRunner?: QueryRunner,\n    ): Promise<T> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner()\n\n        try {\n            return await usedQueryRunner.query(query, parameters) // await is needed here because we are using finally\n        } finally {\n            if (!queryRunner) await usedQueryRunner.release()\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityOrRunner?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (InstanceChecker.isMongoEntityManager(this.manager))\n            throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n\n        if (alias) {\n            alias = DriverUtils.buildAlias(this.driver, undefined, alias)\n            const metadata = this.getMetadata(\n                entityOrRunner as EntityTarget<Entity>,\n            )\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias)\n        } else {\n            return new SelectQueryBuilder(\n                this,\n                entityOrRunner as QueryRunner | undefined,\n            )\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode)\n        const manager = this.createEntityManager(queryRunner)\n        Object.assign(queryRunner, { manager: manager })\n        return queryRunner\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(\n        entityTarget: EntityTarget<any>,\n        relationPropertyPath: string,\n    ) {\n        const relationMetadata =\n            this.getMetadata(entityTarget).findRelationWithPropertyPath(\n                relationPropertyPath,\n            )\n        if (!relationMetadata)\n            throw new TypeORMError(\n                `Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`,\n            )\n        if (!relationMetadata.isManyToMany)\n            throw new TypeORMError(\n                `Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                    `You can use this method only on many-to-many relations.`,\n            )\n\n        return relationMetadata.junctionEntityMetadata\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(\n        target: EntityTarget<any>,\n    ): EntityMetadata | undefined {\n        const metadataFromMap = this.entityMetadatasMap.get(target)\n        if (metadataFromMap) return metadataFromMap\n\n        for (let [_, metadata] of this.entityMetadatasMap) {\n            if (\n                InstanceChecker.isEntitySchema(target) &&\n                metadata.name === target.options.name\n            ) {\n                return metadata\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target ||\n                        metadata.tableName === target\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n            if (\n                ObjectUtils.isObjectWithName(target) &&\n                typeof target.name === \"string\"\n            ) {\n                if (target.name.indexOf(\".\") !== -1) {\n                    if (metadata.tablePath === target.name) {\n                        return metadata\n                    }\n                } else {\n                    if (\n                        metadata.name === target.name ||\n                        metadata.tableName === target.name\n                    ) {\n                        return metadata\n                    }\n                }\n            }\n        }\n\n        return undefined\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected async buildMetadatas(): Promise<void> {\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this)\n        const entityMetadataValidator = new EntityMetadataValidator()\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const flattenedSubscribers = ObjectUtils.mixedListToArray(\n            this.options.subscribers || [],\n        )\n        const subscribers = await connectionMetadataBuilder.buildSubscribers(\n            flattenedSubscribers,\n        )\n        ObjectUtils.assign(this, { subscribers: subscribers })\n\n        // build entity metadatas\n        const flattenedEntities = ObjectUtils.mixedListToArray(\n            this.options.entities || [],\n        )\n        const entityMetadatas =\n            await connectionMetadataBuilder.buildEntityMetadatas(\n                flattenedEntities,\n            )\n        ObjectUtils.assign(this, {\n            entityMetadatas: entityMetadatas,\n            entityMetadatasMap: new Map(\n                entityMetadatas.map((metadata) => [metadata.target, metadata]),\n            ),\n        })\n\n        // create migration instances\n        const flattenedMigrations = ObjectUtils.mixedListToArray(\n            this.options.migrations || [],\n        )\n        const migrations = await connectionMetadataBuilder.buildMigrations(\n            flattenedMigrations,\n        )\n        ObjectUtils.assign(this, { migrations: migrations })\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(\n            this.entityMetadatas.filter(\n                (metadata) => metadata.tableType !== \"view\",\n            ),\n            this.driver,\n        )\n\n        // set current data source to the entities\n        for (let entityMetadata of entityMetadatas) {\n            if (\n                InstanceChecker.isBaseEntityConstructor(entityMetadata.target)\n            ) {\n                entityMetadata.target.useDataSource(this)\n            }\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/data-source/DataSourceOptions.d.ts b/node_modules/typeorm/data-source/DataSourceOptions.d.ts
index 9c6f2e8..e60cad4 100644
--- a/node_modules/typeorm/data-source/DataSourceOptions.d.ts
+++ b/node_modules/typeorm/data-source/DataSourceOptions.d.ts
@@ -1,21 +1,21 @@
-import { CockroachConnectionOptions } from "../driver/cockroachdb/CockroachConnectionOptions";
-import { MysqlConnectionOptions } from "../driver/mysql/MysqlConnectionOptions";
-import { PostgresConnectionOptions } from "../driver/postgres/PostgresConnectionOptions";
-import { SqliteConnectionOptions } from "../driver/sqlite/SqliteConnectionOptions";
-import { SqlServerConnectionOptions } from "../driver/sqlserver/SqlServerConnectionOptions";
-import { OracleConnectionOptions } from "../driver/oracle/OracleConnectionOptions";
-import { MongoConnectionOptions } from "../driver/mongodb/MongoConnectionOptions";
-import { CordovaConnectionOptions } from "../driver/cordova/CordovaConnectionOptions";
-import { SqljsConnectionOptions } from "../driver/sqljs/SqljsConnectionOptions";
-import { ReactNativeConnectionOptions } from "../driver/react-native/ReactNativeConnectionOptions";
-import { NativescriptConnectionOptions } from "../driver/nativescript/NativescriptConnectionOptions";
-import { ExpoConnectionOptions } from "../driver/expo/ExpoConnectionOptions";
-import { AuroraMysqlConnectionOptions } from "../driver/aurora-mysql/AuroraMysqlConnectionOptions";
-import { SapConnectionOptions } from "../driver/sap/SapConnectionOptions";
-import { AuroraPostgresConnectionOptions } from "../driver/aurora-postgres/AuroraPostgresConnectionOptions";
-import { BetterSqlite3ConnectionOptions } from "../driver/better-sqlite3/BetterSqlite3ConnectionOptions";
-import { CapacitorConnectionOptions } from "../driver/capacitor/CapacitorConnectionOptions";
-import { SpannerConnectionOptions } from "../driver/spanner/SpannerConnectionOptions";
+import { CockroachConnectionOptions } from "typeorm/driver/cockroachdb/CockroachConnectionOptions";
+import { MysqlConnectionOptions } from "typeorm/driver/mysql/MysqlConnectionOptions";
+import { PostgresConnectionOptions } from "typeorm/driver/postgres/PostgresConnectionOptions";
+import { SqliteConnectionOptions } from "typeorm/driver/sqlite/SqliteConnectionOptions";
+import { SqlServerConnectionOptions } from "typeorm/driver/sqlserver/SqlServerConnectionOptions";
+import { OracleConnectionOptions } from "typeorm/driver/oracle/OracleConnectionOptions";
+import { MongoConnectionOptions } from "typeorm/driver/mongodb/MongoConnectionOptions";
+import { CordovaConnectionOptions } from "typeorm/driver/cordova/CordovaConnectionOptions";
+import { SqljsConnectionOptions } from "typeorm/driver/sqljs/SqljsConnectionOptions";
+import { ReactNativeConnectionOptions } from "typeorm/driver/react-native/ReactNativeConnectionOptions";
+import { NativescriptConnectionOptions } from "typeorm/driver/nativescript/NativescriptConnectionOptions";
+import { ExpoConnectionOptions } from "typeorm/driver/expo/ExpoConnectionOptions";
+import { AuroraMysqlConnectionOptions } from "typeorm/driver/aurora-mysql/AuroraMysqlConnectionOptions";
+import { SapConnectionOptions } from "typeorm/driver/sap/SapConnectionOptions";
+import { AuroraPostgresConnectionOptions } from "typeorm/driver/aurora-postgres/AuroraPostgresConnectionOptions";
+import { BetterSqlite3ConnectionOptions } from "typeorm/driver/better-sqlite3/BetterSqlite3ConnectionOptions";
+import { CapacitorConnectionOptions } from "typeorm/driver/capacitor/CapacitorConnectionOptions";
+import { SpannerConnectionOptions } from "typeorm/driver/spanner/SpannerConnectionOptions";
 /**
  * DataSourceOptions is an interface with settings and options for specific DataSource.
  */
diff --git a/node_modules/typeorm/data-source/index.d.ts b/node_modules/typeorm/data-source/index.d.ts
index b1da1b5..aa2a4bd 100644
--- a/node_modules/typeorm/data-source/index.d.ts
+++ b/node_modules/typeorm/data-source/index.d.ts
@@ -1,2 +1,2 @@
-export * from "./DataSource";
-export * from "./DataSourceOptions";
+export * from "typeorm/data-source/DataSource";
+export * from "typeorm/data-source/DataSourceOptions";
diff --git a/node_modules/typeorm/decorator/EntityRepository.d.ts b/node_modules/typeorm/decorator/EntityRepository.d.ts
index 09c291a..19570e0 100644
--- a/node_modules/typeorm/decorator/EntityRepository.d.ts
+++ b/node_modules/typeorm/decorator/EntityRepository.d.ts
@@ -1,4 +1,4 @@
-import { EntitySchema } from "../entity-schema/EntitySchema";
+import { EntitySchema } from "typeorm/entity-schema/EntitySchema";
 /**
  * Used to declare a class as a custom repository.
  * Custom repository can manage some specific entity or just be generic.
diff --git a/node_modules/typeorm/decorator/Index.d.ts b/node_modules/typeorm/decorator/Index.d.ts
index fee1900..f2aa335 100644
--- a/node_modules/typeorm/decorator/Index.d.ts
+++ b/node_modules/typeorm/decorator/Index.d.ts
@@ -1,4 +1,4 @@
-import { IndexOptions } from "./options/IndexOptions";
+import { IndexOptions } from "typeorm/decorator/options/IndexOptions";
 /**
  * Creates a database index.
  * Can be used on entity property or on entity.
diff --git a/node_modules/typeorm/decorator/Unique.d.ts b/node_modules/typeorm/decorator/Unique.d.ts
index fbe272e..eddd35e 100644
--- a/node_modules/typeorm/decorator/Unique.d.ts
+++ b/node_modules/typeorm/decorator/Unique.d.ts
@@ -1,4 +1,4 @@
-import { UniqueOptions } from "./options/UniqueOptions";
+import { UniqueOptions } from "typeorm/decorator/options/UniqueOptions";
 /**
  * Composite unique constraint must be set on entity classes and must specify entity's fields to be unique.
  */
diff --git a/node_modules/typeorm/decorator/columns/Column.d.ts b/node_modules/typeorm/decorator/columns/Column.d.ts
index 294e878..6692637 100644
--- a/node_modules/typeorm/decorator/columns/Column.d.ts
+++ b/node_modules/typeorm/decorator/columns/Column.d.ts
@@ -1,13 +1,13 @@
-import { SimpleColumnType, SpatialColumnType, WithLengthColumnType, WithPrecisionColumnType, WithWidthColumnType } from "../../driver/types/ColumnTypes";
-import { ColumnCommonOptions } from "../options/ColumnCommonOptions";
-import { SpatialColumnOptions } from "../options/SpatialColumnOptions";
-import { ColumnWithLengthOptions } from "../options/ColumnWithLengthOptions";
-import { ColumnNumericOptions } from "../options/ColumnNumericOptions";
-import { ColumnEnumOptions } from "../options/ColumnEnumOptions";
-import { ColumnEmbeddedOptions } from "../options/ColumnEmbeddedOptions";
-import { ColumnHstoreOptions } from "../options/ColumnHstoreOptions";
-import { ColumnWithWidthOptions } from "../options/ColumnWithWidthOptions";
-import { ColumnOptions } from "../options/ColumnOptions";
+import { SimpleColumnType, SpatialColumnType, WithLengthColumnType, WithPrecisionColumnType, WithWidthColumnType } from "typeorm/driver/types/ColumnTypes";
+import { ColumnCommonOptions } from "typeorm/decorator/options/ColumnCommonOptions";
+import { SpatialColumnOptions } from "typeorm/decorator/options/SpatialColumnOptions";
+import { ColumnWithLengthOptions } from "typeorm/decorator/options/ColumnWithLengthOptions";
+import { ColumnNumericOptions } from "typeorm/decorator/options/ColumnNumericOptions";
+import { ColumnEnumOptions } from "typeorm/decorator/options/ColumnEnumOptions";
+import { ColumnEmbeddedOptions } from "typeorm/decorator/options/ColumnEmbeddedOptions";
+import { ColumnHstoreOptions } from "typeorm/decorator/options/ColumnHstoreOptions";
+import { ColumnWithWidthOptions } from "typeorm/decorator/options/ColumnWithWidthOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * Column decorator is used to mark a specific class property as a table column. Only properties decorated with this
  * decorator will be persisted to the database when entity be saved.
diff --git a/node_modules/typeorm/decorator/columns/CreateDateColumn.d.ts b/node_modules/typeorm/decorator/columns/CreateDateColumn.d.ts
index ff4f277..cb0c5a7 100644
--- a/node_modules/typeorm/decorator/columns/CreateDateColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/CreateDateColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * This column will store a creation date of the inserted object.
  * Creation date is generated and inserted only once,
diff --git a/node_modules/typeorm/decorator/columns/DeleteDateColumn.d.ts b/node_modules/typeorm/decorator/columns/DeleteDateColumn.d.ts
index 9132a7c..1627d58 100644
--- a/node_modules/typeorm/decorator/columns/DeleteDateColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/DeleteDateColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * This column will store a delete date of the soft-deleted object.
  * This date is being updated each time you soft-delete the object.
diff --git a/node_modules/typeorm/decorator/columns/ObjectIdColumn.d.ts b/node_modules/typeorm/decorator/columns/ObjectIdColumn.d.ts
index faa53b6..9be35f6 100644
--- a/node_modules/typeorm/decorator/columns/ObjectIdColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/ObjectIdColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * Special type of column that is available only for MongoDB database.
  * Marks your entity's column to be an object id.
diff --git a/node_modules/typeorm/decorator/columns/PrimaryColumn.d.ts b/node_modules/typeorm/decorator/columns/PrimaryColumn.d.ts
index eb4bc28..2704759 100644
--- a/node_modules/typeorm/decorator/columns/PrimaryColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/PrimaryColumn.d.ts
@@ -1,5 +1,5 @@
-import { ColumnOptions } from "../options/ColumnOptions";
-import { ColumnType } from "../../driver/types/ColumnTypes";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
 /**
  * Describes all primary key column's options.
  * If specified, the nullable field must be set to false.
diff --git a/node_modules/typeorm/decorator/columns/PrimaryGeneratedColumn.d.ts b/node_modules/typeorm/decorator/columns/PrimaryGeneratedColumn.d.ts
index 74a08a1..c33c690 100644
--- a/node_modules/typeorm/decorator/columns/PrimaryGeneratedColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/PrimaryGeneratedColumn.d.ts
@@ -1,6 +1,6 @@
-import { PrimaryGeneratedColumnNumericOptions } from "../options/PrimaryGeneratedColumnNumericOptions";
-import { PrimaryGeneratedColumnUUIDOptions } from "../options/PrimaryGeneratedColumnUUIDOptions";
-import { PrimaryGeneratedColumnIdentityOptions } from "../options/PrimaryGeneratedColumnIdentityOptions";
+import { PrimaryGeneratedColumnNumericOptions } from "typeorm/decorator/options/PrimaryGeneratedColumnNumericOptions";
+import { PrimaryGeneratedColumnUUIDOptions } from "typeorm/decorator/options/PrimaryGeneratedColumnUUIDOptions";
+import { PrimaryGeneratedColumnIdentityOptions } from "typeorm/decorator/options/PrimaryGeneratedColumnIdentityOptions";
 /**
  * Column decorator is used to mark a specific class property as a table column.
  */
diff --git a/node_modules/typeorm/decorator/columns/UpdateDateColumn.d.ts b/node_modules/typeorm/decorator/columns/UpdateDateColumn.d.ts
index 242b4e4..21c02cf 100644
--- a/node_modules/typeorm/decorator/columns/UpdateDateColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/UpdateDateColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * This column will store an update date of the updated object.
  * This date is being updated each time you persist the object.
diff --git a/node_modules/typeorm/decorator/columns/VersionColumn.d.ts b/node_modules/typeorm/decorator/columns/VersionColumn.d.ts
index 112b394..97defb5 100644
--- a/node_modules/typeorm/decorator/columns/VersionColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/VersionColumn.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * This column will store a number - version of the entity.
  * Every time your entity will be persisted, this number will be increased by one -
diff --git a/node_modules/typeorm/decorator/columns/ViewColumn.d.ts b/node_modules/typeorm/decorator/columns/ViewColumn.d.ts
index 2d6d66e..8ae427e 100644
--- a/node_modules/typeorm/decorator/columns/ViewColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/ViewColumn.d.ts
@@ -1,4 +1,4 @@
-import { ViewColumnOptions } from "../options/ViewColumnOptions";
+import { ViewColumnOptions } from "typeorm/decorator/options/ViewColumnOptions";
 /**
  * ViewColumn decorator is used to mark a specific class property as a view column.
  */
diff --git a/node_modules/typeorm/decorator/columns/VirtualColumn.d.ts b/node_modules/typeorm/decorator/columns/VirtualColumn.d.ts
index 4b67aeb..14e9b22 100644
--- a/node_modules/typeorm/decorator/columns/VirtualColumn.d.ts
+++ b/node_modules/typeorm/decorator/columns/VirtualColumn.d.ts
@@ -1,5 +1,5 @@
-import { ColumnType } from "../../driver/types/ColumnTypes";
-import { VirtualColumnOptions } from "../options/VirtualColumnOptions";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
+import { VirtualColumnOptions } from "typeorm/decorator/options/VirtualColumnOptions";
 /**
  * VirtualColumn decorator is used to mark a specific class property as a Virtual column.
  */
diff --git a/node_modules/typeorm/decorator/entity-view/ViewEntity.d.ts b/node_modules/typeorm/decorator/entity-view/ViewEntity.d.ts
index 343a9d0..d2a25a5 100644
--- a/node_modules/typeorm/decorator/entity-view/ViewEntity.d.ts
+++ b/node_modules/typeorm/decorator/entity-view/ViewEntity.d.ts
@@ -1,4 +1,4 @@
-import { ViewEntityOptions } from "../options/ViewEntityOptions";
+import { ViewEntityOptions } from "typeorm/decorator/options/ViewEntityOptions";
 /**
  * This decorator is used to mark classes that will be an entity view.
  * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
diff --git a/node_modules/typeorm/decorator/entity/Entity.d.ts b/node_modules/typeorm/decorator/entity/Entity.d.ts
index 956bb0b..c1fab73 100644
--- a/node_modules/typeorm/decorator/entity/Entity.d.ts
+++ b/node_modules/typeorm/decorator/entity/Entity.d.ts
@@ -1,4 +1,4 @@
-import { EntityOptions } from "../options/EntityOptions";
+import { EntityOptions } from "typeorm/decorator/options/EntityOptions";
 /**
  * This decorator is used to mark classes that will be an entity (table or document depend on database type).
  * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.
diff --git a/node_modules/typeorm/decorator/entity/TableInheritance.d.ts b/node_modules/typeorm/decorator/entity/TableInheritance.d.ts
index 8e2ea9a..a4463ef 100644
--- a/node_modules/typeorm/decorator/entity/TableInheritance.d.ts
+++ b/node_modules/typeorm/decorator/entity/TableInheritance.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * Sets for entity to use table inheritance pattern.
  */
diff --git a/node_modules/typeorm/decorator/options/ColumnCommonOptions.d.ts b/node_modules/typeorm/decorator/options/ColumnCommonOptions.d.ts
index 6b14d41..1e62eba 100644
--- a/node_modules/typeorm/decorator/options/ColumnCommonOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/ColumnCommonOptions.d.ts
@@ -1,4 +1,4 @@
-import { ValueTransformer } from "./ValueTransformer";
+import { ValueTransformer } from "typeorm/decorator/options/ValueTransformer";
 /**
  * Column options specific to all column types.
  */
diff --git a/node_modules/typeorm/decorator/options/ColumnOptions.d.ts b/node_modules/typeorm/decorator/options/ColumnOptions.d.ts
index eeb8cc5..10d2a77 100644
--- a/node_modules/typeorm/decorator/options/ColumnOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/ColumnOptions.d.ts
@@ -1,6 +1,6 @@
-import { ColumnType } from "../../driver/types/ColumnTypes";
-import { ValueTransformer } from "./ValueTransformer";
-import { ColumnCommonOptions } from "./ColumnCommonOptions";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
+import { ValueTransformer } from "typeorm/decorator/options/ValueTransformer";
+import { ColumnCommonOptions } from "typeorm/decorator/options/ColumnCommonOptions";
 /**
  * Describes all column's options.
  */
diff --git a/node_modules/typeorm/decorator/options/EntityOptions.d.ts b/node_modules/typeorm/decorator/options/EntityOptions.d.ts
index 1b42ee8..10a3e98 100644
--- a/node_modules/typeorm/decorator/options/EntityOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/EntityOptions.d.ts
@@ -1,4 +1,4 @@
-import { OrderByCondition } from "../../find-options/OrderByCondition";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
 /**
  * Describes all entity's options.
  */
diff --git a/node_modules/typeorm/decorator/options/JoinTableMultipleColumnsOptions.d.ts b/node_modules/typeorm/decorator/options/JoinTableMultipleColumnsOptions.d.ts
index 50cd769..5214e58 100644
--- a/node_modules/typeorm/decorator/options/JoinTableMultipleColumnsOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/JoinTableMultipleColumnsOptions.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnOptions } from "./JoinColumnOptions";
+import { JoinColumnOptions } from "typeorm/decorator/options/JoinColumnOptions";
 /**
  * Describes all join table with multiple column options.
  */
diff --git a/node_modules/typeorm/decorator/options/JoinTableOptions.d.ts b/node_modules/typeorm/decorator/options/JoinTableOptions.d.ts
index 6a15184..3dce3b5 100644
--- a/node_modules/typeorm/decorator/options/JoinTableOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/JoinTableOptions.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnOptions } from "./JoinColumnOptions";
+import { JoinColumnOptions } from "typeorm/decorator/options/JoinColumnOptions";
 /**
  * Describes join table options.
  */
diff --git a/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts b/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts
index 06ded11..7b5a9f6 100644
--- a/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnIdentityOptions.d.ts
@@ -1,4 +1,4 @@
-import { PrimaryGeneratedColumnType } from "../../driver/types/ColumnTypes";
+import { PrimaryGeneratedColumnType } from "typeorm/driver/types/ColumnTypes";
 /**
  * Describes all options for PrimaryGeneratedColumn decorator with identity generation strategy.
  */
diff --git a/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts b/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts
index b68c8b8..9f69f7f 100644
--- a/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/PrimaryGeneratedColumnNumericOptions.d.ts
@@ -1,4 +1,4 @@
-import { PrimaryGeneratedColumnType } from "../../driver/types/ColumnTypes";
+import { PrimaryGeneratedColumnType } from "typeorm/driver/types/ColumnTypes";
 /**
  * Describes all options for PrimaryGeneratedColumn decorator with numeric generation strategy.
  */
diff --git a/node_modules/typeorm/decorator/options/RelationOptions.d.ts b/node_modules/typeorm/decorator/options/RelationOptions.d.ts
index b6ca2f4..a6bb1f3 100644
--- a/node_modules/typeorm/decorator/options/RelationOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/RelationOptions.d.ts
@@ -1,6 +1,6 @@
-import { DeferrableType } from "../../metadata/types/DeferrableType";
-import { OnDeleteType } from "../../metadata/types/OnDeleteType";
-import { OnUpdateType } from "../../metadata/types/OnUpdateType";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
+import { OnDeleteType } from "typeorm/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/metadata/types/OnUpdateType";
 /**
  * Describes all relation's options.
  */
diff --git a/node_modules/typeorm/decorator/options/SpatialColumnOptions.d.ts b/node_modules/typeorm/decorator/options/SpatialColumnOptions.d.ts
index 6d0c7b7..f007b3b 100644
--- a/node_modules/typeorm/decorator/options/SpatialColumnOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/SpatialColumnOptions.d.ts
@@ -1,4 +1,4 @@
-import { Geometry } from "../../driver/types/GeoJsonTypes";
+import { Geometry } from "typeorm/driver/types/GeoJsonTypes";
 /**
  * Options for spatial columns.
  */
diff --git a/node_modules/typeorm/decorator/options/UniqueOptions.d.ts b/node_modules/typeorm/decorator/options/UniqueOptions.d.ts
index 377af4d..d4c6f50 100644
--- a/node_modules/typeorm/decorator/options/UniqueOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/UniqueOptions.d.ts
@@ -1,4 +1,4 @@
-import { DeferrableType } from "../../metadata/types/DeferrableType";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
 /**
  * Describes all unique options.
  */
diff --git a/node_modules/typeorm/decorator/options/ViewColumnOptions.d.ts b/node_modules/typeorm/decorator/options/ViewColumnOptions.d.ts
index bf2fa4f..4e076f3 100644
--- a/node_modules/typeorm/decorator/options/ViewColumnOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/ViewColumnOptions.d.ts
@@ -1,4 +1,4 @@
-import { ValueTransformer } from "./ValueTransformer";
+import { ValueTransformer } from "typeorm/decorator/options/ValueTransformer";
 /**
  * Describes all view column's options.
  */
diff --git a/node_modules/typeorm/decorator/options/ViewEntityOptions.d.ts b/node_modules/typeorm/decorator/options/ViewEntityOptions.d.ts
index df90c18..ab14f0d 100644
--- a/node_modules/typeorm/decorator/options/ViewEntityOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/ViewEntityOptions.d.ts
@@ -1,7 +1,7 @@
 /**
  * Describes all entity view's options.
  */
-import { DataSource, SelectQueryBuilder } from "../..";
+import { DataSource, SelectQueryBuilder } from "typeorm";
 export interface ViewEntityOptions {
     /**
      * View name.
diff --git a/node_modules/typeorm/decorator/options/VirtualColumnOptions.d.ts b/node_modules/typeorm/decorator/options/VirtualColumnOptions.d.ts
index 271d6d0..c7f9407 100644
--- a/node_modules/typeorm/decorator/options/VirtualColumnOptions.d.ts
+++ b/node_modules/typeorm/decorator/options/VirtualColumnOptions.d.ts
@@ -1,5 +1,5 @@
-import { ColumnType } from "../../driver/types/ColumnTypes";
-import { ValueTransformer } from "./ValueTransformer";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
+import { ValueTransformer } from "typeorm/decorator/options/ValueTransformer";
 /**
  * Describes all calculated column's options.
  */
diff --git a/node_modules/typeorm/decorator/relations/JoinColumn.d.ts b/node_modules/typeorm/decorator/relations/JoinColumn.d.ts
index 48049a6..bb03f8a 100644
--- a/node_modules/typeorm/decorator/relations/JoinColumn.d.ts
+++ b/node_modules/typeorm/decorator/relations/JoinColumn.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnOptions } from "../options/JoinColumnOptions";
+import { JoinColumnOptions } from "typeorm/decorator/options/JoinColumnOptions";
 /**
  * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.
  * It also can be used on both one-to-one and many-to-one relations to specify custom column name
diff --git a/node_modules/typeorm/decorator/relations/JoinTable.d.ts b/node_modules/typeorm/decorator/relations/JoinTable.d.ts
index 1768f34..f58ae33 100644
--- a/node_modules/typeorm/decorator/relations/JoinTable.d.ts
+++ b/node_modules/typeorm/decorator/relations/JoinTable.d.ts
@@ -1,5 +1,5 @@
-import { JoinTableMultipleColumnsOptions } from "../options/JoinTableMultipleColumnsOptions";
-import { JoinTableOptions } from "../options/JoinTableOptions";
+import { JoinTableMultipleColumnsOptions } from "typeorm/decorator/options/JoinTableMultipleColumnsOptions";
+import { JoinTableOptions } from "typeorm/decorator/options/JoinTableOptions";
 /**
  * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.
  * Its also used to set a custom junction table's name, column names and referenced columns.
diff --git a/node_modules/typeorm/decorator/relations/ManyToMany.d.ts b/node_modules/typeorm/decorator/relations/ManyToMany.d.ts
index a6fc15c..a241623 100644
--- a/node_modules/typeorm/decorator/relations/ManyToMany.d.ts
+++ b/node_modules/typeorm/decorator/relations/ManyToMany.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { RelationOptions } from "typeorm/decorator/options/RelationOptions";
 /**
  * Many-to-many is a type of relationship when Entity1 can have multiple instances of Entity2, and Entity2 can have
  * multiple instances of Entity1. To achieve it, this type of relation creates a junction table, where it storage
diff --git a/node_modules/typeorm/decorator/relations/ManyToOne.d.ts b/node_modules/typeorm/decorator/relations/ManyToOne.d.ts
index 3c10708..3bfe1d0 100644
--- a/node_modules/typeorm/decorator/relations/ManyToOne.d.ts
+++ b/node_modules/typeorm/decorator/relations/ManyToOne.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { RelationOptions } from "typeorm/decorator/options/RelationOptions";
 /**
  * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but
  * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of
diff --git a/node_modules/typeorm/decorator/relations/OneToMany.d.ts b/node_modules/typeorm/decorator/relations/OneToMany.d.ts
index 7fa9d3b..00ee777 100644
--- a/node_modules/typeorm/decorator/relations/OneToMany.d.ts
+++ b/node_modules/typeorm/decorator/relations/OneToMany.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { RelationOptions } from "typeorm/decorator/options/RelationOptions";
 /**
  * A one-to-many relation allows creating the type of relation where Entity1 can have multiple instances of Entity2,
  * but Entity2 has only one Entity1. Entity2 is the owner of the relationship, and stores the id of Entity1 on its
diff --git a/node_modules/typeorm/decorator/relations/OneToOne.d.ts b/node_modules/typeorm/decorator/relations/OneToOne.d.ts
index 8bd386e..9af853c 100644
--- a/node_modules/typeorm/decorator/relations/OneToOne.d.ts
+++ b/node_modules/typeorm/decorator/relations/OneToOne.d.ts
@@ -1,5 +1,5 @@
-import { ObjectType } from "../../common/ObjectType";
-import { RelationOptions } from "../options/RelationOptions";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { RelationOptions } from "typeorm/decorator/options/RelationOptions";
 /**
  * One-to-one relation allows to create direct relation between two entities. Entity1 have only one Entity2.
  * Entity1 is an owner of the relationship, and storages Entity1 id on its own side.
diff --git a/node_modules/typeorm/decorator/relations/RelationCount.d.ts b/node_modules/typeorm/decorator/relations/RelationCount.d.ts
index 686c7fb..c31481e 100644
--- a/node_modules/typeorm/decorator/relations/RelationCount.d.ts
+++ b/node_modules/typeorm/decorator/relations/RelationCount.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Holds a number of children in the closure table of the column.
  *
diff --git a/node_modules/typeorm/decorator/relations/RelationId.d.ts b/node_modules/typeorm/decorator/relations/RelationId.d.ts
index 064f2fd..0e19e44 100644
--- a/node_modules/typeorm/decorator/relations/RelationId.d.ts
+++ b/node_modules/typeorm/decorator/relations/RelationId.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Special decorator used to extract relation id into separate entity property.
  *
diff --git a/node_modules/typeorm/decorator/tree/Tree.d.ts b/node_modules/typeorm/decorator/tree/Tree.d.ts
index aae1467..c266b0c 100644
--- a/node_modules/typeorm/decorator/tree/Tree.d.ts
+++ b/node_modules/typeorm/decorator/tree/Tree.d.ts
@@ -1,5 +1,5 @@
-import { TreeType } from "../../metadata/types/TreeTypes";
-import { ClosureTreeOptions } from "../../metadata/types/ClosureTreeOptions";
+import { TreeType } from "typeorm/metadata/types/TreeTypes";
+import { ClosureTreeOptions } from "typeorm/metadata/types/ClosureTreeOptions";
 /**
  * Marks entity to work like a tree.
  * Tree pattern that will be used for the tree entity should be specified.
diff --git a/node_modules/typeorm/decorator/tree/TreeParent.d.ts b/node_modules/typeorm/decorator/tree/TreeParent.d.ts
index faa0a12..bcbfe21 100644
--- a/node_modules/typeorm/decorator/tree/TreeParent.d.ts
+++ b/node_modules/typeorm/decorator/tree/TreeParent.d.ts
@@ -1,4 +1,4 @@
-import { OnDeleteType } from "../../metadata/types/OnDeleteType";
+import { OnDeleteType } from "typeorm/metadata/types/OnDeleteType";
 /**
  * Marks a entity property as a parent of the tree.
  * "Tree parent" indicates who owns (is a parent) of this entity in tree structure.
diff --git a/node_modules/typeorm/driver/Driver.d.ts b/node_modules/typeorm/driver/Driver.d.ts
index 58b159f..bd42ea7 100644
--- a/node_modules/typeorm/driver/Driver.d.ts
+++ b/node_modules/typeorm/driver/Driver.d.ts
@@ -1,21 +1,21 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnType } from "./types/ColumnTypes";
-import { CteCapabilities } from "./types/CteCapabilities";
-import { MappedColumnTypes } from "./types/MappedColumnTypes";
-import { SchemaBuilder } from "../schema-builder/SchemaBuilder";
-import { DataTypeDefaults } from "./types/DataTypeDefaults";
-import { BaseDataSourceOptions } from "../data-source/BaseDataSourceOptions";
-import { TableColumn } from "../schema-builder/table/TableColumn";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { ReplicationMode } from "./types/ReplicationMode";
-import { Table } from "../schema-builder/table/Table";
-import { View } from "../schema-builder/view/View";
-import { TableForeignKey } from "../schema-builder/table/TableForeignKey";
-import { UpsertType } from "./types/UpsertType";
-import { OnDeleteType } from "../metadata/types/OnDeleteType";
-import { OnUpdateType } from "../metadata/types/OnUpdateType";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
+import { CteCapabilities } from "typeorm/driver/types/CteCapabilities";
+import { MappedColumnTypes } from "typeorm/driver/types/MappedColumnTypes";
+import { SchemaBuilder } from "typeorm/schema-builder/SchemaBuilder";
+import { DataTypeDefaults } from "typeorm/driver/types/DataTypeDefaults";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { TableColumn } from "typeorm/schema-builder/table/TableColumn";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { ReplicationMode } from "typeorm/driver/types/ReplicationMode";
+import { Table } from "typeorm/schema-builder/table/Table";
+import { View } from "typeorm/schema-builder/view/View";
+import { TableForeignKey } from "typeorm/schema-builder/table/TableForeignKey";
+import { UpsertType } from "typeorm/driver/types/UpsertType";
+import { OnDeleteType } from "typeorm/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/metadata/types/OnUpdateType";
 export type ReturningType = "insert" | "update" | "delete";
 /**
  * Driver organizes TypeORM communication with specific database management system.
diff --git a/node_modules/typeorm/driver/DriverUtils.js b/node_modules/typeorm/driver/DriverUtils.js
index 18dbf2d..aba658c 100644
--- a/node_modules/typeorm/driver/DriverUtils.js
+++ b/node_modules/typeorm/driver/DriverUtils.js
@@ -93,11 +93,8 @@ class DriverUtils {
      * @return An alias that is no longer than the divers max alias length.
      */
     static buildAlias({ maxAliasLength }, buildOptions, ...alias) {
-        const newAlias = alias.length === 1
-            ? alias[0]
-            : alias.join(buildOptions && buildOptions.joiner
-                ? buildOptions.joiner
-                : "_");
+        const joiner = buildOptions && buildOptions.joiner ? buildOptions.joiner : "_";
+        let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner);
         if (maxAliasLength &&
             maxAliasLength > 0 &&
             newAlias.length > maxAliasLength) {
diff --git a/node_modules/typeorm/driver/DriverUtils.js.map b/node_modules/typeorm/driver/DriverUtils.js.map
index a48049f..fab694d 100644
--- a/node_modules/typeorm/driver/DriverUtils.js.map
+++ b/node_modules/typeorm/driver/DriverUtils.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import { Driver } from \"./Driver\"\nimport { hash, shorten } from \"../util/StringUtils\"\nimport { VersionUtils } from \"../util/VersionUtils\"\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver: Driver): boolean {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type)\n    }\n\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver: Driver): boolean {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\n    }\n\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\n        return (\n            driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version)\n        )\n    }\n\n    static isPostgresFamily(driver: Driver): boolean {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(\n            driver.options.type,\n        )\n    }\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\n                [key: string]: any\n            }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\n                options.url,\n            ) as { [key: string]: any }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | undefined,\n        ...alias: string[]\n    ): string {\n        const newAlias =\n            alias.length === 1\n                ? alias[0]\n                : alias.join(\n                      buildOptions && buildOptions.joiner\n                          ? buildOptions.joiner\n                          : \"_\",\n                  )\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength\n        ) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias)\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength })\n        }\n\n        return newAlias\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions)\n            buildOptions = { shorten: false, joiner: \"_\" }\n        } else {\n            buildOptions = Object.assign(\n                { shorten: false, joiner: \"_\" },\n                buildOptions,\n            )\n        }\n        return this.buildAlias(\n            { maxAliasLength } as Driver,\n            buildOptions,\n            ...alias,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n        const [host, port] = hostAndPort.split(\":\")\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        let afterQuestionMark = \"\"\n        let host = undefined\n        let port = undefined\n        let hostReplicaSet = undefined\n        let replicaSet = undefined\n\n        let optionsObject: any = {}\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(\n                afterBase.indexOf(\"?\") + 1,\n                afterBase.length,\n            )\n\n            const optionsList = afterQuestionMark.split(\"&\")\n            let optionKey: string\n            let optionValue: string\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0]\n                optionValue = optionItem.split(\"=\")[1]\n                optionsObject[optionKey] = optionValue\n            })\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"]\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort\n        } else {\n            ;[host, port] = hostAndPort.split(\":\")\n        }\n\n        let connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value\n        }\n\n        return connectionUrl\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import { Driver } from \"./Driver\"\nimport { hash, shorten } from \"../util/StringUtils\"\nimport { VersionUtils } from \"../util/VersionUtils\"\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns true if given driver is SQLite-based driver.\n     */\n    static isSQLiteFamily(driver: Driver): boolean {\n        return [\n            \"sqlite\",\n            \"cordova\",\n            \"react-native\",\n            \"nativescript\",\n            \"sqljs\",\n            \"expo\",\n            \"better-sqlite3\",\n            \"capacitor\",\n        ].includes(driver.options.type)\n    }\n\n    /**\n     * Returns true if given driver is MySQL-based driver.\n     */\n    static isMySQLFamily(driver: Driver): boolean {\n        return [\"mysql\", \"mariadb\"].includes(driver.options.type)\n    }\n\n    static isReleaseVersionOrGreater(driver: Driver, version: string): boolean {\n        return (\n            driver.version != null &&\n            VersionUtils.isGreaterOrEqual(driver.version, version)\n        )\n    }\n\n    static isPostgresFamily(driver: Driver): boolean {\n        return [\"postgres\", \"aurora-postgres\", \"cockroachdb\"].includes(\n            driver.options.type,\n        )\n    }\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as {\n                [key: string]: any\n            }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean },\n    ): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(\n                options.url,\n            ) as { [key: string]: any }\n\n            if (\n                buildOptions &&\n                buildOptions.useSid &&\n                urlDriverOptions.database\n            ) {\n                urlDriverOptions.sid = urlDriverOptions.database\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key]\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions)\n        }\n        return Object.assign({}, options)\n    }\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n    static buildAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | undefined,\n        ...alias: string[]\n    ): string {\n        const joiner =\n            buildOptions && buildOptions.joiner ? buildOptions.joiner : \"_\"\n\n        let newAlias = alias.length === 1 ? alias[0] : alias.join(joiner)\n\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            newAlias.length > maxAliasLength\n        ) {\n            if (buildOptions && buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias)\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength })\n        }\n\n        return newAlias\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        buildOptions: { shorten?: boolean; joiner?: string } | string,\n        ...alias: string[]\n    ) {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions)\n            buildOptions = { shorten: false, joiner: \"_\" }\n        } else {\n            buildOptions = Object.assign(\n                { shorten: false, joiner: \"_\" },\n                buildOptions,\n            )\n        }\n        return this.buildAlias(\n            { maxAliasLength } as Driver,\n            buildOptions,\n            ...alias,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n        const [host, port] = hostAndPort.split(\":\")\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0]\n        const firstSlashes = url.indexOf(\"//\")\n        const preBase = url.substr(firstSlashes + 2)\n        const secondSlash = preBase.indexOf(\"/\")\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase\n        let afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined\n        let afterQuestionMark = \"\"\n        let host = undefined\n        let port = undefined\n        let hostReplicaSet = undefined\n        let replicaSet = undefined\n\n        let optionsObject: any = {}\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            // split params\n            afterQuestionMark = afterBase.substr(\n                afterBase.indexOf(\"?\") + 1,\n                afterBase.length,\n            )\n\n            const optionsList = afterQuestionMark.split(\"&\")\n            let optionKey: string\n            let optionValue: string\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach((optionItem) => {\n                optionKey = optionItem.split(\"=\")[0]\n                optionValue = optionItem.split(\"=\")[1]\n                optionsObject[optionKey] = optionValue\n            })\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"]\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"))\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\")\n        const usernameAndPassword = base.substr(0, lastAtSign)\n        const hostAndPort = base.substr(lastAtSign + 1)\n\n        let username = usernameAndPassword\n        let password = \"\"\n        const firstColon = usernameAndPassword.indexOf(\":\")\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon)\n            password = usernameAndPassword.substr(firstColon + 1)\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort\n        } else {\n            ;[host, port] = hostAndPort.split(\":\")\n        }\n\n        let connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined,\n        }\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value\n        }\n\n        return connectionUrl\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/driver/SqlInMemory.d.ts b/node_modules/typeorm/driver/SqlInMemory.d.ts
index f87f391..8eefa44 100644
--- a/node_modules/typeorm/driver/SqlInMemory.d.ts
+++ b/node_modules/typeorm/driver/SqlInMemory.d.ts
@@ -1,4 +1,4 @@
-import { Query } from "./Query";
+import { Query } from "typeorm/driver/Query";
 /**
  * This class stores up and down queries needed for migrations functionality.
  */
diff --git a/node_modules/typeorm/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts b/node_modules/typeorm/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts
index fbcc022..8030570 100644
--- a/node_modules/typeorm/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/aurora-mysql/AuroraMysqlConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { AuroraMysqlConnectionCredentialsOptions } from "./AuroraMysqlConnectionCredentialsOptions";
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { AuroraMysqlConnectionCredentialsOptions } from "typeorm/driver/aurora-mysql/AuroraMysqlConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * MySQL specific connection options.
  *
diff --git a/node_modules/typeorm/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts b/node_modules/typeorm/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts
index 8f55291..7730a6b 100644
--- a/node_modules/typeorm/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/aurora-postgres/AuroraPostgresConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Postgres-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts b/node_modules/typeorm/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts
index e64e3d7..d2de291 100644
--- a/node_modules/typeorm/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/better-sqlite3/BetterSqlite3ConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/capacitor/CapacitorConnectionOptions.d.ts b/node_modules/typeorm/driver/capacitor/CapacitorConnectionOptions.d.ts
index 79c9244..19e6603 100644
--- a/node_modules/typeorm/driver/capacitor/CapacitorConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/capacitor/CapacitorConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/cockroachdb/CockroachConnectionOptions.d.ts b/node_modules/typeorm/driver/cockroachdb/CockroachConnectionOptions.d.ts
index 47c0ba4..36db22b 100644
--- a/node_modules/typeorm/driver/cockroachdb/CockroachConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/cockroachdb/CockroachConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { CockroachConnectionCredentialsOptions } from "./CockroachConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { CockroachConnectionCredentialsOptions } from "typeorm/driver/cockroachdb/CockroachConnectionCredentialsOptions";
 /**
  * Cockroachdb-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/cordova/CordovaConnectionOptions.d.ts b/node_modules/typeorm/driver/cordova/CordovaConnectionOptions.d.ts
index 224a205..ffbd64f 100644
--- a/node_modules/typeorm/driver/cordova/CordovaConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/cordova/CordovaConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/expo/ExpoConnectionOptions.d.ts b/node_modules/typeorm/driver/expo/ExpoConnectionOptions.d.ts
index f388566..1064712 100644
--- a/node_modules/typeorm/driver/expo/ExpoConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/expo/ExpoConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/mongodb/MongoConnectionOptions.d.ts b/node_modules/typeorm/driver/mongodb/MongoConnectionOptions.d.ts
index dbe27a0..14c0cdc 100644
--- a/node_modules/typeorm/driver/mongodb/MongoConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/mongodb/MongoConnectionOptions.d.ts
@@ -1,6 +1,6 @@
 
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { ReadPreference } from "./typings";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { ReadPreference } from "typeorm/driver/mongodb/typings";
 /**
  * MongoDB specific connection options.
  * Synced with http://mongodb.github.io/node-mongodb-native/3.1/api/MongoClient.html
diff --git a/node_modules/typeorm/driver/mongodb/MongoQueryRunner.d.ts b/node_modules/typeorm/driver/mongodb/MongoQueryRunner.d.ts
index ca66d10..0c886e8 100644
--- a/node_modules/typeorm/driver/mongodb/MongoQueryRunner.d.ts
+++ b/node_modules/typeorm/driver/mongodb/MongoQueryRunner.d.ts
@@ -1,20 +1,20 @@
 
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { TableColumn } from "../../schema-builder/table/TableColumn";
-import { Table } from "../../schema-builder/table/Table";
-import { TableForeignKey } from "../../schema-builder/table/TableForeignKey";
-import { TableIndex } from "../../schema-builder/table/TableIndex";
-import { View } from "../../schema-builder/view/View";
-import { ReadStream } from "../../platform/PlatformTools";
-import { MongoEntityManager } from "../../entity-manager/MongoEntityManager";
-import { SqlInMemory } from "../SqlInMemory";
-import { TableUnique } from "../../schema-builder/table/TableUnique";
-import { Broadcaster } from "../../subscriber/Broadcaster";
-import { TableCheck } from "../../schema-builder/table/TableCheck";
-import { TableExclusion } from "../../schema-builder/table/TableExclusion";
-import { BulkWriteResult, AggregationCursor, MongoClient, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, CountDocumentsOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions } from "../../driver/mongodb/typings";
-import { DataSource } from "../../data-source/DataSource";
-import { ReplicationMode } from "../types/ReplicationMode";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { TableColumn } from "typeorm/schema-builder/table/TableColumn";
+import { Table } from "typeorm/schema-builder/table/Table";
+import { TableForeignKey } from "typeorm/schema-builder/table/TableForeignKey";
+import { TableIndex } from "typeorm/schema-builder/table/TableIndex";
+import { View } from "typeorm/schema-builder/view/View";
+import { ReadStream } from "typeorm/platform/PlatformTools";
+import { MongoEntityManager } from "typeorm/entity-manager/MongoEntityManager";
+import { SqlInMemory } from "typeorm/driver/SqlInMemory";
+import { TableUnique } from "typeorm/schema-builder/table/TableUnique";
+import { Broadcaster } from "typeorm/subscriber/Broadcaster";
+import { TableCheck } from "typeorm/schema-builder/table/TableCheck";
+import { TableExclusion } from "typeorm/schema-builder/table/TableExclusion";
+import { BulkWriteResult, AggregationCursor, MongoClient, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, CountDocumentsOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions } from "typeorm/driver/mongodb/typings";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { ReplicationMode } from "typeorm/driver/types/ReplicationMode";
 /**
  * Runs queries on a single MongoDB connection.
  */
diff --git a/node_modules/typeorm/driver/mongodb/typings.d.ts b/node_modules/typeorm/driver/mongodb/typings.d.ts
index d53149b..ac13ed5 100644
--- a/node_modules/typeorm/driver/mongodb/typings.d.ts
+++ b/node_modules/typeorm/driver/mongodb/typings.d.ts
@@ -6,14 +6,14 @@
 
 
 
-import { BSON, BSONRegExp, BSONSymbol, BSONType, Binary, Code, DBRef, Decimal128, DeserializeOptions, Document, Double, Int32, Long, MaxKey, MinKey, ObjectId, ObjectIdLike, SerializeOptions, Timestamp, deserialize, serialize } from "./bson.typings";
+import { BSON, BSONRegExp, BSONSymbol, BSONType, Binary, Code, DBRef, Decimal128, DeserializeOptions, Document, Double, Int32, Long, MaxKey, MinKey, ObjectId, ObjectIdLike, SerializeOptions, Timestamp, deserialize, serialize } from "typeorm/driver/mongodb/bson.typings";
 import type { ConnectionOptions as ConnectionOptions_2 } from "tls";
 import type { Socket } from "net";
 import type { SrvRecord } from "dns";
 import type { TcpNetConnectOpts } from "net";
 import type { TLSSocket } from "tls";
 import type { TLSSocketOptions } from "tls";
-import { Readable, EventEmitter } from "../../platform/PlatformTools";
+import { Readable, EventEmitter } from "typeorm/platform/PlatformTools";
 /** @public */
 export declare abstract class AbstractCursor<TSchema = any, CursorEvents extends AbstractCursorEvents = AbstractCursorEvents> extends TypedEventEmitter<CursorEvents> {
     /** @event */
diff --git a/node_modules/typeorm/driver/mysql/MysqlConnectionOptions.d.ts b/node_modules/typeorm/driver/mysql/MysqlConnectionOptions.d.ts
index 04ff775..f4463e4 100644
--- a/node_modules/typeorm/driver/mysql/MysqlConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/mysql/MysqlConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { MysqlConnectionCredentialsOptions } from "./MysqlConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { MysqlConnectionCredentialsOptions } from "typeorm/driver/mysql/MysqlConnectionCredentialsOptions";
 /**
  * MySQL specific connection options.
  *
diff --git a/node_modules/typeorm/driver/nativescript/NativescriptConnectionOptions.d.ts b/node_modules/typeorm/driver/nativescript/NativescriptConnectionOptions.d.ts
index 90acf42..678a868 100644
--- a/node_modules/typeorm/driver/nativescript/NativescriptConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/nativescript/NativescriptConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * NativeScript-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/oracle/OracleConnectionOptions.d.ts b/node_modules/typeorm/driver/oracle/OracleConnectionOptions.d.ts
index 4f729ef..90f284c 100644
--- a/node_modules/typeorm/driver/oracle/OracleConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/oracle/OracleConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { OracleConnectionCredentialsOptions } from "./OracleConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { OracleConnectionCredentialsOptions } from "typeorm/driver/oracle/OracleConnectionCredentialsOptions";
 /**
  * Oracle-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/postgres/PostgresConnectionOptions.d.ts b/node_modules/typeorm/driver/postgres/PostgresConnectionOptions.d.ts
index 185afd4..6ee137d 100644
--- a/node_modules/typeorm/driver/postgres/PostgresConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/postgres/PostgresConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { PostgresConnectionCredentialsOptions } from "./PostgresConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { PostgresConnectionCredentialsOptions } from "typeorm/driver/postgres/PostgresConnectionCredentialsOptions";
 /**
  * Postgres-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts b/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts
index 8004ebe..2ef6d90 100644
--- a/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/react-native/ReactNativeConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/sap/SapConnectionOptions.d.ts b/node_modules/typeorm/driver/sap/SapConnectionOptions.d.ts
index 651ab85..5531c8a 100644
--- a/node_modules/typeorm/driver/sap/SapConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/sap/SapConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { SapConnectionCredentialsOptions } from "./SapConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { SapConnectionCredentialsOptions } from "typeorm/driver/sap/SapConnectionCredentialsOptions";
 /**
  * SAP Hana specific connection options.
  */
diff --git a/node_modules/typeorm/driver/sap/SapDriver.js b/node_modules/typeorm/driver/sap/SapDriver.js
index 6438b12..2316403 100644
--- a/node_modules/typeorm/driver/sap/SapDriver.js
+++ b/node_modules/typeorm/driver/sap/SapDriver.js
@@ -1,8 +1,8 @@
 "use strict";
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.SapDriver = void 0;
-const __1 = require("../..");
 const DriverPackageNotInstalledError_1 = require("../../error/DriverPackageNotInstalledError");
+const TypeORMError_1 = require("../../error/TypeORMError");
 const PlatformTools_1 = require("../../platform/PlatformTools");
 const RdbmsSchemaBuilder_1 = require("../../schema-builder/RdbmsSchemaBuilder");
 const ApplyValueTransformers_1 = require("../../util/ApplyValueTransformers");
@@ -530,7 +530,7 @@ class SapDriver {
      */
     obtainMasterConnection() {
         if (!this.master) {
-            throw new __1.TypeORMError("Driver not Connected");
+            throw new TypeORMError_1.TypeORMError("Driver not Connected");
         }
         return this.master.getConnection();
     }
diff --git a/node_modules/typeorm/driver/sap/SapDriver.js.map b/node_modules/typeorm/driver/sap/SapDriver.js.map
index 9c24865..1125d26 100644
--- a/node_modules/typeorm/driver/sap/SapDriver.js.map
+++ b/node_modules/typeorm/driver/sap/SapDriver.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/driver/sap/SapDriver.ts"],"names":[],"mappings":"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","file":"SapDriver.js","sourcesContent":["import {\n    ColumnType,\n    DataSource,\n    EntityMetadata,\n    ObjectLiteral,\n    Table,\n    TableColumn,\n    TableForeignKey,\n    TypeORMError,\n} from \"../..\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Driver } from \"../Driver\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { SapConnectionOptions } from \"./SapConnectionOptions\"\nimport { SapQueryRunner } from \"./SapQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\n\n/**\n * Organizes communication with SAP Hana DBMS.\n *\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\n */\nexport class SapDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Hana Pool instance.\n     */\n    client: any\n\n    /**\n     * Pool for master database.\n     */\n    master: any\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SapConnectionOptions\n\n    /**\n     * Database name used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Schema name used to perform all write queries.\n     */\n    schema?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"simple\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"int\",\n        \"integer\",\n        \"bigint\",\n        \"smalldecimal\",\n        \"decimal\",\n        \"dec\",\n        \"real\",\n        \"double\",\n        \"float\",\n        \"date\",\n        \"time\",\n        \"seconddate\",\n        \"timestamp\",\n        \"boolean\",\n        \"char\",\n        \"nchar\",\n        \"varchar\",\n        \"nvarchar\",\n        \"text\",\n        \"alphanum\",\n        \"shorttext\",\n        \"array\",\n        \"varbinary\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"st_geometry\",\n        \"st_point\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = []\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\"st_geometry\", \"st_point\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"varchar\",\n        \"nvarchar\",\n        \"alphanum\",\n        \"shorttext\",\n        \"varbinary\",\n    ]\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"nvarchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"integer\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"integer\",\n        cacheQuery: \"nvarchar(5000)\" as any,\n        cacheResult: \"text\",\n        metadataType: \"nvarchar\",\n        metadataDatabase: \"nvarchar\",\n        metadataSchema: \"nvarchar\",\n        metadataTable: \"nvarchar\",\n        metadataName: \"nvarchar\",\n        metadataValue: \"nvarchar(5000)\" as any,\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        char: { length: 1 },\n        nchar: { length: 1 },\n        varchar: { length: 255 },\n        nvarchar: { length: 255 },\n        shorttext: { length: 255 },\n        varbinary: { length: 255 },\n        decimal: { precision: 18, scale: 0 },\n    }\n\n    /**\n     * Max length allowed by SAP HANA for aliases (identifiers).\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\n     */\n    maxAliasLength = 128\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n    }\n\n    dummyTableName = `SYS.DUMMY`\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as SapConnectionOptions\n        this.loadDependencies()\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        // HANA connection info\n        const dbParams = {\n            hostName: this.options.host,\n            port: this.options.port,\n            userName: this.options.username,\n            password: this.options.password,\n            ...this.options.extra,\n        }\n\n        if (this.options.database) dbParams.databaseName = this.options.database\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt\n        if (this.options.sslValidateCertificate)\n            dbParams.validateCertificate = this.options.sslValidateCertificate\n        if (this.options.key) dbParams.key = this.options.key\n        if (this.options.cert) dbParams.cert = this.options.cert\n        if (this.options.ca) dbParams.ca = this.options.ca\n\n        // pool options\n        const options: any = {\n            min:\n                this.options.pool && this.options.pool.min\n                    ? this.options.pool.min\n                    : 1,\n            max:\n                this.options.pool && this.options.pool.max\n                    ? this.options.pool.max\n                    : 10,\n        }\n\n        if (this.options.pool && this.options.pool.checkInterval)\n            options.checkInterval = this.options.pool.checkInterval\n        if (this.options.pool && this.options.pool.maxWaitingRequests)\n            options.maxWaitingRequests = this.options.pool.maxWaitingRequests\n        if (this.options.pool && this.options.pool.requestTimeout)\n            options.requestTimeout = this.options.pool.requestTimeout\n        if (this.options.pool && this.options.pool.idleTimeout)\n            options.idleTimeout = this.options.pool.idleTimeout\n\n        const { logger } = this.connection\n\n        const poolErrorHandler =\n            options.poolErrorHandler ||\n            ((error: any) =>\n                logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`))\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler)\n\n        // create the pool\n        this.master = this.client.createPool(dbParams, options)\n\n        if (!this.database || !this.schema) {\n            const queryRunner = await this.createQueryRunner(\"master\")\n\n            if (!this.database) {\n                this.database = await queryRunner.getCurrentDatabase()\n            }\n\n            if (!this.schema) {\n                this.schema = await queryRunner.getCurrentSchema()\n            }\n\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        const promise = this.master.clear()\n        this.master = undefined\n        return promise\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SapQueryRunner(this, mode)\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                if (nativeParameters[key] instanceof Date)\n                    return DateUtils.mixedDateToDatetimeString(\n                        nativeParameters[key],\n                        true,\n                    )\n\n                return nativeParameters[key]\n            },\n        )\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                let value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                }\n\n                if (value instanceof Date) {\n                    return DateUtils.mixedDateToDatetimeString(value, true)\n                }\n\n                escapedParameters.push(value)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`\n    }\n\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        let tablePath = [tableName]\n\n        if (schema) {\n            tablePath.unshift(schema)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = this.schema\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        return {\n            database: driverDatabase,\n            schema: (parts.length > 1 ? parts[0] : undefined) || driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value)\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date\n        ) {\n            return DateUtils.mixedDateToDatetimeString(value, true)\n        } else if (columnMetadata.type === \"seconddate\") {\n            return DateUtils.mixedDateToDatetimeString(value, false)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value)\n        } else if (columnMetadata.isArray) {\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"seconddate\" ||\n            columnMetadata.type === Date\n        ) {\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\"\n        } else if (column.type === String) {\n            return \"nvarchar\"\n        } else if (column.type === Date) {\n            return \"timestamp\"\n        } else if (column.type === Boolean) {\n            return \"boolean\"\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\"\n        } else if (column.type === \"uuid\") {\n            return \"nvarchar\"\n        } else if (\n            column.type === \"simple-array\" ||\n            column.type === \"simple-json\"\n        ) {\n            return \"text\"\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"true\" : \"false\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(\n            (idx) =>\n                idx.isUnique &&\n                idx.columns.length === 1 &&\n                idx.columns[0] === column,\n        )\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n\n        if (column.generationStrategy === \"uuid\") return \"36\"\n\n        switch (column.type) {\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"shorttext\":\n            case String:\n                return \"255\"\n            case \"alphanum\":\n                return \"127\"\n            case \"varbinary\":\n                return \"255\"\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += `(${column.precision},${column.scale})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += `(${column.precision})`\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        if (!this.master) {\n            throw new TypeORMError(\"Driver not Connected\")\n        }\n\n        return this.master.getConnection()\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.obtainMasterConnection()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult\n                ) {\n                    value = insertResult\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                    //     value = generatedColumn.getEntityValue(uuidMap);\n                }\n\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            const normalizeDefault = this.normalizeDefault(columnMetadata)\n            const hanaNullComapatibleDefault =\n                normalizeDefault == null ? undefined : normalizeDefault\n\n            return (\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                (columnMetadata.length &&\n                    tableColumn.length !==\n                        this.getColumnLength(columnMetadata)) ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                (!tableColumn.isGenerated &&\n                    hanaNullComapatibleDefault !== tableColumn.default) || // we included check for generated here, because generated columns already can have default values\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n            )\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\"\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const client = this.options.driver || PlatformTools.load(\"hdb-pool\")\n            this.client = client\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\")\n        }\n\n        try {\n            if (!this.options.hanaClientDriver) {\n                PlatformTools.load(\"@sap/hana-client\")\n            }\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\n                \"SAP Hana\",\n                \"@sap/hana-client\",\n            )\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../../src/driver/sap/SapDriver.ts"],"names":[],"mappings":"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","file":"SapDriver.js","sourcesContent":["import {\n    ColumnType,\n    DataSource,\n    EntityMetadata,\n    ObjectLiteral,\n    Table,\n    TableColumn,\n    TableForeignKey,\n} from \"../..\"\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\"\nimport { TypeORMError } from \"../../error/TypeORMError\"\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\"\nimport { PlatformTools } from \"../../platform/PlatformTools\"\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\"\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\"\nimport { DateUtils } from \"../../util/DateUtils\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Driver } from \"../Driver\"\nimport { CteCapabilities } from \"../types/CteCapabilities\"\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\"\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\"\nimport { SapConnectionOptions } from \"./SapConnectionOptions\"\nimport { SapQueryRunner } from \"./SapQueryRunner\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { DriverUtils } from \"../DriverUtils\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\nimport { UpsertType } from \"../types/UpsertType\"\n\n/**\n * Organizes communication with SAP Hana DBMS.\n *\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\n */\nexport class SapDriver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: DataSource\n\n    /**\n     * Hana Pool instance.\n     */\n    client: any\n\n    /**\n     * Pool for master database.\n     */\n    master: any\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = []\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SapConnectionOptions\n\n    /**\n     * Database name used to perform all write queries.\n     */\n    database?: string\n\n    /**\n     * Schema name used to perform all write queries.\n     */\n    schema?: string\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true\n\n    /**\n     * Represent transaction support by this driver\n     */\n    transactionSupport = \"simple\" as const\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"int\",\n        \"integer\",\n        \"bigint\",\n        \"smalldecimal\",\n        \"decimal\",\n        \"dec\",\n        \"real\",\n        \"double\",\n        \"float\",\n        \"date\",\n        \"time\",\n        \"seconddate\",\n        \"timestamp\",\n        \"boolean\",\n        \"char\",\n        \"nchar\",\n        \"varchar\",\n        \"nvarchar\",\n        \"text\",\n        \"alphanum\",\n        \"shorttext\",\n        \"array\",\n        \"varbinary\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"st_geometry\",\n        \"st_point\",\n    ]\n\n    /**\n     * Returns type of upsert supported by driver if any\n     */\n    supportedUpsertTypes: UpsertType[] = []\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\"st_geometry\", \"st_point\"]\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"varchar\",\n        \"nvarchar\",\n        \"alphanum\",\n        \"shorttext\",\n        \"varbinary\",\n    ]\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\"decimal\"]\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"nvarchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"integer\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"integer\",\n        cacheQuery: \"nvarchar(5000)\" as any,\n        cacheResult: \"text\",\n        metadataType: \"nvarchar\",\n        metadataDatabase: \"nvarchar\",\n        metadataSchema: \"nvarchar\",\n        metadataTable: \"nvarchar\",\n        metadataName: \"nvarchar\",\n        metadataValue: \"nvarchar(5000)\" as any,\n    }\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        char: { length: 1 },\n        nchar: { length: 1 },\n        varchar: { length: 255 },\n        nvarchar: { length: 255 },\n        shorttext: { length: 255 },\n        varbinary: { length: 255 },\n        decimal: { precision: 18, scale: 0 },\n    }\n\n    /**\n     * Max length allowed by SAP HANA for aliases (identifiers).\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\n     */\n    maxAliasLength = 128\n\n    cteCapabilities: CteCapabilities = {\n        enabled: true,\n    }\n\n    dummyTableName = `SYS.DUMMY`\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        this.connection = connection\n        this.options = connection.options as SapConnectionOptions\n        this.loadDependencies()\n\n        this.database = DriverUtils.buildDriverOptions(this.options).database\n        this.schema = DriverUtils.buildDriverOptions(this.options).schema\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        // HANA connection info\n        const dbParams = {\n            hostName: this.options.host,\n            port: this.options.port,\n            userName: this.options.username,\n            password: this.options.password,\n            ...this.options.extra,\n        }\n\n        if (this.options.database) dbParams.databaseName = this.options.database\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt\n        if (this.options.sslValidateCertificate)\n            dbParams.validateCertificate = this.options.sslValidateCertificate\n        if (this.options.key) dbParams.key = this.options.key\n        if (this.options.cert) dbParams.cert = this.options.cert\n        if (this.options.ca) dbParams.ca = this.options.ca\n\n        // pool options\n        const options: any = {\n            min:\n                this.options.pool && this.options.pool.min\n                    ? this.options.pool.min\n                    : 1,\n            max:\n                this.options.pool && this.options.pool.max\n                    ? this.options.pool.max\n                    : 10,\n        }\n\n        if (this.options.pool && this.options.pool.checkInterval)\n            options.checkInterval = this.options.pool.checkInterval\n        if (this.options.pool && this.options.pool.maxWaitingRequests)\n            options.maxWaitingRequests = this.options.pool.maxWaitingRequests\n        if (this.options.pool && this.options.pool.requestTimeout)\n            options.requestTimeout = this.options.pool.requestTimeout\n        if (this.options.pool && this.options.pool.idleTimeout)\n            options.idleTimeout = this.options.pool.idleTimeout\n\n        const { logger } = this.connection\n\n        const poolErrorHandler =\n            options.poolErrorHandler ||\n            ((error: any) =>\n                logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`))\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler)\n\n        // create the pool\n        this.master = this.client.createPool(dbParams, options)\n\n        if (!this.database || !this.schema) {\n            const queryRunner = await this.createQueryRunner(\"master\")\n\n            if (!this.database) {\n                this.database = await queryRunner.getCurrentDatabase()\n            }\n\n            if (!this.schema) {\n                this.schema = await queryRunner.getCurrentSchema()\n            }\n\n            await queryRunner.release()\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        const promise = this.master.clear()\n        this.master = undefined\n        return promise\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection)\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SapQueryRunner(this, mode)\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral,\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                if (nativeParameters[key] instanceof Date)\n                    return DateUtils.mixedDateToDatetimeString(\n                        nativeParameters[key],\n                        true,\n                    )\n\n                return nativeParameters[key]\n            },\n        )\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters]\n\n        sql = sql.replace(\n            /:(\\.\\.\\.)?([A-Za-z0-9_.]+)/g,\n            (full, isArray: string, key: string): string => {\n                if (!parameters.hasOwnProperty(key)) {\n                    return full\n                }\n\n                let value: any = parameters[key]\n\n                if (isArray) {\n                    return value\n                        .map((v: any) => {\n                            escapedParameters.push(v)\n                            return this.createParameter(\n                                key,\n                                escapedParameters.length - 1,\n                            )\n                        })\n                        .join(\", \")\n                }\n\n                if (typeof value === \"function\") {\n                    return value()\n                }\n\n                if (value instanceof Date) {\n                    return DateUtils.mixedDateToDatetimeString(value, true)\n                }\n\n                escapedParameters.push(value)\n                return this.createParameter(key, escapedParameters.length - 1)\n            },\n        ) // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters]\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`\n    }\n\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. myDB.mySchema.myTable\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        let tablePath = [tableName]\n\n        if (schema) {\n            tablePath.unshift(schema)\n        }\n\n        return tablePath.join(\".\")\n    }\n\n    /**\n     * Parse a target table name or other types and return a normalized table definition.\n     */\n    parseTableName(\n        target: EntityMetadata | Table | View | TableForeignKey | string,\n    ): { database?: string; schema?: string; tableName: string } {\n        const driverDatabase = this.database\n        const driverSchema = this.schema\n\n        if (InstanceChecker.isTable(target) || InstanceChecker.isView(target)) {\n            const parsed = this.parseTableName(target.name)\n\n            return {\n                database: target.database || parsed.database || driverDatabase,\n                schema: target.schema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isTableForeignKey(target)) {\n            const parsed = this.parseTableName(target.referencedTableName)\n\n            return {\n                database:\n                    target.referencedDatabase ||\n                    parsed.database ||\n                    driverDatabase,\n                schema:\n                    target.referencedSchema || parsed.schema || driverSchema,\n                tableName: parsed.tableName,\n            }\n        }\n\n        if (InstanceChecker.isEntityMetadata(target)) {\n            // EntityMetadata tableName is never a path\n\n            return {\n                database: target.database || driverDatabase,\n                schema: target.schema || driverSchema,\n                tableName: target.tableName,\n            }\n        }\n\n        const parts = target.split(\".\")\n\n        return {\n            database: driverDatabase,\n            schema: (parts.length > 1 ? parts[0] : undefined) || driverSchema,\n            tableName: parts.length > 1 ? parts[1] : parts[0],\n        }\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value,\n            )\n\n        if (value === null || value === undefined) return value\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value)\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === Date\n        ) {\n            return DateUtils.mixedDateToDatetimeString(value, true)\n        } else if (columnMetadata.type === \"seconddate\") {\n            return DateUtils.mixedDateToDatetimeString(value, false)\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value)\n        } else if (columnMetadata.isArray) {\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`\n        }\n\n        return value\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value,\n                  )\n                : value\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false\n        } else if (\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"seconddate\" ||\n            columnMetadata.type === Date\n        ) {\n            value = DateUtils.normalizeHydratedDate(value)\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value)\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value)\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value)\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value)\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata)\n        } else if (columnMetadata.type === Number) {\n            // convert to number if number\n            value = !isNaN(+value) ? parseInt(value) : value\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value,\n            )\n\n        return value\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType\n        length?: number | string\n        precision?: number | null\n        scale?: number\n    }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\"\n        } else if (column.type === String) {\n            return \"nvarchar\"\n        } else if (column.type === Date) {\n            return \"timestamp\"\n        } else if (column.type === Boolean) {\n            return \"boolean\"\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\"\n        } else if (column.type === \"uuid\") {\n            return \"nvarchar\"\n        } else if (\n            column.type === \"simple-array\" ||\n            column.type === \"simple-json\"\n        ) {\n            return \"text\"\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\"\n        } else {\n            return (column.type as string) || \"\"\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default\n\n        if (typeof defaultValue === \"number\") {\n            return `${defaultValue}`\n        }\n\n        if (typeof defaultValue === \"boolean\") {\n            return defaultValue ? \"true\" : \"false\"\n        }\n\n        if (typeof defaultValue === \"function\") {\n            return defaultValue()\n        }\n\n        if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`\n        }\n\n        if (defaultValue === null || defaultValue === undefined) {\n            return undefined\n        }\n\n        return `${defaultValue}`\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(\n            (idx) =>\n                idx.isUnique &&\n                idx.columns.length === 1 &&\n                idx.columns[0] === column,\n        )\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString()\n\n        if (column.generationStrategy === \"uuid\") return \"36\"\n\n        switch (column.type) {\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"shorttext\":\n            case String:\n                return \"255\"\n            case \"alphanum\":\n                return \"127\"\n            case \"varbinary\":\n                return \"255\"\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += `(${column.precision},${column.scale})`\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += `(${column.precision})`\n        }\n\n        if (column.isArray) type += \" array\"\n\n        return type\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        if (!this.master) {\n            throw new TypeORMError(\"Driver not Connected\")\n        }\n\n        return this.master.getConnection()\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.obtainMasterConnection()\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        const generatedMap = metadata.generatedColumns.reduce(\n            (map, generatedColumn) => {\n                let value: any\n                if (\n                    generatedColumn.generationStrategy === \"increment\" &&\n                    insertResult\n                ) {\n                    value = insertResult\n                    // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                    //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                    //     value = generatedColumn.getEntityValue(uuidMap);\n                }\n\n                return OrmUtils.mergeDeep(\n                    map,\n                    generatedColumn.createValueMap(value),\n                )\n            },\n            {} as ObjectLiteral,\n        )\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[],\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName,\n            )\n            if (!tableColumn) return false // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            const normalizeDefault = this.normalizeDefault(columnMetadata)\n            const hanaNullComapatibleDefault =\n                normalizeDefault == null ? undefined : normalizeDefault\n\n            return (\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                (columnMetadata.length &&\n                    tableColumn.length !==\n                        this.getColumnLength(columnMetadata)) ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                (!tableColumn.isGenerated &&\n                    hanaNullComapatibleDefault !== tableColumn.default) || // we included check for generated here, because generated columns already can have default values\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n            )\n        })\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return true\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\"\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            const client = this.options.driver || PlatformTools.load(\"hdb-pool\")\n            this.client = client\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\")\n        }\n\n        try {\n            if (!this.options.hanaClientDriver) {\n                PlatformTools.load(\"@sap/hana-client\")\n            }\n        } catch (e) {\n            // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\n                \"SAP Hana\",\n                \"@sap/hana-client\",\n            )\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/driver/spanner/SpannerConnectionOptions.d.ts b/node_modules/typeorm/driver/spanner/SpannerConnectionOptions.d.ts
index fc7fa1c..277f46f 100644
--- a/node_modules/typeorm/driver/spanner/SpannerConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/spanner/SpannerConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseConnectionOptions } from "../../connection/BaseConnectionOptions";
-import { SpannerConnectionCredentialsOptions } from "./SpannerConnectionCredentialsOptions";
+import { BaseConnectionOptions } from "typeorm/connection/BaseConnectionOptions";
+import { SpannerConnectionCredentialsOptions } from "typeorm/driver/spanner/SpannerConnectionCredentialsOptions";
 /**
  * Spanner specific connection options.
  */
diff --git a/node_modules/typeorm/driver/sqlite/SqliteConnectionOptions.d.ts b/node_modules/typeorm/driver/sqlite/SqliteConnectionOptions.d.ts
index c21a3d2..653c8e0 100644
--- a/node_modules/typeorm/driver/sqlite/SqliteConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/sqlite/SqliteConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Sqlite-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/sqljs/SqljsConnectionOptions.d.ts b/node_modules/typeorm/driver/sqljs/SqljsConnectionOptions.d.ts
index b540a6e..ea8ae68 100644
--- a/node_modules/typeorm/driver/sqljs/SqljsConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/sqljs/SqljsConnectionOptions.d.ts
@@ -1,4 +1,4 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
 /**
  * Sql.js-specific connection options.
  */
diff --git a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts
index 80fb038..5b0cab5 100644
--- a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts
+++ b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.d.ts
@@ -1,11 +1,12 @@
-import { DefaultAuthentication } from "./authentication/DefaultAuthentication";
-import { AzureActiveDirectoryAccessTokenAuthentication } from "./authentication/AzureActiveDirectoryAccessTokenAuthentication";
-import { AzureActiveDirectoryMsiAppServiceAuthentication } from "./authentication/AzureActiveDirectoryMsiAppServiceAuthentication";
-import { AzureActiveDirectoryMsiVmAuthentication } from "./authentication/AzureActiveDirectoryMsiVmAuthentication";
-import { AzureActiveDirectoryPasswordAuthentication } from "./authentication/AzureActiveDirectoryPasswordAuthentication";
-import { AzureActiveDirectoryServicePrincipalSecret } from "./authentication/AzureActiveDirectoryServicePrincipalSecret";
-import { NtlmAuthentication } from "./authentication/NtlmAuthentication";
-export type SqlServerConnectionCredentialsAuthenticationOptions = DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryServicePrincipalSecret;
+import { DefaultAuthentication } from "typeorm/driver/sqlserver/authentication/DefaultAuthentication";
+import { AzureActiveDirectoryAccessTokenAuthentication } from "typeorm/driver/sqlserver/authentication/AzureActiveDirectoryAccessTokenAuthentication";
+import { AzureActiveDirectoryDefaultAuthentication } from "typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication";
+import { AzureActiveDirectoryMsiAppServiceAuthentication } from "typeorm/driver/sqlserver/authentication/AzureActiveDirectoryMsiAppServiceAuthentication";
+import { AzureActiveDirectoryMsiVmAuthentication } from "typeorm/driver/sqlserver/authentication/AzureActiveDirectoryMsiVmAuthentication";
+import { AzureActiveDirectoryPasswordAuthentication } from "typeorm/driver/sqlserver/authentication/AzureActiveDirectoryPasswordAuthentication";
+import { AzureActiveDirectoryServicePrincipalSecret } from "typeorm/driver/sqlserver/authentication/AzureActiveDirectoryServicePrincipalSecret";
+import { NtlmAuthentication } from "typeorm/driver/sqlserver/authentication/NtlmAuthentication";
+export type SqlServerConnectionCredentialsAuthenticationOptions = DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryDefaultAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryServicePrincipalSecret;
 /**
  * SqlServer specific connection credential options.
  */
diff --git a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map
index 0108343..6b00ad0 100644
--- a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map
+++ b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/driver/sqlserver/SqlServerConnectionCredentialsOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionCredentialsOptions.js","sourcesContent":["import { DefaultAuthentication } from \"./authentication/DefaultAuthentication\"\nimport { AzureActiveDirectoryAccessTokenAuthentication } from \"./authentication/AzureActiveDirectoryAccessTokenAuthentication\"\nimport { AzureActiveDirectoryMsiAppServiceAuthentication } from \"./authentication/AzureActiveDirectoryMsiAppServiceAuthentication\"\nimport { AzureActiveDirectoryMsiVmAuthentication } from \"./authentication/AzureActiveDirectoryMsiVmAuthentication\"\nimport { AzureActiveDirectoryPasswordAuthentication } from \"./authentication/AzureActiveDirectoryPasswordAuthentication\"\nimport { AzureActiveDirectoryServicePrincipalSecret } from \"./authentication/AzureActiveDirectoryServicePrincipalSecret\"\nimport { NtlmAuthentication } from \"./authentication/NtlmAuthentication\"\n\nexport type SqlServerConnectionCredentialsAuthenticationOptions =\n    | DefaultAuthentication\n    | NtlmAuthentication\n    | AzureActiveDirectoryAccessTokenAuthentication\n    | AzureActiveDirectoryMsiAppServiceAuthentication\n    | AzureActiveDirectoryMsiVmAuthentication\n    | AzureActiveDirectoryPasswordAuthentication\n    | AzureActiveDirectoryServicePrincipalSecret\n\n/**\n * SqlServer specific connection credential options.\n */\nexport interface SqlServerConnectionCredentialsOptions {\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string\n\n    /**\n     * Database host.\n     */\n    readonly host?: string\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string\n\n    /**\n     * Database username.\n     */\n    readonly username?: string\n\n    /**\n     * Database password.\n     */\n    readonly password?: string\n\n    /**\n     * Authentication settings\n     * It overrides username and password, when passed.\n     */\n    readonly authentication?: SqlServerConnectionCredentialsAuthenticationOptions\n\n    /**\n     * Once you set domain, driver will connect to SQL Server using domain login.\n     * @see SqlServerConnectionCredentialsOptions.authentication\n     * @see NtlmAuthentication\n     * @deprecated\n     */\n    readonly domain?: string\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../../src/driver/sqlserver/SqlServerConnectionCredentialsOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionCredentialsOptions.js","sourcesContent":["import { DefaultAuthentication } from \"./authentication/DefaultAuthentication\"\nimport { AzureActiveDirectoryAccessTokenAuthentication } from \"./authentication/AzureActiveDirectoryAccessTokenAuthentication\"\nimport { AzureActiveDirectoryDefaultAuthentication } from \"./authentication/AzureActiveDirectoryDefaultAuthentication\"\nimport { AzureActiveDirectoryMsiAppServiceAuthentication } from \"./authentication/AzureActiveDirectoryMsiAppServiceAuthentication\"\nimport { AzureActiveDirectoryMsiVmAuthentication } from \"./authentication/AzureActiveDirectoryMsiVmAuthentication\"\nimport { AzureActiveDirectoryPasswordAuthentication } from \"./authentication/AzureActiveDirectoryPasswordAuthentication\"\nimport { AzureActiveDirectoryServicePrincipalSecret } from \"./authentication/AzureActiveDirectoryServicePrincipalSecret\"\nimport { NtlmAuthentication } from \"./authentication/NtlmAuthentication\"\n\nexport type SqlServerConnectionCredentialsAuthenticationOptions =\n    | DefaultAuthentication\n    | NtlmAuthentication\n    | AzureActiveDirectoryAccessTokenAuthentication\n    | AzureActiveDirectoryDefaultAuthentication\n    | AzureActiveDirectoryMsiAppServiceAuthentication\n    | AzureActiveDirectoryMsiVmAuthentication\n    | AzureActiveDirectoryPasswordAuthentication\n    | AzureActiveDirectoryServicePrincipalSecret\n\n/**\n * SqlServer specific connection credential options.\n */\nexport interface SqlServerConnectionCredentialsOptions {\n    /**\n     * Connection url where perform connection to.\n     */\n    readonly url?: string\n\n    /**\n     * Database host.\n     */\n    readonly host?: string\n\n    /**\n     * Database host port.\n     */\n    readonly port?: number\n\n    /**\n     * Database name to connect to.\n     */\n    readonly database?: string\n\n    /**\n     * Database username.\n     */\n    readonly username?: string\n\n    /**\n     * Database password.\n     */\n    readonly password?: string\n\n    /**\n     * Authentication settings\n     * It overrides username and password, when passed.\n     */\n    readonly authentication?: SqlServerConnectionCredentialsAuthenticationOptions\n\n    /**\n     * Once you set domain, driver will connect to SQL Server using domain login.\n     * @see SqlServerConnectionCredentialsOptions.authentication\n     * @see NtlmAuthentication\n     * @deprecated\n     */\n    readonly domain?: string\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.d.ts b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.d.ts
index d63741b..78a1aab 100644
--- a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.d.ts
+++ b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.d.ts
@@ -1,5 +1,5 @@
-import { BaseDataSourceOptions } from "../../data-source/BaseDataSourceOptions";
-import { SqlServerConnectionCredentialsOptions } from "./SqlServerConnectionCredentialsOptions";
+import { BaseDataSourceOptions } from "typeorm/data-source/BaseDataSourceOptions";
+import { SqlServerConnectionCredentialsOptions } from "typeorm/driver/sqlserver/SqlServerConnectionCredentialsOptions";
 /**
  * Microsoft Sql Server specific connection options.
  */
@@ -148,6 +148,11 @@ export interface SqlServerConnectionOptions extends BaseDataSourceOptions, SqlSe
          * A boolean, controlling whatever to disable RETURNING / OUTPUT statements.
          */
         readonly disableOutputReturning?: boolean;
+        /**
+         * A boolean, controlling whether MssqlParameter types char, varchar, and text are converted to their unicode equivalents, nchar, nvarchar, and ntext.
+         * (default: false, meaning that char/varchar/text parameters will be converted to nchar/nvarchar/ntext)
+         */
+        readonly disableAsciiToUnicodeParamConversion?: boolean;
         /**
          * Debug options
          */
diff --git a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.js.map b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.js.map
index 9d8dbed..ccdfaf7 100644
--- a/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.js.map
+++ b/node_modules/typeorm/driver/sqlserver/SqlServerConnectionOptions.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/driver/sqlserver/SqlServerConnectionOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionOptions.js","sourcesContent":["import { BaseDataSourceOptions } from \"../../data-source/BaseDataSourceOptions\"\nimport { SqlServerConnectionCredentialsOptions } from \"./SqlServerConnectionCredentialsOptions\"\n\n/**\n * Microsoft Sql Server specific connection options.\n */\nexport interface SqlServerConnectionOptions\n    extends BaseDataSourceOptions,\n        SqlServerConnectionCredentialsOptions {\n    /**\n     * Database type.\n     */\n    readonly type: \"mssql\"\n\n    /**\n     * Connection timeout in ms (default: 15000).\n     */\n    readonly connectionTimeout?: number\n\n    /**\n     * Request timeout in ms (default: 15000). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second.\n     */\n    readonly requestTimeout?: number\n\n    /**\n     * Stream recordsets/rows instead of returning them all at once as an argument of callback (default: false).\n     * You can also enable streaming for each request independently (request.stream = true).\n     * Always set to true if you plan to work with large amount of rows.\n     */\n    readonly stream?: boolean\n\n    /**\n     * Database schema.\n     */\n    readonly schema?: string\n\n    /**\n     * The driver object\n     * This defaults to `require(\"mssql\")`\n     */\n    readonly driver?: any\n\n    /**\n     * An optional object/dictionary with the any of the properties\n     */\n    readonly pool?: {\n        /**\n         * Maximum number of resources to create at any given time. (default=1)\n         */\n        readonly max?: number\n\n        /**\n         * Minimum number of resources to keep in pool at any given time. If this is set >= max, the pool will silently\n         * set the min to equal max. (default=0)\n         */\n        readonly min?: number\n\n        /**\n         * Maximum number of queued requests allowed, additional acquire calls will be callback with an err in a future\n         * cycle of the event loop.\n         */\n        readonly maxWaitingClients?: number\n\n        /**\n         * Should the pool validate resources before giving them to clients. Requires that either factory.validate or\n         * factory.validateAsync to be specified\n         */\n        readonly testOnBorrow?: boolean\n\n        /**\n         * Max milliseconds an acquire call will wait for a resource before timing out. (default no limit), if supplied should non-zero positive integer.\n         */\n        readonly acquireTimeoutMillis?: number\n\n        /**\n         * If true the oldest resources will be first to be allocated. If false the most recently released resources will\n         * be the first to be allocated. This in effect turns the pool's behaviour from a queue into a stack. boolean,\n         * (default true)\n         */\n        readonly fifo?: boolean\n\n        /**\n         * Int between 1 and x - if set, borrowers can specify their relative priority in the queue if no resources\n         * are available. see example. (default 1)\n         */\n        readonly priorityRange?: number\n\n        /**\n         * How often to run eviction checks. Default: 0 (does not run).\n         */\n        readonly evictionRunIntervalMillis?: number\n\n        /**\n         * Number of resources to check each eviction run. Default: 3.\n         */\n        readonly numTestsPerRun?: number\n\n        /**\n         * Amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object\n         * evictor (if any), with the extra condition that at least \"min idle\" object instances remain in the pool.\n         * Default -1 (nothing can get evicted)\n         */\n        readonly softIdleTimeoutMillis?: number\n\n        /**\n         * The minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due\n         * to idle time. Supercedes softIdleTimeoutMillis Default: 30000\n         */\n        readonly idleTimeoutMillis?: number\n\n        /*\n         * Function handling errors thrown by drivers pool.\n         * Defaults to logging error with `warn` level.\n         */\n        readonly errorHandler?: (err: any) => any\n    }\n\n    /**\n     * Extra options\n     */\n    readonly options?: {\n        /**\n         * The named instance to connect to\n         */\n        readonly instanceName?: string\n\n        /**\n         * By default, if the database requestion by options.database cannot be accessed, the connection will fail with\n         * an error. However, if options.fallbackToDefaultDb is set to true, then the user's default database will\n         * be used instead (Default: false).\n         */\n        readonly fallbackToDefaultDb?: boolean\n\n        /**\n         * If true, SET ANSI_NULL_DFLT_ON ON will be set in the initial sql. This means new columns will be nullable by\n         * default. See the T-SQL documentation for more details. (Default: true).\n         */\n        readonly enableAnsiNullDefault?: boolean\n\n        /**\n         * The number of milliseconds before the attempt to connect is considered failed (default: 15000).\n         */\n        readonly connectTimeout?: number\n\n        /**\n         * The number of milliseconds before the cancel (abort) of a request is considered failed (default: 5000).\n         */\n        readonly cancelTimeout?: number\n\n        /**\n         * The size of TDS packets (subject to negotiation with the server). Should be a power of 2. (default: 4096).\n         */\n        readonly packetSize?: number\n\n        /**\n         * A boolean determining whether to pass time values in UTC or local time. (default: false).\n         */\n        readonly useUTC?: boolean\n\n        /**\n         * A boolean determining whether to rollback a transaction automatically if any error is encountered during\n         * the given transaction's execution. This sets the value for SET XACT_ABORT during the initial SQL phase\n         * of a connection (documentation).\n         */\n        readonly abortTransactionOnError?: boolean\n\n        /**\n         * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n         */\n        readonly localAddress?: string\n\n        /**\n         * A boolean determining whether to return rows as arrays or key-value collections. (default: false).\n         */\n        readonly useColumnNames?: boolean\n\n        /**\n         * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n         * (true) or not. This value is ignored if you provide a columnNameReplacer. (default: false).\n         */\n        readonly camelCaseColumns?: boolean\n\n        /**\n         * A boolean, controlling whatever to disable RETURNING / OUTPUT statements.\n         */\n        readonly disableOutputReturning?: boolean\n\n        /**\n         * Debug options\n         */\n        readonly debug?: {\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet details\n             * (default: false).\n             */\n            readonly packet?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet data details\n             * (default: false).\n             */\n            readonly data?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet payload details\n             * (default: false).\n             */\n            readonly payload?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing token stream tokens\n             * (default: false).\n             */\n            readonly token?: boolean\n        }\n\n        /**\n         * The default isolation level that transactions will be run with. The isolation levels are available\n         * from require('tedious').ISOLATION_LEVEL. (default: READ_COMMITTED).\n         */\n        readonly isolation?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * The default isolation level for new connections. All out-of-transaction queries are executed with this\n         * setting. The isolation levels are available from require('tedious').ISOLATION_LEVEL .\n         */\n        readonly connectionIsolationLevel?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * A boolean, determining whether the connection will request read only access from a SQL Server\n         * Availability Group. For more information, see here. (default: false).\n         */\n        readonly readOnlyIntent?: boolean\n\n        /**\n         * A boolean determining whether or not the connection will be encrypted. Set to true if you're on\n         * Windows Azure. (default: true).\n         */\n        readonly encrypt?: boolean\n\n        /**\n         * When encryption is used, an object may be supplied that will be used for the first argument when calling\n         * tls.createSecurePair (default: {}).\n         */\n        readonly cryptoCredentialsDetails?: any\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' done* events. See done, doneInProc and\n         * doneProc. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnDone?: boolean\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' completion callback. See new Request. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnRequestCompletion?: boolean\n\n        /**\n         * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n         * The versions are available from require('tedious').TDS_VERSION. (default: 7_4).\n         */\n        readonly tdsVersion?: string\n\n        /**\n         * A boolean, that when true will abort a query when an overflow or divide-by-zero error occurs during query execution.\n         */\n        readonly enableArithAbort?: boolean\n\n        /**\n         * Application name used for identifying a specific application in profiling, logging or tracing tools of SQL Server.\n         * (default: node-mssql)\n         */\n        readonly appName?: string\n\n        /**\n         * A boolean, controlling whether encryption occurs if there is no verifiable server certificate.\n         * (default: false)\n         */\n        readonly trustServerCertificate?: boolean\n    }\n\n    /**\n     * Replication setup.\n     */\n    readonly replication?: {\n        /**\n         * Master server used by orm to perform writes.\n         */\n        readonly master: SqlServerConnectionCredentialsOptions\n\n        /**\n         * List of read-from severs (slaves).\n         */\n        readonly slaves: SqlServerConnectionCredentialsOptions[]\n    }\n\n    readonly poolSize?: never\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../../src/driver/sqlserver/SqlServerConnectionOptions.ts"],"names":[],"mappings":"","file":"SqlServerConnectionOptions.js","sourcesContent":["import { BaseDataSourceOptions } from \"../../data-source/BaseDataSourceOptions\"\nimport { SqlServerConnectionCredentialsOptions } from \"./SqlServerConnectionCredentialsOptions\"\n\n/**\n * Microsoft Sql Server specific connection options.\n */\nexport interface SqlServerConnectionOptions\n    extends BaseDataSourceOptions,\n        SqlServerConnectionCredentialsOptions {\n    /**\n     * Database type.\n     */\n    readonly type: \"mssql\"\n\n    /**\n     * Connection timeout in ms (default: 15000).\n     */\n    readonly connectionTimeout?: number\n\n    /**\n     * Request timeout in ms (default: 15000). NOTE: msnodesqlv8 driver doesn't support timeouts < 1 second.\n     */\n    readonly requestTimeout?: number\n\n    /**\n     * Stream recordsets/rows instead of returning them all at once as an argument of callback (default: false).\n     * You can also enable streaming for each request independently (request.stream = true).\n     * Always set to true if you plan to work with large amount of rows.\n     */\n    readonly stream?: boolean\n\n    /**\n     * Database schema.\n     */\n    readonly schema?: string\n\n    /**\n     * The driver object\n     * This defaults to `require(\"mssql\")`\n     */\n    readonly driver?: any\n\n    /**\n     * An optional object/dictionary with the any of the properties\n     */\n    readonly pool?: {\n        /**\n         * Maximum number of resources to create at any given time. (default=1)\n         */\n        readonly max?: number\n\n        /**\n         * Minimum number of resources to keep in pool at any given time. If this is set >= max, the pool will silently\n         * set the min to equal max. (default=0)\n         */\n        readonly min?: number\n\n        /**\n         * Maximum number of queued requests allowed, additional acquire calls will be callback with an err in a future\n         * cycle of the event loop.\n         */\n        readonly maxWaitingClients?: number\n\n        /**\n         * Should the pool validate resources before giving them to clients. Requires that either factory.validate or\n         * factory.validateAsync to be specified\n         */\n        readonly testOnBorrow?: boolean\n\n        /**\n         * Max milliseconds an acquire call will wait for a resource before timing out. (default no limit), if supplied should non-zero positive integer.\n         */\n        readonly acquireTimeoutMillis?: number\n\n        /**\n         * If true the oldest resources will be first to be allocated. If false the most recently released resources will\n         * be the first to be allocated. This in effect turns the pool's behaviour from a queue into a stack. boolean,\n         * (default true)\n         */\n        readonly fifo?: boolean\n\n        /**\n         * Int between 1 and x - if set, borrowers can specify their relative priority in the queue if no resources\n         * are available. see example. (default 1)\n         */\n        readonly priorityRange?: number\n\n        /**\n         * How often to run eviction checks. Default: 0 (does not run).\n         */\n        readonly evictionRunIntervalMillis?: number\n\n        /**\n         * Number of resources to check each eviction run. Default: 3.\n         */\n        readonly numTestsPerRun?: number\n\n        /**\n         * Amount of time an object may sit idle in the pool before it is eligible for eviction by the idle object\n         * evictor (if any), with the extra condition that at least \"min idle\" object instances remain in the pool.\n         * Default -1 (nothing can get evicted)\n         */\n        readonly softIdleTimeoutMillis?: number\n\n        /**\n         * The minimum amount of time that an object may sit idle in the pool before it is eligible for eviction due\n         * to idle time. Supercedes softIdleTimeoutMillis Default: 30000\n         */\n        readonly idleTimeoutMillis?: number\n\n        /*\n         * Function handling errors thrown by drivers pool.\n         * Defaults to logging error with `warn` level.\n         */\n        readonly errorHandler?: (err: any) => any\n    }\n\n    /**\n     * Extra options\n     */\n    readonly options?: {\n        /**\n         * The named instance to connect to\n         */\n        readonly instanceName?: string\n\n        /**\n         * By default, if the database requestion by options.database cannot be accessed, the connection will fail with\n         * an error. However, if options.fallbackToDefaultDb is set to true, then the user's default database will\n         * be used instead (Default: false).\n         */\n        readonly fallbackToDefaultDb?: boolean\n\n        /**\n         * If true, SET ANSI_NULL_DFLT_ON ON will be set in the initial sql. This means new columns will be nullable by\n         * default. See the T-SQL documentation for more details. (Default: true).\n         */\n        readonly enableAnsiNullDefault?: boolean\n\n        /**\n         * The number of milliseconds before the attempt to connect is considered failed (default: 15000).\n         */\n        readonly connectTimeout?: number\n\n        /**\n         * The number of milliseconds before the cancel (abort) of a request is considered failed (default: 5000).\n         */\n        readonly cancelTimeout?: number\n\n        /**\n         * The size of TDS packets (subject to negotiation with the server). Should be a power of 2. (default: 4096).\n         */\n        readonly packetSize?: number\n\n        /**\n         * A boolean determining whether to pass time values in UTC or local time. (default: false).\n         */\n        readonly useUTC?: boolean\n\n        /**\n         * A boolean determining whether to rollback a transaction automatically if any error is encountered during\n         * the given transaction's execution. This sets the value for SET XACT_ABORT during the initial SQL phase\n         * of a connection (documentation).\n         */\n        readonly abortTransactionOnError?: boolean\n\n        /**\n         * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n         */\n        readonly localAddress?: string\n\n        /**\n         * A boolean determining whether to return rows as arrays or key-value collections. (default: false).\n         */\n        readonly useColumnNames?: boolean\n\n        /**\n         * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n         * (true) or not. This value is ignored if you provide a columnNameReplacer. (default: false).\n         */\n        readonly camelCaseColumns?: boolean\n\n        /**\n         * A boolean, controlling whatever to disable RETURNING / OUTPUT statements.\n         */\n        readonly disableOutputReturning?: boolean\n\n        /**\n         * A boolean, controlling whether MssqlParameter types char, varchar, and text are converted to their unicode equivalents, nchar, nvarchar, and ntext.\n         * (default: false, meaning that char/varchar/text parameters will be converted to nchar/nvarchar/ntext)\n         */\n        readonly disableAsciiToUnicodeParamConversion?: boolean\n\n        /**\n         * Debug options\n         */\n        readonly debug?: {\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet details\n             * (default: false).\n             */\n            readonly packet?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet data details\n             * (default: false).\n             */\n            readonly data?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing packet payload details\n             * (default: false).\n             */\n            readonly payload?: boolean\n\n            /**\n             * A boolean, controlling whether debug events will be emitted with text describing token stream tokens\n             * (default: false).\n             */\n            readonly token?: boolean\n        }\n\n        /**\n         * The default isolation level that transactions will be run with. The isolation levels are available\n         * from require('tedious').ISOLATION_LEVEL. (default: READ_COMMITTED).\n         */\n        readonly isolation?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * The default isolation level for new connections. All out-of-transaction queries are executed with this\n         * setting. The isolation levels are available from require('tedious').ISOLATION_LEVEL .\n         */\n        readonly connectionIsolationLevel?:\n            | \"READ_UNCOMMITTED\"\n            | \"READ_COMMITTED\"\n            | \"REPEATABLE_READ\"\n            | \"SERIALIZABLE\"\n            | \"SNAPSHOT\"\n\n        /**\n         * A boolean, determining whether the connection will request read only access from a SQL Server\n         * Availability Group. For more information, see here. (default: false).\n         */\n        readonly readOnlyIntent?: boolean\n\n        /**\n         * A boolean determining whether or not the connection will be encrypted. Set to true if you're on\n         * Windows Azure. (default: true).\n         */\n        readonly encrypt?: boolean\n\n        /**\n         * When encryption is used, an object may be supplied that will be used for the first argument when calling\n         * tls.createSecurePair (default: {}).\n         */\n        readonly cryptoCredentialsDetails?: any\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' done* events. See done, doneInProc and\n         * doneProc. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnDone?: boolean\n\n        /**\n         * A boolean, that when true will expose received rows in Requests' completion callback. See new Request. (default: false)\n         * Caution: If many row are received, enabling this option could result in excessive memory usage.\n         */\n        readonly rowCollectionOnRequestCompletion?: boolean\n\n        /**\n         * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n         * The versions are available from require('tedious').TDS_VERSION. (default: 7_4).\n         */\n        readonly tdsVersion?: string\n\n        /**\n         * A boolean, that when true will abort a query when an overflow or divide-by-zero error occurs during query execution.\n         */\n        readonly enableArithAbort?: boolean\n\n        /**\n         * Application name used for identifying a specific application in profiling, logging or tracing tools of SQL Server.\n         * (default: node-mssql)\n         */\n        readonly appName?: string\n\n        /**\n         * A boolean, controlling whether encryption occurs if there is no verifiable server certificate.\n         * (default: false)\n         */\n        readonly trustServerCertificate?: boolean\n    }\n\n    /**\n     * Replication setup.\n     */\n    readonly replication?: {\n        /**\n         * Master server used by orm to perform writes.\n         */\n        readonly master: SqlServerConnectionCredentialsOptions\n\n        /**\n         * List of read-from severs (slaves).\n         */\n        readonly slaves: SqlServerConnectionCredentialsOptions[]\n    }\n\n    readonly poolSize?: never\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js b/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js
index 4650eb6..3aed5e3 100644
--- a/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js
+++ b/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js
@@ -2371,6 +2371,7 @@ class SqlServerQueryRunner extends BaseQueryRunner_1.BaseQueryRunner {
      * Converts MssqlParameter into real mssql parameter type.
      */
     mssqlParameterToNativeParameter(parameter) {
+        var _a, _b, _c;
         switch (this.driver.normalizeType({ type: parameter.type })) {
             case "bit":
                 return this.driver.mssql.Bit;
@@ -2395,12 +2396,24 @@ class SqlServerQueryRunner extends BaseQueryRunner_1.BaseQueryRunner {
             case "tinyint":
                 return this.driver.mssql.TinyInt;
             case "char":
+                if ((_a = this.driver.options.options) === null || _a === void 0 ? void 0 : _a.disableAsciiToUnicodeParamConversion) {
+                    return this.driver.mssql.Char(...parameter.params);
+                }
+                return this.driver.mssql.NChar(...parameter.params);
             case "nchar":
                 return this.driver.mssql.NChar(...parameter.params);
             case "text":
+                if ((_b = this.driver.options.options) === null || _b === void 0 ? void 0 : _b.disableAsciiToUnicodeParamConversion) {
+                    return this.driver.mssql.Text;
+                }
+                return this.driver.mssql.Ntext;
             case "ntext":
                 return this.driver.mssql.Ntext;
             case "varchar":
+                if ((_c = this.driver.options.options) === null || _c === void 0 ? void 0 : _c.disableAsciiToUnicodeParamConversion) {
+                    return this.driver.mssql.VarChar(...parameter.params);
+                }
+                return this.driver.mssql.NVarChar(...parameter.params);
             case "nvarchar":
                 return this.driver.mssql.NVarChar(...parameter.params);
             case "xml":
diff --git a/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js.map b/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js.map
index 9530c1e..fd8b238 100644
--- a/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js.map
+++ b/node_modules/typeorm/driver/sqlserver/SqlServerQueryRunner.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","file":"SqlServerQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Query } from \"../Query\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { MssqlParameter } from \"./MssqlParameter\"\nimport { SqlServerDriver } from \"./SqlServerDriver\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryLock } from \"../../query-runner/QueryLock\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner\n    extends BaseQueryRunner\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private lock: QueryLock = new QueryLock()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n        this.mode = mode\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n        await new Promise<void>(async (ok, fail) => {\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false\n                    return fail(err)\n                }\n                ok()\n            }\n\n            if (this.transactionDepth === 0) {\n                const pool = await (this.mode === \"slave\"\n                    ? this.driver.obtainSlaveConnection()\n                    : this.driver.obtainMasterConnection())\n                this.databaseConnection = pool.transaction()\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\")\n                if (isolationLevel) {\n                    this.databaseConnection.begin(\n                        this.convertIsolationLevel(isolationLevel),\n                        transactionCallback,\n                    )\n                    this.connection.logger.logQuery(\n                        \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\n                    )\n                } else {\n                    this.databaseConnection.begin(transactionCallback)\n                }\n            } else {\n                await this.query(\n                    `SAVE TRANSACTION typeorm_${this.transactionDepth}`,\n                )\n                ok()\n            }\n            this.transactionDepth += 1\n        })\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth === 1) {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.commit(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"COMMIT\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n        this.transactionDepth -= 1\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TRANSACTION typeorm_${this.transactionDepth - 1}`,\n            )\n            this.transactionDepth -= 1\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.rollback(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"ROLLBACK\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        try {\n            this.driver.connection.logger.logQuery(query, parameters, this)\n            const pool = await (this.mode === \"slave\"\n                ? this.driver.obtainSlaveConnection()\n                : this.driver.obtainMasterConnection())\n            const request = new this.driver.mssql.Request(\n                this.isTransactionActive ? this.databaseConnection : pool,\n            )\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    const parameterName = index.toString()\n                    if (InstanceChecker.isMssqlParameter(parameter)) {\n                        const mssqlParameter =\n                            this.mssqlParameterToNativeParameter(parameter)\n                        if (mssqlParameter) {\n                            request.input(\n                                parameterName,\n                                mssqlParameter,\n                                parameter.value,\n                            )\n                        } else {\n                            request.input(parameterName, parameter.value)\n                        }\n                    } else {\n                        request.input(parameterName, parameter)\n                    }\n                })\n            }\n            const queryStartTime = +new Date()\n\n            const raw = await new Promise<any>((ok, fail) => {\n                request.query(query, (err: any, raw: any) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime =\n                        this.driver.options.maxQueryExecutionTime\n                    const queryEndTime = +new Date()\n                    const queryExecutionTime = queryEndTime - queryStartTime\n                    if (\n                        maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime\n                    ) {\n                        this.driver.connection.logger.logQuerySlow(\n                            queryExecutionTime,\n                            query,\n                            parameters,\n                            this,\n                        )\n                    }\n\n                    if (err) {\n                        fail(new QueryFailedError(query, parameters, err))\n                    }\n\n                    ok(raw)\n                })\n            })\n\n            const result = new QueryResult()\n\n            if (raw?.hasOwnProperty(\"recordset\")) {\n                result.records = raw.recordset\n            }\n\n            if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                result.affected = raw.rowsAffected[0]\n            }\n\n            const queryType = query.slice(0, query.indexOf(\" \"))\n            switch (queryType) {\n                case \"DELETE\":\n                    // for DELETE query additionally return number of affected rows\n                    result.raw = [raw.recordset, raw.rowsAffected[0]]\n                    break\n                default:\n                    result.raw = raw.recordset\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            throw err\n        } finally {\n            release()\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        const pool = await (this.mode === \"slave\"\n            ? this.driver.obtainSlaveConnection()\n            : this.driver.obtainMasterConnection())\n        const request = new this.driver.mssql.Request(\n            this.isTransactionActive ? this.databaseConnection : pool,\n        )\n        if (parameters && parameters.length) {\n            parameters.forEach((parameter, index) => {\n                const parameterName = index.toString()\n                if (InstanceChecker.isMssqlParameter(parameter)) {\n                    request.input(\n                        parameterName,\n                        this.mssqlParameterToNativeParameter(parameter),\n                        parameter.value,\n                    )\n                } else {\n                    request.input(parameterName, parameter)\n                }\n            })\n        }\n\n        request.query(query)\n\n        const streamRequest = request.toReadableStream()\n\n        streamRequest.on(\"error\", (err: any) => {\n            release()\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n        })\n\n        streamRequest.on(\"end\", () => {\n            release()\n        })\n\n        if (onEnd) {\n            streamRequest.on(\"end\", onEnd)\n        }\n\n        if (onError) {\n            streamRequest.on(\"error\", onError)\n        }\n\n        return streamRequest\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`)\n        return results.map((result) => result[\"DATABASE_NAME\"])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database\n            ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"`\n            : `SELECT * FROM \"sys\".\"schemas\"`\n        const results: ObjectLiteral[] = await this.query(query)\n        return results.map((result) => result[\"name\"])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT DB_ID('${database}') as \"db_id\"`,\n        )\n        const dbId = result[0][\"db_id\"]\n        return !!dbId\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`)\n        return currentDBQuery[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT SCHEMA_ID('${schema}') as \"schema_id\"`,\n        )\n        const schemaId = result[0][\"schema_id\"]\n        return !!schemaId\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(\n            `SELECT SCHEMA_NAME() AS \"schema_name\"`,\n        )\n        return currentSchemaQuery[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}' AND \"COLUMN_NAME\" = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const up = ifNotExist\n            ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"`\n            : `CREATE DATABASE \"${database}\"`\n        const down = `DROP DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist\n            ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"`\n            : `DROP DATABASE \"${database}\"`\n        const down = `CREATE DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END`\n                : `CREATE SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END`\n                : `CREATE SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END`\n                : `DROP SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END`\n                : `DROP SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(table, index))\n            })\n        }\n\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(await this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        let newTable = oldTable.clone()\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string | undefined = undefined\n        let schemaName: string | undefined = undefined\n        let oldTableName: string = oldTable.name\n        const splittedName = oldTable.name.split(\".\")\n        if (splittedName.length === 3) {\n            dbName = splittedName[0]\n            oldTableName = splittedName[2]\n            if (splittedName[1] !== \"\") schemaName = splittedName[1]\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0]\n            oldTableName = splittedName[1]\n        }\n\n        newTable.name = this.driver.buildTableName(\n            newTableName,\n            schemaName,\n            dbName,\n        )\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase()\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n        }\n\n        // rename table\n        upQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    oldTable,\n                )}\", \"${newTableName}\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    newTable,\n                )}\", \"${oldTableName}\"`,\n            ),\n        )\n\n        // rename primary key constraint\n        if (\n            newTable.primaryColumns.length > 0 &&\n            !newTable.primaryColumns[0].primaryKeyConstraintName\n        ) {\n            const columnNames = newTable.primaryColumns.map(\n                (column) => column.name,\n            )\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                oldTable,\n                columnNames,\n            )\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\n                newTable,\n                columnNames,\n            )\n\n            // rename primary constraint\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${oldPkName}\", \"${newPkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newPkName}\", \"${oldPkName}\"`,\n                ),\n            )\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    oldTable,\n                    unique.columnNames,\n                )\n\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName) return\n\n            // build new constraint name\n            const newUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    newTable,\n                    unique.columnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        unique.name\n                    }\", \"${newUniqueName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newUniqueName}\", \"${unique.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            unique.name = newUniqueName\n        })\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(\n                oldTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName) return\n\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        index.name\n                    }\", \"${newIndexName}\", \"INDEX\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                ),\n            )\n\n            // replace constraint name\n            index.name = newIndexName\n        })\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    oldTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName) return\n\n            // build new constraint name\n            const newForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    newTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        foreignKey.name!,\n                        schemaName,\n                        dbName,\n                    )}\", \"${newForeignKeyName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        newForeignKeyName,\n                        schemaName,\n                        dbName,\n                    )}\", \"${foreignKey.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName\n        })\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    true,\n                )}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = primaryColumns[0].primaryKeyConstraintName\n                    ? primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          primaryColumns.map((column) => column.name),\n                      )\n\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \")\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n            }\n\n            primaryColumns.push(column)\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(table, columnIndex))\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    [column.name],\n                ),\n                columnNames: [column.name],\n            })\n            clonedTable.uniques.push(uniqueConstraint)\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\" UNIQUE (\"${column.name}\")`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\"`,\n                ),\n            )\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find(\n                  (column) => column.name === oldTableColumnOrName,\n              )\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            newColumn.type !== oldColumn.type ||\n            newColumn.length !== oldColumn.length ||\n            newColumn.asExpression !== oldColumn.asExpression ||\n            newColumn.generatedType !== oldColumn.generatedType\n        ) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // we need database name and schema name to rename FK constraints\n                let dbName: string | undefined = undefined\n                let schemaName: string | undefined = undefined\n                const splittedName = table.name.split(\".\")\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0]\n                    if (splittedName[1] !== \"\") schemaName = splittedName[1]\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0]\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase()\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`))\n                    downQueries.push(new Query(`USE \"${currentDB}\"`))\n                }\n\n                // rename the column\n                upQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            oldColumn.name\n                        }\", \"${newColumn.name}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            newColumn.name\n                        }\", \"${oldColumn.name}\"`,\n                    ),\n                )\n\n                // rename column primary key constraint\n                if (\n                    oldColumn.isPrimary === true &&\n                    !oldColumn.primaryKeyConstraintName\n                ) {\n                    const primaryColumns = clonedTable.primaryColumns\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(\n                        (column) => column.name,\n                    )\n                    const oldPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\n                    columnNames.push(newColumn.name)\n\n                    // build new primary constraint name\n                    const newPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // rename primary constraint\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${oldPkName}\", \"${newPkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newPkName}\", \"${oldPkName}\"`,\n                        ),\n                    )\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    const oldIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // Skip renaming if Index has user defined constraint name\n                    if (index.name !== oldIndexName) return\n\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    index.columnNames.push(newColumn.name)\n                    const newIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${index.name}\", \"${newIndexName}\", \"INDEX\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    index.name = newIndexName\n                })\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        const foreignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // Skip renaming if foreign key has user defined constraint name\n                        if (foreignKey.name !== foreignKeyName) return\n\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1,\n                        )\n                        foreignKey.columnNames.push(newColumn.name)\n                        const newForeignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // build queries\n                        upQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    foreignKey.name!,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${newForeignKeyName}\"`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    newForeignKeyName,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${foreignKey.name}\"`,\n                            ),\n                        )\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName\n                    })\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach((check) => {\n                    // build new constraint name\n                    check.columnNames!.splice(\n                        check.columnNames!.indexOf(oldColumn.name),\n                        1,\n                    )\n                    check.columnNames!.push(newColumn.name)\n                    const newCheckName =\n                        this.connection.namingStrategy.checkConstraintName(\n                            clonedTable,\n                            check.expression!,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${check.name}\", \"${newCheckName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newCheckName}\", \"${check.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    check.name = newCheckName\n                })\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    const oldUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // Skip renaming if Unique has user defined constraint name\n                    if (unique.name !== oldUniqueName) return\n\n                    // build new constraint name\n                    unique.columnNames.splice(\n                        unique.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    unique.columnNames.push(newColumn.name)\n                    const newUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${unique.name}\", \"${newUniqueName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newUniqueName}\", \"${unique.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    unique.name = newUniqueName\n                })\n\n                // rename default constraints\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const oldDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    const newDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${oldDefaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${newDefaultName}\"`,\n                        ),\n                    )\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`))\n                    downQueries.push(new Query(`USE \"${dbName}\"`))\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name,\n                )\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name\n                oldColumn.name = newColumn.name\n            }\n\n            if (\n                this.isColumnChanged(oldColumn, newColumn, false, false, false)\n            ) {\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            newColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            oldColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n\n            if (this.isEnumChanged(oldColumn, newColumn)) {\n                const oldExpression = this.getEnumExpression(oldColumn)\n                const oldCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        oldExpression,\n                        true,\n                    ),\n                    expression: oldExpression,\n                })\n\n                const newExpression = this.getEnumExpression(newColumn)\n                const newCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        newExpression,\n                        true,\n                    ),\n                    expression: newExpression,\n                })\n\n                upQueries.push(this.dropCheckConstraintSql(table, oldCheck))\n                upQueries.push(this.createCheckConstraintSql(table, newCheck))\n\n                downQueries.push(this.dropCheckConstraintSql(table, newCheck))\n                downQueries.push(this.createCheckConstraintSql(table, oldCheck))\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn)\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = true\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name,\n                    )\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1,\n                    )\n\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = false\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = primaryColumns[0]\n                            .primaryKeyConstraintName\n                            ? primaryColumns[0].primaryKeyConstraintName\n                            : this.connection.namingStrategy.primaryKeyName(\n                                  clonedTable,\n                                  primaryColumns.map((column) => column.name),\n                              )\n\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \")\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} DROP CONSTRAINT \"${pkName}\"`,\n                            ),\n                        )\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(\n                            table,\n                            [newColumn.name],\n                        ),\n                        columnNames: [newColumn.name],\n                    })\n                    clonedTable.uniques.push(uniqueConstraint)\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\n                        ),\n                    )\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(\n                        (unique) => {\n                            return (\n                                unique.columnNames.length === 1 &&\n                                !!unique.columnNames.find(\n                                    (columnName) =>\n                                        columnName === newColumn.name,\n                                )\n                            )\n                        },\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\n                        1,\n                    )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${oldColumn.name}\"`,\n                        ),\n                    )\n                }\n\n                if (\n                    newColumn.default !== null &&\n                    newColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                newColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries)\n            this.replaceCachedTable(table, clonedTable)\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = column.primaryKeyConstraintName\n                ? column.primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      clonedTable.primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name)\n            tableColumn!.isPrimary = false\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = clonedTable.primaryColumns[0]\n                    .primaryKeyConstraintName\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          clonedTable.primaryColumns.map(\n                              (column) => column.name,\n                          ),\n                      )\n\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \")\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.dropIndexSql(table, columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name,\n        )\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1,\n            )\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(\n            (unique) =>\n                unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name,\n        )\n        if (columnUnique) {\n            clonedTable.uniques.splice(\n                clonedTable.uniques.indexOf(columnUnique),\n                1,\n            )\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\n            downQueries.push(\n                this.createUniqueConstraintSql(table, columnUnique),\n            )\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                        column.default\n                    } FOR \"${column.name}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    false,\n                )}`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n        const down = this.dropPrimaryKeySql(clonedTable)\n\n        await this.executeQueries(up, down)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const columnNames = columns.map((column) => column.name)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns\n        if (primaryColumns.length > 0) {\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n                ),\n            )\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true))\n\n        const pkName = primaryColumns[0].primaryKeyConstraintName\n            ? primaryColumns[0].primaryKeyConstraintName\n            : this.connection.namingStrategy.primaryKeyName(\n                  clonedTable,\n                  columnNames,\n              )\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP CONSTRAINT \"${pkName}\"`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(\n        tableOrName: Table | string,\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const up = this.dropPrimaryKeySql(table)\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name),\n            constraintName,\n        )\n        await this.executeQueries(up, down)\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    uniqueConstraint.columnNames,\n                )\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.addUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.createUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName)\n        if (!uniqueConstraint)\n            throw new TypeORMError(\n                `Supplied unique constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.removeUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    checkConstraint.expression!,\n                )\n\n        const up = this.createCheckConstraintSql(table, checkConstraint)\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.addCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\n        const down = this.createCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.removeCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const metadata = this.connection.hasMetadata(table.name)\n            ? this.connection.getMetadata(table.name)\n            : undefined\n\n        if (\n            metadata &&\n            metadata.treeParentRelation &&\n            metadata.treeParentRelation!.isTreeParent &&\n            metadata.foreignKeys.find(\n                (foreignKey) => foreignKey.onDelete !== \"NO ACTION\",\n            )\n        )\n            throw new TypeORMError(\n                \"SqlServer does not support options in TreeParent.\",\n            )\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index was not found in table ${table.name}`,\n            )\n\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(table, index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database)\n            if (!isDatabaseExist) return Promise.resolve()\n        }\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`\n            const allViewsResults: ObjectLiteral[] = await this.query(\n                allViewsSql,\n            )\n\n            await Promise.all(\n                allViewsResults.map((viewResult) => {\n                    // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                    const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`\n                    return this.query(dropTableSql)\n                }),\n            )\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n            const allTablesResults: ObjectLiteral[] = await this.query(\n                allTablesSql,\n            )\n\n            if (allTablesResults.length > 0) {\n                const tablesByCatalog: {\n                    [key: string]: {\n                        TABLE_NAME: string\n                        TABLE_SCHEMA: string\n                    }[]\n                } = allTablesResults.reduce(\n                    (c, { TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME }) => {\n                        c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                        c[TABLE_CATALOG].push({ TABLE_SCHEMA, TABLE_NAME })\n                        return c\n                    },\n                    {},\n                )\n\n                const foreignKeysSql = Object.entries(tablesByCatalog)\n                    .map(([TABLE_CATALOG, tables]) => {\n                        const conditions = tables\n                            .map(({ TABLE_SCHEMA, TABLE_NAME }) => {\n                                return `(\"fk\".\"referenced_object_id\" = OBJECT_ID('\"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\"'))`\n                            })\n                            .join(\" OR \")\n\n                        return `\n                        SELECT DISTINCT '${TABLE_CATALOG}' AS                                              \"TABLE_CATALOG\",\n                                        OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\",\n                                                           DB_ID('${TABLE_CATALOG}')) AS                   \"TABLE_SCHEMA\",\n                                        OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${TABLE_CATALOG}')) AS \"TABLE_NAME\",\n                                        \"fk\".\"name\" AS                                                     \"CONSTRAINT_NAME\"\n                        FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" AS \"fk\"\n                        WHERE (${conditions})\n                    `\n                    })\n                    .join(\" UNION ALL \")\n\n                const foreignKeys: {\n                    TABLE_CATALOG: string\n                    TABLE_SCHEMA: string\n                    TABLE_NAME: string\n                    CONSTRAINT_NAME: string\n                }[] = await this.query(foreignKeysSql)\n\n                await Promise.all(\n                    foreignKeys.map(\n                        async ({\n                            TABLE_CATALOG,\n                            TABLE_SCHEMA,\n                            TABLE_NAME,\n                            CONSTRAINT_NAME,\n                        }) => {\n                            // Disable the constraint first.\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `NOCHECK CONSTRAINT \"${CONSTRAINT_NAME}\"`,\n                            )\n\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `DROP CONSTRAINT \"${CONSTRAINT_NAME}\" -- FROM CLEAR`,\n                            )\n                        },\n                    ),\n                )\n\n                await Promise.all(\n                    allTablesResults.map((tablesResult) => {\n                        if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                            // don't try to drop temporary tables\n                            return\n                        }\n\n                        const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`\n                        return this.query(dropTableSql)\n                    }),\n                )\n            }\n\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewPaths?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewPaths) {\n            viewPaths = []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbNames = viewPaths\n            .map((viewPath) => this.driver.parseTableName(viewPath).database)\n            .filter((database) => database)\n\n        if (\n            this.driver.database &&\n            !dbNames.find((dbName) => dbName === this.driver.database)\n        )\n            dbNames.push(this.driver.database)\n\n        const viewsCondition = viewPaths\n            .map((viewPath) => {\n                let { schema, tableName: name } =\n                    this.driver.parseTableName(viewPath)\n\n                if (!schema) {\n                    schema = currentSchema\n                }\n                return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`\n            })\n            .join(\" OR \")\n\n        const query = dbNames\n            .map((dbName) => {\n                return (\n                    `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(\n                        this.getTypeormMetadataTableName(),\n                    )} \"t\" ` +\n                    `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = '${\n                        MetadataTableType.VIEW\n                    }' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const view = new View()\n            const db =\n                dbView[\"TABLE_CATALOG\"] === currentDatabase\n                    ? undefined\n                    : dbView[\"TABLE_CATALOG\"]\n            const schema =\n                dbView[\"schema\"] === currentSchema &&\n                !this.driver.options.schema\n                    ? undefined\n                    : dbView[\"schema\"]\n            view.database = dbView[\"TABLE_CATALOG\"]\n            view.schema = dbView[\"schema\"]\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db)\n            view.expression = dbView[\"value\"]\n            return view\n        })\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbTables: {\n            TABLE_CATALOG: string\n            TABLE_SCHEMA: string\n            TABLE_NAME: string\n        }[] = []\n\n        if (!tableNames) {\n            const databasesSql =\n                `SELECT DISTINCT \"name\" ` +\n                `FROM \"master\".\"dbo\".\"sysdatabases\" ` +\n                `WHERE \"name\" NOT IN ('master', 'model', 'msdb')`\n            const dbDatabases: { name: string }[] = await this.query(\n                databasesSql,\n            )\n\n            const tablesSql = dbDatabases\n                .map(({ name }) => {\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${name}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                      \"TABLE_TYPE\" = 'BASE TABLE'\n                      AND\n                      \"TABLE_CATALOG\" = '${name}'\n                      AND\n                      ISNULL(Objectproperty(Object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), 'IsMSShipped'), 0) = 0\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tableNamesByCatalog = tableNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .reduce((c, { database, ...other }) => {\n                    database = database || currentDatabase\n                    c[database] = c[database] || []\n                    c[database].push({\n                        schema: other.schema || currentSchema,\n                        tableName: other.tableName,\n                    })\n                    return c\n                }, {} as { [key: string]: { schema: string; tableName: string }[] })\n\n            const tablesSql = Object.entries(tableNamesByCatalog)\n                .map(([database, tables]) => {\n                    const tablesCondition = tables\n                        .map(({ schema, tableName }) => {\n                            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${tableName}')`\n                        })\n                        .join(\" OR \")\n\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                          \"TABLE_TYPE\" = 'BASE TABLE' AND\n                          \"TABLE_CATALOG\" = '${database}' AND\n                          ${tablesCondition}\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        const dbTablesByCatalog = dbTables.reduce(\n            (c, { TABLE_CATALOG, ...other }) => {\n                c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                c[TABLE_CATALOG].push(other)\n                return c\n            },\n            {} as {\n                [key: string]: { TABLE_NAME: string; TABLE_SCHEMA: string }[]\n            },\n        )\n\n        const columnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const condition = tables\n                    .map(\n                        ({ TABLE_SCHEMA, TABLE_NAME }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\"OR\")\n\n                return (\n                    `SELECT \"COLUMNS\".*, \"cc\".\"is_persisted\", \"cc\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `LEFT JOIN \"sys\".\"computed_columns\" \"cc\" ON COL_NAME(\"cc\".\"object_id\", \"cc\".\"column_id\") = \"column_name\" ` +\n                    `WHERE (${condition})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const constraintsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"columnUsages\".\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"columnUsages\".\"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ` +\n                    `ON ` +\n                    `\"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" AND ` +\n                    `\"tableConstraints\".\"TABLE_SCHEMA\" = \"columnUsages\".\"TABLE_SCHEMA\" AND ` +\n                    `\"tableConstraints\".\"TABLE_NAME\" = \"columnUsages\".\"TABLE_NAME\" ` +\n                    `LEFT JOIN \"${TABLE_CATALOG}\".\"sys\".\"check_constraints\" \"chk\" ` +\n                    `ON ` +\n                    `\"chk\".\"object_id\" = OBJECT_ID(\"columnUsages\".\"TABLE_CATALOG\" + '.' + \"columnUsages\".\"TABLE_SCHEMA\" + '.' + \"columnUsages\".\"CONSTRAINT_NAME\") ` +\n                    `WHERE ` +\n                    `(${conditions}) AND ` +\n                    `\"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const foreignKeysSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s1\".\"name\" = '${TABLE_SCHEMA}' AND \"t1\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                    `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `WHERE (${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const identityColumnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `WHERE ` +\n                    `EXISTS(SELECT 1 FROM \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"S\" WHERE OBJECT_ID(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\") = \"S\".\"OBJECT_ID\" AND \"COLUMN_NAME\" = \"S\".\"NAME\" AND \"S\".\"is_identity\" = 1) AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`\n\n        const indicesSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s\".\"name\" = '${TABLE_SCHEMA}' AND \"t\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"indexes\" \"ind\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                    `WHERE ` +\n                    `\"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0 AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const [\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ])\n\n        // create table schemas for loaded tables\n        return await Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n\n                const getSchemaFromKey = (dbObject: any, key: string) => {\n                    return dbObject[key] === currentSchema &&\n                        (!this.driver.options.schema ||\n                            this.driver.options.schema === currentSchema)\n                        ? undefined\n                        : dbObject[key]\n                }\n\n                // We do not need to join schema and database names, when db or schema is by default.\n                const db =\n                    dbTable[\"TABLE_CATALOG\"] === currentDatabase\n                        ? undefined\n                        : dbTable[\"TABLE_CATALOG\"]\n                const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\")\n                table.database = dbTable[\"TABLE_CATALOG\"]\n                table.schema = dbTable[\"TABLE_SCHEMA\"]\n                table.name = this.driver.buildTableName(\n                    dbTable[\"TABLE_NAME\"],\n                    schema,\n                    db,\n                )\n\n                const defaultCollation = dbCollations.find(\n                    (dbCollation) =>\n                        dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"],\n                )!\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns\n                        .filter(\n                            (dbColumn) =>\n                                dbColumn[\"TABLE_NAME\"] ===\n                                    dbTable[\"TABLE_NAME\"] &&\n                                dbColumn[\"TABLE_SCHEMA\"] ===\n                                    dbTable[\"TABLE_SCHEMA\"] &&\n                                dbColumn[\"TABLE_CATALOG\"] ===\n                                    dbTable[\"TABLE_CATALOG\"],\n                        )\n                        .map(async (dbColumn) => {\n                            const columnConstraints = dbConstraints.filter(\n                                (dbConstraint) =>\n                                    dbConstraint[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    dbConstraint[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    dbConstraint[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    dbConstraint[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const uniqueConstraints = columnConstraints.filter(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                            )\n                            const isConstraintComposite =\n                                uniqueConstraints.every((uniqueConstraint) => {\n                                    return dbConstraints.some(\n                                        (dbConstraint) =>\n                                            dbConstraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"UNIQUE\" &&\n                                            dbConstraint[\"CONSTRAINT_NAME\"] ===\n                                                uniqueConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ] &&\n                                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            dbConstraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"],\n                                    )\n                                })\n\n                            const isGenerated = !!dbIdentityColumns.find(\n                                (column) =>\n                                    column[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    column[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    column[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    column[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const tableColumn = new TableColumn()\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n                            tableColumn.type =\n                                dbColumn[\"DATA_TYPE\"].toLowerCase()\n\n                            // check only columns that have length property\n                            if (\n                                this.driver.withLengthColumnTypes.indexOf(\n                                    tableColumn.type as ColumnType,\n                                ) !== -1 &&\n                                dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]\n                            ) {\n                                const length =\n                                    dbColumn[\n                                        \"CHARACTER_MAXIMUM_LENGTH\"\n                                    ].toString()\n                                if (length === \"-1\") {\n                                    tableColumn.length = \"MAX\"\n                                } else {\n                                    tableColumn.length =\n                                        !this.isDefaultColumnLength(\n                                            table,\n                                            tableColumn,\n                                            length,\n                                        )\n                                            ? length\n                                            : \"\"\n                                }\n                            }\n\n                            if (\n                                tableColumn.type === \"decimal\" ||\n                                tableColumn.type === \"numeric\"\n                            ) {\n                                if (\n                                    dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_PRECISION\"],\n                                    )\n                                )\n                                    tableColumn.precision =\n                                        dbColumn[\"NUMERIC_PRECISION\"]\n                                if (\n                                    dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                                    !this.isDefaultColumnScale(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_SCALE\"],\n                                    )\n                                )\n                                    tableColumn.scale =\n                                        dbColumn[\"NUMERIC_SCALE\"]\n                            }\n\n                            if (tableColumn.type === \"nvarchar\") {\n                                // Check if this is an enum\n                                const columnCheckConstraints =\n                                    columnConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                            \"CHECK\",\n                                    )\n                                if (columnCheckConstraints.length) {\n                                    // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                                    for (const checkConstraint of columnCheckConstraints) {\n                                        if (\n                                            this.isEnumCheckConstraint(\n                                                checkConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ],\n                                            )\n                                        ) {\n                                            // This is an enum constraint, make column into an enum\n                                            tableColumn.enum = []\n                                            const enumValueRegexp = new RegExp(\n                                                \"\\\\[\" +\n                                                    tableColumn.name +\n                                                    \"\\\\]='([^']+)'\",\n                                                \"g\",\n                                            )\n                                            let result\n                                            while (\n                                                (result = enumValueRegexp.exec(\n                                                    checkConstraint[\n                                                        \"definition\"\n                                                    ],\n                                                )) !== null\n                                            ) {\n                                                tableColumn.enum.unshift(\n                                                    result[1],\n                                                )\n                                            }\n                                            // Skip other column constraints\n                                            break\n                                        }\n                                    }\n                                }\n                            }\n\n                            const primaryConstraint = columnConstraints.find(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] ===\n                                    \"PRIMARY KEY\",\n                            )\n                            if (primaryConstraint) {\n                                tableColumn.isPrimary = true\n                                // find another columns involved in primary key constraint\n                                const anotherPrimaryConstraints =\n                                    dbConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"TABLE_NAME\"] ===\n                                                dbColumn[\"TABLE_NAME\"] &&\n                                            constraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            constraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            constraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"] &&\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"PRIMARY KEY\",\n                                    )\n\n                                // collect all column names\n                                const columnNames =\n                                    anotherPrimaryConstraints.map(\n                                        (constraint) =>\n                                            constraint[\"COLUMN_NAME\"],\n                                    )\n                                columnNames.push(dbColumn[\"COLUMN_NAME\"])\n\n                                // build default primary key constraint name\n                                const pkName =\n                                    this.connection.namingStrategy.primaryKeyName(\n                                        table,\n                                        columnNames,\n                                    )\n\n                                // if primary key has user-defined constraint name, write it in table column\n                                if (\n                                    primaryConstraint[\"CONSTRAINT_NAME\"] !==\n                                    pkName\n                                ) {\n                                    tableColumn.primaryKeyConstraintName =\n                                        primaryConstraint[\"CONSTRAINT_NAME\"]\n                                }\n                            }\n\n                            tableColumn.default =\n                                dbColumn[\"COLUMN_DEFAULT\"] !== null &&\n                                dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                                    ? this.removeParenthesisFromDefault(\n                                          dbColumn[\"COLUMN_DEFAULT\"],\n                                      )\n                                    : undefined\n                            tableColumn.isNullable =\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\n                            tableColumn.isUnique =\n                                uniqueConstraints.length > 0 &&\n                                !isConstraintComposite\n                            tableColumn.isGenerated = isGenerated\n                            if (isGenerated)\n                                tableColumn.generationStrategy = \"increment\"\n                            if (tableColumn.default === \"newsequentialid()\") {\n                                tableColumn.isGenerated = true\n                                tableColumn.generationStrategy = \"uuid\"\n                                tableColumn.default = undefined\n                            }\n\n                            // todo: unable to get default charset\n                            // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                            if (dbColumn[\"COLLATION_NAME\"])\n                                tableColumn.collation =\n                                    dbColumn[\"COLLATION_NAME\"] ===\n                                    defaultCollation[\"COLLATION_NAME\"]\n                                        ? undefined\n                                        : dbColumn[\"COLLATION_NAME\"]\n\n                            if (\n                                tableColumn.type === \"datetime2\" ||\n                                tableColumn.type === \"time\" ||\n                                tableColumn.type === \"datetimeoffset\"\n                            ) {\n                                tableColumn.precision =\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATETIME_PRECISION\"],\n                                    )\n                                        ? dbColumn[\"DATETIME_PRECISION\"]\n                                        : undefined\n                            }\n\n                            if (\n                                dbColumn[\"is_persisted\"] !== null &&\n                                dbColumn[\"is_persisted\"] !== undefined &&\n                                dbColumn[\"definition\"]\n                            ) {\n                                tableColumn.generatedType =\n                                    dbColumn[\"is_persisted\"] === true\n                                        ? \"STORED\"\n                                        : \"VIRTUAL\"\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                                const asExpressionQuery =\n                                    await this.selectTypeormMetadataSql({\n                                        database: dbTable[\"TABLE_CATALOG\"],\n                                        schema: dbTable[\"TABLE_SCHEMA\"],\n                                        table: dbTable[\"TABLE_NAME\"],\n                                        type: MetadataTableType.GENERATED_COLUMN,\n                                        name: tableColumn.name,\n                                    })\n\n                                const results = await this.query(\n                                    asExpressionQuery.query,\n                                    asExpressionQuery.parameters,\n                                )\n                                if (results[0] && results[0].value) {\n                                    tableColumn.asExpression = results[0].value\n                                } else {\n                                    tableColumn.asExpression = \"\"\n                                }\n                            }\n\n                            return tableColumn\n                        }),\n                )\n\n                // find unique constraints of table, group them by constraint name and build TableUnique.\n                const tableUniqueConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.uniques = tableUniqueConstraints.map((constraint) => {\n                    const uniques = dbConstraints.filter(\n                        (dbC) =>\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                            constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableUnique({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\n                    })\n                })\n\n                // find check constraints of table, group them by constraint name and build TableCheck.\n                const tableCheckConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.checks = tableCheckConstraints\n                    .filter(\n                        (constraint) =>\n                            !this.isEnumCheckConstraint(\n                                constraint[\"CONSTRAINT_NAME\"],\n                            ),\n                    )\n                    .map((constraint) => {\n                        const checks = dbConstraints.filter(\n                            (dbC) =>\n                                dbC[\"CONSTRAINT_NAME\"] ===\n                                constraint[\"CONSTRAINT_NAME\"],\n                        )\n                        return new TableCheck({\n                            name: constraint[\"CONSTRAINT_NAME\"],\n                            columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                            expression: constraint[\"definition\"],\n                        })\n                    })\n\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys.filter(\n                        (dbForeignKey) =>\n                            dbForeignKey[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbForeignKey[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbForeignKey[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbForeignKey) => dbForeignKey[\"FK_NAME\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (dbForeignKey) => {\n                        const foreignKeys = dbForeignKeys.filter(\n                            (dbFk) =>\n                                dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"],\n                        )\n\n                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                        const db =\n                            dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase\n                                ? undefined\n                                : dbForeignKey[\"TABLE_CATALOG\"]\n                        const schema = getSchemaFromKey(\n                            dbForeignKey,\n                            \"REF_SCHEMA\",\n                        )\n                        const referencedTableName = this.driver.buildTableName(\n                            dbForeignKey[\"REF_TABLE\"],\n                            schema,\n                            db,\n                        )\n\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"FK_NAME\"],\n                            columnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\n                            ),\n                            referencedDatabase: dbForeignKey[\"TABLE_CATALOG\"],\n                            referencedSchema: dbForeignKey[\"REF_SCHEMA\"],\n                            referencedTableName: referencedTableName,\n                            referencedColumnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"REF_COLUMN\"],\n                            ),\n                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                        })\n                    },\n                )\n\n                // find index constraints of table, group them by constraint name and build TableIndex.\n                const tableIndexConstraints = OrmUtils.uniq(\n                    dbIndices.filter(\n                        (dbIndex) =>\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbIndex[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbIndex[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\n                )\n\n                table.indices = tableIndexConstraints.map((constraint) => {\n                    const indices = dbIndices.filter((index) => {\n                        return (\n                            index[\"TABLE_CATALOG\"] ===\n                                constraint[\"TABLE_CATALOG\"] &&\n                            index[\"TABLE_SCHEMA\"] ===\n                                constraint[\"TABLE_SCHEMA\"] &&\n                            index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                            index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\n                        )\n                    })\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: constraint[\"INDEX_NAME\"],\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                        isUnique: constraint[\"IS_UNIQUE\"],\n                        where: constraint[\"CONDITION\"],\n                    })\n                })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) =>\n                this.buildCreateColumnSql(table, column, false, true),\n            )\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name,\n                )\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                        }),\n                    )\n            })\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              table,\n                              unique.columnNames,\n                          )\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${uniquesSql}`\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n\n                    let constraint = `CONSTRAINT \"${\n                        fk.name\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\n\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      table,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `)`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n    ): Query {\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}`\n            : `DROP TABLE ${this.escapePath(tableOrName)}`\n        return new Query(query)\n    }\n\n    protected createViewSql(view: View): Query {\n        const parsedName = this.driver.parseTableName(view)\n\n        // Can't use `escapePath` here because `CREATE VIEW` does not accept database names.\n        const viewIdentifier = parsedName.schema\n            ? `\"${parsedName.schema}\".\"${parsedName.tableName}\"`\n            : `\"${parsedName.tableName}\"`\n\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view.expression}`,\n            )\n        } else {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view\n                    .expression(this.connection)\n                    .getQuery()}`,\n            )\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(view)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`)\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(\n        viewOrPath: View | string,\n    ): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(viewOrPath)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n        })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\n                index.name\n            }\" ON ${this.escapePath(table)} (${columns}) ${\n                index.where ? \"WHERE \" + index.where : \"\"\n            }`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(\n        table: Table,\n        indexOrName: TableIndex | string,\n    ): Query {\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(\n            `DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`,\n        )\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(\n        table: Table,\n        columnNames: string[],\n        constraintName?: string,\n    ): Query {\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\n        )\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map((column) => column.name)\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\n        )\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(\n        table: Table,\n        uniqueConstraint: TableUnique,\n    ): Query {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                uniqueConstraint.name\n            }\" UNIQUE (${columnNames})`,\n        )\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(\n        table: Table,\n        uniqueOrName: TableUnique | string,\n    ): Query {\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName.name\n            : uniqueOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\n        )\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck,\n    ): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                checkConstraint.name\n            }\" CHECK (${checkConstraint.expression})`,\n        )\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string,\n    ): Query {\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName.name\n            : checkOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${checkName}\"`,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\")\n        let sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                foreignKey.name\n            }\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )}(${referencedColumnNames})`\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\n            foreignKeyOrName,\n        )\n            ? foreignKeyOrName.name\n            : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\n        )\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        const { database, schema, tableName } =\n            this.driver.parseTableName(target)\n\n        if (database && database !== this.driver.database) {\n            if (schema && schema !== this.driver.searchSchema) {\n                return `\"${database}\".\"${schema}\".\"${tableName}\"`\n            }\n\n            return `\"${database}\"..\"${tableName}\"`\n        }\n\n        if (schema && schema !== this.driver.searchSchema) {\n            return `\"${schema}\".\"${tableName}\"`\n        }\n\n        return `\"${tableName}\"`\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(\n        fkName: string,\n        schemaName: string | undefined,\n        dbName: string | undefined,\n    ): string {\n        let joinedFkName = fkName\n        if (schemaName && schemaName !== this.driver.searchSchema)\n            joinedFkName = schemaName + \".\" + joinedFkName\n        if (dbName && dbName !== this.driver.database)\n            joinedFkName = dbName + \".\" + joinedFkName\n\n        return joinedFkName\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\") return defaultValue\n        const normalizedDefault = defaultValue.substr(\n            1,\n            defaultValue.lastIndexOf(\")\") - 1,\n        )\n        return this.removeParenthesisFromDefault(normalizedDefault)\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(\n        table: Table,\n        column: TableColumn,\n        skipIdentity: boolean,\n        createDefault: boolean,\n        skipEnum?: boolean,\n    ) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(\n            column,\n        )}`\n\n        if (!skipEnum && column.enum) {\n            const expression = this.getEnumExpression(column)\n            const checkName =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    expression,\n                    true,\n                )\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`\n        }\n\n        if (column.collation) c += \" COLLATE \" + column.collation\n\n        if (column.asExpression) {\n            c += ` AS (${column.asExpression})`\n            if (column.generatedType === \"STORED\") {\n                c += ` PERSISTED`\n\n                // NOT NULL can be specified for computed columns only if PERSISTED is also specified\n                if (column.isNullable !== true) c += \" NOT NULL\"\n            }\n        } else {\n            if (column.isNullable !== true) c += \" NOT NULL\"\n        }\n\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\" &&\n            !skipIdentity\n        )\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\"\n\n        if (\n            column.default !== undefined &&\n            column.default !== null &&\n            createDefault\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`\n        }\n\n        if (\n            column.isGenerated &&\n            column.generationStrategy === \"uuid\" &&\n            !column.default\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`\n        }\n        return c\n    }\n\n    private getEnumExpression(column: TableColumn) {\n        if (!column.enum) {\n            throw new Error(`Enum is not defined in column ${column.name}`)\n        }\n        return (\n            column.name +\n            \" IN (\" +\n            column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\n            \")\"\n        )\n    }\n\n    protected isEnumCheckConstraint(name: string): boolean {\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit\n            case \"bigint\":\n                return this.driver.mssql.BigInt\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params)\n            case \"float\":\n                return this.driver.mssql.Float\n            case \"int\":\n                return this.driver.mssql.Int\n            case \"money\":\n                return this.driver.mssql.Money\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params)\n            case \"smallint\":\n                return this.driver.mssql.SmallInt\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney\n            case \"real\":\n                return this.driver.mssql.Real\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt\n            case \"char\":\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"text\":\n            case \"ntext\":\n                return this.driver.mssql.Ntext\n            case \"varchar\":\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"xml\":\n                return this.driver.mssql.Xml\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params)\n            case \"date\":\n                return this.driver.mssql.Date\n            case \"datetime\":\n                return this.driver.mssql.DateTime\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params)\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params)\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier\n            case \"variant\":\n                return this.driver.mssql.Variant\n            case \"binary\":\n                return this.driver.mssql.Binary\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params)\n            case \"image\":\n                return this.driver.mssql.Image\n            case \"udt\":\n                return this.driver.mssql.UDT\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../../src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":";;;AACA,gEAA4D;AAC5D,mEAA+D;AAC/D,iGAA6F;AAC7F,uFAAmF;AAGnF,wEAAoE;AAGpE,4DAAwD;AACxD,sEAAkE;AAClE,wEAAoE;AAEpE,gFAA4E;AAC5E,sEAAkE;AAClE,wEAAoE;AACpE,yDAAqD;AACrD,8DAA0D;AAC1D,kDAA8C;AAC9C,oCAAgC;AAKhC,uCAA0C;AAC1C,4DAAwD;AACxD,kEAA8D;AAC9D,gEAA4D;AAE5D;;GAEG;AACH,MAAa,oBACT,SAAQ,iCAAe;IAkBvB,4EAA4E;IAC5E,cAAc;IACd,4EAA4E;IAE5E,YAAY,MAAuB,EAAE,IAAqB;QACtD,KAAK,EAAE,CAAA;QAXX,4EAA4E;QAC5E,qBAAqB;QACrB,4EAA4E;QAEpE,SAAI,GAAc,IAAI,qBAAS,EAAE,CAAA;QAQrC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAA;QACpB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAA;QACnC,IAAI,CAAC,WAAW,GAAG,IAAI,yBAAW,CAAC,IAAI,CAAC,CAAA;QACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAA;IACpB,CAAC;IAED,4EAA4E;IAC5E,iBAAiB;IACjB,4EAA4E;IAE5E;;;OAGG;IACH,OAAO;QACH,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;;OAGG;IACH,OAAO;QACH,IAAI,CAAC,UAAU,GAAG,IAAI,CAAA;QACtB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAAC,cAA+B;QAClD,IAAI,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,iEAA+B,EAAE,CAAA;QAEhE,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAA;QAC/B,IAAI;YACA,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAA;SAC7D;QAAC,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;YAChC,MAAM,GAAG,CAAA;SACZ;QACD,MAAM,IAAI,OAAO,CAAO,KAAK,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE;YACvC,MAAM,mBAAmB,GAAG,CAAC,GAAQ,EAAE,EAAE;gBACrC,IAAI,GAAG,EAAE;oBACL,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;oBAChC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;iBACnB;gBACD,EAAE,EAAE,CAAA;YACR,CAAC,CAAA;YAED,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE;gBAC7B,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO;oBACrC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE;oBACrC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAA;gBAC3C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAA;gBAC5C,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAA;gBACpD,IAAI,cAAc,EAAE;oBAChB,IAAI,CAAC,kBAAkB,CAAC,KAAK,CACzB,IAAI,CAAC,qBAAqB,CAAC,cAAc,CAAC,EAC1C,mBAAmB,CACtB,CAAA;oBACD,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAC3B,kCAAkC,GAAG,cAAc,CACtD,CAAA;iBACJ;qBAAM;oBACH,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAA;iBACrD;aACJ;iBAAM;gBACH,MAAM,IAAI,CAAC,KAAK,CACZ,4BAA4B,IAAI,CAAC,gBAAgB,EAAE,CACtD,CAAA;gBACD,EAAE,EAAE,CAAA;aACP;YACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;QAC9B,CAAC,CAAC,CAAA;QAEF,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAA;IAC7D,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,iBAAiB;QACnB,IAAI,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,iEAA+B,EAAE,CAAA;QAEhE,IAAI,CAAC,IAAI,CAAC,mBAAmB;YAAE,MAAM,IAAI,uDAA0B,EAAE,CAAA;QAErE,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,yBAAyB,CAAC,CAAA;QAE3D,IAAI,IAAI,CAAC,gBAAgB,KAAK,CAAC,EAAE;YAC7B,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;gBAClC,IAAI,CAAC,kBAAkB,CAAC,MAAM,CAAC,KAAK,EAAE,GAAQ,EAAE,EAAE;oBAC9C,IAAI,GAAG;wBAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;oBACzB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;oBAChC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAA;oBAE9B,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,wBAAwB,CAAC,CAAA;oBAE1D,EAAE,EAAE,CAAA;oBACJ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;oBACzC,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;gBAC9B,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;SACL;QACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;IAC9B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,mBAAmB;QACrB,IAAI,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,iEAA+B,EAAE,CAAA;QAEhE,IAAI,CAAC,IAAI,CAAC,mBAAmB;YAAE,MAAM,IAAI,uDAA0B,EAAE,CAAA;QAErE,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,2BAA2B,CAAC,CAAA;QAE7D,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE;YAC3B,MAAM,IAAI,CAAC,KAAK,CACZ,gCAAgC,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE,CAC9D,CAAA;YACD,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;SAC7B;aAAM;YACH,OAAO,IAAI,OAAO,CAAO,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;gBAClC,IAAI,CAAC,kBAAkB,CAAC,QAAQ,CAAC,KAAK,EAAE,GAAQ,EAAE,EAAE;oBAChD,IAAI,GAAG;wBAAE,OAAO,IAAI,CAAC,GAAG,CAAC,CAAA;oBACzB,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAA;oBAChC,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAA;oBAE9B,MAAM,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC,0BAA0B,CAAC,CAAA;oBAE5D,EAAE,EAAE,CAAA;oBACJ,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAA;oBAC3C,IAAI,CAAC,gBAAgB,IAAI,CAAC,CAAA;gBAC9B,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;SACL;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,KAAK,CACP,KAAa,EACb,UAAkB,EAClB,mBAAmB,GAAG,KAAK;QAE3B,IAAI,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,iEAA+B,EAAE,CAAA;QAEhE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;QAEzC,IAAI;YACA,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;YAC/D,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO;gBACrC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE;gBACrC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAA;YAC3C,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CACzC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAC5D,CAAA;YACD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;gBACjC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;oBACpC,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;oBACtC,IAAI,iCAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE;wBAC7C,MAAM,cAAc,GAChB,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,CAAA;wBACnD,IAAI,cAAc,EAAE;4BAChB,OAAO,CAAC,KAAK,CACT,aAAa,EACb,cAAc,EACd,SAAS,CAAC,KAAK,CAClB,CAAA;yBACJ;6BAAM;4BACH,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,KAAK,CAAC,CAAA;yBAChD;qBACJ;yBAAM;wBACH,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,CAAA;qBAC1C;gBACL,CAAC,CAAC,CAAA;aACL;YACD,MAAM,cAAc,GAAG,CAAC,IAAI,IAAI,EAAE,CAAA;YAElC,MAAM,GAAG,GAAG,MAAM,IAAI,OAAO,CAAM,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;gBAC5C,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,GAAQ,EAAE,GAAQ,EAAE,EAAE;oBACxC,oDAAoD;oBACpD,MAAM,qBAAqB,GACvB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,qBAAqB,CAAA;oBAC7C,MAAM,YAAY,GAAG,CAAC,IAAI,IAAI,EAAE,CAAA;oBAChC,MAAM,kBAAkB,GAAG,YAAY,GAAG,cAAc,CAAA;oBACxD,IACI,qBAAqB;wBACrB,kBAAkB,GAAG,qBAAqB,EAC5C;wBACE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,YAAY,CACtC,kBAAkB,EAClB,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;qBACJ;oBAED,IAAI,GAAG,EAAE;wBACL,IAAI,CAAC,IAAI,mCAAgB,CAAC,KAAK,EAAE,UAAU,EAAE,GAAG,CAAC,CAAC,CAAA;qBACrD;oBAED,EAAE,CAAC,GAAG,CAAC,CAAA;gBACX,CAAC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEF,MAAM,MAAM,GAAG,IAAI,yBAAW,EAAE,CAAA;YAEhC,IAAI,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,cAAc,CAAC,WAAW,CAAC,EAAE;gBAClC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC,SAAS,CAAA;aACjC;YAED,IAAI,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,cAAc,CAAC,cAAc,CAAC,EAAE;gBACrC,MAAM,CAAC,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAA;aACxC;YAED,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAA;YACpD,QAAQ,SAAS,EAAE;gBACf,KAAK,QAAQ;oBACT,+DAA+D;oBAC/D,MAAM,CAAC,GAAG,GAAG,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAA;oBACjD,MAAK;gBACT;oBACI,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC,SAAS,CAAA;aACjC;YAED,IAAI,mBAAmB,EAAE;gBACrB,OAAO,MAAM,CAAA;aAChB;iBAAM;gBACH,OAAO,MAAM,CAAC,GAAG,CAAA;aACpB;SACJ;QAAC,OAAO,GAAG,EAAE;YACV,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CACvC,GAAG,EACH,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;YACD,MAAM,GAAG,CAAA;SACZ;gBAAS;YACN,OAAO,EAAE,CAAA;SACZ;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,MAAM,CACR,KAAa,EACb,UAAkB,EAClB,KAAgB,EAChB,OAAkB;QAElB,IAAI,IAAI,CAAC,UAAU;YAAE,MAAM,IAAI,iEAA+B,EAAE,CAAA;QAEhE,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,CAAA;QAEzC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAA;QAC/D,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO;YACrC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,qBAAqB,EAAE;YACrC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAA;QAC3C,MAAM,OAAO,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CACzC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAC5D,CAAA;QACD,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,EAAE;YACjC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;gBACpC,MAAM,aAAa,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAA;gBACtC,IAAI,iCAAe,CAAC,gBAAgB,CAAC,SAAS,CAAC,EAAE;oBAC7C,OAAO,CAAC,KAAK,CACT,aAAa,EACb,IAAI,CAAC,+BAA+B,CAAC,SAAS,CAAC,EAC/C,SAAS,CAAC,KAAK,CAClB,CAAA;iBACJ;qBAAM;oBACH,OAAO,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,CAAA;iBAC1C;YACL,CAAC,CAAC,CAAA;SACL;QAED,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QAEpB,MAAM,aAAa,GAAG,OAAO,CAAC,gBAAgB,EAAE,CAAA;QAEhD,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,GAAQ,EAAE,EAAE;YACnC,OAAO,EAAE,CAAA;YACT,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,CACvC,GAAG,EACH,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;QACL,CAAC,CAAC,CAAA;QAEF,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE;YACzB,OAAO,EAAE,CAAA;QACb,CAAC,CAAC,CAAA;QAEF,IAAI,KAAK,EAAE;YACP,aAAa,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;SACjC;QAED,IAAI,OAAO,EAAE;YACT,aAAa,CAAC,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC,CAAA;SACrC;QAED,OAAO,aAAa,CAAA;IACxB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY;QACd,MAAM,OAAO,GAAoB,MAAM,IAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAA;QACtE,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAA;IAC3D,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,UAAU,CAAC,QAAiB;QAC9B,MAAM,KAAK,GAAG,QAAQ;YAClB,CAAC,CAAC,kBAAkB,QAAQ,kBAAkB;YAC9C,CAAC,CAAC,+BAA+B,CAAA;QACrC,MAAM,OAAO,GAAoB,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACxD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CAAC,QAAgB;QAC9B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAC3B,iBAAiB,QAAQ,eAAe,CAC3C,CAAA;QACD,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAA;QAC/B,OAAO,CAAC,CAAC,IAAI,CAAA;IACjB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,kBAAkB;QACpB,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,+BAA+B,CAAC,CAAA;QACxE,OAAO,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAA;IACvC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CAAC,MAAc;QAC1B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAC3B,qBAAqB,MAAM,mBAAmB,CACjD,CAAA;QACD,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAA;QACvC,OAAO,CAAC,CAAC,QAAQ,CAAA;IACrB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB;QAClB,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,KAAK,CACvC,uCAAuC,CAC1C,CAAA;QACD,OAAO,kBAAkB,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ,CAAC,WAA2B;QACtC,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE/D,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;YAC3B,eAAe,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;SAC7D;QAED,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;SACzD;QAED,MAAM,GAAG,GAAG,kBAAkB,eAAe,CAAC,QAAQ,yDAAyD,eAAe,CAAC,SAAS,2BAA2B,eAAe,CAAC,MAAM,GAAG,CAAA;QAC5L,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACpC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;IACvC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,UAAkB;QAElB,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE/D,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE;YAC3B,eAAe,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;SAC7D;QAED,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;SACzD;QAED,MAAM,GAAG,GAAG,kBAAkB,eAAe,CAAC,QAAQ,0DAA0D,eAAe,CAAC,SAAS,2BAA2B,eAAe,CAAC,MAAM,0BAA0B,UAAU,GAAG,CAAA;QACjO,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QACpC,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAA;IACvC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAChB,QAAgB,EAChB,UAAoB;QAEpB,MAAM,EAAE,GAAG,UAAU;YACjB,CAAC,CAAC,aAAa,QAAQ,+BAA+B,QAAQ,GAAG;YACjE,CAAC,CAAC,oBAAoB,QAAQ,GAAG,CAAA;QACrC,MAAM,IAAI,GAAG,kBAAkB,QAAQ,GAAG,CAAA;QAC1C,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,aAAK,CAAC,EAAE,CAAC,EAAE,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC,CAAA;IAC7D,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CAAC,QAAgB,EAAE,OAAiB;QAClD,MAAM,EAAE,GAAG,OAAO;YACd,CAAC,CAAC,aAAa,QAAQ,iCAAiC,QAAQ,GAAG;YACnE,CAAC,CAAC,kBAAkB,QAAQ,GAAG,CAAA;QACnC,MAAM,IAAI,GAAG,oBAAoB,QAAQ,GAAG,CAAA;QAC5C,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,aAAK,CAAC,EAAE,CAAC,EAAE,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC,CAAA;IAC7D,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,YAAY,CACd,UAAkB,EAClB,UAAoB;QAEpB,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAChC,MAAM,OAAO,GAAG,UAAU;gBACtB,CAAC,CAAC,iBAAiB,UAAU,0CAA0C,UAAU,SAAS;gBAC1F,CAAC,CAAC,kBAAkB,UAAU,GAAG,CAAA;YACrC,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,gBAAgB,UAAU,GAAG,CAAC,CAAC,CAAA;SAC7D;aAAM;YACH,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACjD,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;YAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;YAEjD,MAAM,OAAO,GAAG,UAAU;gBACtB,CAAC,CAAC,iBAAiB,MAAM,0CAA0C,MAAM,SAAS;gBAClF,CAAC,CAAC,kBAAkB,MAAM,GAAG,CAAA;YACjC,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,gBAAgB,MAAM,GAAG,CAAC,CAAC,CAAA;YAEtD,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;YAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;SACjD;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,UAAU,CAAC,UAAkB,EAAE,OAAiB;QAClD,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,IAAI,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;YAChC,MAAM,OAAO,GAAG,OAAO;gBACnB,CAAC,CAAC,iBAAiB,UAAU,wCAAwC,UAAU,SAAS;gBACxF,CAAC,CAAC,gBAAgB,UAAU,GAAG,CAAA;YACnC,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,kBAAkB,UAAU,GAAG,CAAC,CAAC,CAAA;SAC/D;aAAM;YACH,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,MAAM,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAA;YACvC,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACjD,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;YAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;YAEjD,MAAM,OAAO,GAAG,OAAO;gBACnB,CAAC,CAAC,iBAAiB,MAAM,wCAAwC,MAAM,SAAS;gBAChF,CAAC,CAAC,gBAAgB,MAAM,GAAG,CAAA;YAC/B,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,OAAO,CAAC,CAAC,CAAA;YAClC,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,kBAAkB,MAAM,GAAG,CAAC,CAAC,CAAA;YAExD,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;YAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;SACjD;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CACb,KAAY,EACZ,aAAsB,KAAK,EAC3B,oBAA6B,IAAI,EACjC,gBAAyB,IAAI;QAE7B,IAAI,UAAU,EAAE;YACZ,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;YAC/C,IAAI,YAAY;gBAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;SAC7C;QACD,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC,CAAA;QAC7D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAA;QAE1C,iFAAiF;QACjF,kIAAkI;QAClI,IAAI,iBAAiB;YACjB,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CACrC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAC9D,CAAA;QAEL,IAAI,aAAa,EAAE;YACf,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5B,sFAAsF;gBACtF,IAAI,CAAC,KAAK,CAAC,IAAI;oBACX,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACjD,KAAK,EACL,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;gBACL,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;gBACjD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;YACrD,CAAC,CAAC,CAAA;SACL;QAED,6FAA6F;QAC7F,MAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CACzC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,CAC1D,CAAA;QAED,KAAK,MAAM,MAAM,IAAI,gBAAgB,EAAE;YACnC,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;gBACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;aACzD;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SAChC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,OAAiB,EACjB,kBAA2B,IAAI,EAC/B,cAAuB,IAAI;QAE3B,IAAI,OAAO,EAAE;YACT,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAA;YACrD,IAAI,CAAC,YAAY;gBAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;SAC9C;QAED,8FAA8F;QAC9F,MAAM,iBAAiB,GAAY,eAAe,CAAA;QAClD,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,qGAAqG;QACrG,wDAAwD;QAExD,IAAI,WAAW,EAAE;YACb,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC5B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;gBAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,CAAA;YACvD,CAAC,CAAC,CAAA;SACL;QAED,iGAAiG;QACjG,kIAAkI;QAClI,IAAI,eAAe;YACf,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE,CACrC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAC5D,CAAA;QAEL,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAA;QACxC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC,CAAA;QAE/D,kGAAkG;QAClG,MAAM,gBAAgB,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CACzC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,CAC1D,CAAA;QAED,KAAK,MAAM,MAAM,IAAI,gBAAgB,EAAE;YACnC,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;gBACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;aACzD;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YAEF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SAChC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,CACZ,IAAU,EACV,mBAA4B,KAAK;QAEjC,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAC/B,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAA;QACxC,IAAI,gBAAgB;YAChB,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QAC5D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;QACxC,IAAI,gBAAgB;YAChB,WAAW,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QAC9D,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,QAAQ,CAAC,MAAqB;QAChC,MAAM,QAAQ,GAAG,iCAAe,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAA;QACtE,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAA;QAE/C,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAC/B,SAAS,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QACxD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAA;QACtC,WAAW,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAA;QAC1D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAA;QAC1C,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;IACrD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CACb,cAA8B,EAC9B,YAAoB;QAEpB,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAC/B,MAAM,QAAQ,GAAG,iCAAe,CAAC,OAAO,CAAC,cAAc,CAAC;YACpD,CAAC,CAAC,cAAc;YAChB,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,cAAc,CAAC,CAAA;QAC/C,IAAI,QAAQ,GAAG,QAAQ,CAAC,KAAK,EAAE,CAAA;QAE/B,iEAAiE;QACjE,IAAI,MAAM,GAAuB,SAAS,CAAA;QAC1C,IAAI,UAAU,GAAuB,SAAS,CAAA;QAC9C,IAAI,YAAY,GAAW,QAAQ,CAAC,IAAI,CAAA;QACxC,MAAM,YAAY,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAC7C,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;YACxB,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;YAC9B,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE;gBAAE,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;SAC3D;aAAM,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;YAC5B,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;SACjC;QAED,QAAQ,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CACtC,YAAY,EACZ,UAAU,EACV,MAAM,CACT,CAAA;QAED,2HAA2H;QAC3H,qEAAqE;QACrE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QACjD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE;YAChC,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;YAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;SACpD;QAED,eAAe;QACf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,OAAO,YAAY,GAAG,CAC1B,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,OAAO,YAAY,GAAG,CAC1B,CACJ,CAAA;QAED,gCAAgC;QAChC,IACI,QAAQ,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC;YAClC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,EACtD;YACE,MAAM,WAAW,GAAG,QAAQ,CAAC,cAAc,CAAC,GAAG,CAC3C,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAC1B,CAAA;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAC3D,QAAQ,EACR,WAAW,CACd,CAAA;YACD,MAAM,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAC3D,QAAQ,EACR,WAAW,CACd,CAAA;YAED,4BAA4B;YAC5B,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,IAAI,SAAS,OAAO,SAAS,GAAG,CACpC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,IAAI,SAAS,OAAO,SAAS,GAAG,CACpC,CACJ,CAAA;SACJ;QAED,4BAA4B;QAC5B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAChC,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,QAAQ,EACR,MAAM,CAAC,WAAW,CACrB,CAAA;YAEL,2DAA2D;YAC3D,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa;gBAAE,OAAM;YAEzC,4BAA4B;YAC5B,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,QAAQ,EACR,MAAM,CAAC,WAAW,CACrB,CAAA;YAEL,gBAAgB;YAChB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAC1C,MAAM,CAAC,IACX,OAAO,aAAa,GAAG,CAC1B,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,IAAI,aAAa,OAAO,MAAM,CAAC,IAAI,GAAG,CAC1C,CACJ,CAAA;YAED,0BAA0B;YAC1B,MAAM,CAAC,IAAI,GAAG,aAAa,CAAA;QAC/B,CAAC,CAAC,CAAA;QAEF,2BAA2B;QAC3B,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC/B,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACzD,QAAQ,EACR,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;YAED,0DAA0D;YAC1D,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY;gBAAE,OAAM;YAEvC,4BAA4B;YAC5B,MAAM,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACzD,QAAQ,EACR,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;YAED,gBAAgB;YAChB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAC1C,KAAK,CAAC,IACV,OAAO,YAAY,YAAY,CAClC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,QAAQ,CACX,IAAI,YAAY,OAAO,KAAK,CAAC,IAAI,YAAY,CACjD,CACJ,CAAA;YAED,0BAA0B;YAC1B,KAAK,CAAC,IAAI,GAAG,YAAY,CAAA;QAC7B,CAAC,CAAC,CAAA;QAEF,iCAAiC;QACjC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YACxC,MAAM,iBAAiB,GACnB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,QAAQ,EACR,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;YAEL,gEAAgE;YAChE,IAAI,UAAU,CAAC,IAAI,KAAK,iBAAiB;gBAAE,OAAM;YAEjD,4BAA4B;YAC5B,MAAM,iBAAiB,GACnB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,QAAQ,EACR,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;YAEL,gBAAgB;YAChB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,mBAAmB,CACvC,UAAU,CAAC,IAAK,EAChB,UAAU,EACV,MAAM,CACT,OAAO,iBAAiB,GAAG,CAC/B,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,mBAAmB,CACvC,iBAAiB,EACjB,UAAU,EACV,MAAM,CACT,OAAO,UAAU,CAAC,IAAI,GAAG,CAC7B,CACJ,CAAA;YAED,0BAA0B;YAC1B,UAAU,CAAC,IAAI,GAAG,iBAAiB,CAAA;QACvC,CAAC,CAAC,CAAA;QAEF,qDAAqD;QACrD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE;YAChC,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;YAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;SACjD;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAEjD,oDAAoD;QACpD,QAAQ,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAA;QAC7B,IAAI,CAAC,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,MAAmB;QAEnB,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QACjC,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,QAAQ,IAAI,CAAC,oBAAoB,CAC9B,KAAK,EACL,MAAM,EACN,KAAK,EACL,IAAI,CACP,EAAE,CACN,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,iBACjC,MAAM,CAAC,IACX,GAAG,CACN,CACJ,CAAA;QAED,0CAA0C;QAC1C,IAAI,MAAM,CAAC,SAAS,EAAE;YAClB,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;YACjD,wEAAwE;YACxE,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;oBACrD,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;oBAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9C,CAAA;gBAEP,MAAM,WAAW,GAAG,cAAc;qBAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;qBACnC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,MAAM,kBAAkB,WAAW,GAAG,CAC9D,CACJ,CAAA;aACJ;YAED,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;YAC3B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;gBACrD,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;gBAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9C,CAAA;YAEP,MAAM,WAAW,GAAG,cAAc;iBAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;iBACnC,IAAI,CAAC,IAAI,CAAC,CAAA;YACf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,MAAM,kBAAkB,WAAW,GAAG,CAC9D,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;SACJ;QAED,sBAAsB;QACtB,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACxC,CAAC,KAAK,EAAE,EAAE,CACN,KAAK,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC;YAC9B,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,WAAW,EAAE;YACb,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;YACvD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;SAC1D;QAED,2BAA2B;QAC3B,IAAI,MAAM,CAAC,QAAQ,EAAE;YACjB,MAAM,gBAAgB,GAAG,IAAI,yBAAW,CAAC;gBACrC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CACrD,KAAK,EACL,CAAC,MAAM,CAAC,IAAI,CAAC,CAChB;gBACD,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;aAC7B,CAAC,CAAA;YACF,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;YAC1C,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,oBACjC,gBAAgB,CAAC,IACrB,cAAc,MAAM,CAAC,IAAI,IAAI,CAChC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,qBACjC,gBAAgB,CAAC,IACrB,GAAG,CACN,CACJ,CAAA;SACJ;QAED,4BAA4B;QAC5B,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE;YACzD,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,WAAW,GAAG,CACvC,CACJ,CAAA;SACJ;QAED,IAAI,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,EAAE;YAC7C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;gBACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;aACzD;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SAChC;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAEjD,WAAW,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;QAC7B,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,CACZ,WAA2B,EAC3B,OAAsB;QAEtB,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC1B,MAAM,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;SAC5C;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CACd,WAA2B,EAC3B,oBAA0C,EAC1C,oBAA0C;QAE1C,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,SAAS,GAAG,iCAAe,CAAC,aAAa,CAAC,oBAAoB,CAAC;YACjE,CAAC,CAAC,oBAAoB;YACtB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,oBAAoB,CAAC,CAAA;QAChE,IAAI,CAAC,SAAS;YACV,MAAM,IAAI,oBAAY,CAClB,WAAW,oBAAoB,2BAA2B,KAAK,CAAC,IAAI,UAAU,CACjF,CAAA;QAEL,IAAI,SAAS,GAA4B,SAAS,CAAA;QAClD,IAAI,iCAAe,CAAC,aAAa,CAAC,oBAAoB,CAAC,EAAE;YACrD,SAAS,GAAG,oBAAoB,CAAA;SACnC;aAAM;YACH,SAAS,GAAG,SAAS,CAAC,KAAK,EAAE,CAAA;YAC7B,SAAS,CAAC,IAAI,GAAG,oBAAoB,CAAA;SACxC;QAED,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;IACxD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,YAAY,CACd,WAA2B,EAC3B,oBAA0C,EAC1C,SAAsB;QAEtB,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,IAAI,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QAC/B,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,MAAM,SAAS,GAAG,iCAAe,CAAC,aAAa,CAAC,oBAAoB,CAAC;YACjE,CAAC,CAAC,oBAAoB;YACtB,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CACd,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,oBAAoB,CACnD,CAAA;QACP,IAAI,CAAC,SAAS;YACV,MAAM,IAAI,oBAAY,CAClB,WAAW,oBAAoB,2BAA2B,KAAK,CAAC,IAAI,UAAU,CACjF,CAAA;QAEL,IACI,CAAC,SAAS,CAAC,WAAW,KAAK,SAAS,CAAC,WAAW;YAC5C,SAAS,CAAC,kBAAkB,KAAK,MAAM,CAAC;YAC5C,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI;YACjC,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM;YACrC,SAAS,CAAC,YAAY,KAAK,SAAS,CAAC,YAAY;YACjD,SAAS,CAAC,aAAa,KAAK,SAAS,CAAC,aAAa,EACrD;YACE,yGAAyG;YACzG,kDAAkD;YAClD,MAAM,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;YACvC,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,CAAA;YAEtC,sBAAsB;YACtB,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;SAC9B;aAAM;YACH,IAAI,SAAS,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,EAAE;gBACnC,iEAAiE;gBACjE,IAAI,MAAM,GAAuB,SAAS,CAAA;gBAC1C,IAAI,UAAU,GAAuB,SAAS,CAAA;gBAC9C,MAAM,YAAY,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;gBAC1C,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC3B,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;oBACxB,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,EAAE;wBAAE,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;iBAC3D;qBAAM,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;oBAClC,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAA;iBAC/B;gBAED,2HAA2H;gBAC3H,qEAAqE;gBACrE,MAAM,SAAS,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;gBACjD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE;oBAChC,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;oBAC5C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;iBACpD;gBAED,oBAAoB;gBACpB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IACvC,SAAS,CAAC,IACd,OAAO,SAAS,CAAC,IAAI,GAAG,CAC3B,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IACvC,SAAS,CAAC,IACd,OAAO,SAAS,CAAC,IAAI,GAAG,CAC3B,CACJ,CAAA;gBAED,uCAAuC;gBACvC,IACI,SAAS,CAAC,SAAS,KAAK,IAAI;oBAC5B,CAAC,SAAS,CAAC,wBAAwB,EACrC;oBACE,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;oBAEjD,oCAAoC;oBACpC,MAAM,WAAW,GAAG,cAAc,CAAC,GAAG,CAClC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAC1B,CAAA;oBACD,MAAM,SAAS,GACX,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CACd,CAAA;oBAEL,+CAA+C;oBAC/C,WAAW,CAAC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAA;oBAC1D,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBAEhC,oCAAoC;oBACpC,MAAM,SAAS,GACX,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CACd,CAAA;oBAEL,4BAA4B;oBAC5B,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,SAAS,OAAO,SAAS,GAAG,CACpC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,SAAS,OAAO,SAAS,GAAG,CACpC,CACJ,CAAA;iBACJ;gBAED,2BAA2B;gBAC3B,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;oBACvD,MAAM,YAAY,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACpC,WAAW,EACX,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;oBAEL,0DAA0D;oBAC1D,IAAI,KAAK,CAAC,IAAI,KAAK,YAAY;wBAAE,OAAM;oBAEvC,4BAA4B;oBAC5B,KAAK,CAAC,WAAW,CAAC,MAAM,CACpB,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EACzC,CAAC,CACJ,CAAA;oBACD,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBACtC,MAAM,YAAY,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,SAAS,CACpC,WAAW,EACX,KAAK,CAAC,WAAW,EACjB,KAAK,CAAC,KAAK,CACd,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,KAAK,CAAC,IAAI,OAAO,YAAY,YAAY,CACjD,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,YAAY,OAAO,KAAK,CAAC,IAAI,YAAY,CACjD,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,KAAK,CAAC,IAAI,GAAG,YAAY,CAAA;gBAC7B,CAAC,CAAC,CAAA;gBAEF,iCAAiC;gBACjC,WAAW;qBACN,qBAAqB,CAAC,SAAS,CAAC;qBAChC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;oBACpB,MAAM,cAAc,GAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;oBAEL,gEAAgE;oBAChE,IAAI,UAAU,CAAC,IAAI,KAAK,cAAc;wBAAE,OAAM;oBAE9C,4BAA4B;oBAC5B,UAAU,CAAC,WAAW,CAAC,MAAM,CACzB,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAC9C,CAAC,CACJ,CAAA;oBACD,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBAC3C,MAAM,iBAAiB,GACnB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,mBAAmB,CACvC,UAAU,CAAC,IAAK,EAChB,UAAU,EACV,MAAM,CACT,OAAO,iBAAiB,GAAG,CAC/B,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,mBAAmB,CACvC,iBAAiB,EACjB,UAAU,EACV,MAAM,CACT,OAAO,UAAU,CAAC,IAAI,GAAG,CAC7B,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,UAAU,CAAC,IAAI,GAAG,iBAAiB,CAAA;gBACvC,CAAC,CAAC,CAAA;gBAEN,2BAA2B;gBAC3B,WAAW,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;oBACtD,4BAA4B;oBAC5B,KAAK,CAAC,WAAY,CAAC,MAAM,CACrB,KAAK,CAAC,WAAY,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAC1C,CAAC,CACJ,CAAA;oBACD,KAAK,CAAC,WAAY,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBACvC,MAAM,YAAY,GACd,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,WAAW,EACX,KAAK,CAAC,UAAW,CACpB,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,KAAK,CAAC,IAAI,OAAO,YAAY,GAAG,CACxC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,YAAY,OAAO,KAAK,CAAC,IAAI,GAAG,CACxC,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,KAAK,CAAC,IAAI,GAAG,YAAY,CAAA;gBAC7B,CAAC,CAAC,CAAA;gBAEF,4BAA4B;gBAC5B,WAAW,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;oBACxD,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,WAAW,EACX,MAAM,CAAC,WAAW,CACrB,CAAA;oBAEL,2DAA2D;oBAC3D,IAAI,MAAM,CAAC,IAAI,KAAK,aAAa;wBAAE,OAAM;oBAEzC,4BAA4B;oBAC5B,MAAM,CAAC,WAAW,CAAC,MAAM,CACrB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAC1C,CAAC,CACJ,CAAA;oBACD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAA;oBACvC,MAAM,aAAa,GACf,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,WAAW,EACX,MAAM,CAAC,WAAW,CACrB,CAAA;oBAEL,gBAAgB;oBAChB,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,MAAM,CAAC,IAAI,OAAO,aAAa,GAAG,CAC1C,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,mBAAmB,IAAI,CAAC,YAAY,CAChC,WAAW,CACd,IAAI,aAAa,OAAO,MAAM,CAAC,IAAI,GAAG,CAC1C,CACJ,CAAA;oBAED,0BAA0B;oBAC1B,MAAM,CAAC,IAAI,GAAG,aAAa,CAAA;gBAC/B,CAAC,CAAC,CAAA;gBAEF,6BAA6B;gBAC7B,IACI,SAAS,CAAC,OAAO,KAAK,IAAI;oBAC1B,SAAS,CAAC,OAAO,KAAK,SAAS,EACjC;oBACE,MAAM,cAAc,GAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBACL,MAAM,cAAc,GAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBAEL,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,cAAc,GAAG,CAC1C,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,cAAc,aAC/B,SAAS,CAAC,OACd,SAAS,SAAS,CAAC,IAAI,GAAG,CAC7B,CACJ,CAAA;oBAED,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,cAAc,aAC/B,SAAS,CAAC,OACd,SAAS,SAAS,CAAC,IAAI,GAAG,CAC7B,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,cAAc,GAAG,CAC1C,CACJ,CAAA;iBACJ;gBAED,qDAAqD;gBACrD,IAAI,MAAM,IAAI,MAAM,KAAK,SAAS,EAAE;oBAChC,SAAS,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,SAAS,GAAG,CAAC,CAAC,CAAA;oBAC/C,WAAW,CAAC,IAAI,CAAC,IAAI,aAAK,CAAC,QAAQ,MAAM,GAAG,CAAC,CAAC,CAAA;iBACjD;gBAED,wCAAwC;gBACxC,MAAM,cAAc,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAC3C,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC7C,CAAA;gBACD,WAAW,CAAC,OAAO,CACf,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,cAAe,CAAC,CAC/C,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAA;gBACvB,SAAS,CAAC,IAAI,GAAG,SAAS,CAAC,IAAI,CAAA;aAClC;YAED,IACI,IAAI,CAAC,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,EACjE;gBACE,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,iBAAiB,IAAI,CAAC,oBAAoB,CACvC,KAAK,EACL,SAAS,EACT,IAAI,EACJ,KAAK,EACL,IAAI,CACP,EAAE,CACN,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,iBAAiB,IAAI,CAAC,oBAAoB,CACvC,KAAK,EACL,SAAS,EACT,IAAI,EACJ,KAAK,EACL,IAAI,CACP,EAAE,CACN,CACJ,CAAA;aACJ;YAED,IAAI,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,EAAE;gBAC1C,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;gBACvD,MAAM,QAAQ,GAAG,IAAI,uBAAU,CAAC;oBAC5B,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CACpD,KAAK,EACL,aAAa,EACb,IAAI,CACP;oBACD,UAAU,EAAE,aAAa;iBAC5B,CAAC,CAAA;gBAEF,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAA;gBACvD,MAAM,QAAQ,GAAG,IAAI,uBAAU,CAAC;oBAC5B,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CACpD,KAAK,EACL,aAAa,EACb,IAAI,CACP;oBACD,UAAU,EAAE,aAAa;iBAC5B,CAAC,CAAA;gBAEF,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;gBAC5D,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;gBAE9D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;gBAC9D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAA;aACnE;YAED,IAAI,SAAS,CAAC,SAAS,KAAK,SAAS,CAAC,SAAS,EAAE;gBAC7C,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;gBAEjD,2EAA2E;gBAC3E,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC3B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;wBACrD,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;wBAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9C,CAAA;oBAEP,MAAM,WAAW,GAAG,cAAc;yBAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;yBACnC,IAAI,CAAC,IAAI,CAAC,CAAA;oBACf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,MAAM,kBAAkB,WAAW,GAAG,CAC9D,CACJ,CAAA;iBACJ;gBAED,IAAI,SAAS,CAAC,SAAS,KAAK,IAAI,EAAE;oBAC9B,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;oBAC9B,yBAAyB;oBACzB,MAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACnC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC7C,CAAA;oBACD,MAAO,CAAC,SAAS,GAAG,IAAI,CAAA;oBACxB,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;wBACrD,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;wBAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9C,CAAA;oBAEP,MAAM,WAAW,GAAG,cAAc;yBAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;yBACnC,IAAI,CAAC,IAAI,CAAC,CAAA;oBACf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,MAAM,kBAAkB,WAAW,GAAG,CAC9D,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;iBACJ;qBAAM;oBACH,MAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CACrC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CACnC,CAAA;oBACD,cAAc,CAAC,MAAM,CACjB,cAAc,CAAC,OAAO,CAAC,aAAc,CAAC,EACtC,CAAC,CACJ,CAAA;oBAED,yBAAyB;oBACzB,MAAM,MAAM,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACnC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAC7C,CAAA;oBACD,MAAO,CAAC,SAAS,GAAG,KAAK,CAAA;oBAEzB,gEAAgE;oBAChE,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;wBAC3B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC;6BAC3B,wBAAwB;4BACzB,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;4BAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9C,CAAA;wBAEP,MAAM,WAAW,GAAG,cAAc;6BAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;6BACnC,IAAI,CAAC,IAAI,CAAC,CAAA;wBACf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,MAAM,kBAAkB,WAAW,GAAG,CAC9D,CACJ,CAAA;wBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;qBACJ;iBACJ;aACJ;YAED,IAAI,SAAS,CAAC,QAAQ,KAAK,SAAS,CAAC,QAAQ,EAAE;gBAC3C,IAAI,SAAS,CAAC,QAAQ,KAAK,IAAI,EAAE;oBAC7B,MAAM,gBAAgB,GAAG,IAAI,yBAAW,CAAC;wBACrC,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CACrD,KAAK,EACL,CAAC,SAAS,CAAC,IAAI,CAAC,CACnB;wBACD,WAAW,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;qBAChC,CAAC,CAAA;oBACF,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA;oBAC1C,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBACG,gBAAgB,CAAC,IACrB,cAAc,SAAS,CAAC,IAAI,IAAI,CACnC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,gBAAgB,CAAC,IAAI,GAAG,CACjD,CACJ,CAAA;iBACJ;qBAAM;oBACH,MAAM,gBAAgB,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CAC7C,CAAC,MAAM,EAAE,EAAE;wBACP,OAAO,CACH,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC;4BAC/B,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,CACrB,CAAC,UAAU,EAAE,EAAE,CACX,UAAU,KAAK,SAAS,CAAC,IAAI,CACpC,CACJ,CAAA;oBACL,CAAC,CACJ,CAAA;oBACD,WAAW,CAAC,OAAO,CAAC,MAAM,CACtB,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,gBAAiB,CAAC,EAC9C,CAAC,CACJ,CAAA;oBACD,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,gBAAiB,CAAC,IAAI,GAAG,CAClD,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBACG,gBAAiB,CAAC,IACtB,cAAc,SAAS,CAAC,IAAI,IAAI,CACnC,CACJ,CAAA;iBACJ;aACJ;YAED,IAAI,SAAS,CAAC,OAAO,KAAK,SAAS,CAAC,OAAO,EAAE;gBACzC,8EAA8E;gBAC9E,IACI,SAAS,CAAC,OAAO,KAAK,IAAI;oBAC1B,SAAS,CAAC,OAAO,KAAK,SAAS,EACjC;oBACE,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBACL,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,WAAW,GAAG,CACvC,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,WAAW,aAC5B,SAAS,CAAC,OACd,SAAS,SAAS,CAAC,IAAI,GAAG,CAC7B,CACJ,CAAA;iBACJ;gBAED,IACI,SAAS,CAAC,OAAO,KAAK,IAAI;oBAC1B,SAAS,CAAC,OAAO,KAAK,SAAS,EACjC;oBACE,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,SAAS,CAAC,IAAI,CACjB,CAAA;oBACL,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,WAAW,aAC5B,SAAS,CAAC,OACd,SAAS,SAAS,CAAC,IAAI,GAAG,CAC7B,CACJ,CAAA;oBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,WAAW,GAAG,CACvC,CACJ,CAAA;iBACJ;aACJ;YAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;YACjD,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;SAC9C;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CACf,WAA2B,EAC3B,cAAoE;QAEpE,KAAK,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,cAAc,EAAE;YACnD,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,EAAE,SAAS,EAAE,SAAS,CAAC,CAAA;SAC7D;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,UAAU,CACZ,WAA2B,EAC3B,YAAkC;QAElC,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,MAAM,GAAG,iCAAe,CAAC,aAAa,CAAC,YAAY,CAAC;YACtD,CAAC,CAAC,YAAY;YACd,CAAC,CAAC,KAAK,CAAC,gBAAgB,CAAC,YAAY,CAAC,CAAA;QAC1C,IAAI,CAAC,MAAM;YACP,MAAM,IAAI,oBAAY,CAClB,WAAW,YAAY,6BAA6B,KAAK,CAAC,IAAI,GAAG,CACpE,CAAA;QAEL,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QACjC,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,8BAA8B;QAC9B,IAAI,MAAM,CAAC,SAAS,EAAE;YAClB,MAAM,MAAM,GAAG,MAAM,CAAC,wBAAwB;gBAC1C,CAAC,CAAC,MAAM,CAAC,wBAAwB;gBACjC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC1D,CAAA;YAEP,MAAM,WAAW,GAAG,WAAW,CAAC,cAAc;iBACzC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,IAAI,aAAa,CAAC,IAAI,GAAG,CAAC;iBACjD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,oBAAoB,MAAM,kBAAkB,WAAW,GAAG,CAC9D,CACJ,CAAA;YAED,yBAAyB;YACzB,MAAM,WAAW,GAAG,WAAW,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;YAC7D,WAAY,CAAC,SAAS,GAAG,KAAK,CAAA;YAE9B,mFAAmF;YACnF,IAAI,WAAW,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBACvC,MAAM,MAAM,GAAG,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC;qBACvC,wBAAwB;oBACzB,CAAC,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;oBACxD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CAAC,cAAc,CAAC,GAAG,CAC1B,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAC1B,CACJ,CAAA;gBAEP,MAAM,WAAW,GAAG,WAAW,CAAC,cAAc;qBACzC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,IAAI,aAAa,CAAC,IAAI,GAAG,CAAC;qBACjD,IAAI,CAAC,IAAI,CAAC,CAAA;gBACf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,oBAAoB,MAAM,kBAAkB,WAAW,GAAG,CAC9D,CACJ,CAAA;gBACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,WAAW,CACd,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;aACJ;SACJ;QAED,oBAAoB;QACpB,MAAM,WAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACxC,CAAC,KAAK,EAAE,EAAE,CACN,KAAK,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC;YAC9B,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,WAAW,EAAE;YACb,WAAW,CAAC,OAAO,CAAC,MAAM,CACtB,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,EACxC,CAAC,CACJ,CAAA;YACD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;YACrD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;SAC5D;QAED,oBAAoB;QACpB,MAAM,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,IAAI,CACvC,CAAC,KAAK,EAAE,EAAE,CACN,CAAC,CAAC,KAAK,CAAC,WAAW;YACnB,KAAK,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC;YAC9B,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC3C,CAAA;QACD,IAAI,WAAW,EAAE;YACb,WAAW,CAAC,MAAM,CAAC,MAAM,CACrB,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,EACvC,CAAC,CACJ,CAAA;YACD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;YAC/D,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC,CAAA;SACtE;QAED,qBAAqB;QACrB,MAAM,YAAY,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,CACzC,CAAC,MAAM,EAAE,EAAE,CACP,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC5C,CAAA;QACD,IAAI,YAAY,EAAE;YACd,WAAW,CAAC,OAAO,CAAC,MAAM,CACtB,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EACzC,CAAC,CACJ,CAAA;YACD,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC,CAAA;YACjE,WAAW,CAAC,IAAI,CACZ,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,YAAY,CAAC,CACtD,CAAA;SACJ;QAED,0BAA0B;QAC1B,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE;YACzD,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,WAAW,GAAG,CACvC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,WAAW,aAC5B,MAAM,CAAC,OACX,SAAS,MAAM,CAAC,IAAI,GAAG,CAC1B,CACJ,CAAA;SACJ;QAED,IAAI,MAAM,CAAC,aAAa,IAAI,MAAM,CAAC,YAAY,EAAE;YAC7C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,CAAA;YAEzD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;gBACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;aACzD;YAED,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;aACpB,CAAC,CAAA;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC;gBAC9C,QAAQ,EAAE,eAAe,CAAC,QAAQ;gBAClC,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,KAAK,EAAE,eAAe,CAAC,SAAS;gBAChC,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;gBACxC,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,KAAK,EAAE,MAAM,CAAC,YAAY;aAC7B,CAAC,CAAA;YAEF,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;YAC3B,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAA;SAChC;QAED,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,iBACjC,MAAM,CAAC,IACX,GAAG,CACN,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,QAAQ,IAAI,CAAC,oBAAoB,CAC9B,KAAK,EACL,MAAM,EACN,KAAK,EACL,KAAK,CACR,EAAE,CACN,CACJ,CAAA;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QAEjD,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAA;QAChC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,OAAiC;QAEjC,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC1B,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,MAAM,CAAC,CAAA;SAC7C;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAClB,WAA2B,EAC3B,WAAqB,EACrB,cAAuB;QAEvB,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QAEjC,MAAM,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,WAAW,EAAE,cAAc,CAAC,CAAA;QAEvE,4GAA4G;QAC5G,WAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACnC,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,KAAK,MAAM,CAAC,IAAI,CAAC;gBAC5D,MAAM,CAAC,SAAS,GAAG,IAAI,CAAA;QAC/B,CAAC,CAAC,CAAA;QACF,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAA;QAEhD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CACnB,WAA2B,EAC3B,OAAsB;QAEtB,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,WAAW,GAAG,KAAK,CAAC,KAAK,EAAE,CAAA;QACjC,MAAM,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QACxD,MAAM,SAAS,GAAY,EAAE,CAAA;QAC7B,MAAM,WAAW,GAAY,EAAE,CAAA;QAE/B,4DAA4D;QAC5D,MAAM,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;QACjD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;gBACrD,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;gBAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9C,CAAA;YAEP,MAAM,iBAAiB,GAAG,cAAc;iBACnC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;iBACnC,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;YACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,MAAM,kBAAkB,iBAAiB,GAAG,CACpE,CACJ,CAAA;SACJ;QAED,2BAA2B;QAC3B,WAAW,CAAC,OAAO;aACd,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAC3D,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAA;QAEnD,MAAM,MAAM,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;YACrD,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;YAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,WAAW,EACX,WAAW,CACd,CAAA;QAEP,MAAM,iBAAiB,GAAG,WAAW;aAChC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC;aACtC,IAAI,CAAC,IAAI,CAAC,CAAA;QAEf,SAAS,CAAC,IAAI,CACV,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,MAAM,kBAAkB,iBAAiB,GAAG,CACpE,CACJ,CAAA;QACD,WAAW,CAAC,IAAI,CACZ,IAAI,aAAK,CACL,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,MAAM,GAAG,CAClC,CACJ,CAAA;QAED,MAAM,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAA;QACjD,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAChB,WAA2B,EAC3B,cAAuB;QAEvB,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAA;QACxC,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CACjC,KAAK,EACL,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,EACjD,cAAc,CACjB,CAAA;QACD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACpC,MAAM,CAAC,SAAS,GAAG,KAAK,CAAA;QAC5B,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB,CACxB,WAA2B,EAC3B,gBAA6B;QAE7B,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE5C,mGAAmG;QACnG,IAAI,CAAC,gBAAgB,CAAC,IAAI;YACtB,gBAAgB,CAAC,IAAI;gBACjB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,KAAK,EACL,gBAAgB,CAAC,WAAW,CAC/B,CAAA;QAET,MAAM,EAAE,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QAClE,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QAClE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAA;IAC/C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,uBAAuB,CACzB,WAA2B,EAC3B,iBAAgC;QAEhC,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CACxD,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAC7D,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CACtB,WAA2B,EAC3B,YAAkC;QAElC,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,gBAAgB,GAAG,iCAAe,CAAC,aAAa,CAAC,YAAY,CAAC;YAChE,CAAC,CAAC,YAAY;YACd,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC,CAAA;QACxD,IAAI,CAAC,gBAAgB;YACjB,MAAM,IAAI,oBAAY,CAClB,qDAAqD,KAAK,CAAC,IAAI,EAAE,CACpE,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAA;QACpE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,sBAAsB,CAAC,gBAAgB,CAAC,CAAA;IAClD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CACvB,WAA2B,EAC3B,iBAAgC;QAEhC,MAAM,QAAQ,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAE,CACxD,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,gBAAgB,CAAC,CAC3D,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB,CACvB,WAA2B,EAC3B,eAA2B;QAE3B,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE5C,mGAAmG;QACnG,IAAI,CAAC,eAAe,CAAC,IAAI;YACrB,eAAe,CAAC,IAAI;gBAChB,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,KAAK,EACL,eAAe,CAAC,UAAW,CAC9B,CAAA;QAET,MAAM,EAAE,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAChE,MAAM,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAChE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,kBAAkB,CAAC,eAAe,CAAC,CAAA;IAC7C,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,sBAAsB,CACxB,WAA2B,EAC3B,gBAA8B;QAE9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,CACtD,IAAI,CAAC,qBAAqB,CAAC,WAAW,EAAE,eAAe,CAAC,CAC3D,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,mBAAmB,CACrB,WAA2B,EAC3B,WAAgC;QAEhC,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,eAAe,GAAG,iCAAe,CAAC,YAAY,CAAC,WAAW,CAAC;YAC7D,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,CAAA;QACtD,IAAI,CAAC,eAAe;YAChB,MAAM,IAAI,oBAAY,CAClB,oDAAoD,KAAK,CAAC,IAAI,EAAE,CACnE,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAC9D,MAAM,IAAI,GAAG,IAAI,CAAC,wBAAwB,CAAC,KAAK,EAAE,eAAe,CAAC,CAAA;QAClE,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAA;IAChD,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,oBAAoB,CACtB,WAA2B,EAC3B,gBAA8B;QAE9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,eAAe,EAAE,EAAE,CACtD,IAAI,CAAC,mBAAmB,CAAC,WAAW,EAAE,eAAe,CAAC,CACzD,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,yBAAyB,CAC3B,WAA2B,EAC3B,mBAAmC;QAEnC,MAAM,IAAI,oBAAY,CAClB,mDAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,0BAA0B,CAC5B,WAA2B,EAC3B,oBAAsC;QAEtC,MAAM,IAAI,oBAAY,CAClB,mDAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,uBAAuB,CACzB,WAA2B,EAC3B,eAAwC;QAExC,MAAM,IAAI,oBAAY,CAClB,mDAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,wBAAwB,CAC1B,WAA2B,EAC3B,oBAAsC;QAEtC,MAAM,IAAI,oBAAY,CAClB,mDAAmD,CACtD,CAAA;IACL,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,gBAAgB,CAClB,WAA2B,EAC3B,UAA2B;QAE3B,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;YACpD,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,IAAI,CAAC;YACzC,CAAC,CAAC,SAAS,CAAA;QAEf,IACI,QAAQ;YACR,QAAQ,CAAC,kBAAkB;YAC3B,QAAQ,CAAC,kBAAmB,CAAC,YAAY;YACzC,QAAQ,CAAC,WAAW,CAAC,IAAI,CACrB,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,KAAK,WAAW,CACtD;YAED,MAAM,IAAI,oBAAY,CAClB,mDAAmD,CACtD,CAAA;QAEL,gFAAgF;QAChF,IAAI,CAAC,UAAU,CAAC,IAAI;YAChB,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAC3D,KAAK,EACL,UAAU,CAAC,WAAW,EACtB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,EAC7B,UAAU,CAAC,qBAAqB,CACnC,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACtD,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACtD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;IACnC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,iBAAiB,CACnB,WAA2B,EAC3B,WAA8B;QAE9B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAC5C,IAAI,CAAC,gBAAgB,CAAC,WAAW,EAAE,UAAU,CAAC,CACjD,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc,CAChB,WAA2B,EAC3B,gBAA0C;QAE1C,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,UAAU,GAAG,iCAAe,CAAC,iBAAiB,CAAC,gBAAgB,CAAC;YAClE,CAAC,CAAC,gBAAgB;YAClB,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,KAAK,gBAAgB,CAAC,CAAA;QAClE,IAAI,CAAC,UAAU;YACX,MAAM,IAAI,oBAAY,CAClB,+CAA+C,KAAK,CAAC,IAAI,EAAE,CAC9D,CAAA;QAEL,MAAM,EAAE,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACpD,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAA;QACxD,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAA;IACtC,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,eAAe,CACjB,WAA2B,EAC3B,WAA8B;QAE9B,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAC5C,IAAI,CAAC,cAAc,CAAC,WAAW,EAAE,UAAU,CAAC,CAC/C,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,KAAiB;QAEjB,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAE5C,sFAAsF;QACtF,IAAI,CAAC,KAAK,CAAC,IAAI;YAAE,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAElE,MAAM,EAAE,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC5C,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC5C,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CACf,WAA2B,EAC3B,OAAqB;QAErB,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACnC,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE,KAAK,CAAC,CACvC,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,SAAS,CACX,WAA2B,EAC3B,WAAgC;QAEhC,MAAM,KAAK,GAAG,iCAAe,CAAC,OAAO,CAAC,WAAW,CAAC;YAC9C,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAA;QAC5C,MAAM,KAAK,GAAG,iCAAe,CAAC,YAAY,CAAC,WAAW,CAAC;YACnD,CAAC,CAAC,WAAW;YACb,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,WAAW,CAAC,CAAA;QACvD,IAAI,CAAC,KAAK;YACN,MAAM,IAAI,oBAAY,CAClB,yCAAyC,KAAK,CAAC,IAAI,EAAE,CACxD,CAAA;QAEL,sFAAsF;QACtF,IAAI,CAAC,KAAK,CAAC,IAAI;YAAE,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAElE,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC1C,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;QAC9C,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,EAAE,IAAI,CAAC,CAAA;QACnC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAA;IAC5B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,WAAW,CACb,WAA2B,EAC3B,OAAqB;QAErB,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CACnC,IAAI,CAAC,SAAS,CAAC,WAAW,EAAE,KAAK,CAAC,CACrC,CAAA;QACD,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAA;IAC/B,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,UAAU,CAAC,SAAiB;QAC9B,MAAM,IAAI,CAAC,KAAK,CAAC,kBAAkB,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC,CAAA;IACpE,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,aAAa,CAAC,QAAiB;QACjC,IAAI,QAAQ,EAAE;YACV,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAA;YACxD,IAAI,CAAC,eAAe;gBAAE,OAAO,OAAO,CAAC,OAAO,EAAE,CAAA;SACjD;QAED,MAAM,0BAA0B,GAAG,IAAI,CAAC,mBAAmB,CAAA;QAC3D,IAAI,CAAC,0BAA0B;YAAE,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QAC9D,IAAI;YACA,IAAI,WAAW,GAAG,QAAQ;gBACtB,CAAC,CAAC,kBAAkB,QAAQ,gCAAgC;gBAC5D,CAAC,CAAC,4CAA4C,CAAA;YAClD,MAAM,eAAe,GAAoB,MAAM,IAAI,CAAC,KAAK,CACrD,WAAW,CACd,CAAA;YAED,MAAM,OAAO,CAAC,GAAG,CACb,eAAe,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBAC/B,0FAA0F;gBAC1F,MAAM,YAAY,GAAG,cAAc,UAAU,CAAC,cAAc,CAAC,MAAM,UAAU,CAAC,YAAY,CAAC,GAAG,CAAA;gBAC9F,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;YACnC,CAAC,CAAC,CACL,CAAA;YAED,IAAI,YAAY,GAAG,QAAQ;gBACvB,CAAC,CAAC,kBAAkB,QAAQ,mEAAmE;gBAC/F,CAAC,CAAC,+EAA+E,CAAA;YACrF,MAAM,gBAAgB,GAAoB,MAAM,IAAI,CAAC,KAAK,CACtD,YAAY,CACf,CAAA;YAED,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7B,MAAM,eAAe,GAKjB,gBAAgB,CAAC,MAAM,CACvB,CAAC,CAAC,EAAE,EAAE,aAAa,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE;oBAC/C,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,EAAE,CAAA;oBACzC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,CAAC,CAAA;oBACnD,OAAO,CAAC,CAAA;gBACZ,CAAC,EACD,EAAE,CACL,CAAA;gBAED,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,CAAC;qBACjD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;oBAC7B,MAAM,UAAU,GAAG,MAAM;yBACpB,GAAG,CAAC,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE;wBAClC,OAAO,8CAA8C,aAAa,MAAM,YAAY,MAAM,UAAU,MAAM,CAAA;oBAC9G,CAAC,CAAC;yBACD,IAAI,CAAC,MAAM,CAAC,CAAA;oBAEjB,OAAO;2CACY,aAAa;;oEAEY,aAAa;sFACK,aAAa;;gCAEnE,aAAa;iCACZ,UAAU;qBACtB,CAAA;gBACD,CAAC,CAAC;qBACD,IAAI,CAAC,aAAa,CAAC,CAAA;gBAExB,MAAM,WAAW,GAKX,MAAM,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAA;gBAEtC,MAAM,OAAO,CAAC,GAAG,CACb,WAAW,CAAC,GAAG,CACX,KAAK,EAAE,EACH,aAAa,EACb,YAAY,EACZ,UAAU,EACV,eAAe,GAClB,EAAE,EAAE;oBACD,gCAAgC;oBAChC,MAAM,IAAI,CAAC,KAAK,CACZ,gBAAgB,aAAa,MAAM,YAAY,MAAM,UAAU,IAAI;wBAC/D,uBAAuB,eAAe,GAAG,CAChD,CAAA;oBAED,MAAM,IAAI,CAAC,KAAK,CACZ,gBAAgB,aAAa,MAAM,YAAY,MAAM,UAAU,IAAI;wBAC/D,oBAAoB,eAAe,iBAAiB,CAC3D,CAAA;gBACL,CAAC,CACJ,CACJ,CAAA;gBAED,MAAM,OAAO,CAAC,GAAG,CACb,gBAAgB,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE;oBAClC,IAAI,YAAY,CAAC,YAAY,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;wBAC5C,qCAAqC;wBACrC,OAAM;qBACT;oBAED,MAAM,YAAY,GAAG,eAAe,YAAY,CAAC,eAAe,CAAC,MAAM,YAAY,CAAC,cAAc,CAAC,MAAM,YAAY,CAAC,YAAY,CAAC,GAAG,CAAA;oBACtI,OAAO,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAA;gBACnC,CAAC,CAAC,CACL,CAAA;aACJ;YAED,IAAI,CAAC,0BAA0B;gBAAE,MAAM,IAAI,CAAC,iBAAiB,EAAE,CAAA;SAClE;QAAC,OAAO,KAAK,EAAE;YACZ,IAAI;gBACA,2DAA2D;gBAC3D,IAAI,CAAC,0BAA0B;oBAC3B,MAAM,IAAI,CAAC,mBAAmB,EAAE,CAAA;aACvC;YAAC,OAAO,aAAa,EAAE,GAAE;YAC1B,MAAM,KAAK,CAAA;SACd;IACL,CAAC;IAED,4EAA4E;IAC5E,oBAAoB;IACpB,4EAA4E;IAElE,KAAK,CAAC,SAAS,CAAC,SAAoB;QAC1C,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC,CAAA;QACxE,IAAI,CAAC,QAAQ,EAAE;YACX,OAAO,EAAE,CAAA;SACZ;QAED,IAAI,CAAC,SAAS,EAAE;YACZ,SAAS,GAAG,EAAE,CAAA;SACjB;QAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QACnD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAEvD,MAAM,OAAO,GAAG,SAAS;aACpB,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,QAAQ,CAAC;aAChE,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,CAAA;QAEnC,IACI,IAAI,CAAC,MAAM,CAAC,QAAQ;YACpB,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;YAE1D,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;QAEtC,MAAM,cAAc,GAAG,SAAS;aAC3B,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE;YACd,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,GAC3B,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAA;YAExC,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,aAAa,CAAA;aACzB;YACD,OAAO,oBAAoB,MAAM,uBAAuB,IAAI,IAAI,CAAA;QACpE,CAAC,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,CAAA;QAEjB,MAAM,KAAK,GAAG,OAAO;aAChB,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACZ,OAAO,CACH,yCAAyC,IAAI,CAAC,UAAU,CACpD,IAAI,CAAC,2BAA2B,EAAE,CACrC,OAAO;gBACR,eAAe,MAAM,iIACjB,qCAAiB,CAAC,IACtB,KAAK,cAAc,CAAC,CAAC,CAAC,QAAQ,cAAc,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACzD,CAAA;QACL,CAAC,CAAC;aACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;QACvC,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,MAAW,EAAE,EAAE;YAC/B,MAAM,IAAI,GAAG,IAAI,WAAI,EAAE,CAAA;YACvB,MAAM,EAAE,GACJ,MAAM,CAAC,eAAe,CAAC,KAAK,eAAe;gBACvC,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAA;YACjC,MAAM,MAAM,GACR,MAAM,CAAC,QAAQ,CAAC,KAAK,aAAa;gBAClC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM;gBACvB,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAA;YAC1B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,eAAe,CAAC,CAAA;YACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAA;YAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,MAAM,EAAE,EAAE,CAAC,CAAA;YAClE,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;YACjC,OAAO,IAAI,CAAA;QACf,CAAC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,UAAU,CAAC,UAAqB;QAC5C,6CAA6C;QAC7C,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACvC,OAAO,EAAE,CAAA;SACZ;QAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;QACnD,MAAM,eAAe,GAAG,MAAM,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAEvD,MAAM,QAAQ,GAIR,EAAE,CAAA;QAER,IAAI,CAAC,UAAU,EAAE;YACb,MAAM,YAAY,GACd,yBAAyB;gBACzB,qCAAqC;gBACrC,iDAAiD,CAAA;YACrD,MAAM,WAAW,GAAuB,MAAM,IAAI,CAAC,KAAK,CACpD,YAAY,CACf,CAAA;YAED,MAAM,SAAS,GAAG,WAAW;iBACxB,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;gBACd,OAAO;;;4BAGC,IAAI;;;;2CAIW,IAAI;;;iBAG9B,CAAA;YACD,CAAC,CAAC;iBACD,IAAI,CAAC,aAAa,CAAC,CAAA;YAExB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;SAClD;aAAM;YACH,MAAM,mBAAmB,GAAG,UAAU;iBACjC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;iBACzD,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;gBAClC,QAAQ,GAAG,QAAQ,IAAI,eAAe,CAAA;gBACtC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;gBAC/B,CAAC,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;oBACb,MAAM,EAAE,KAAK,CAAC,MAAM,IAAI,aAAa;oBACrC,SAAS,EAAE,KAAK,CAAC,SAAS;iBAC7B,CAAC,CAAA;gBACF,OAAO,CAAC,CAAA;YACZ,CAAC,EAAE,EAAgE,CAAC,CAAA;YAExE,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC;iBAChD,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE;gBACxB,MAAM,eAAe,GAAG,MAAM;qBACzB,GAAG,CAAC,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE;oBAC3B,OAAO,sBAAsB,MAAM,yBAAyB,SAAS,IAAI,CAAA;gBAC7E,CAAC,CAAC;qBACD,IAAI,CAAC,MAAM,CAAC,CAAA;gBAEjB,OAAO;;;4BAGC,QAAQ;;;+CAGW,QAAQ;4BAC3B,eAAe;iBAC1B,CAAA;YACD,CAAC,CAAC;iBACD,IAAI,CAAC,aAAa,CAAC,CAAA;YAExB,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;SAClD;QAED,yDAAyD;QACzD,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,OAAO,EAAE,CAAA;SACZ;QAED,MAAM,iBAAiB,GAAG,QAAQ,CAAC,MAAM,CACrC,CAAC,CAAC,EAAE,EAAE,aAAa,EAAE,GAAG,KAAK,EAAE,EAAE,EAAE;YAC/B,CAAC,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,aAAa,CAAC,IAAI,EAAE,CAAA;YACzC,CAAC,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;YAC5B,OAAO,CAAC,CAAA;QACZ,CAAC,EACD,EAEC,CACJ,CAAA;QAED,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;aAC/C,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,SAAS,GAAG,MAAM;iBACnB,GAAG,CACA,CAAC,EAAE,YAAY,EAAE,UAAU,EAAE,EAAE,EAAE,CAC7B,sBAAsB,YAAY,yBAAyB,UAAU,IAAI,CAChF;iBACA,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,OAAO,CACH,6DAA6D;gBAC7D,SAAS,aAAa,mCAAmC;gBACzD,0GAA0G;gBAC1G,UAAU,SAAS,GAAG,CACzB,CAAA;QACL,CAAC,CAAC;aACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;aACnD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM;iBACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,EAAE,CAC7B,qCAAqC,YAAY,wCAAwC,UAAU,IAAI,CAC9G;iBACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OAAO,CACH,oFAAoF;gBACpF,SAAS,aAAa,kEAAkE;gBACxF,eAAe,aAAa,gEAAgE;gBAC5F,KAAK;gBACL,8EAA8E;gBAC9E,wEAAwE;gBACxE,gEAAgE;gBAChE,cAAc,aAAa,oCAAoC;gBAC/D,KAAK;gBACL,+IAA+I;gBAC/I,QAAQ;gBACR,IAAI,UAAU,QAAQ;gBACtB,4EAA4E,CAC/E,CAAA;QACL,CAAC,CAAC;aACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,cAAc,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;aACnD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM;iBACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,EAAE,CAC7B,mBAAmB,YAAY,wBAAwB,UAAU,IAAI,CAC5E;iBACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OAAO,CACH,qCAAqC,aAAa,oFAAoF;gBACtI,0HAA0H;gBAC1H,6GAA6G;gBAC7G,SAAS,aAAa,8BAA8B;gBACpD,eAAe,aAAa,yFAAyF;gBACrH,eAAe,aAAa,sEAAsE;gBAClG,eAAe,aAAa,gEAAgE;gBAC5F,eAAe,aAAa,0EAA0E;gBACtG,eAAe,aAAa,gEAAgE;gBAC5F,eAAe,aAAa,6HAA6H;gBACzJ,eAAe,aAAa,qIAAqI;gBACjK,UAAU,UAAU,GAAG,CAC1B,CAAA;QACL,CAAC,CAAC;aACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,kBAAkB,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;aACvD,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM;iBACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,EAAE,CAC7B,sBAAsB,YAAY,yBAAyB,UAAU,IAAI,CAChF;iBACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OAAO,CACH,sEAAsE;gBACtE,SAAS,aAAa,mCAAmC;gBACzD,QAAQ;gBACR,yBAAyB,aAAa,qLAAqL;gBAC3N,IAAI,UAAU,GAAG,CACpB,CAAA;QACL,CAAC,CAAC;aACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,eAAe,GAAG,wDAAwD,CAAA;QAEhF,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,iBAAiB,CAAC;aAC/C,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE,EAAE;YAC7B,MAAM,UAAU,GAAG,MAAM;iBACpB,GAAG,CACA,CAAC,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,EAAE,CAC7B,kBAAkB,YAAY,uBAAuB,UAAU,IAAI,CAC1E;iBACA,IAAI,CAAC,MAAM,CAAC,CAAA;YAEjB,OAAO,CACH,WAAW,aAAa,kFAAkF;gBAC1G,0IAA0I;gBAC1I,SAAS,aAAa,0BAA0B;gBAChD,eAAe,aAAa,8GAA8G;gBAC1I,eAAe,aAAa,2GAA2G;gBACvI,eAAe,aAAa,8DAA8D;gBAC1F,eAAe,aAAa,6DAA6D;gBACzF,QAAQ;gBACR,kGAAkG;gBAClG,IAAI,UAAU,GAAG,CACpB,CAAA;QACL,CAAC,CAAC;aACD,IAAI,CAAC,aAAa,CAAC,CAAA;QAExB,MAAM,CACF,SAAS,EACT,aAAa,EACb,aAAa,EACb,iBAAiB,EACjB,YAAY,EACZ,SAAS,EACZ,GAAsB,MAAM,OAAO,CAAC,GAAG,CAAC;YACrC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;YACtB,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC;YAC9B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC;YAC3B,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC;SACzB,CAAC,CAAA;QAEF,yCAAyC;QACzC,OAAO,MAAM,OAAO,CAAC,GAAG,CACpB,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;YAC3B,MAAM,KAAK,GAAG,IAAI,aAAK,EAAE,CAAA;YAEzB,MAAM,gBAAgB,GAAG,CAAC,QAAa,EAAE,GAAW,EAAE,EAAE;gBACpD,OAAO,QAAQ,CAAC,GAAG,CAAC,KAAK,aAAa;oBAClC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM;wBACxB,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,KAAK,aAAa,CAAC;oBACjD,CAAC,CAAC,SAAS;oBACX,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;YACvB,CAAC,CAAA;YAED,qFAAqF;YACrF,MAAM,EAAE,GACJ,OAAO,CAAC,eAAe,CAAC,KAAK,eAAe;gBACxC,CAAC,CAAC,SAAS;gBACX,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAA;YAClC,MAAM,MAAM,GAAG,gBAAgB,CAAC,OAAO,EAAE,cAAc,CAAC,CAAA;YACxD,KAAK,CAAC,QAAQ,GAAG,OAAO,CAAC,eAAe,CAAC,CAAA;YACzC,KAAK,CAAC,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;YACtC,KAAK,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CACnC,OAAO,CAAC,YAAY,CAAC,EACrB,MAAM,EACN,EAAE,CACL,CAAA;YAED,MAAM,gBAAgB,GAAG,YAAY,CAAC,IAAI,CACtC,CAAC,WAAW,EAAE,EAAE,CACZ,WAAW,CAAC,MAAM,CAAC,KAAK,OAAO,CAAC,eAAe,CAAC,CACtD,CAAA;YAEF,yCAAyC;YACzC,KAAK,CAAC,OAAO,GAAG,MAAM,OAAO,CAAC,GAAG,CAC7B,SAAS;iBACJ,MAAM,CACH,CAAC,QAAQ,EAAE,EAAE,CACT,QAAQ,CAAC,YAAY,CAAC;gBAClB,OAAO,CAAC,YAAY,CAAC;gBACzB,QAAQ,CAAC,cAAc,CAAC;oBACpB,OAAO,CAAC,cAAc,CAAC;gBAC3B,QAAQ,CAAC,eAAe,CAAC;oBACrB,OAAO,CAAC,eAAe,CAAC,CACnC;iBACA,GAAG,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;gBACpB,MAAM,iBAAiB,GAAG,aAAa,CAAC,MAAM,CAC1C,CAAC,YAAY,EAAE,EAAE,CACb,YAAY,CAAC,YAAY,CAAC;oBACtB,QAAQ,CAAC,YAAY,CAAC;oBAC1B,YAAY,CAAC,cAAc,CAAC;wBACxB,QAAQ,CAAC,cAAc,CAAC;oBAC5B,YAAY,CAAC,eAAe,CAAC;wBACzB,QAAQ,CAAC,eAAe,CAAC;oBAC7B,YAAY,CAAC,aAAa,CAAC;wBACvB,QAAQ,CAAC,aAAa,CAAC,CAClC,CAAA;gBAED,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,MAAM,CAC9C,CAAC,UAAU,EAAE,EAAE,CACX,UAAU,CAAC,iBAAiB,CAAC,KAAK,QAAQ,CACjD,CAAA;gBACD,MAAM,qBAAqB,GACvB,iBAAiB,CAAC,KAAK,CAAC,CAAC,gBAAgB,EAAE,EAAE;oBACzC,OAAO,aAAa,CAAC,IAAI,CACrB,CAAC,YAAY,EAAE,EAAE,CACb,YAAY,CAAC,iBAAiB,CAAC;wBAC3B,QAAQ;wBACZ,YAAY,CAAC,iBAAiB,CAAC;4BAC3B,gBAAgB,CACZ,iBAAiB,CACpB;wBACL,YAAY,CAAC,cAAc,CAAC;4BACxB,QAAQ,CAAC,cAAc,CAAC;wBAC5B,YAAY,CAAC,eAAe,CAAC;4BACzB,QAAQ,CAAC,eAAe,CAAC;wBAC7B,YAAY,CAAC,aAAa,CAAC;4BACvB,QAAQ,CAAC,aAAa,CAAC,CAClC,CAAA;gBACL,CAAC,CAAC,CAAA;gBAEN,MAAM,WAAW,GAAG,CAAC,CAAC,iBAAiB,CAAC,IAAI,CACxC,CAAC,MAAM,EAAE,EAAE,CACP,MAAM,CAAC,YAAY,CAAC;oBAChB,QAAQ,CAAC,YAAY,CAAC;oBAC1B,MAAM,CAAC,cAAc,CAAC;wBAClB,QAAQ,CAAC,cAAc,CAAC;oBAC5B,MAAM,CAAC,eAAe,CAAC;wBACnB,QAAQ,CAAC,eAAe,CAAC;oBAC7B,MAAM,CAAC,aAAa,CAAC;wBACjB,QAAQ,CAAC,aAAa,CAAC,CAClC,CAAA;gBAED,MAAM,WAAW,GAAG,IAAI,yBAAW,EAAE,CAAA;gBACrC,WAAW,CAAC,IAAI,GAAG,QAAQ,CAAC,aAAa,CAAC,CAAA;gBAC1C,WAAW,CAAC,IAAI;oBACZ,QAAQ,CAAC,WAAW,CAAC,CAAC,WAAW,EAAE,CAAA;gBAEvC,+CAA+C;gBAC/C,IACI,IAAI,CAAC,MAAM,CAAC,qBAAqB,CAAC,OAAO,CACrC,WAAW,CAAC,IAAkB,CACjC,KAAK,CAAC,CAAC;oBACR,QAAQ,CAAC,0BAA0B,CAAC,EACtC;oBACE,MAAM,MAAM,GACR,QAAQ,CACJ,0BAA0B,CAC7B,CAAC,QAAQ,EAAE,CAAA;oBAChB,IAAI,MAAM,KAAK,IAAI,EAAE;wBACjB,WAAW,CAAC,MAAM,GAAG,KAAK,CAAA;qBAC7B;yBAAM;wBACH,WAAW,CAAC,MAAM;4BACd,CAAC,IAAI,CAAC,qBAAqB,CACvB,KAAK,EACL,WAAW,EACX,MAAM,CACT;gCACG,CAAC,CAAC,MAAM;gCACR,CAAC,CAAC,EAAE,CAAA;qBACf;iBACJ;gBAED,IACI,WAAW,CAAC,IAAI,KAAK,SAAS;oBAC9B,WAAW,CAAC,IAAI,KAAK,SAAS,EAChC;oBACE,IACI,QAAQ,CAAC,mBAAmB,CAAC,KAAK,IAAI;wBACtC,CAAC,IAAI,CAAC,wBAAwB,CAC1B,KAAK,EACL,WAAW,EACX,QAAQ,CAAC,mBAAmB,CAAC,CAChC;wBAED,WAAW,CAAC,SAAS;4BACjB,QAAQ,CAAC,mBAAmB,CAAC,CAAA;oBACrC,IACI,QAAQ,CAAC,eAAe,CAAC,KAAK,IAAI;wBAClC,CAAC,IAAI,CAAC,oBAAoB,CACtB,KAAK,EACL,WAAW,EACX,QAAQ,CAAC,eAAe,CAAC,CAC5B;wBAED,WAAW,CAAC,KAAK;4BACb,QAAQ,CAAC,eAAe,CAAC,CAAA;iBACpC;gBAED,IAAI,WAAW,CAAC,IAAI,KAAK,UAAU,EAAE;oBACjC,2BAA2B;oBAC3B,MAAM,sBAAsB,GACxB,iBAAiB,CAAC,MAAM,CACpB,CAAC,UAAU,EAAE,EAAE,CACX,UAAU,CAAC,iBAAiB,CAAC;wBAC7B,OAAO,CACd,CAAA;oBACL,IAAI,sBAAsB,CAAC,MAAM,EAAE;wBAC/B,oIAAoI;wBACpI,KAAK,MAAM,eAAe,IAAI,sBAAsB,EAAE;4BAClD,IACI,IAAI,CAAC,qBAAqB,CACtB,eAAe,CACX,iBAAiB,CACpB,CACJ,EACH;gCACE,uDAAuD;gCACvD,WAAW,CAAC,IAAI,GAAG,EAAE,CAAA;gCACrB,MAAM,eAAe,GAAG,IAAI,MAAM,CAC9B,KAAK;oCACD,WAAW,CAAC,IAAI;oCAChB,eAAe,EACnB,GAAG,CACN,CAAA;gCACD,IAAI,MAAM,CAAA;gCACV,OACI,CAAC,MAAM,GAAG,eAAe,CAAC,IAAI,CAC1B,eAAe,CACX,YAAY,CACf,CACJ,CAAC,KAAK,IAAI,EACb;oCACE,WAAW,CAAC,IAAI,CAAC,OAAO,CACpB,MAAM,CAAC,CAAC,CAAC,CACZ,CAAA;iCACJ;gCACD,gCAAgC;gCAChC,MAAK;6BACR;yBACJ;qBACJ;iBACJ;gBAED,MAAM,iBAAiB,GAAG,iBAAiB,CAAC,IAAI,CAC5C,CAAC,UAAU,EAAE,EAAE,CACX,UAAU,CAAC,iBAAiB,CAAC;oBAC7B,aAAa,CACpB,CAAA;gBACD,IAAI,iBAAiB,EAAE;oBACnB,WAAW,CAAC,SAAS,GAAG,IAAI,CAAA;oBAC5B,0DAA0D;oBAC1D,MAAM,yBAAyB,GAC3B,aAAa,CAAC,MAAM,CAChB,CAAC,UAAU,EAAE,EAAE,CACX,UAAU,CAAC,YAAY,CAAC;wBACpB,QAAQ,CAAC,YAAY,CAAC;wBAC1B,UAAU,CAAC,cAAc,CAAC;4BACtB,QAAQ,CAAC,cAAc,CAAC;wBAC5B,UAAU,CAAC,eAAe,CAAC;4BACvB,QAAQ,CAAC,eAAe,CAAC;wBAC7B,UAAU,CAAC,aAAa,CAAC;4BACrB,QAAQ,CAAC,aAAa,CAAC;wBAC3B,UAAU,CAAC,iBAAiB,CAAC;4BACzB,aAAa,CACxB,CAAA;oBAEL,2BAA2B;oBAC3B,MAAM,WAAW,GACb,yBAAyB,CAAC,GAAG,CACzB,CAAC,UAAU,EAAE,EAAE,CACX,UAAU,CAAC,aAAa,CAAC,CAChC,CAAA;oBACL,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,CAAA;oBAEzC,4CAA4C;oBAC5C,MAAM,MAAM,GACR,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,KAAK,EACL,WAAW,CACd,CAAA;oBAEL,4EAA4E;oBAC5E,IACI,iBAAiB,CAAC,iBAAiB,CAAC;wBACpC,MAAM,EACR;wBACE,WAAW,CAAC,wBAAwB;4BAChC,iBAAiB,CAAC,iBAAiB,CAAC,CAAA;qBAC3C;iBACJ;gBAED,WAAW,CAAC,OAAO;oBACf,QAAQ,CAAC,gBAAgB,CAAC,KAAK,IAAI;wBACnC,QAAQ,CAAC,gBAAgB,CAAC,KAAK,SAAS;wBACpC,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAC7B,QAAQ,CAAC,gBAAgB,CAAC,CAC7B;wBACH,CAAC,CAAC,SAAS,CAAA;gBACnB,WAAW,CAAC,UAAU;oBAClB,QAAQ,CAAC,aAAa,CAAC,KAAK,KAAK,CAAA;gBACrC,WAAW,CAAC,QAAQ;oBAChB,iBAAiB,CAAC,MAAM,GAAG,CAAC;wBAC5B,CAAC,qBAAqB,CAAA;gBAC1B,WAAW,CAAC,WAAW,GAAG,WAAW,CAAA;gBACrC,IAAI,WAAW;oBACX,WAAW,CAAC,kBAAkB,GAAG,WAAW,CAAA;gBAChD,IAAI,WAAW,CAAC,OAAO,KAAK,mBAAmB,EAAE;oBAC7C,WAAW,CAAC,WAAW,GAAG,IAAI,CAAA;oBAC9B,WAAW,CAAC,kBAAkB,GAAG,MAAM,CAAA;oBACvC,WAAW,CAAC,OAAO,GAAG,SAAS,CAAA;iBAClC;gBAED,sCAAsC;gBACtC,wDAAwD;gBACxD,IAAI,QAAQ,CAAC,gBAAgB,CAAC;oBAC1B,WAAW,CAAC,SAAS;wBACjB,QAAQ,CAAC,gBAAgB,CAAC;4BAC1B,gBAAgB,CAAC,gBAAgB,CAAC;4BAC9B,CAAC,CAAC,SAAS;4BACX,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAA;gBAExC,IACI,WAAW,CAAC,IAAI,KAAK,WAAW;oBAChC,WAAW,CAAC,IAAI,KAAK,MAAM;oBAC3B,WAAW,CAAC,IAAI,KAAK,gBAAgB,EACvC;oBACE,WAAW,CAAC,SAAS;wBACjB,CAAC,IAAI,CAAC,wBAAwB,CAC1B,KAAK,EACL,WAAW,EACX,QAAQ,CAAC,oBAAoB,CAAC,CACjC;4BACG,CAAC,CAAC,QAAQ,CAAC,oBAAoB,CAAC;4BAChC,CAAC,CAAC,SAAS,CAAA;iBACtB;gBAED,IACI,QAAQ,CAAC,cAAc,CAAC,KAAK,IAAI;oBACjC,QAAQ,CAAC,cAAc,CAAC,KAAK,SAAS;oBACtC,QAAQ,CAAC,YAAY,CAAC,EACxB;oBACE,WAAW,CAAC,aAAa;wBACrB,QAAQ,CAAC,cAAc,CAAC,KAAK,IAAI;4BAC7B,CAAC,CAAC,QAAQ;4BACV,CAAC,CAAC,SAAS,CAAA;oBACnB,0GAA0G;oBAC1G,MAAM,iBAAiB,GACnB,MAAM,IAAI,CAAC,wBAAwB,CAAC;wBAChC,QAAQ,EAAE,OAAO,CAAC,eAAe,CAAC;wBAClC,MAAM,EAAE,OAAO,CAAC,cAAc,CAAC;wBAC/B,KAAK,EAAE,OAAO,CAAC,YAAY,CAAC;wBAC5B,IAAI,EAAE,qCAAiB,CAAC,gBAAgB;wBACxC,IAAI,EAAE,WAAW,CAAC,IAAI;qBACzB,CAAC,CAAA;oBAEN,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAC5B,iBAAiB,CAAC,KAAK,EACvB,iBAAiB,CAAC,UAAU,CAC/B,CAAA;oBACD,IAAI,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE;wBAChC,WAAW,CAAC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAA;qBAC9C;yBAAM;wBACH,WAAW,CAAC,YAAY,GAAG,EAAE,CAAA;qBAChC;iBACJ;gBAED,OAAO,WAAW,CAAA;YACtB,CAAC,CAAC,CACT,CAAA;YAED,yFAAyF;YACzF,MAAM,sBAAsB,GAAG,mBAAQ,CAAC,IAAI,CACxC,aAAa,CAAC,MAAM,CAChB,CAAC,YAAY,EAAE,EAAE,CACb,YAAY,CAAC,YAAY,CAAC;gBACtB,OAAO,CAAC,YAAY,CAAC;gBACzB,YAAY,CAAC,cAAc,CAAC;oBACxB,OAAO,CAAC,cAAc,CAAC;gBAC3B,YAAY,CAAC,eAAe,CAAC;oBACzB,OAAO,CAAC,eAAe,CAAC;gBAC5B,YAAY,CAAC,iBAAiB,CAAC,KAAK,QAAQ,CACnD,EACD,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,CACpD,CAAA;YAED,KAAK,CAAC,OAAO,GAAG,sBAAsB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBACtD,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAChC,CAAC,GAAG,EAAE,EAAE,CACJ,GAAG,CAAC,iBAAiB,CAAC;oBACtB,UAAU,CAAC,iBAAiB,CAAC,CACpC,CAAA;gBACD,OAAO,IAAI,yBAAW,CAAC;oBACnB,IAAI,EAAE,UAAU,CAAC,iBAAiB,CAAC;oBACnC,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;iBACpD,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEF,uFAAuF;YACvF,MAAM,qBAAqB,GAAG,mBAAQ,CAAC,IAAI,CACvC,aAAa,CAAC,MAAM,CAChB,CAAC,YAAY,EAAE,EAAE,CACb,YAAY,CAAC,YAAY,CAAC;gBACtB,OAAO,CAAC,YAAY,CAAC;gBACzB,YAAY,CAAC,cAAc,CAAC;oBACxB,OAAO,CAAC,cAAc,CAAC;gBAC3B,YAAY,CAAC,eAAe,CAAC;oBACzB,OAAO,CAAC,eAAe,CAAC;gBAC5B,YAAY,CAAC,iBAAiB,CAAC,KAAK,OAAO,CAClD,EACD,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,iBAAiB,CAAC,CACpD,CAAA;YAED,KAAK,CAAC,MAAM,GAAG,qBAAqB;iBAC/B,MAAM,CACH,CAAC,UAAU,EAAE,EAAE,CACX,CAAC,IAAI,CAAC,qBAAqB,CACvB,UAAU,CAAC,iBAAiB,CAAC,CAChC,CACR;iBACA,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBAChB,MAAM,MAAM,GAAG,aAAa,CAAC,MAAM,CAC/B,CAAC,GAAG,EAAE,EAAE,CACJ,GAAG,CAAC,iBAAiB,CAAC;oBACtB,UAAU,CAAC,iBAAiB,CAAC,CACpC,CAAA;gBACD,OAAO,IAAI,uBAAU,CAAC;oBAClB,IAAI,EAAE,UAAU,CAAC,iBAAiB,CAAC;oBACnC,WAAW,EAAE,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;oBAChD,UAAU,EAAE,UAAU,CAAC,YAAY,CAAC;iBACvC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEN,kGAAkG;YAClG,MAAM,0BAA0B,GAAG,mBAAQ,CAAC,IAAI,CAC5C,aAAa,CAAC,MAAM,CAChB,CAAC,YAAY,EAAE,EAAE,CACb,YAAY,CAAC,YAAY,CAAC;gBACtB,OAAO,CAAC,YAAY,CAAC;gBACzB,YAAY,CAAC,cAAc,CAAC;oBACxB,OAAO,CAAC,cAAc,CAAC;gBAC3B,YAAY,CAAC,eAAe,CAAC;oBACzB,OAAO,CAAC,eAAe,CAAC,CACnC,EACD,CAAC,YAAY,EAAE,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,CAC5C,CAAA;YAED,KAAK,CAAC,WAAW,GAAG,0BAA0B,CAAC,GAAG,CAC9C,CAAC,YAAY,EAAE,EAAE;gBACb,MAAM,WAAW,GAAG,aAAa,CAAC,MAAM,CACpC,CAAC,IAAI,EAAE,EAAE,CACL,IAAI,CAAC,SAAS,CAAC,KAAK,YAAY,CAAC,SAAS,CAAC,CAClD,CAAA;gBAED,0HAA0H;gBAC1H,MAAM,EAAE,GACJ,YAAY,CAAC,eAAe,CAAC,KAAK,eAAe;oBAC7C,CAAC,CAAC,SAAS;oBACX,CAAC,CAAC,YAAY,CAAC,eAAe,CAAC,CAAA;gBACvC,MAAM,MAAM,GAAG,gBAAgB,CAC3B,YAAY,EACZ,YAAY,CACf,CAAA;gBACD,MAAM,mBAAmB,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAClD,YAAY,CAAC,WAAW,CAAC,EACzB,MAAM,EACN,EAAE,CACL,CAAA;gBAED,OAAO,IAAI,iCAAe,CAAC;oBACvB,IAAI,EAAE,YAAY,CAAC,SAAS,CAAC;oBAC7B,WAAW,EAAE,WAAW,CAAC,GAAG,CACxB,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAChC;oBACD,kBAAkB,EAAE,YAAY,CAAC,eAAe,CAAC;oBACjD,gBAAgB,EAAE,YAAY,CAAC,YAAY,CAAC;oBAC5C,mBAAmB,EAAE,mBAAmB;oBACxC,qBAAqB,EAAE,WAAW,CAAC,GAAG,CAClC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,CAC/B;oBACD,QAAQ,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CACvC,GAAG,EACH,GAAG,CACN;oBACD,QAAQ,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC,OAAO,CACvC,GAAG,EACH,GAAG,CACN,EAAE,oDAAoD;iBAC1D,CAAC,CAAA;YACN,CAAC,CACJ,CAAA;YAED,uFAAuF;YACvF,MAAM,qBAAqB,GAAG,mBAAQ,CAAC,IAAI,CACvC,SAAS,CAAC,MAAM,CACZ,CAAC,OAAO,EAAE,EAAE,CACR,OAAO,CAAC,YAAY,CAAC,KAAK,OAAO,CAAC,YAAY,CAAC;gBAC/C,OAAO,CAAC,cAAc,CAAC;oBACnB,OAAO,CAAC,cAAc,CAAC;gBAC3B,OAAO,CAAC,eAAe,CAAC;oBACpB,OAAO,CAAC,eAAe,CAAC,CACnC,EACD,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,YAAY,CAAC,CACrC,CAAA;YAED,KAAK,CAAC,OAAO,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE;gBACrD,MAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;oBACvC,OAAO,CACH,KAAK,CAAC,eAAe,CAAC;wBAClB,UAAU,CAAC,eAAe,CAAC;wBAC/B,KAAK,CAAC,cAAc,CAAC;4BACjB,UAAU,CAAC,cAAc,CAAC;wBAC9B,KAAK,CAAC,YAAY,CAAC,KAAK,UAAU,CAAC,YAAY,CAAC;wBAChD,KAAK,CAAC,YAAY,CAAC,KAAK,UAAU,CAAC,YAAY,CAAC,CACnD,CAAA;gBACL,CAAC,CAAC,CAAA;gBACF,OAAO,IAAI,uBAAU,CAAoB;oBACrC,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,UAAU,CAAC,YAAY,CAAC;oBAC9B,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC;oBACjD,QAAQ,EAAE,UAAU,CAAC,WAAW,CAAC;oBACjC,KAAK,EAAE,UAAU,CAAC,WAAW,CAAC;iBACjC,CAAC,CAAA;YACN,CAAC,CAAC,CAAA;YAEF,OAAO,KAAK,CAAA;QAChB,CAAC,CAAC,CACL,CAAA;IACL,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,KAAY,EAAE,iBAA2B;QAC9D,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO;aAClC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CACZ,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,IAAI,CAAC,CACxD;aACA,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,IAAI,GAAG,GAAG,gBAAgB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,iBAAiB,EAAE,CAAA;QAExE,KAAK,CAAC,OAAO;aACR,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC;aACnC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAChB,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CACpC,CAAC,MAAM,EAAE,EAAE,CACP,MAAM,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC;gBAC/B,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,CAC5C,CAAA;YACD,IAAI,CAAC,aAAa;gBACd,KAAK,CAAC,OAAO,CAAC,IAAI,CACd,IAAI,yBAAW,CAAC;oBACZ,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CACrD,KAAK,EACL,CAAC,MAAM,CAAC,IAAI,CAAC,CAChB;oBACD,WAAW,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC;iBAC7B,CAAC,CACL,CAAA;QACT,CAAC,CAAC,CAAA;QAEN,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAC1B,MAAM,UAAU,GAAG,KAAK,CAAC,OAAO;iBAC3B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBACZ,MAAM,UAAU,GAAG,MAAM,CAAC,IAAI;oBAC1B,CAAC,CAAC,MAAM,CAAC,IAAI;oBACb,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,oBAAoB,CAC/C,KAAK,EACL,MAAM,CAAC,WAAW,CACrB,CAAA;gBACP,MAAM,WAAW,GAAG,MAAM,CAAC,WAAW;qBACjC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC;qBACtC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACf,OAAO,eAAe,UAAU,aAAa,WAAW,GAAG,CAAA;YAC/D,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,GAAG,IAAI,KAAK,UAAU,EAAE,CAAA;SAC3B;QAED,IAAI,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACzB,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM;iBACzB,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBACX,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI;oBACxB,CAAC,CAAC,KAAK,CAAC,IAAI;oBACZ,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,KAAK,EACL,KAAK,CAAC,UAAW,CACpB,CAAA;gBACP,OAAO,eAAe,SAAS,YAAY,KAAK,CAAC,UAAU,GAAG,CAAA;YAClE,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,GAAG,IAAI,KAAK,SAAS,EAAE,CAAA;SAC1B;QAED,IAAI,KAAK,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,iBAAiB,EAAE;YACnD,MAAM,cAAc,GAAG,KAAK,CAAC,WAAW;iBACnC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE;gBACR,MAAM,WAAW,GAAG,EAAE,CAAC,WAAW;qBAC7B,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC;qBACtC,IAAI,CAAC,IAAI,CAAC,CAAA;gBACf,IAAI,CAAC,EAAE,CAAC,IAAI;oBACR,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACnD,KAAK,EACL,EAAE,CAAC,WAAW,EACd,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,EACrB,EAAE,CAAC,qBAAqB,CAC3B,CAAA;gBACL,MAAM,qBAAqB,GAAG,EAAE,CAAC,qBAAqB;qBACjD,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC;qBACtC,IAAI,CAAC,IAAI,CAAC,CAAA;gBAEf,IAAI,UAAU,GAAG,eACb,EAAE,CAAC,IACP,kBAAkB,WAAW,gBAAgB,IAAI,CAAC,UAAU,CACxD,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CACxB,KAAK,qBAAqB,GAAG,CAAA;gBAC9B,IAAI,EAAE,CAAC,QAAQ;oBAAE,UAAU,IAAI,cAAc,EAAE,CAAC,QAAQ,EAAE,CAAA;gBAC1D,IAAI,EAAE,CAAC,QAAQ;oBAAE,UAAU,IAAI,cAAc,EAAE,CAAC,QAAQ,EAAE,CAAA;gBAE1D,OAAO,UAAU,CAAA;YACrB,CAAC,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,CAAA;YAEf,GAAG,IAAI,KAAK,cAAc,EAAE,CAAA;SAC/B;QAED,MAAM,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CACvC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,CAC/B,CAAA;QACD,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,MAAM,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;gBAC7D,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB;gBAC5C,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CACzC,KAAK,EACL,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAC9C,CAAA;YAEP,MAAM,WAAW,GAAG,cAAc;iBAC7B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,GAAG,CAAC;iBACnC,IAAI,CAAC,IAAI,CAAC,CAAA;YACf,GAAG,IAAI,iBAAiB,cAAc,kBAAkB,WAAW,GAAG,CAAA;SACzE;QAED,GAAG,IAAI,GAAG,CAAA;QAEV,OAAO,IAAI,aAAK,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG;IACO,YAAY,CAClB,WAA2B,EAC3B,OAAiB;QAEjB,MAAM,KAAK,GAAG,OAAO;YACjB,CAAC,CAAC,wBAAwB,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;YACxD,CAAC,CAAC,cAAc,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAA;QAClD,OAAO,IAAI,aAAK,CAAC,KAAK,CAAC,CAAA;IAC3B,CAAC;IAES,aAAa,CAAC,IAAU;QAC9B,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QAEnD,oFAAoF;QACpF,MAAM,cAAc,GAAG,UAAU,CAAC,MAAM;YACpC,CAAC,CAAC,IAAI,UAAU,CAAC,MAAM,MAAM,UAAU,CAAC,SAAS,GAAG;YACpD,CAAC,CAAC,IAAI,UAAU,CAAC,SAAS,GAAG,CAAA;QAEjC,IAAI,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ,EAAE;YACrC,OAAO,IAAI,aAAK,CACZ,eAAe,cAAc,OAAO,IAAI,CAAC,UAAU,EAAE,CACxD,CAAA;SACJ;aAAM;YACH,OAAO,IAAI,aAAK,CACZ,eAAe,cAAc,OAAO,IAAI;iBACnC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;iBAC3B,QAAQ,EAAE,EAAE,CACpB,CAAA;SACJ;IACL,CAAC;IAES,KAAK,CAAC,uBAAuB,CAAC,IAAU;QAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,IAAI,CAAC,CAAA;QAExD,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;SACzD;QAED,MAAM,UAAU,GACZ,OAAO,IAAI,CAAC,UAAU,KAAK,QAAQ;YAC/B,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE;YACxB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAA;QACrD,OAAO,IAAI,CAAC,wBAAwB,CAAC;YACjC,IAAI,EAAE,qCAAiB,CAAC,IAAI;YAC5B,QAAQ,EAAE,eAAe,CAAC,QAAQ;YAClC,MAAM,EAAE,eAAe,CAAC,MAAM;YAC9B,IAAI,EAAE,eAAe,CAAC,SAAS;YAC/B,KAAK,EAAE,UAAU;SACpB,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACO,WAAW,CAAC,UAAyB;QAC3C,OAAO,IAAI,aAAK,CAAC,aAAa,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAA;IAChE,CAAC;IAED;;OAEG;IACO,KAAK,CAAC,uBAAuB,CACnC,UAAyB;QAEzB,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,UAAU,CAAC,CAAA;QAE9D,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;YACzB,eAAe,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,gBAAgB,EAAE,CAAA;SACzD;QAED,OAAO,IAAI,CAAC,wBAAwB,CAAC;YACjC,IAAI,EAAE,qCAAiB,CAAC,IAAI;YAC5B,QAAQ,EAAE,eAAe,CAAC,QAAQ;YAClC,MAAM,EAAE,eAAe,CAAC,MAAM;YAC9B,IAAI,EAAE,eAAe,CAAC,SAAS;SAClC,CAAC,CAAA;IACN,CAAC;IAED;;OAEG;IACO,cAAc,CAAC,KAAY,EAAE,KAAiB;QACpD,MAAM,OAAO,GAAG,KAAK,CAAC,WAAW;aAC5B,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC;aACtC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,OAAO,IAAI,aAAK,CACZ,UAAU,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,UACrC,KAAK,CAAC,IACV,QAAQ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,OAAO,KACtC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,EAC3C,EAAE,CACL,CAAA;IACL,CAAC;IAED;;OAEG;IACO,YAAY,CAClB,KAAY,EACZ,WAAgC;QAEhC,IAAI,SAAS,GAAG,iCAAe,CAAC,YAAY,CAAC,WAAW,CAAC;YACrD,CAAC,CAAC,WAAW,CAAC,IAAI;YAClB,CAAC,CAAC,WAAW,CAAA;QACjB,OAAO,IAAI,aAAK,CACZ,eAAe,SAAS,QAAQ,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,CAC3D,CAAA;IACL,CAAC;IAED;;OAEG;IACO,mBAAmB,CACzB,KAAY,EACZ,WAAqB,EACrB,cAAuB;QAEvB,MAAM,cAAc,GAAG,cAAc;YACjC,CAAC,CAAC,cAAc;YAChB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;QAEvE,MAAM,iBAAiB,GAAG,WAAW;aAChC,GAAG,CAAC,CAAC,UAAU,EAAE,EAAE,CAAC,IAAI,UAAU,GAAG,CAAC;aACtC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,OAAO,IAAI,aAAK,CACZ,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,oBAAoB,cAAc,kBAAkB,iBAAiB,GAAG,CAC5E,CAAA;IACL,CAAC;IAED;;OAEG;IACO,iBAAiB,CAAC,KAAY;QACpC,MAAM,WAAW,GAAG,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;QACrE,MAAM,cAAc,GAAG,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,wBAAwB,CAAA;QACvE,MAAM,cAAc,GAAG,cAAc;YACjC,CAAC,CAAC,cAAc;YAChB,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,cAAc,CAAC,KAAK,EAAE,WAAW,CAAC,CAAA;QAEvE,OAAO,IAAI,aAAK,CACZ,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,cAAc,GAAG,CAC1C,CAAA;IACL,CAAC;IAED;;OAEG;IACO,yBAAyB,CAC/B,KAAY,EACZ,gBAA6B;QAE7B,MAAM,WAAW,GAAG,gBAAgB,CAAC,WAAW;aAC3C,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC;aACnC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,OAAO,IAAI,aAAK,CACZ,eAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,oBACjC,gBAAgB,CAAC,IACrB,aAAa,WAAW,GAAG,CAC9B,CAAA;IACL,CAAC;IAED;;OAEG;IACO,uBAAuB,CAC7B,KAAY,EACZ,YAAkC;QAElC,MAAM,UAAU,GAAG,iCAAe,CAAC,aAAa,CAAC,YAAY,CAAC;YAC1D,CAAC,CAAC,YAAY,CAAC,IAAI;YACnB,CAAC,CAAC,YAAY,CAAA;QAClB,OAAO,IAAI,aAAK,CACZ,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,UAAU,GAAG,CACtC,CAAA;IACL,CAAC;IAED;;OAEG;IACO,wBAAwB,CAC9B,KAAY,EACZ,eAA2B;QAE3B,OAAO,IAAI,aAAK,CACZ,eAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,oBACjC,eAAe,CAAC,IACpB,YAAY,eAAe,CAAC,UAAU,GAAG,CAC5C,CAAA;IACL,CAAC;IAED;;OAEG;IACO,sBAAsB,CAC5B,KAAY,EACZ,WAAgC;QAEhC,MAAM,SAAS,GAAG,iCAAe,CAAC,YAAY,CAAC,WAAW,CAAC;YACvD,CAAC,CAAC,WAAW,CAAC,IAAI;YAClB,CAAC,CAAC,WAAW,CAAA;QACjB,OAAO,IAAI,aAAK,CACZ,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,SAAS,GAAG,CACrC,CAAA;IACL,CAAC;IAED;;OAEG;IACO,mBAAmB,CACzB,KAAY,EACZ,UAA2B;QAE3B,MAAM,WAAW,GAAG,UAAU,CAAC,WAAW;aACrC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC;aACnC,IAAI,CAAC,IAAI,CAAC,CAAA;QACf,MAAM,qBAAqB,GAAG,UAAU,CAAC,qBAAqB;aACzD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC;aACnC,IAAI,CAAC,GAAG,CAAC,CAAA;QACd,IAAI,GAAG,GACH,eAAe,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,oBACjC,UAAU,CAAC,IACf,kBAAkB,WAAW,IAAI;YACjC,cAAc,IAAI,CAAC,UAAU,CACzB,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAChC,IAAI,qBAAqB,GAAG,CAAA;QACjC,IAAI,UAAU,CAAC,QAAQ;YAAE,GAAG,IAAI,cAAc,UAAU,CAAC,QAAQ,EAAE,CAAA;QACnE,IAAI,UAAU,CAAC,QAAQ;YAAE,GAAG,IAAI,cAAc,UAAU,CAAC,QAAQ,EAAE,CAAA;QAEnE,OAAO,IAAI,aAAK,CAAC,GAAG,CAAC,CAAA;IACzB,CAAC;IAED;;OAEG;IACO,iBAAiB,CACvB,KAAY,EACZ,gBAA0C;QAE1C,MAAM,cAAc,GAAG,iCAAe,CAAC,iBAAiB,CACpD,gBAAgB,CACnB;YACG,CAAC,CAAC,gBAAgB,CAAC,IAAI;YACvB,CAAC,CAAC,gBAAgB,CAAA;QACtB,OAAO,IAAI,aAAK,CACZ,eAAe,IAAI,CAAC,UAAU,CAC1B,KAAK,CACR,qBAAqB,cAAc,GAAG,CAC1C,CAAA;IACL,CAAC;IAED;;OAEG;IACO,UAAU,CAAC,MAA6B;QAC9C,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,GACjC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,CAAA;QAEtC,IAAI,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC/C,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;gBAC/C,OAAO,IAAI,QAAQ,MAAM,MAAM,MAAM,SAAS,GAAG,CAAA;aACpD;YAED,OAAO,IAAI,QAAQ,OAAO,SAAS,GAAG,CAAA;SACzC;QAED,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YAC/C,OAAO,IAAI,MAAM,MAAM,SAAS,GAAG,CAAA;SACtC;QAED,OAAO,IAAI,SAAS,GAAG,CAAA;IAC3B,CAAC;IAED;;;OAGG;IACO,mBAAmB,CACzB,MAAc,EACd,UAA8B,EAC9B,MAA0B;QAE1B,IAAI,YAAY,GAAG,MAAM,CAAA;QACzB,IAAI,UAAU,IAAI,UAAU,KAAK,IAAI,CAAC,MAAM,CAAC,YAAY;YACrD,YAAY,GAAG,UAAU,GAAG,GAAG,GAAG,YAAY,CAAA;QAClD,IAAI,MAAM,IAAI,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC,QAAQ;YACzC,YAAY,GAAG,MAAM,GAAG,GAAG,GAAG,YAAY,CAAA;QAE9C,OAAO,YAAY,CAAA;IACvB,CAAC;IAED;;;;;;OAMG;IACO,4BAA4B,CAAC,YAAoB;QACvD,IAAI,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,GAAG;YAAE,OAAO,YAAY,CAAA;QAC1D,MAAM,iBAAiB,GAAG,YAAY,CAAC,MAAM,CACzC,CAAC,EACD,YAAY,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,CAAC,CACpC,CAAA;QACD,OAAO,IAAI,CAAC,4BAA4B,CAAC,iBAAiB,CAAC,CAAA;IAC/D,CAAC;IAED;;OAEG;IACO,oBAAoB,CAC1B,KAAY,EACZ,MAAmB,EACnB,YAAqB,EACrB,aAAsB,EACtB,QAAkB;QAElB,IAAI,CAAC,GAAG,IAAI,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,cAAc,CAC7D,MAAM,CACT,EAAE,CAAA;QAEH,IAAI,CAAC,QAAQ,IAAI,MAAM,CAAC,IAAI,EAAE;YAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAA;YACjD,MAAM,SAAS,GACX,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mBAAmB,CAC9C,KAAK,EACL,UAAU,EACV,IAAI,CACP,CAAA;YACL,CAAC,IAAI,eAAe,SAAS,UAAU,UAAU,GAAG,CAAA;SACvD;QAED,IAAI,MAAM,CAAC,SAAS;YAAE,CAAC,IAAI,WAAW,GAAG,MAAM,CAAC,SAAS,CAAA;QAEzD,IAAI,MAAM,CAAC,YAAY,EAAE;YACrB,CAAC,IAAI,QAAQ,MAAM,CAAC,YAAY,GAAG,CAAA;YACnC,IAAI,MAAM,CAAC,aAAa,KAAK,QAAQ,EAAE;gBACnC,CAAC,IAAI,YAAY,CAAA;gBAEjB,qFAAqF;gBACrF,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI;oBAAE,CAAC,IAAI,WAAW,CAAA;aACnD;SACJ;aAAM;YACH,IAAI,MAAM,CAAC,UAAU,KAAK,IAAI;gBAAE,CAAC,IAAI,WAAW,CAAA;SACnD;QAED,IACI,MAAM,CAAC,WAAW,KAAK,IAAI;YAC3B,MAAM,CAAC,kBAAkB,KAAK,WAAW;YACzC,CAAC,YAAY;YAEb,8FAA8F;YAC9F,CAAC,IAAI,gBAAgB,CAAA;QAEzB,IACI,MAAM,CAAC,OAAO,KAAK,SAAS;YAC5B,MAAM,CAAC,OAAO,KAAK,IAAI;YACvB,aAAa,EACf;YACE,2FAA2F;YAC3F,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,CAAC,IAAI,gBAAgB,WAAW,aAAa,MAAM,CAAC,OAAO,EAAE,CAAA;SAChE;QAED,IACI,MAAM,CAAC,WAAW;YAClB,MAAM,CAAC,kBAAkB,KAAK,MAAM;YACpC,CAAC,MAAM,CAAC,OAAO,EACjB;YACE,2FAA2F;YAC3F,MAAM,WAAW,GACb,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,qBAAqB,CAChD,KAAK,EACL,MAAM,CAAC,IAAI,CACd,CAAA;YACL,CAAC,IAAI,gBAAgB,WAAW,6BAA6B,CAAA;SAChE;QACD,OAAO,CAAC,CAAA;IACZ,CAAC;IAEO,iBAAiB,CAAC,MAAmB;QACzC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;YACd,MAAM,IAAI,KAAK,CAAC,iCAAiC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAA;SAClE;QACD,OAAO,CACH,MAAM,CAAC,IAAI;YACX,OAAO;YACP,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC;YACnD,GAAG,CACN,CAAA;IACL,CAAC;IAES,qBAAqB,CAAC,IAAY;QACxC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAA;IACtE,CAAC;IAED;;OAEG;IACO,+BAA+B,CAAC,SAAyB;;QAC/D,QAAQ,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,IAAW,EAAE,CAAC,EAAE;YAChE,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAA;YACnC,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACzD,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACzD,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAA;YACrC,KAAK,YAAY;gBACb,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAA;YACvC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA;YACjC,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAA;YACpC,KAAK,MAAM;gBACP,IACI,MAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,0CACrB,oCAAoC,EAC5C;oBACE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;iBACrD;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACvD,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACvD,KAAK,MAAM;gBACP,IACI,MAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,0CACrB,oCAAoC,EAC5C;oBACE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA;iBAChC;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,SAAS;gBACV,IACI,MAAA,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,0CACrB,oCAAoC,EAC5C;oBACE,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;iBACxD;gBACD,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC1D,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC1D,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YACtD,KAAK,MAAM;gBACP,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAA;YACjC,KAAK,UAAU;gBACX,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAA;YACrC,KAAK,WAAW;gBACZ,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC3D,KAAK,gBAAgB;gBACjB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,cAAc,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAChE,KAAK,eAAe;gBAChB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,aAAa,CAAA;YAC1C,KAAK,kBAAkB;gBACnB,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,gBAAgB,CAAA;YAC7C,KAAK,SAAS;gBACV,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAA;YACpC,KAAK,QAAQ;gBACT,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAA;YACnC,KAAK,WAAW;gBACZ,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,SAAS,CAAC,MAAM,CAAC,CAAA;YAC3D,KAAK,OAAO;gBACR,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAA;YAClC,KAAK,KAAK;gBACN,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAA;YAChC,KAAK,YAAY;gBACb,OAAO,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAA;SAC1C;IACL,CAAC;IAED;;;OAGG;IACH,qBAAqB,CAAC,SAAyB;QAC3C,MAAM,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAA;QACzD,QAAQ,SAAS,EAAE;YACf,KAAK,kBAAkB;gBACnB,OAAO,eAAe,CAAC,gBAAgB,CAAA;YAC3C,KAAK,iBAAiB;gBAClB,OAAO,eAAe,CAAC,eAAe,CAAA;YAC1C,KAAK,cAAc;gBACf,OAAO,eAAe,CAAC,YAAY,CAAA;YAEvC,KAAK,gBAAgB,CAAC;YACtB;gBACI,OAAO,eAAe,CAAC,cAAc,CAAA;SAC5C;IACL,CAAC;CACJ;AAjgID,oDAigIC","file":"SqlServerQueryRunner.js","sourcesContent":["import { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { QueryResult } from \"../../query-runner/QueryResult\"\nimport { QueryFailedError } from \"../../error/QueryFailedError\"\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\"\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\"\nimport { ColumnType } from \"../types/ColumnTypes\"\nimport { ReadStream } from \"../../platform/PlatformTools\"\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\"\nimport { QueryRunner } from \"../../query-runner/QueryRunner\"\nimport { TableIndexOptions } from \"../../schema-builder/options/TableIndexOptions\"\nimport { Table } from \"../../schema-builder/table/Table\"\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\"\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\"\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\"\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\"\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\"\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\"\nimport { View } from \"../../schema-builder/view/View\"\nimport { Broadcaster } from \"../../subscriber/Broadcaster\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { Query } from \"../Query\"\nimport { IsolationLevel } from \"../types/IsolationLevel\"\nimport { MssqlParameter } from \"./MssqlParameter\"\nimport { SqlServerDriver } from \"./SqlServerDriver\"\nimport { ReplicationMode } from \"../types/ReplicationMode\"\nimport { TypeORMError } from \"../../error\"\nimport { QueryLock } from \"../../query-runner/QueryLock\"\nimport { MetadataTableType } from \"../types/MetadataTableType\"\nimport { InstanceChecker } from \"../../util/InstanceChecker\"\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner\n    extends BaseQueryRunner\n    implements QueryRunner\n{\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    private lock: QueryLock = new QueryLock()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super()\n        this.driver = driver\n        this.connection = driver.connection\n        this.broadcaster = new Broadcaster(this)\n        this.mode = mode\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve()\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true\n        return Promise.resolve()\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        this.isTransactionActive = true\n        try {\n            await this.broadcaster.broadcast(\"BeforeTransactionStart\")\n        } catch (err) {\n            this.isTransactionActive = false\n            throw err\n        }\n        await new Promise<void>(async (ok, fail) => {\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false\n                    return fail(err)\n                }\n                ok()\n            }\n\n            if (this.transactionDepth === 0) {\n                const pool = await (this.mode === \"slave\"\n                    ? this.driver.obtainSlaveConnection()\n                    : this.driver.obtainMasterConnection())\n                this.databaseConnection = pool.transaction()\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\")\n                if (isolationLevel) {\n                    this.databaseConnection.begin(\n                        this.convertIsolationLevel(isolationLevel),\n                        transactionCallback,\n                    )\n                    this.connection.logger.logQuery(\n                        \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel,\n                    )\n                } else {\n                    this.databaseConnection.begin(transactionCallback)\n                }\n            } else {\n                await this.query(\n                    `SAVE TRANSACTION typeorm_${this.transactionDepth}`,\n                )\n                ok()\n            }\n            this.transactionDepth += 1\n        })\n\n        await this.broadcaster.broadcast(\"AfterTransactionStart\")\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionCommit\")\n\n        if (this.transactionDepth === 1) {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.commit(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionCommit\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"COMMIT\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n        this.transactionDepth -= 1\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        if (!this.isTransactionActive) throw new TransactionNotStartedError()\n\n        await this.broadcaster.broadcast(\"BeforeTransactionRollback\")\n\n        if (this.transactionDepth > 1) {\n            await this.query(\n                `ROLLBACK TRANSACTION typeorm_${this.transactionDepth - 1}`,\n            )\n            this.transactionDepth -= 1\n        } else {\n            return new Promise<void>((ok, fail) => {\n                this.databaseConnection.rollback(async (err: any) => {\n                    if (err) return fail(err)\n                    this.isTransactionActive = false\n                    this.databaseConnection = null\n\n                    await this.broadcaster.broadcast(\"AfterTransactionRollback\")\n\n                    ok()\n                    this.connection.logger.logQuery(\"ROLLBACK\")\n                    this.transactionDepth -= 1\n                })\n            })\n        }\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(\n        query: string,\n        parameters?: any[],\n        useStructuredResult = false,\n    ): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        try {\n            this.driver.connection.logger.logQuery(query, parameters, this)\n            const pool = await (this.mode === \"slave\"\n                ? this.driver.obtainSlaveConnection()\n                : this.driver.obtainMasterConnection())\n            const request = new this.driver.mssql.Request(\n                this.isTransactionActive ? this.databaseConnection : pool,\n            )\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    const parameterName = index.toString()\n                    if (InstanceChecker.isMssqlParameter(parameter)) {\n                        const mssqlParameter =\n                            this.mssqlParameterToNativeParameter(parameter)\n                        if (mssqlParameter) {\n                            request.input(\n                                parameterName,\n                                mssqlParameter,\n                                parameter.value,\n                            )\n                        } else {\n                            request.input(parameterName, parameter.value)\n                        }\n                    } else {\n                        request.input(parameterName, parameter)\n                    }\n                })\n            }\n            const queryStartTime = +new Date()\n\n            const raw = await new Promise<any>((ok, fail) => {\n                request.query(query, (err: any, raw: any) => {\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime =\n                        this.driver.options.maxQueryExecutionTime\n                    const queryEndTime = +new Date()\n                    const queryExecutionTime = queryEndTime - queryStartTime\n                    if (\n                        maxQueryExecutionTime &&\n                        queryExecutionTime > maxQueryExecutionTime\n                    ) {\n                        this.driver.connection.logger.logQuerySlow(\n                            queryExecutionTime,\n                            query,\n                            parameters,\n                            this,\n                        )\n                    }\n\n                    if (err) {\n                        fail(new QueryFailedError(query, parameters, err))\n                    }\n\n                    ok(raw)\n                })\n            })\n\n            const result = new QueryResult()\n\n            if (raw?.hasOwnProperty(\"recordset\")) {\n                result.records = raw.recordset\n            }\n\n            if (raw?.hasOwnProperty(\"rowsAffected\")) {\n                result.affected = raw.rowsAffected[0]\n            }\n\n            const queryType = query.slice(0, query.indexOf(\" \"))\n            switch (queryType) {\n                case \"DELETE\":\n                    // for DELETE query additionally return number of affected rows\n                    result.raw = [raw.recordset, raw.rowsAffected[0]]\n                    break\n                default:\n                    result.raw = raw.recordset\n            }\n\n            if (useStructuredResult) {\n                return result\n            } else {\n                return result.raw\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n            throw err\n        } finally {\n            release()\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function,\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError()\n\n        const release = await this.lock.acquire()\n\n        this.driver.connection.logger.logQuery(query, parameters, this)\n        const pool = await (this.mode === \"slave\"\n            ? this.driver.obtainSlaveConnection()\n            : this.driver.obtainMasterConnection())\n        const request = new this.driver.mssql.Request(\n            this.isTransactionActive ? this.databaseConnection : pool,\n        )\n        if (parameters && parameters.length) {\n            parameters.forEach((parameter, index) => {\n                const parameterName = index.toString()\n                if (InstanceChecker.isMssqlParameter(parameter)) {\n                    request.input(\n                        parameterName,\n                        this.mssqlParameterToNativeParameter(parameter),\n                        parameter.value,\n                    )\n                } else {\n                    request.input(parameterName, parameter)\n                }\n            })\n        }\n\n        request.query(query)\n\n        const streamRequest = request.toReadableStream()\n\n        streamRequest.on(\"error\", (err: any) => {\n            release()\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this,\n            )\n        })\n\n        streamRequest.on(\"end\", () => {\n            release()\n        })\n\n        if (onEnd) {\n            streamRequest.on(\"end\", onEnd)\n        }\n\n        if (onError) {\n            streamRequest.on(\"error\", onError)\n        }\n\n        return streamRequest\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`)\n        return results.map((result) => result[\"DATABASE_NAME\"])\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database\n            ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"`\n            : `SELECT * FROM \"sys\".\"schemas\"`\n        const results: ObjectLiteral[] = await this.query(query)\n        return results.map((result) => result[\"name\"])\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT DB_ID('${database}') as \"db_id\"`,\n        )\n        const dbId = result[0][\"db_id\"]\n        return !!dbId\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`)\n        return currentDBQuery[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(\n            `SELECT SCHEMA_ID('${schema}') as \"schema_id\"`,\n        )\n        const schemaId = result[0][\"schema_id\"]\n        return !!schemaId\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(\n            `SELECT SCHEMA_NAME() AS \"schema_name\"`,\n        )\n        return currentSchemaQuery[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string,\n    ): Promise<boolean> {\n        const parsedTableName = this.driver.parseTableName(tableOrName)\n\n        if (!parsedTableName.database) {\n            parsedTableName.database = await this.getCurrentDatabase()\n        }\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.tableName}' AND \"TABLE_SCHEMA\" = '${parsedTableName.schema}' AND \"COLUMN_NAME\" = '${columnName}'`\n        const result = await this.query(sql)\n        return result.length ? true : false\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const up = ifNotExist\n            ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"`\n            : `CREATE DATABASE \"${database}\"`\n        const down = `DROP DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist\n            ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"`\n            : `DROP DATABASE \"${database}\"`\n        const down = `CREATE DATABASE \"${database}\"`\n        await this.executeQueries(new Query(up), new Query(down))\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(\n        schemaPath: string,\n        ifNotExist?: boolean,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END`\n                : `CREATE SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifNotExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END`\n                : `CREATE SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END`\n                : `DROP SCHEMA \"${schemaPath}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`))\n        } else {\n            const dbName = schemaPath.split(\".\")[0]\n            const schema = schemaPath.split(\".\")[1]\n            const currentDB = await this.getCurrentDatabase()\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n\n            const upQuery = ifExist\n                ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END`\n                : `DROP SCHEMA \"${schema}\"`\n            upQueries.push(new Query(upQuery))\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`))\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true,\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table)\n            if (isTableExist) return Promise.resolve()\n        }\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(this.createTableSql(table, createForeignKeys))\n        downQueries.push(this.dropTableSql(table))\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table,\n                        index.columnNames,\n                        index.where,\n                    )\n                upQueries.push(this.createIndexSql(table, index))\n                downQueries.push(this.dropIndexSql(table, index))\n            })\n        }\n\n        // if table have column with generated type, we must add the expression to the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true,\n    ): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName)\n            if (!isTableExist) return Promise.resolve()\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(table, index))\n                downQueries.push(this.createIndexSql(table, index))\n            })\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey)),\n            )\n\n        upQueries.push(this.dropTableSql(table))\n        downQueries.push(this.createTableSql(table, createForeignKeys))\n\n        // if table had columns with generated type, we must remove the expression from the metadata table\n        const generatedColumns = table.columns.filter(\n            (column) => column.generatedType && column.asExpression,\n        )\n\n        for (const column of generatedColumns) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(\n        view: View,\n        syncWithMetadata: boolean = false,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(this.createViewSql(view))\n        if (syncWithMetadata)\n            upQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.dropViewSql(view))\n        if (syncWithMetadata)\n            downQueries.push(await this.deleteViewDefinitionSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = InstanceChecker.isView(target) ? target.name : target\n        const view = await this.getCachedView(viewName)\n\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        upQueries.push(await this.deleteViewDefinitionSql(view))\n        upQueries.push(this.dropViewSql(view))\n        downQueries.push(await this.insertViewDefinitionSql(view))\n        downQueries.push(this.createViewSql(view))\n        await this.executeQueries(upQueries, downQueries)\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableName: string,\n    ): Promise<void> {\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n        const oldTable = InstanceChecker.isTable(oldTableOrName)\n            ? oldTableOrName\n            : await this.getCachedTable(oldTableOrName)\n        let newTable = oldTable.clone()\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string | undefined = undefined\n        let schemaName: string | undefined = undefined\n        let oldTableName: string = oldTable.name\n        const splittedName = oldTable.name.split(\".\")\n        if (splittedName.length === 3) {\n            dbName = splittedName[0]\n            oldTableName = splittedName[2]\n            if (splittedName[1] !== \"\") schemaName = splittedName[1]\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0]\n            oldTableName = splittedName[1]\n        }\n\n        newTable.name = this.driver.buildTableName(\n            newTableName,\n            schemaName,\n            dbName,\n        )\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase()\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`))\n            downQueries.push(new Query(`USE \"${currentDB}\"`))\n        }\n\n        // rename table\n        upQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    oldTable,\n                )}\", \"${newTableName}\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `EXEC sp_rename \"${this.getTablePath(\n                    newTable,\n                )}\", \"${oldTableName}\"`,\n            ),\n        )\n\n        // rename primary key constraint\n        if (\n            newTable.primaryColumns.length > 0 &&\n            !newTable.primaryColumns[0].primaryKeyConstraintName\n        ) {\n            const columnNames = newTable.primaryColumns.map(\n                (column) => column.name,\n            )\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                oldTable,\n                columnNames,\n            )\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\n                newTable,\n                columnNames,\n            )\n\n            // rename primary constraint\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${oldPkName}\", \"${newPkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newPkName}\", \"${oldPkName}\"`,\n                ),\n            )\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            const oldUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    oldTable,\n                    unique.columnNames,\n                )\n\n            // Skip renaming if Unique has user defined constraint name\n            if (unique.name !== oldUniqueName) return\n\n            // build new constraint name\n            const newUniqueName =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    newTable,\n                    unique.columnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        unique.name\n                    }\", \"${newUniqueName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newUniqueName}\", \"${unique.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            unique.name = newUniqueName\n        })\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            const oldIndexName = this.connection.namingStrategy.indexName(\n                oldTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // Skip renaming if Index has user defined constraint name\n            if (index.name !== oldIndexName) return\n\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where,\n            )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(newTable)}.${\n                        index.name\n                    }\", \"${newIndexName}\", \"INDEX\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.getTablePath(\n                        newTable,\n                    )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                ),\n            )\n\n            // replace constraint name\n            index.name = newIndexName\n        })\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            const oldForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    oldTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // Skip renaming if foreign key has user defined constraint name\n            if (foreignKey.name !== oldForeignKeyName) return\n\n            // build new constraint name\n            const newForeignKeyName =\n                this.connection.namingStrategy.foreignKeyName(\n                    newTable,\n                    foreignKey.columnNames,\n                    this.getTablePath(foreignKey),\n                    foreignKey.referencedColumnNames,\n                )\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        foreignKey.name!,\n                        schemaName,\n                        dbName,\n                    )}\", \"${newForeignKeyName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `EXEC sp_rename \"${this.buildForeignKeyName(\n                        newForeignKeyName,\n                        schemaName,\n                        dbName,\n                    )}\", \"${foreignKey.name}\"`,\n                ),\n            )\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName\n        })\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`))\n            downQueries.push(new Query(`USE \"${dbName}\"`))\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name\n        this.replaceCachedTable(oldTable, newTable)\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    true,\n                )}`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = primaryColumns[0].primaryKeyConstraintName\n                    ? primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          primaryColumns.map((column) => column.name),\n                      )\n\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \")\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n            }\n\n            primaryColumns.push(column)\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex))\n            downQueries.push(this.dropIndexSql(table, columnIndex))\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    [column.name],\n                ),\n                columnNames: [column.name],\n            })\n            clonedTable.uniques.push(uniqueConstraint)\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\" UNIQUE (\"${column.name}\")`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${\n                        uniqueConstraint.name\n                    }\"`,\n                ),\n            )\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n\n            upQueries.push(insertQuery)\n            downQueries.push(deleteQuery)\n        }\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.addColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find((c) => c.name === oldTableColumnOrName)\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        let newColumn: TableColumn | undefined = undefined\n        if (InstanceChecker.isTableColumn(newTableColumnOrName)) {\n            newColumn = newTableColumnOrName\n        } else {\n            newColumn = oldColumn.clone()\n            newColumn.name = newTableColumnOrName\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn)\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        let clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        const oldColumn = InstanceChecker.isTableColumn(oldTableColumnOrName)\n            ? oldTableColumnOrName\n            : table.columns.find(\n                  (column) => column.name === oldTableColumnOrName,\n              )\n        if (!oldColumn)\n            throw new TypeORMError(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`,\n            )\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            newColumn.type !== oldColumn.type ||\n            newColumn.length !== oldColumn.length ||\n            newColumn.asExpression !== oldColumn.asExpression ||\n            newColumn.generatedType !== oldColumn.generatedType\n        ) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn)\n            await this.addColumn(table, newColumn)\n\n            // update cloned table\n            clonedTable = table.clone()\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // we need database name and schema name to rename FK constraints\n                let dbName: string | undefined = undefined\n                let schemaName: string | undefined = undefined\n                const splittedName = table.name.split(\".\")\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0]\n                    if (splittedName[1] !== \"\") schemaName = splittedName[1]\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0]\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase()\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`))\n                    downQueries.push(new Query(`USE \"${currentDB}\"`))\n                }\n\n                // rename the column\n                upQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            oldColumn.name\n                        }\", \"${newColumn.name}\"`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `EXEC sp_rename \"${this.getTablePath(table)}.${\n                            newColumn.name\n                        }\", \"${oldColumn.name}\"`,\n                    ),\n                )\n\n                // rename column primary key constraint\n                if (\n                    oldColumn.isPrimary === true &&\n                    !oldColumn.primaryKeyConstraintName\n                ) {\n                    const primaryColumns = clonedTable.primaryColumns\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(\n                        (column) => column.name,\n                    )\n                    const oldPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1)\n                    columnNames.push(newColumn.name)\n\n                    // build new primary constraint name\n                    const newPkName =\n                        this.connection.namingStrategy.primaryKeyName(\n                            clonedTable,\n                            columnNames,\n                        )\n\n                    // rename primary constraint\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${oldPkName}\", \"${newPkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newPkName}\", \"${oldPkName}\"`,\n                        ),\n                    )\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    const oldIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // Skip renaming if Index has user defined constraint name\n                    if (index.name !== oldIndexName) return\n\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    index.columnNames.push(newColumn.name)\n                    const newIndexName =\n                        this.connection.namingStrategy.indexName(\n                            clonedTable,\n                            index.columnNames,\n                            index.where,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${index.name}\", \"${newIndexName}\", \"INDEX\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newIndexName}\", \"${index.name}\", \"INDEX\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    index.name = newIndexName\n                })\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        const foreignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // Skip renaming if foreign key has user defined constraint name\n                        if (foreignKey.name !== foreignKeyName) return\n\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1,\n                        )\n                        foreignKey.columnNames.push(newColumn.name)\n                        const newForeignKeyName =\n                            this.connection.namingStrategy.foreignKeyName(\n                                clonedTable,\n                                foreignKey.columnNames,\n                                this.getTablePath(foreignKey),\n                                foreignKey.referencedColumnNames,\n                            )\n\n                        // build queries\n                        upQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    foreignKey.name!,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${newForeignKeyName}\"`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `EXEC sp_rename \"${this.buildForeignKeyName(\n                                    newForeignKeyName,\n                                    schemaName,\n                                    dbName,\n                                )}\", \"${foreignKey.name}\"`,\n                            ),\n                        )\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName\n                    })\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach((check) => {\n                    // build new constraint name\n                    check.columnNames!.splice(\n                        check.columnNames!.indexOf(oldColumn.name),\n                        1,\n                    )\n                    check.columnNames!.push(newColumn.name)\n                    const newCheckName =\n                        this.connection.namingStrategy.checkConstraintName(\n                            clonedTable,\n                            check.expression!,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${check.name}\", \"${newCheckName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newCheckName}\", \"${check.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    check.name = newCheckName\n                })\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    const oldUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // Skip renaming if Unique has user defined constraint name\n                    if (unique.name !== oldUniqueName) return\n\n                    // build new constraint name\n                    unique.columnNames.splice(\n                        unique.columnNames.indexOf(oldColumn.name),\n                        1,\n                    )\n                    unique.columnNames.push(newColumn.name)\n                    const newUniqueName =\n                        this.connection.namingStrategy.uniqueConstraintName(\n                            clonedTable,\n                            unique.columnNames,\n                        )\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${unique.name}\", \"${newUniqueName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `EXEC sp_rename \"${this.getTablePath(\n                                clonedTable,\n                            )}.${newUniqueName}\", \"${unique.name}\"`,\n                        ),\n                    )\n\n                    // replace constraint name\n                    unique.name = newUniqueName\n                })\n\n                // rename default constraints\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const oldDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    const newDefaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${oldDefaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${newDefaultName}\"`,\n                        ),\n                    )\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`))\n                    downQueries.push(new Query(`USE \"${dbName}\"`))\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name,\n                )\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name\n                oldColumn.name = newColumn.name\n            }\n\n            if (\n                this.isColumnChanged(oldColumn, newColumn, false, false, false)\n            ) {\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            newColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            table,\n                        )} ALTER COLUMN ${this.buildCreateColumnSql(\n                            table,\n                            oldColumn,\n                            true,\n                            false,\n                            true,\n                        )}`,\n                    ),\n                )\n            }\n\n            if (this.isEnumChanged(oldColumn, newColumn)) {\n                const oldExpression = this.getEnumExpression(oldColumn)\n                const oldCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        oldExpression,\n                        true,\n                    ),\n                    expression: oldExpression,\n                })\n\n                const newExpression = this.getEnumExpression(newColumn)\n                const newCheck = new TableCheck({\n                    name: this.connection.namingStrategy.checkConstraintName(\n                        table,\n                        newExpression,\n                        true,\n                    ),\n                    expression: newExpression,\n                })\n\n                upQueries.push(this.dropCheckConstraintSql(table, oldCheck))\n                upQueries.push(this.createCheckConstraintSql(table, newCheck))\n\n                downQueries.push(this.dropCheckConstraintSql(table, newCheck))\n                downQueries.push(this.createCheckConstraintSql(table, oldCheck))\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn)\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = true\n                    const pkName = primaryColumns[0].primaryKeyConstraintName\n                        ? primaryColumns[0].primaryKeyConstraintName\n                        : this.connection.namingStrategy.primaryKeyName(\n                              clonedTable,\n                              primaryColumns.map((column) => column.name),\n                          )\n\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \")\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${pkName}\"`,\n                        ),\n                    )\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name,\n                    )\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1,\n                    )\n\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name,\n                    )\n                    column!.isPrimary = false\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = primaryColumns[0]\n                            .primaryKeyConstraintName\n                            ? primaryColumns[0].primaryKeyConstraintName\n                            : this.connection.namingStrategy.primaryKeyName(\n                                  clonedTable,\n                                  primaryColumns.map((column) => column.name),\n                              )\n\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \")\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                            ),\n                        )\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE ${this.escapePath(\n                                    table,\n                                )} DROP CONSTRAINT \"${pkName}\"`,\n                            ),\n                        )\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(\n                            table,\n                            [newColumn.name],\n                        ),\n                        columnNames: [newColumn.name],\n                    })\n                    clonedTable.uniques.push(uniqueConstraint)\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint.name}\"`,\n                        ),\n                    )\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(\n                        (unique) => {\n                            return (\n                                unique.columnNames.length === 1 &&\n                                !!unique.columnNames.find(\n                                    (columnName) =>\n                                        columnName === newColumn.name,\n                                )\n                            )\n                        },\n                    )\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\n                        1,\n                    )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\" UNIQUE (\"${newColumn.name}\")`,\n                        ),\n                    )\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            oldColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                oldColumn.default\n                            } FOR \"${oldColumn.name}\"`,\n                        ),\n                    )\n                }\n\n                if (\n                    newColumn.default !== null &&\n                    newColumn.default !== undefined\n                ) {\n                    const defaultName =\n                        this.connection.namingStrategy.defaultConstraintName(\n                            table,\n                            newColumn.name,\n                        )\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                                newColumn.default\n                            } FOR \"${newColumn.name}\"`,\n                        ),\n                    )\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE ${this.escapePath(\n                                table,\n                            )} DROP CONSTRAINT \"${defaultName}\"`,\n                        ),\n                    )\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries)\n            this.replaceCachedTable(table, clonedTable)\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[],\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const column = InstanceChecker.isTableColumn(columnOrName)\n            ? columnOrName\n            : table.findColumnByName(columnOrName)\n        if (!column)\n            throw new TypeORMError(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`,\n            )\n\n        const clonedTable = table.clone()\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = column.primaryKeyConstraintName\n                ? column.primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      clonedTable.primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        clonedTable,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                ),\n            )\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name)\n            tableColumn!.isPrimary = false\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = clonedTable.primaryColumns[0]\n                    .primaryKeyConstraintName\n                    ? clonedTable.primaryColumns[0].primaryKeyConstraintName\n                    : this.connection.namingStrategy.primaryKeyName(\n                          clonedTable,\n                          clonedTable.primaryColumns.map(\n                              (column) => column.name,\n                          ),\n                      )\n\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \")\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`,\n                    ),\n                )\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE ${this.escapePath(\n                            clonedTable,\n                        )} DROP CONSTRAINT \"${pkName}\"`,\n                    ),\n                )\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name,\n        )\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1,\n            )\n            upQueries.push(this.dropIndexSql(table, columnIndex))\n            downQueries.push(this.createIndexSql(table, columnIndex))\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name,\n        )\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1,\n            )\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck))\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck))\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(\n            (unique) =>\n                unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name,\n        )\n        if (columnUnique) {\n            clonedTable.uniques.splice(\n                clonedTable.uniques.indexOf(columnUnique),\n                1,\n            )\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique))\n            downQueries.push(\n                this.createUniqueConstraintSql(table, columnUnique),\n            )\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${defaultName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${\n                        column.default\n                    } FOR \"${column.name}\"`,\n                ),\n            )\n        }\n\n        if (column.generatedType && column.asExpression) {\n            const parsedTableName = this.driver.parseTableName(table)\n\n            if (!parsedTableName.schema) {\n                parsedTableName.schema = await this.getCurrentSchema()\n            }\n\n            const deleteQuery = this.deleteTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n            })\n            const insertQuery = this.insertTypeormMetadataSql({\n                database: parsedTableName.database,\n                schema: parsedTableName.schema,\n                table: parsedTableName.tableName,\n                type: MetadataTableType.GENERATED_COLUMN,\n                name: column.name,\n                value: column.asExpression,\n            })\n\n            upQueries.push(deleteQuery)\n            downQueries.push(insertQuery)\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${\n                    column.name\n                }\"`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD ${this.buildCreateColumnSql(\n                    table,\n                    column,\n                    false,\n                    false,\n                )}`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n\n        clonedTable.removeColumn(column)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[] | string[],\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column)\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[],\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n\n        const up = this.createPrimaryKeySql(table, columnNames, constraintName)\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true\n        })\n        const down = this.dropPrimaryKeySql(clonedTable)\n\n        await this.executeQueries(up, down)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[],\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const clonedTable = table.clone()\n        const columnNames = columns.map((column) => column.name)\n        const upQueries: Query[] = []\n        const downQueries: Query[] = []\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns\n        if (primaryColumns.length > 0) {\n            const pkName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      clonedTable,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} DROP CONSTRAINT \"${pkName}\"`,\n                ),\n            )\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE ${this.escapePath(\n                        table,\n                    )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n                ),\n            )\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true))\n\n        const pkName = primaryColumns[0].primaryKeyConstraintName\n            ? primaryColumns[0].primaryKeyConstraintName\n            : this.connection.namingStrategy.primaryKeyName(\n                  clonedTable,\n                  columnNames,\n              )\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`,\n            ),\n        )\n        downQueries.push(\n            new Query(\n                `ALTER TABLE ${this.escapePath(\n                    table,\n                )} DROP CONSTRAINT \"${pkName}\"`,\n            ),\n        )\n\n        await this.executeQueries(upQueries, downQueries)\n        this.replaceCachedTable(table, clonedTable)\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(\n        tableOrName: Table | string,\n        constraintName?: string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const up = this.dropPrimaryKeySql(table)\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name),\n            constraintName,\n        )\n        await this.executeQueries(up, down)\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false\n        })\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name =\n                this.connection.namingStrategy.uniqueConstraintName(\n                    table,\n                    uniqueConstraint.columnNames,\n                )\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.addUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.createUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const uniqueConstraint = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName\n            : table.uniques.find((u) => u.name === uniqueOrName)\n        if (!uniqueConstraint)\n            throw new TypeORMError(\n                `Supplied unique constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint)\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint)\n        await this.executeQueries(up, down)\n        table.removeUniqueConstraint(uniqueConstraint)\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[],\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    checkConstraint.expression!,\n                )\n\n        const up = this.createCheckConstraintSql(table, checkConstraint)\n        const down = this.dropCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.addCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const checkConstraint = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName\n            : table.checks.find((c) => c.name === checkOrName)\n        if (!checkConstraint)\n            throw new TypeORMError(\n                `Supplied check constraint was not found in table ${table.name}`,\n            )\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint)\n        const down = this.createCheckConstraintSql(table, checkConstraint)\n        await this.executeQueries(up, down)\n        table.removeCheckConstraint(checkConstraint)\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[],\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string,\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[],\n    ): Promise<void> {\n        throw new TypeORMError(\n            `SqlServer does not support exclusion constraints.`,\n        )\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const metadata = this.connection.hasMetadata(table.name)\n            ? this.connection.getMetadata(table.name)\n            : undefined\n\n        if (\n            metadata &&\n            metadata.treeParentRelation &&\n            metadata.treeParentRelation!.isTreeParent &&\n            metadata.foreignKeys.find(\n                (foreignKey) => foreignKey.onDelete !== \"NO ACTION\",\n            )\n        )\n            throw new TypeORMError(\n                \"SqlServer does not support options in TreeParent.\",\n            )\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table,\n                foreignKey.columnNames,\n                this.getTablePath(foreignKey),\n                foreignKey.referencedColumnNames,\n            )\n\n        const up = this.createForeignKeySql(table, foreignKey)\n        const down = this.dropForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.addForeignKey(foreignKey)\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const foreignKey = InstanceChecker.isTableForeignKey(foreignKeyOrName)\n            ? foreignKeyOrName\n            : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName)\n        if (!foreignKey)\n            throw new TypeORMError(\n                `Supplied foreign key was not found in table ${table.name}`,\n            )\n\n        const up = this.dropForeignKeySql(table, foreignKey)\n        const down = this.createForeignKeySql(table, foreignKey)\n        await this.executeQueries(up, down)\n        table.removeForeignKey(foreignKey)\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[],\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.createIndexSql(table, index)\n        const down = this.dropIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.addIndex(index)\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string,\n    ): Promise<void> {\n        const table = InstanceChecker.isTable(tableOrName)\n            ? tableOrName\n            : await this.getCachedTable(tableOrName)\n        const index = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName\n            : table.indices.find((i) => i.name === indexOrName)\n        if (!index)\n            throw new TypeORMError(\n                `Supplied index was not found in table ${table.name}`,\n            )\n\n        // old index may be passed without name. In this case we generate index name manually.\n        if (!index.name) index.name = this.generateIndexName(table, index)\n\n        const up = this.dropIndexSql(table, index)\n        const down = this.createIndexSql(table, index)\n        await this.executeQueries(up, down)\n        table.removeIndex(index)\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[],\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index),\n        )\n        await Promise.all(promises)\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`)\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database)\n            if (!isDatabaseExist) return Promise.resolve()\n        }\n\n        const isAnotherTransactionActive = this.isTransactionActive\n        if (!isAnotherTransactionActive) await this.startTransaction()\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`\n            const allViewsResults: ObjectLiteral[] = await this.query(\n                allViewsSql,\n            )\n\n            await Promise.all(\n                allViewsResults.map((viewResult) => {\n                    // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                    const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`\n                    return this.query(dropTableSql)\n                }),\n            )\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n            const allTablesResults: ObjectLiteral[] = await this.query(\n                allTablesSql,\n            )\n\n            if (allTablesResults.length > 0) {\n                const tablesByCatalog: {\n                    [key: string]: {\n                        TABLE_NAME: string\n                        TABLE_SCHEMA: string\n                    }[]\n                } = allTablesResults.reduce(\n                    (c, { TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME }) => {\n                        c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                        c[TABLE_CATALOG].push({ TABLE_SCHEMA, TABLE_NAME })\n                        return c\n                    },\n                    {},\n                )\n\n                const foreignKeysSql = Object.entries(tablesByCatalog)\n                    .map(([TABLE_CATALOG, tables]) => {\n                        const conditions = tables\n                            .map(({ TABLE_SCHEMA, TABLE_NAME }) => {\n                                return `(\"fk\".\"referenced_object_id\" = OBJECT_ID('\"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\"'))`\n                            })\n                            .join(\" OR \")\n\n                        return `\n                        SELECT DISTINCT '${TABLE_CATALOG}' AS                                              \"TABLE_CATALOG\",\n                                        OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\",\n                                                           DB_ID('${TABLE_CATALOG}')) AS                   \"TABLE_SCHEMA\",\n                                        OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${TABLE_CATALOG}')) AS \"TABLE_NAME\",\n                                        \"fk\".\"name\" AS                                                     \"CONSTRAINT_NAME\"\n                        FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" AS \"fk\"\n                        WHERE (${conditions})\n                    `\n                    })\n                    .join(\" UNION ALL \")\n\n                const foreignKeys: {\n                    TABLE_CATALOG: string\n                    TABLE_SCHEMA: string\n                    TABLE_NAME: string\n                    CONSTRAINT_NAME: string\n                }[] = await this.query(foreignKeysSql)\n\n                await Promise.all(\n                    foreignKeys.map(\n                        async ({\n                            TABLE_CATALOG,\n                            TABLE_SCHEMA,\n                            TABLE_NAME,\n                            CONSTRAINT_NAME,\n                        }) => {\n                            // Disable the constraint first.\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `NOCHECK CONSTRAINT \"${CONSTRAINT_NAME}\"`,\n                            )\n\n                            await this.query(\n                                `ALTER TABLE \"${TABLE_CATALOG}\".\"${TABLE_SCHEMA}\".\"${TABLE_NAME}\" ` +\n                                    `DROP CONSTRAINT \"${CONSTRAINT_NAME}\" -- FROM CLEAR`,\n                            )\n                        },\n                    ),\n                )\n\n                await Promise.all(\n                    allTablesResults.map((tablesResult) => {\n                        if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                            // don't try to drop temporary tables\n                            return\n                        }\n\n                        const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`\n                        return this.query(dropTableSql)\n                    }),\n                )\n            }\n\n            if (!isAnotherTransactionActive) await this.commitTransaction()\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                if (!isAnotherTransactionActive)\n                    await this.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw error\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewPaths?: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName())\n        if (!hasTable) {\n            return []\n        }\n\n        if (!viewPaths) {\n            viewPaths = []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbNames = viewPaths\n            .map((viewPath) => this.driver.parseTableName(viewPath).database)\n            .filter((database) => database)\n\n        if (\n            this.driver.database &&\n            !dbNames.find((dbName) => dbName === this.driver.database)\n        )\n            dbNames.push(this.driver.database)\n\n        const viewsCondition = viewPaths\n            .map((viewPath) => {\n                let { schema, tableName: name } =\n                    this.driver.parseTableName(viewPath)\n\n                if (!schema) {\n                    schema = currentSchema\n                }\n                return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`\n            })\n            .join(\" OR \")\n\n        const query = dbNames\n            .map((dbName) => {\n                return (\n                    `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(\n                        this.getTypeormMetadataTableName(),\n                    )} \"t\" ` +\n                    `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = '${\n                        MetadataTableType.VIEW\n                    }' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbViews = await this.query(query)\n        return dbViews.map((dbView: any) => {\n            const view = new View()\n            const db =\n                dbView[\"TABLE_CATALOG\"] === currentDatabase\n                    ? undefined\n                    : dbView[\"TABLE_CATALOG\"]\n            const schema =\n                dbView[\"schema\"] === currentSchema &&\n                !this.driver.options.schema\n                    ? undefined\n                    : dbView[\"schema\"]\n            view.database = dbView[\"TABLE_CATALOG\"]\n            view.schema = dbView[\"schema\"]\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db)\n            view.expression = dbView[\"value\"]\n            return view\n        })\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames?: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (tableNames && tableNames.length === 0) {\n            return []\n        }\n\n        const currentSchema = await this.getCurrentSchema()\n        const currentDatabase = await this.getCurrentDatabase()\n\n        const dbTables: {\n            TABLE_CATALOG: string\n            TABLE_SCHEMA: string\n            TABLE_NAME: string\n        }[] = []\n\n        if (!tableNames) {\n            const databasesSql =\n                `SELECT DISTINCT \"name\" ` +\n                `FROM \"master\".\"dbo\".\"sysdatabases\" ` +\n                `WHERE \"name\" NOT IN ('master', 'model', 'msdb')`\n            const dbDatabases: { name: string }[] = await this.query(\n                databasesSql,\n            )\n\n            const tablesSql = dbDatabases\n                .map(({ name }) => {\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${name}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                      \"TABLE_TYPE\" = 'BASE TABLE'\n                      AND\n                      \"TABLE_CATALOG\" = '${name}'\n                      AND\n                      ISNULL(Objectproperty(Object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), 'IsMSShipped'), 0) = 0\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        } else {\n            const tableNamesByCatalog = tableNames\n                .map((tableName) => this.driver.parseTableName(tableName))\n                .reduce((c, { database, ...other }) => {\n                    database = database || currentDatabase\n                    c[database] = c[database] || []\n                    c[database].push({\n                        schema: other.schema || currentSchema,\n                        tableName: other.tableName,\n                    })\n                    return c\n                }, {} as { [key: string]: { schema: string; tableName: string }[] })\n\n            const tablesSql = Object.entries(tableNamesByCatalog)\n                .map(([database, tables]) => {\n                    const tablesCondition = tables\n                        .map(({ schema, tableName }) => {\n                            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${tableName}')`\n                        })\n                        .join(\" OR \")\n\n                    return `\n                    SELECT DISTINCT\n                        \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"TABLE_NAME\"\n                    FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\"\n                    WHERE\n                          \"TABLE_TYPE\" = 'BASE TABLE' AND\n                          \"TABLE_CATALOG\" = '${database}' AND\n                          ${tablesCondition}\n                `\n                })\n                .join(\" UNION ALL \")\n\n            dbTables.push(...(await this.query(tablesSql)))\n        }\n\n        // if tables were not found in the db, no need to proceed\n        if (dbTables.length === 0) {\n            return []\n        }\n\n        const dbTablesByCatalog = dbTables.reduce(\n            (c, { TABLE_CATALOG, ...other }) => {\n                c[TABLE_CATALOG] = c[TABLE_CATALOG] || []\n                c[TABLE_CATALOG].push(other)\n                return c\n            },\n            {} as {\n                [key: string]: { TABLE_NAME: string; TABLE_SCHEMA: string }[]\n            },\n        )\n\n        const columnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const condition = tables\n                    .map(\n                        ({ TABLE_SCHEMA, TABLE_NAME }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\"OR\")\n\n                return (\n                    `SELECT \"COLUMNS\".*, \"cc\".\"is_persisted\", \"cc\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `LEFT JOIN \"sys\".\"computed_columns\" \"cc\" ON COL_NAME(\"cc\".\"object_id\", \"cc\".\"column_id\") = \"column_name\" ` +\n                    `WHERE (${condition})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const constraintsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"columnUsages\".\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"columnUsages\".\"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ` +\n                    `ON ` +\n                    `\"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" AND ` +\n                    `\"tableConstraints\".\"TABLE_SCHEMA\" = \"columnUsages\".\"TABLE_SCHEMA\" AND ` +\n                    `\"tableConstraints\".\"TABLE_NAME\" = \"columnUsages\".\"TABLE_NAME\" ` +\n                    `LEFT JOIN \"${TABLE_CATALOG}\".\"sys\".\"check_constraints\" \"chk\" ` +\n                    `ON ` +\n                    `\"chk\".\"object_id\" = OBJECT_ID(\"columnUsages\".\"TABLE_CATALOG\" + '.' + \"columnUsages\".\"TABLE_SCHEMA\" + '.' + \"columnUsages\".\"CONSTRAINT_NAME\") ` +\n                    `WHERE ` +\n                    `(${conditions}) AND ` +\n                    `\"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const foreignKeysSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s1\".\"name\" = '${TABLE_SCHEMA}' AND \"t1\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                    `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                    `WHERE (${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const identityColumnsSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"TABLE_SCHEMA\" = '${TABLE_SCHEMA}' AND \"TABLE_NAME\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                    `WHERE ` +\n                    `EXISTS(SELECT 1 FROM \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"S\" WHERE OBJECT_ID(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\") = \"S\".\"OBJECT_ID\" AND \"COLUMN_NAME\" = \"S\".\"NAME\" AND \"S\".\"is_identity\" = 1) AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`\n\n        const indicesSql = Object.entries(dbTablesByCatalog)\n            .map(([TABLE_CATALOG, tables]) => {\n                const conditions = tables\n                    .map(\n                        ({ TABLE_NAME, TABLE_SCHEMA }) =>\n                            `(\"s\".\"name\" = '${TABLE_SCHEMA}' AND \"t\".\"name\" = '${TABLE_NAME}')`,\n                    )\n                    .join(\" OR \")\n\n                return (\n                    `SELECT '${TABLE_CATALOG}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                    `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                    `FROM \"${TABLE_CATALOG}\".\"sys\".\"indexes\" \"ind\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                    `INNER JOIN \"${TABLE_CATALOG}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                    `WHERE ` +\n                    `\"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0 AND ` +\n                    `(${conditions})`\n                )\n            })\n            .join(\" UNION ALL \")\n\n        const [\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ])\n\n        // create table schemas for loaded tables\n        return await Promise.all(\n            dbTables.map(async (dbTable) => {\n                const table = new Table()\n\n                const getSchemaFromKey = (dbObject: any, key: string) => {\n                    return dbObject[key] === currentSchema &&\n                        (!this.driver.options.schema ||\n                            this.driver.options.schema === currentSchema)\n                        ? undefined\n                        : dbObject[key]\n                }\n\n                // We do not need to join schema and database names, when db or schema is by default.\n                const db =\n                    dbTable[\"TABLE_CATALOG\"] === currentDatabase\n                        ? undefined\n                        : dbTable[\"TABLE_CATALOG\"]\n                const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\")\n                table.database = dbTable[\"TABLE_CATALOG\"]\n                table.schema = dbTable[\"TABLE_SCHEMA\"]\n                table.name = this.driver.buildTableName(\n                    dbTable[\"TABLE_NAME\"],\n                    schema,\n                    db,\n                )\n\n                const defaultCollation = dbCollations.find(\n                    (dbCollation) =>\n                        dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"],\n                )!\n\n                // create columns from the loaded columns\n                table.columns = await Promise.all(\n                    dbColumns\n                        .filter(\n                            (dbColumn) =>\n                                dbColumn[\"TABLE_NAME\"] ===\n                                    dbTable[\"TABLE_NAME\"] &&\n                                dbColumn[\"TABLE_SCHEMA\"] ===\n                                    dbTable[\"TABLE_SCHEMA\"] &&\n                                dbColumn[\"TABLE_CATALOG\"] ===\n                                    dbTable[\"TABLE_CATALOG\"],\n                        )\n                        .map(async (dbColumn) => {\n                            const columnConstraints = dbConstraints.filter(\n                                (dbConstraint) =>\n                                    dbConstraint[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    dbConstraint[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    dbConstraint[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    dbConstraint[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const uniqueConstraints = columnConstraints.filter(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                            )\n                            const isConstraintComposite =\n                                uniqueConstraints.every((uniqueConstraint) => {\n                                    return dbConstraints.some(\n                                        (dbConstraint) =>\n                                            dbConstraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"UNIQUE\" &&\n                                            dbConstraint[\"CONSTRAINT_NAME\"] ===\n                                                uniqueConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ] &&\n                                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            dbConstraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"],\n                                    )\n                                })\n\n                            const isGenerated = !!dbIdentityColumns.find(\n                                (column) =>\n                                    column[\"TABLE_NAME\"] ===\n                                        dbColumn[\"TABLE_NAME\"] &&\n                                    column[\"TABLE_SCHEMA\"] ===\n                                        dbColumn[\"TABLE_SCHEMA\"] &&\n                                    column[\"TABLE_CATALOG\"] ===\n                                        dbColumn[\"TABLE_CATALOG\"] &&\n                                    column[\"COLUMN_NAME\"] ===\n                                        dbColumn[\"COLUMN_NAME\"],\n                            )\n\n                            const tableColumn = new TableColumn()\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"]\n                            tableColumn.type =\n                                dbColumn[\"DATA_TYPE\"].toLowerCase()\n\n                            // check only columns that have length property\n                            if (\n                                this.driver.withLengthColumnTypes.indexOf(\n                                    tableColumn.type as ColumnType,\n                                ) !== -1 &&\n                                dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]\n                            ) {\n                                const length =\n                                    dbColumn[\n                                        \"CHARACTER_MAXIMUM_LENGTH\"\n                                    ].toString()\n                                if (length === \"-1\") {\n                                    tableColumn.length = \"MAX\"\n                                } else {\n                                    tableColumn.length =\n                                        !this.isDefaultColumnLength(\n                                            table,\n                                            tableColumn,\n                                            length,\n                                        )\n                                            ? length\n                                            : \"\"\n                                }\n                            }\n\n                            if (\n                                tableColumn.type === \"decimal\" ||\n                                tableColumn.type === \"numeric\"\n                            ) {\n                                if (\n                                    dbColumn[\"NUMERIC_PRECISION\"] !== null &&\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_PRECISION\"],\n                                    )\n                                )\n                                    tableColumn.precision =\n                                        dbColumn[\"NUMERIC_PRECISION\"]\n                                if (\n                                    dbColumn[\"NUMERIC_SCALE\"] !== null &&\n                                    !this.isDefaultColumnScale(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"NUMERIC_SCALE\"],\n                                    )\n                                )\n                                    tableColumn.scale =\n                                        dbColumn[\"NUMERIC_SCALE\"]\n                            }\n\n                            if (tableColumn.type === \"nvarchar\") {\n                                // Check if this is an enum\n                                const columnCheckConstraints =\n                                    columnConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                            \"CHECK\",\n                                    )\n                                if (columnCheckConstraints.length) {\n                                    // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                                    for (const checkConstraint of columnCheckConstraints) {\n                                        if (\n                                            this.isEnumCheckConstraint(\n                                                checkConstraint[\n                                                    \"CONSTRAINT_NAME\"\n                                                ],\n                                            )\n                                        ) {\n                                            // This is an enum constraint, make column into an enum\n                                            tableColumn.enum = []\n                                            const enumValueRegexp = new RegExp(\n                                                \"\\\\[\" +\n                                                    tableColumn.name +\n                                                    \"\\\\]='([^']+)'\",\n                                                \"g\",\n                                            )\n                                            let result\n                                            while (\n                                                (result = enumValueRegexp.exec(\n                                                    checkConstraint[\n                                                        \"definition\"\n                                                    ],\n                                                )) !== null\n                                            ) {\n                                                tableColumn.enum.unshift(\n                                                    result[1],\n                                                )\n                                            }\n                                            // Skip other column constraints\n                                            break\n                                        }\n                                    }\n                                }\n                            }\n\n                            const primaryConstraint = columnConstraints.find(\n                                (constraint) =>\n                                    constraint[\"CONSTRAINT_TYPE\"] ===\n                                    \"PRIMARY KEY\",\n                            )\n                            if (primaryConstraint) {\n                                tableColumn.isPrimary = true\n                                // find another columns involved in primary key constraint\n                                const anotherPrimaryConstraints =\n                                    dbConstraints.filter(\n                                        (constraint) =>\n                                            constraint[\"TABLE_NAME\"] ===\n                                                dbColumn[\"TABLE_NAME\"] &&\n                                            constraint[\"TABLE_SCHEMA\"] ===\n                                                dbColumn[\"TABLE_SCHEMA\"] &&\n                                            constraint[\"TABLE_CATALOG\"] ===\n                                                dbColumn[\"TABLE_CATALOG\"] &&\n                                            constraint[\"COLUMN_NAME\"] !==\n                                                dbColumn[\"COLUMN_NAME\"] &&\n                                            constraint[\"CONSTRAINT_TYPE\"] ===\n                                                \"PRIMARY KEY\",\n                                    )\n\n                                // collect all column names\n                                const columnNames =\n                                    anotherPrimaryConstraints.map(\n                                        (constraint) =>\n                                            constraint[\"COLUMN_NAME\"],\n                                    )\n                                columnNames.push(dbColumn[\"COLUMN_NAME\"])\n\n                                // build default primary key constraint name\n                                const pkName =\n                                    this.connection.namingStrategy.primaryKeyName(\n                                        table,\n                                        columnNames,\n                                    )\n\n                                // if primary key has user-defined constraint name, write it in table column\n                                if (\n                                    primaryConstraint[\"CONSTRAINT_NAME\"] !==\n                                    pkName\n                                ) {\n                                    tableColumn.primaryKeyConstraintName =\n                                        primaryConstraint[\"CONSTRAINT_NAME\"]\n                                }\n                            }\n\n                            tableColumn.default =\n                                dbColumn[\"COLUMN_DEFAULT\"] !== null &&\n                                dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                                    ? this.removeParenthesisFromDefault(\n                                          dbColumn[\"COLUMN_DEFAULT\"],\n                                      )\n                                    : undefined\n                            tableColumn.isNullable =\n                                dbColumn[\"IS_NULLABLE\"] === \"YES\"\n                            tableColumn.isUnique =\n                                uniqueConstraints.length > 0 &&\n                                !isConstraintComposite\n                            tableColumn.isGenerated = isGenerated\n                            if (isGenerated)\n                                tableColumn.generationStrategy = \"increment\"\n                            if (tableColumn.default === \"newsequentialid()\") {\n                                tableColumn.isGenerated = true\n                                tableColumn.generationStrategy = \"uuid\"\n                                tableColumn.default = undefined\n                            }\n\n                            // todo: unable to get default charset\n                            // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                            if (dbColumn[\"COLLATION_NAME\"])\n                                tableColumn.collation =\n                                    dbColumn[\"COLLATION_NAME\"] ===\n                                    defaultCollation[\"COLLATION_NAME\"]\n                                        ? undefined\n                                        : dbColumn[\"COLLATION_NAME\"]\n\n                            if (\n                                tableColumn.type === \"datetime2\" ||\n                                tableColumn.type === \"time\" ||\n                                tableColumn.type === \"datetimeoffset\"\n                            ) {\n                                tableColumn.precision =\n                                    !this.isDefaultColumnPrecision(\n                                        table,\n                                        tableColumn,\n                                        dbColumn[\"DATETIME_PRECISION\"],\n                                    )\n                                        ? dbColumn[\"DATETIME_PRECISION\"]\n                                        : undefined\n                            }\n\n                            if (\n                                dbColumn[\"is_persisted\"] !== null &&\n                                dbColumn[\"is_persisted\"] !== undefined &&\n                                dbColumn[\"definition\"]\n                            ) {\n                                tableColumn.generatedType =\n                                    dbColumn[\"is_persisted\"] === true\n                                        ? \"STORED\"\n                                        : \"VIRTUAL\"\n                                // We cannot relay on information_schema.columns.generation_expression, because it is formatted different.\n                                const asExpressionQuery =\n                                    await this.selectTypeormMetadataSql({\n                                        database: dbTable[\"TABLE_CATALOG\"],\n                                        schema: dbTable[\"TABLE_SCHEMA\"],\n                                        table: dbTable[\"TABLE_NAME\"],\n                                        type: MetadataTableType.GENERATED_COLUMN,\n                                        name: tableColumn.name,\n                                    })\n\n                                const results = await this.query(\n                                    asExpressionQuery.query,\n                                    asExpressionQuery.parameters,\n                                )\n                                if (results[0] && results[0].value) {\n                                    tableColumn.asExpression = results[0].value\n                                } else {\n                                    tableColumn.asExpression = \"\"\n                                }\n                            }\n\n                            return tableColumn\n                        }),\n                )\n\n                // find unique constraints of table, group them by constraint name and build TableUnique.\n                const tableUniqueConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.uniques = tableUniqueConstraints.map((constraint) => {\n                    const uniques = dbConstraints.filter(\n                        (dbC) =>\n                            dbC[\"CONSTRAINT_NAME\"] ===\n                            constraint[\"CONSTRAINT_NAME\"],\n                    )\n                    return new TableUnique({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\n                    })\n                })\n\n                // find check constraints of table, group them by constraint name and build TableCheck.\n                const tableCheckConstraints = OrmUtils.uniq(\n                    dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbConstraint[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbConstraint[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"] &&\n                            dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\",\n                    ),\n                    (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"],\n                )\n\n                table.checks = tableCheckConstraints\n                    .filter(\n                        (constraint) =>\n                            !this.isEnumCheckConstraint(\n                                constraint[\"CONSTRAINT_NAME\"],\n                            ),\n                    )\n                    .map((constraint) => {\n                        const checks = dbConstraints.filter(\n                            (dbC) =>\n                                dbC[\"CONSTRAINT_NAME\"] ===\n                                constraint[\"CONSTRAINT_NAME\"],\n                        )\n                        return new TableCheck({\n                            name: constraint[\"CONSTRAINT_NAME\"],\n                            columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                            expression: constraint[\"definition\"],\n                        })\n                    })\n\n                // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n                const tableForeignKeyConstraints = OrmUtils.uniq(\n                    dbForeignKeys.filter(\n                        (dbForeignKey) =>\n                            dbForeignKey[\"TABLE_NAME\"] ===\n                                dbTable[\"TABLE_NAME\"] &&\n                            dbForeignKey[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbForeignKey[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbForeignKey) => dbForeignKey[\"FK_NAME\"],\n                )\n\n                table.foreignKeys = tableForeignKeyConstraints.map(\n                    (dbForeignKey) => {\n                        const foreignKeys = dbForeignKeys.filter(\n                            (dbFk) =>\n                                dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"],\n                        )\n\n                        // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                        const db =\n                            dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase\n                                ? undefined\n                                : dbForeignKey[\"TABLE_CATALOG\"]\n                        const schema = getSchemaFromKey(\n                            dbForeignKey,\n                            \"REF_SCHEMA\",\n                        )\n                        const referencedTableName = this.driver.buildTableName(\n                            dbForeignKey[\"REF_TABLE\"],\n                            schema,\n                            db,\n                        )\n\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"FK_NAME\"],\n                            columnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"COLUMN_NAME\"],\n                            ),\n                            referencedDatabase: dbForeignKey[\"TABLE_CATALOG\"],\n                            referencedSchema: dbForeignKey[\"REF_SCHEMA\"],\n                            referencedTableName: referencedTableName,\n                            referencedColumnNames: foreignKeys.map(\n                                (dbFk) => dbFk[\"REF_COLUMN\"],\n                            ),\n                            onDelete: dbForeignKey[\"ON_DELETE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                            onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\n                                \"_\",\n                                \" \",\n                            ), // SqlServer returns NO_ACTION, instead of NO ACTION\n                        })\n                    },\n                )\n\n                // find index constraints of table, group them by constraint name and build TableIndex.\n                const tableIndexConstraints = OrmUtils.uniq(\n                    dbIndices.filter(\n                        (dbIndex) =>\n                            dbIndex[\"TABLE_NAME\"] === dbTable[\"TABLE_NAME\"] &&\n                            dbIndex[\"TABLE_SCHEMA\"] ===\n                                dbTable[\"TABLE_SCHEMA\"] &&\n                            dbIndex[\"TABLE_CATALOG\"] ===\n                                dbTable[\"TABLE_CATALOG\"],\n                    ),\n                    (dbIndex) => dbIndex[\"INDEX_NAME\"],\n                )\n\n                table.indices = tableIndexConstraints.map((constraint) => {\n                    const indices = dbIndices.filter((index) => {\n                        return (\n                            index[\"TABLE_CATALOG\"] ===\n                                constraint[\"TABLE_CATALOG\"] &&\n                            index[\"TABLE_SCHEMA\"] ===\n                                constraint[\"TABLE_SCHEMA\"] &&\n                            index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] &&\n                            index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"]\n                        )\n                    })\n                    return new TableIndex(<TableIndexOptions>{\n                        table: table,\n                        name: constraint[\"INDEX_NAME\"],\n                        columnNames: indices.map((i) => i[\"COLUMN_NAME\"]),\n                        isUnique: constraint[\"IS_UNIQUE\"],\n                        where: constraint[\"CONDITION\"],\n                    })\n                })\n\n                return table\n            }),\n        )\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) =>\n                this.buildCreateColumnSql(table, column, false, true),\n            )\n            .join(\", \")\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`\n\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name,\n                )\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table,\n                                [column.name],\n                            ),\n                            columnNames: [column.name],\n                        }),\n                    )\n            })\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              table,\n                              unique.columnNames,\n                          )\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`\n                })\n                .join(\", \")\n\n            sql += `, ${uniquesSql}`\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table,\n                              check.expression!,\n                          )\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`\n                })\n                .join(\", \")\n\n            sql += `, ${checksSql}`\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table,\n                            fk.columnNames,\n                            this.getTablePath(fk),\n                            fk.referencedColumnNames,\n                        )\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \")\n\n                    let constraint = `CONSTRAINT \"${\n                        fk.name\n                    }\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(\n                        this.getTablePath(fk),\n                    )} (${referencedColumnNames})`\n                    if (fk.onDelete) constraint += ` ON DELETE ${fk.onDelete}`\n                    if (fk.onUpdate) constraint += ` ON UPDATE ${fk.onUpdate}`\n\n                    return constraint\n                })\n                .join(\", \")\n\n            sql += `, ${foreignKeysSql}`\n        }\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary,\n        )\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = primaryColumns[0].primaryKeyConstraintName\n                ? primaryColumns[0].primaryKeyConstraintName\n                : this.connection.namingStrategy.primaryKeyName(\n                      table,\n                      primaryColumns.map((column) => column.name),\n                  )\n\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \")\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`\n        }\n\n        sql += `)`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n    ): Query {\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}`\n            : `DROP TABLE ${this.escapePath(tableOrName)}`\n        return new Query(query)\n    }\n\n    protected createViewSql(view: View): Query {\n        const parsedName = this.driver.parseTableName(view)\n\n        // Can't use `escapePath` here because `CREATE VIEW` does not accept database names.\n        const viewIdentifier = parsedName.schema\n            ? `\"${parsedName.schema}\".\"${parsedName.tableName}\"`\n            : `\"${parsedName.tableName}\"`\n\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view.expression}`,\n            )\n        } else {\n            return new Query(\n                `CREATE VIEW ${viewIdentifier} AS ${view\n                    .expression(this.connection)\n                    .getQuery()}`,\n            )\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(view)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery()\n        return this.insertTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n            value: expression,\n        })\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`)\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(\n        viewOrPath: View | string,\n    ): Promise<Query> {\n        const parsedTableName = this.driver.parseTableName(viewOrPath)\n\n        if (!parsedTableName.schema) {\n            parsedTableName.schema = await this.getCurrentSchema()\n        }\n\n        return this.deleteTypeormMetadataSql({\n            type: MetadataTableType.VIEW,\n            database: parsedTableName.database,\n            schema: parsedTableName.schema,\n            name: parsedTableName.tableName,\n        })\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\n                index.name\n            }\" ON ${this.escapePath(table)} (${columns}) ${\n                index.where ? \"WHERE \" + index.where : \"\"\n            }`,\n        )\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(\n        table: Table,\n        indexOrName: TableIndex | string,\n    ): Query {\n        let indexName = InstanceChecker.isTableIndex(indexOrName)\n            ? indexOrName.name\n            : indexOrName\n        return new Query(\n            `DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`,\n        )\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(\n        table: Table,\n        columnNames: string[],\n        constraintName?: string,\n    ): Query {\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`,\n        )\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map((column) => column.name)\n        const constraintName = table.primaryColumns[0].primaryKeyConstraintName\n        const primaryKeyName = constraintName\n            ? constraintName\n            : this.connection.namingStrategy.primaryKeyName(table, columnNames)\n\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${primaryKeyName}\"`,\n        )\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(\n        table: Table,\n        uniqueConstraint: TableUnique,\n    ): Query {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                uniqueConstraint.name\n            }\" UNIQUE (${columnNames})`,\n        )\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(\n        table: Table,\n        uniqueOrName: TableUnique | string,\n    ): Query {\n        const uniqueName = InstanceChecker.isTableUnique(uniqueOrName)\n            ? uniqueOrName.name\n            : uniqueOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${uniqueName}\"`,\n        )\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck,\n    ): Query {\n        return new Query(\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                checkConstraint.name\n            }\" CHECK (${checkConstraint.expression})`,\n        )\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string,\n    ): Query {\n        const checkName = InstanceChecker.isTableCheck(checkOrName)\n            ? checkOrName.name\n            : checkOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${checkName}\"`,\n        )\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey,\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \")\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\")\n        let sql =\n            `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${\n                foreignKey.name\n            }\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(\n                this.getTablePath(foreignKey),\n            )}(${referencedColumnNames})`\n        if (foreignKey.onDelete) sql += ` ON DELETE ${foreignKey.onDelete}`\n        if (foreignKey.onUpdate) sql += ` ON UPDATE ${foreignKey.onUpdate}`\n\n        return new Query(sql)\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string,\n    ): Query {\n        const foreignKeyName = InstanceChecker.isTableForeignKey(\n            foreignKeyOrName,\n        )\n            ? foreignKeyOrName.name\n            : foreignKeyOrName\n        return new Query(\n            `ALTER TABLE ${this.escapePath(\n                table,\n            )} DROP CONSTRAINT \"${foreignKeyName}\"`,\n        )\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table | View | string): string {\n        const { database, schema, tableName } =\n            this.driver.parseTableName(target)\n\n        if (database && database !== this.driver.database) {\n            if (schema && schema !== this.driver.searchSchema) {\n                return `\"${database}\".\"${schema}\".\"${tableName}\"`\n            }\n\n            return `\"${database}\"..\"${tableName}\"`\n        }\n\n        if (schema && schema !== this.driver.searchSchema) {\n            return `\"${schema}\".\"${tableName}\"`\n        }\n\n        return `\"${tableName}\"`\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(\n        fkName: string,\n        schemaName: string | undefined,\n        dbName: string | undefined,\n    ): string {\n        let joinedFkName = fkName\n        if (schemaName && schemaName !== this.driver.searchSchema)\n            joinedFkName = schemaName + \".\" + joinedFkName\n        if (dbName && dbName !== this.driver.database)\n            joinedFkName = dbName + \".\" + joinedFkName\n\n        return joinedFkName\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\") return defaultValue\n        const normalizedDefault = defaultValue.substr(\n            1,\n            defaultValue.lastIndexOf(\")\") - 1,\n        )\n        return this.removeParenthesisFromDefault(normalizedDefault)\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(\n        table: Table,\n        column: TableColumn,\n        skipIdentity: boolean,\n        createDefault: boolean,\n        skipEnum?: boolean,\n    ) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(\n            column,\n        )}`\n\n        if (!skipEnum && column.enum) {\n            const expression = this.getEnumExpression(column)\n            const checkName =\n                this.connection.namingStrategy.checkConstraintName(\n                    table,\n                    expression,\n                    true,\n                )\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`\n        }\n\n        if (column.collation) c += \" COLLATE \" + column.collation\n\n        if (column.asExpression) {\n            c += ` AS (${column.asExpression})`\n            if (column.generatedType === \"STORED\") {\n                c += ` PERSISTED`\n\n                // NOT NULL can be specified for computed columns only if PERSISTED is also specified\n                if (column.isNullable !== true) c += \" NOT NULL\"\n            }\n        } else {\n            if (column.isNullable !== true) c += \" NOT NULL\"\n        }\n\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\" &&\n            !skipIdentity\n        )\n            // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\"\n\n        if (\n            column.default !== undefined &&\n            column.default !== null &&\n            createDefault\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`\n        }\n\n        if (\n            column.isGenerated &&\n            column.generationStrategy === \"uuid\" &&\n            !column.default\n        ) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName =\n                this.connection.namingStrategy.defaultConstraintName(\n                    table,\n                    column.name,\n                )\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`\n        }\n        return c\n    }\n\n    private getEnumExpression(column: TableColumn) {\n        if (!column.enum) {\n            throw new Error(`Enum is not defined in column ${column.name}`)\n        }\n        return (\n            column.name +\n            \" IN (\" +\n            column.enum.map((val) => \"'\" + val + \"'\").join(\",\") +\n            \")\"\n        )\n    }\n\n    protected isEnumCheckConstraint(name: string): boolean {\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit\n            case \"bigint\":\n                return this.driver.mssql.BigInt\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params)\n            case \"float\":\n                return this.driver.mssql.Float\n            case \"int\":\n                return this.driver.mssql.Int\n            case \"money\":\n                return this.driver.mssql.Money\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params)\n            case \"smallint\":\n                return this.driver.mssql.SmallInt\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney\n            case \"real\":\n                return this.driver.mssql.Real\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt\n            case \"char\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.Char(...parameter.params)\n                }\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params)\n            case \"text\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.Text\n                }\n                return this.driver.mssql.Ntext\n            case \"ntext\":\n                return this.driver.mssql.Ntext\n            case \"varchar\":\n                if (\n                    this.driver.options.options\n                        ?.disableAsciiToUnicodeParamConversion\n                ) {\n                    return this.driver.mssql.VarChar(...parameter.params)\n                }\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params)\n            case \"xml\":\n                return this.driver.mssql.Xml\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params)\n            case \"date\":\n                return this.driver.mssql.Date\n            case \"datetime\":\n                return this.driver.mssql.DateTime\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params)\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params)\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier\n            case \"variant\":\n                return this.driver.mssql.Variant\n            case \"binary\":\n                return this.driver.mssql.Binary\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params)\n            case \"image\":\n                return this.driver.mssql.Image\n            case \"udt\":\n                return this.driver.mssql.UDT\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED\n        }\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.d.ts b/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.d.ts
new file mode 100644
index 0000000..0c49fcd
--- /dev/null
+++ b/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.d.ts
@@ -0,0 +1,12 @@
+export interface AzureActiveDirectoryDefaultAuthentication {
+    /**
+     * This uses DefaultAzureCredential from @azure/identity to try multiple methods of authentication
+     */
+    type: "azure-active-directory-default";
+    options: {
+        /**
+         * The clientId of the user you want to log in with, mapped to the managedIdentityClientId in tedious
+         */
+        clientId?: string;
+    };
+}
diff --git a/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js b/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js
new file mode 100644
index 0000000..dd12464
--- /dev/null
+++ b/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js
@@ -0,0 +1,4 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+
+//# sourceMappingURL=AzureActiveDirectoryDefaultAuthentication.js.map
diff --git a/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js.map b/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js.map
new file mode 100644
index 0000000..a2784dc
--- /dev/null
+++ b/node_modules/typeorm/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../src/driver/sqlserver/authentication/AzureActiveDirectoryDefaultAuthentication.ts"],"names":[],"mappings":"","file":"AzureActiveDirectoryDefaultAuthentication.js","sourcesContent":["export interface AzureActiveDirectoryDefaultAuthentication {\n    /**\n     * This uses DefaultAzureCredential from @azure/identity to try multiple methods of authentication\n     */\n    type: \"azure-active-directory-default\"\n    options: {\n        /**\n         * The clientId of the user you want to log in with, mapped to the managedIdentityClientId in tedious\n         */\n        clientId?: string\n    }\n}\n"],"sourceRoot":"../../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/driver/types/MappedColumnTypes.d.ts b/node_modules/typeorm/driver/types/MappedColumnTypes.d.ts
index 08b5455..5e0547a 100644
--- a/node_modules/typeorm/driver/types/MappedColumnTypes.d.ts
+++ b/node_modules/typeorm/driver/types/MappedColumnTypes.d.ts
@@ -1,4 +1,4 @@
-import { ColumnType } from "./ColumnTypes";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
 /**
  * Orm has special columns and we need to know what database column types should be for those types.
  * Column types are driver dependant.
diff --git a/node_modules/typeorm/entity-manager/EntityManager.d.ts b/node_modules/typeorm/entity-manager/EntityManager.d.ts
index b9dfda3..cb9d9f1 100644
--- a/node_modules/typeorm/entity-manager/EntityManager.d.ts
+++ b/node_modules/typeorm/entity-manager/EntityManager.d.ts
@@ -1,27 +1,27 @@
-import { DataSource } from "../data-source/DataSource";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectType } from "../common/ObjectType";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { DeepPartial } from "../common/DeepPartial";
-import { RemoveOptions } from "../repository/RemoveOptions";
-import { SaveOptions } from "../repository/SaveOptions";
-import { MongoRepository } from "../repository/MongoRepository";
-import { TreeRepository } from "../repository/TreeRepository";
-import { Repository } from "../repository/Repository";
-import { PlainObjectToNewEntityTransformer } from "../query-builder/transformer/PlainObjectToNewEntityTransformer";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { ObjectId } from "../driver/mongodb/typings";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { IsolationLevel } from "../driver/types/IsolationLevel";
-import { UpsertOptions } from "../repository/UpsertOptions";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { PickKeysByType } from "../common/PickKeysByType";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { FindManyOptions } from "typeorm/find-options/FindManyOptions";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { FindOneOptions } from "typeorm/find-options/FindOneOptions";
+import { DeepPartial } from "typeorm/common/DeepPartial";
+import { RemoveOptions } from "typeorm/repository/RemoveOptions";
+import { SaveOptions } from "typeorm/repository/SaveOptions";
+import { MongoRepository } from "typeorm/repository/MongoRepository";
+import { TreeRepository } from "typeorm/repository/TreeRepository";
+import { Repository } from "typeorm/repository/Repository";
+import { PlainObjectToNewEntityTransformer } from "typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { QueryDeepPartialEntity } from "typeorm/query-builder/QueryPartialEntity";
+import { ObjectId } from "typeorm/driver/mongodb/typings";
+import { InsertResult } from "typeorm/query-builder/result/InsertResult";
+import { UpdateResult } from "typeorm/query-builder/result/UpdateResult";
+import { DeleteResult } from "typeorm/query-builder/result/DeleteResult";
+import { FindOptionsWhere } from "typeorm/find-options/FindOptionsWhere";
+import { IsolationLevel } from "typeorm/driver/types/IsolationLevel";
+import { UpsertOptions } from "typeorm/repository/UpsertOptions";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { PickKeysByType } from "typeorm/common/PickKeysByType";
 /**
  * Entity manager supposed to work with any entity, automatically find its repository and call its methods,
  * whatever entity type are you passing.
diff --git a/node_modules/typeorm/entity-manager/EntityManager.js b/node_modules/typeorm/entity-manager/EntityManager.js
index e4a6e1a..a456d22 100644
--- a/node_modules/typeorm/entity-manager/EntityManager.js
+++ b/node_modules/typeorm/entity-manager/EntityManager.js
@@ -506,9 +506,13 @@ class EntityManager {
     }
     async callAggregateFun(entityClass, fnName, columnName, where = {}) {
         const metadata = this.connection.getMetadata(entityClass);
+        const column = metadata.columns.find((item) => item.propertyPath === columnName);
+        if (!column) {
+            throw new error_1.TypeORMError(`Column "${columnName}" was not found in table "${metadata.name}"`);
+        }
         const result = await this.createQueryBuilder(entityClass, metadata.name)
             .setFindOptions({ where })
-            .select(`${fnName}(${this.connection.driver.escape(String(columnName))})`, fnName)
+            .select(`${fnName}(${this.connection.driver.escape(column.databaseName)})`, fnName)
             .getRawOne();
         return result[fnName] === null ? null : parseFloat(result[fnName]);
     }
diff --git a/node_modules/typeorm/entity-manager/EntityManager.js.map b/node_modules/typeorm/entity-manager/EntityManager.js.map
index 1f36daa..22d6e16 100644
--- a/node_modules/typeorm/entity-manager/EntityManager.js.map
+++ b/node_modules/typeorm/entity-manager/EntityManager.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/entity-manager/EntityManager.ts"],"names":[],"mappings":"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","file":"EntityManager.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\"\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\nimport { SaveOptions } from \"../repository/SaveOptions\"\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { Repository } from \"../repository/Repository\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\"\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\"\nimport {\n    CustomRepositoryCannotInheritRepositoryError,\n    CustomRepositoryNotFoundError,\n    TreeRepositoryNotSupportedError,\n    TypeORMError,\n} from \"../error\"\nimport { AbstractRepository } from \"../repository/AbstractRepository\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { UpsertOptions } from \"../repository/UpsertOptions\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"EntityManager\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by repositories.\n     * Created as a future replacement for the #repositories to provide a bit more perf optimization.\n     */\n    protected repositories = new Map<EntityTarget<any>, Repository<any>>()\n\n    /**\n     * Once created and then reused by repositories.\n     */\n    protected treeRepositories: TreeRepository<any>[] = []\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer =\n        new PlainObjectToNewEntityTransformer()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        this.connection = connection\n        if (queryRunner) {\n            this.queryRunner = queryRunner\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this })\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T> {\n        const isolation =\n            typeof isolationOrRunInTransaction === \"string\"\n                ? isolationOrRunInTransaction\n                : undefined\n        const runInTransaction =\n            typeof isolationOrRunInTransaction === \"function\"\n                ? isolationOrRunInTransaction\n                : runInTransactionParam\n\n        if (!runInTransaction) {\n            throw new TypeORMError(\n                `Transaction method requires callback in second parameter if isolation level is supplied.`,\n            )\n        }\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        try {\n            await queryRunner.startTransaction(isolation)\n            const result = await runInTransaction(queryRunner.manager)\n            await queryRunner.commitTransaction()\n            return result\n        } catch (err) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw err\n        } finally {\n            if (!this.queryRunner)\n                // if we used a new query runner provider then release it\n                await queryRunner.release()\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(query: string, parameters?: any[]): Promise<T> {\n        return this.connection.query(query, parameters, this.queryRunner)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(\n                entityClass as EntityTarget<Entity>,\n                alias,\n                queryRunner || this.queryRunner,\n            )\n        } else {\n            return this.connection.createQueryBuilder(\n                (entityClass as QueryRunner | undefined) ||\n                    queryRunner ||\n                    this.queryRunner,\n            )\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function | string, entity: any): boolean\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any | Function | string, maybeEntity?: any): boolean {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any | EntityTarget<any>, maybeEntity?: any): any {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.getEntityIdMixedMap(entity)\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObject?: DeepPartial<Entity>,\n    ): Entity\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjects?: DeepPartial<Entity>[],\n    ): Entity[]\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjectOrObjects?: DeepPartial<Entity> | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        if (!plainObjectOrObjects) return metadata.create(this.queryRunner)\n\n        if (Array.isArray(plainObjectOrObjects))\n            return (plainObjectOrObjects as DeepPartial<Entity>[]).map(\n                (plainEntityLike) => this.create(entityClass, plainEntityLike),\n            )\n\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        this.plainObjectToEntityTransformer.transform(\n            mergeIntoEntity,\n            plainObjectOrObjects,\n            metadata,\n            true,\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass)\n        entityLikes.forEach((object) =>\n            this.plainObjectToEntityTransformer.transform(\n                mergeIntoEntity,\n                object,\n                metadata,\n            ),\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const plainObjectToDatabaseEntityTransformer =\n            new PlainObjectToDatabaseEntityTransformer(this.connection.manager)\n        const transformedEntity =\n            await plainObjectToDatabaseEntityTransformer.transform(\n                entityLike,\n                metadata,\n            )\n        if (transformedEntity)\n            return this.merge(\n                entityClass as any,\n                transformedEntity as Entity,\n                entityLike,\n            )\n\n        return undefined\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"save\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity,\n        options?: RemoveOptions,\n    ): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity extends ObjectLiteral>(\n        targetOrEntity: (Entity | Entity[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: Entity | Entity[],\n        maybeOptions?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        // normalize mixed parameters\n        const target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: Entity | Entity[] = target\n            ? (maybeEntityOrOptions as Entity | Entity[])\n            : (targetOrEntity as Entity | Entity[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute soft-remove operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"soft-remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute recover operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"recover\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute()\n    }\n\n    async upsert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        const metadata = this.connection.getMetadata(target)\n\n        let options: UpsertOptions<Entity>\n\n        if (Array.isArray(conflictPathsOrOptions)) {\n            options = {\n                conflictPaths: conflictPathsOrOptions,\n            }\n        } else {\n            options = conflictPathsOrOptions\n        }\n\n        let entities: QueryDeepPartialEntity<Entity>[]\n\n        if (!Array.isArray(entityOrEntities)) {\n            entities = [entityOrEntities]\n        } else {\n            entities = entityOrEntities\n        }\n\n        const conflictColumns = metadata.mapPropertyPathsToColumns(\n            Array.isArray(options.conflictPaths)\n                ? options.conflictPaths\n                : Object.keys(options.conflictPaths),\n        )\n\n        const overwriteColumns = metadata.columns.filter(\n            (col) =>\n                !conflictColumns.includes(col) &&\n                entities.some(\n                    (entity) =>\n                        typeof col.getEntityValue(entity) !== \"undefined\",\n                ),\n        )\n\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entities)\n            .orUpdate(\n                [...conflictColumns, ...overwriteColumns].map(\n                    (col) => col.databaseName,\n                ),\n                conflictColumns.map((col) => col.databaseName),\n                {\n                    skipUpdateIfNoValuesChanged:\n                        options.skipUpdateIfNoValuesChanged,\n                    indexPredicate: options.indexPredicate,\n                    upsertType:\n                        options.upsertType ||\n                        this.connection.driver.supportedUpsertTypes[0],\n                },\n            )\n            .execute()\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the update method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<DeleteResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Checks whether any entity exists with the given condition\n     */\n    exists<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getExists()\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getCount()\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getCount()\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"SUM\", columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"AVG\", columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MIN\", columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MAX\", columnName, where)\n    }\n\n    private async callAggregateFun<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        fnName: \"SUM\" | \"AVG\" | \"MIN\" | \"MAX\",\n        columnName: PickKeysByType<Entity, number>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[] = {},\n    ): Promise<number | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const result = await this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .select(\n                `${fnName}(${this.connection.driver.escape(\n                    String(columnName),\n                )})`,\n                fnName,\n            )\n            .getRawOne()\n        return result[fnName] === null ? null : parseFloat(result[fnName])\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where: where })\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where })\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        ids: any[],\n    ): Promise<Entity[]> {\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length) return Promise.resolve([])\n\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .andWhereInIds(ids)\n            .getMany()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // prepare alias for built query\n        let alias: string = metadata.name\n        if (options && options.join) {\n            alias = options.join.alias\n        }\n\n        if (!options.where) {\n            throw new Error(\n                `You must provide selection conditions in order to find a single row.`,\n            )\n        }\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, alias)\n            .setFindOptions({\n                ...options,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                where,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                take: 1,\n            })\n            .whereInIds(metadata.ensureEntityIdMap(id))\n            .getOne()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, options).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, options),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.findOneBy<Entity>(entityClass as any, where).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, where),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        try {\n            return await queryRunner.clearTable(metadata.tablePath) // await is needed here because we are using finally\n        } finally {\n            if (!this.queryRunner) await queryRunner.release()\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" + \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" - \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        // find already created repository instance and return it if found\n        const repoFromMap = this.repositories.get(target)\n        if (repoFromMap) return repoFromMap\n\n        // if repository was not found then create it, store its instance and return it\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const newRepository = new MongoRepository(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        } else {\n            const newRepository = new Repository<any>(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        }\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver)\n\n        // find already created repository instance and return it if found\n        const repository = this.treeRepositories.find(\n            (repository) => repository.target === target,\n        )\n        if (repository) return repository\n\n        // check if repository is real tree repository\n        const newRepository = new TreeRepository(target, this, this.queryRunner)\n        this.treeRepositories.push(newRepository)\n        return newRepository\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target)\n    }\n\n    /**\n     * Creates a new repository instance out of a given Repository and\n     * sets current EntityManager instance to it. Used to work with custom repositories\n     * in transactions.\n     */\n    withRepository<Entity extends ObjectLiteral, R extends Repository<any>>(\n        repository: R & Repository<Entity>,\n    ): R {\n        const repositoryConstructor =\n            repository.constructor as typeof Repository\n        const { target, manager, queryRunner, ...otherRepositoryProperties } =\n            repository\n        return Object.assign(\n            new repositoryConstructor(repository.target, this) as R,\n            {\n                ...otherRepositoryProperties,\n            },\n        )\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend to create custom repositories\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity\n            ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity)\n            : undefined\n        const entityRepositoryInstance =\n            new (entityRepositoryMetadataArgs.target as any)(\n                this,\n                entityMetadata,\n            )\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this\n        } else {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(\n                    customRepository,\n                )\n            ;(entityRepositoryInstance as any)[\"manager\"] = this\n            ;(entityRepositoryInstance as any)[\"metadata\"] = entityMetadata\n        }\n\n        return entityRepositoryInstance\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner) throw new NoNeedToReleaseEntityManagerError()\n\n        return this.queryRunner.release()\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/entity-manager/EntityManager.ts"],"names":[],"mappings":"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","file":"EntityManager.js","sourcesContent":["import { DataSource } from \"../data-source/DataSource\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { ObjectType } from \"../common/ObjectType\"\nimport { EntityNotFoundError } from \"../error/EntityNotFoundError\"\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { RemoveOptions } from \"../repository/RemoveOptions\"\nimport { SaveOptions } from \"../repository/SaveOptions\"\nimport { NoNeedToReleaseEntityManagerError } from \"../error/NoNeedToReleaseEntityManagerError\"\nimport { MongoRepository } from \"../repository/MongoRepository\"\nimport { TreeRepository } from \"../repository/TreeRepository\"\nimport { Repository } from \"../repository/Repository\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlainObjectToNewEntityTransformer } from \"../query-builder/transformer/PlainObjectToNewEntityTransformer\"\nimport { PlainObjectToDatabaseEntityTransformer } from \"../query-builder/transformer/PlainObjectToDatabaseEntityTransformer\"\nimport {\n    CustomRepositoryCannotInheritRepositoryError,\n    CustomRepositoryNotFoundError,\n    TreeRepositoryNotSupportedError,\n    TypeORMError,\n} from \"../error\"\nimport { AbstractRepository } from \"../repository/AbstractRepository\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { EntityPersistExecutor } from \"../persistence/EntityPersistExecutor\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { IsolationLevel } from \"../driver/types/IsolationLevel\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { getMetadataArgsStorage } from \"../globals\"\nimport { UpsertOptions } from \"../repository/UpsertOptions\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n */\nexport class EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"EntityManager\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this entity manager.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Custom query runner to be used for operations in this entity manager.\n     * Used only in non-global entity manager.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Once created and then reused by repositories.\n     * Created as a future replacement for the #repositories to provide a bit more perf optimization.\n     */\n    protected repositories = new Map<EntityTarget<any>, Repository<any>>()\n\n    /**\n     * Once created and then reused by repositories.\n     */\n    protected treeRepositories: TreeRepository<any>[] = []\n\n    /**\n     * Plain to object transformer used in create and merge operations.\n     */\n    protected plainObjectToEntityTransformer =\n        new PlainObjectToNewEntityTransformer()\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource, queryRunner?: QueryRunner) {\n        this.connection = connection\n        if (queryRunner) {\n            this.queryRunner = queryRunner\n            // dynamic: this.queryRunner = manager;\n            ObjectUtils.assign(this.queryRunner, { manager: this })\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationLevel: IsolationLevel,\n        runInTransaction: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T>\n\n    /**\n     * Wraps given function execution (and all operations made there) in a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(\n        isolationOrRunInTransaction:\n            | IsolationLevel\n            | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>,\n    ): Promise<T> {\n        const isolation =\n            typeof isolationOrRunInTransaction === \"string\"\n                ? isolationOrRunInTransaction\n                : undefined\n        const runInTransaction =\n            typeof isolationOrRunInTransaction === \"function\"\n                ? isolationOrRunInTransaction\n                : runInTransactionParam\n\n        if (!runInTransaction) {\n            throw new TypeORMError(\n                `Transaction method requires callback in second parameter if isolation level is supplied.`,\n            )\n        }\n\n        if (this.queryRunner && this.queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError()\n\n        // if query runner is already defined in this class, it means this entity manager was already created for a single connection\n        // if its not defined we create a new query runner - single connection where we'll execute all our operations\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n\n        try {\n            await queryRunner.startTransaction(isolation)\n            const result = await runInTransaction(queryRunner.manager)\n            await queryRunner.commitTransaction()\n            return result\n        } catch (err) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await queryRunner.rollbackTransaction()\n            } catch (rollbackError) {}\n            throw err\n        } finally {\n            if (!this.queryRunner)\n                // if we used a new query runner provider then release it\n                await queryRunner.release()\n        }\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query<T = any>(query: string, parameters?: any[]): Promise<T> {\n        return this.connection.query(query, parameters, this.queryRunner)\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder<Entity extends ObjectLiteral>(\n        entityClass?: EntityTarget<Entity> | QueryRunner,\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        if (alias) {\n            return this.connection.createQueryBuilder(\n                entityClass as EntityTarget<Entity>,\n                alias,\n                queryRunner || this.queryRunner,\n            )\n        } else {\n            return this.connection.createQueryBuilder(\n                (entityClass as QueryRunner | undefined) ||\n                    queryRunner ||\n                    this.queryRunner,\n            )\n        }\n    }\n\n    /**\n     * Checks if entity has an id.\n     */\n    hasId(entity: any): boolean\n\n    /**\n     * Checks if entity of given schema name has an id.\n     */\n    hasId(target: Function | string, entity: any): boolean\n\n    /**\n     * Checks if entity has an id by its Function type or schema name.\n     */\n    hasId(targetOrEntity: any | Function | string, maybeEntity?: any): boolean {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.hasId(entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(target: EntityTarget<any>, entity: any): any\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(targetOrEntity: any | EntityTarget<any>, maybeEntity?: any): any {\n        const target =\n            arguments.length === 2 ? targetOrEntity : targetOrEntity.constructor\n        const entity = arguments.length === 2 ? maybeEntity : targetOrEntity\n        const metadata = this.connection.getMetadata(target)\n        return metadata.getEntityIdMixedMap(entity)\n    }\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObject?: DeepPartial<Entity>,\n    ): Entity\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjects?: DeepPartial<Entity>[],\n    ): Entity[]\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create<Entity>(\n        entityClass: EntityTarget<Entity>,\n        plainObjectOrObjects?: DeepPartial<Entity> | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        if (!plainObjectOrObjects) return metadata.create(this.queryRunner)\n\n        if (Array.isArray(plainObjectOrObjects))\n            return (plainObjectOrObjects as DeepPartial<Entity>[]).map(\n                (plainEntityLike) => this.create(entityClass, plainEntityLike),\n            )\n\n        const mergeIntoEntity = metadata.create(this.queryRunner)\n        this.plainObjectToEntityTransformer.transform(\n            mergeIntoEntity,\n            plainObjectOrObjects,\n            metadata,\n            true,\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Merges two entities into one new entity.\n     */\n    merge<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        // todo: throw exception if entity manager is released\n        const metadata = this.connection.getMetadata(entityClass)\n        entityLikes.forEach((object) =>\n            this.plainObjectToEntityTransformer.transform(\n                mergeIntoEntity,\n                object,\n                metadata,\n            ),\n        )\n        return mergeIntoEntity\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     */\n    async preload<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        entityLike: DeepPartial<Entity>,\n    ): Promise<Entity | undefined> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const plainObjectToDatabaseEntityTransformer =\n            new PlainObjectToDatabaseEntityTransformer(this.connection.manager)\n        const transformedEntity =\n            await plainObjectToDatabaseEntityTransformer.transform(\n                entityLike,\n                metadata,\n            )\n        if (transformedEntity)\n            return this.merge(\n                entityClass as any,\n                transformedEntity as Entity,\n                entityLike,\n            )\n\n        return undefined\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entities: Entity[], options?: SaveOptions): Promise<Entity[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves a given entity in the database.\n     */\n    save<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"save\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity,\n        options?: RemoveOptions,\n    ): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(entity: Entity[], options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove<Entity extends ObjectLiteral>(\n        targetOrEntity: (Entity | Entity[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: Entity | Entity[],\n        maybeOptions?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        // normalize mixed parameters\n        const target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: Entity | Entity[] = target\n            ? (maybeEntityOrOptions as Entity | Entity[])\n            : (targetOrEntity as Entity | Entity[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute save operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute soft-remove operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"soft-remove\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity>(\n        entities: Entity[],\n        options?: SaveOptions,\n    ): Promise<Entity[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity>(entity: Entity, options?: SaveOptions): Promise<Entity>\n\n    /**\n     * Recovers all given entities.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<T[]>\n\n    /**\n     * Recovers a given entity.\n     */\n    recover<Entity, T extends DeepPartial<Entity>>(\n        targetOrEntity: EntityTarget<Entity>,\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<Entity extends ObjectLiteral, T extends DeepPartial<Entity>>(\n        targetOrEntity: (T | T[]) | EntityTarget<Entity>,\n        maybeEntityOrOptions?: T | T[],\n        maybeOptions?: SaveOptions,\n    ): Promise<T | T[]> {\n        // normalize mixed parameters\n        let target =\n            arguments.length > 1 &&\n            (typeof targetOrEntity === \"function\" ||\n                InstanceChecker.isEntitySchema(targetOrEntity) ||\n                typeof targetOrEntity === \"string\")\n                ? (targetOrEntity as Function | string)\n                : undefined\n        const entity: T | T[] = target\n            ? (maybeEntityOrOptions as T | T[])\n            : (targetOrEntity as T | T[])\n        const options = target\n            ? maybeOptions\n            : (maybeEntityOrOptions as SaveOptions)\n\n        if (InstanceChecker.isEntitySchema(target)) target = target.options.name\n\n        // if user passed empty array of entities then we don't need to do anything\n        if (Array.isArray(entity) && entity.length === 0)\n            return Promise.resolve(entity)\n\n        // execute recover operation\n        return new EntityPersistExecutor(\n            this.connection,\n            this.queryRunner,\n            \"recover\",\n            target,\n            entity,\n            options,\n        )\n            .execute()\n            .then(() => entity)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entity)\n            .execute()\n    }\n\n    async upsert<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        const metadata = this.connection.getMetadata(target)\n\n        let options: UpsertOptions<Entity>\n\n        if (Array.isArray(conflictPathsOrOptions)) {\n            options = {\n                conflictPaths: conflictPathsOrOptions,\n            }\n        } else {\n            options = conflictPathsOrOptions\n        }\n\n        let entities: QueryDeepPartialEntity<Entity>[]\n\n        if (!Array.isArray(entityOrEntities)) {\n            entities = [entityOrEntities]\n        } else {\n            entities = entityOrEntities\n        }\n\n        const conflictColumns = metadata.mapPropertyPathsToColumns(\n            Array.isArray(options.conflictPaths)\n                ? options.conflictPaths\n                : Object.keys(options.conflictPaths),\n        )\n\n        const overwriteColumns = metadata.columns.filter(\n            (col) =>\n                !conflictColumns.includes(col) &&\n                entities.some(\n                    (entity) =>\n                        typeof col.getEntityValue(entity) !== \"undefined\",\n                ),\n        )\n\n        return this.createQueryBuilder()\n            .insert()\n            .into(target)\n            .values(entities)\n            .orUpdate(\n                [...conflictColumns, ...overwriteColumns].map(\n                    (col) => col.databaseName,\n                ),\n                conflictColumns.map((col) => col.databaseName),\n                {\n                    skipUpdateIfNoValuesChanged:\n                        options.skipUpdateIfNoValuesChanged,\n                    indexPredicate: options.indexPredicate,\n                    upsertType:\n                        options.upsertType ||\n                        this.connection.driver.supportedUpsertTypes[0],\n                },\n            )\n            .execute()\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    update<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the update method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .update(target)\n                .set(partialEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Deletes entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    delete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<DeleteResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .delete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Records the delete date of entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    softDelete<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .softDelete()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Restores entities by a given condition(s).\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     * Condition(s) cannot be empty.\n     */\n    restore<Entity extends ObjectLiteral>(\n        targetOrEntity: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | any,\n    ): Promise<UpdateResult> {\n        // if user passed empty criteria or empty list of criterias, then throw an error\n        if (\n            criteria === undefined ||\n            criteria === null ||\n            criteria === \"\" ||\n            (Array.isArray(criteria) && criteria.length === 0)\n        ) {\n            return Promise.reject(\n                new TypeORMError(\n                    `Empty criteria(s) are not allowed for the delete method.`,\n                ),\n            )\n        }\n\n        if (\n            typeof criteria === \"string\" ||\n            typeof criteria === \"number\" ||\n            criteria instanceof Date ||\n            Array.isArray(criteria)\n        ) {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .whereInIds(criteria)\n                .execute()\n        } else {\n            return this.createQueryBuilder()\n                .restore()\n                .from(targetOrEntity)\n                .where(criteria)\n                .execute()\n        }\n    }\n\n    /**\n     * Checks whether any entity exists with the given condition\n     */\n    exists<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getExists()\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(\n            entityClass,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getCount()\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .getCount()\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"SUM\", columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"AVG\", columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MIN\", columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.callAggregateFun(entityClass, \"MAX\", columnName, where)\n    }\n\n    private async callAggregateFun<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        fnName: \"SUM\" | \"AVG\" | \"MIN\" | \"MAX\",\n        columnName: PickKeysByType<Entity, number>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[] = {},\n    ): Promise<number | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.columns.find(\n            (item) => item.propertyPath === columnName,\n        )\n        if (!column) {\n            throw new TypeORMError(\n                `Column \"${columnName}\" was not found in table \"${metadata.name}\"`,\n            )\n        }\n\n        const result = await this.createQueryBuilder(entityClass, metadata.name)\n            .setFindOptions({ where })\n            .select(\n                `${fnName}(${this.connection.driver.escape(\n                    column.databaseName,\n                )})`,\n                fnName,\n            )\n            .getRawOne()\n        return result[fnName] === null ? null : parseFloat(result[fnName])\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where: where })\n            .getMany()\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            FindOptionsUtils.extractFindManyOptionsAlias(options) ||\n                metadata.name,\n        )\n            .setFindOptions(options || {})\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .setFindOptions({ where })\n            .getManyAndCount()\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        ids: any[],\n    ): Promise<Entity[]> {\n        // if no ids passed, no need to execute a query - just return an empty array of values\n        if (!ids.length) return Promise.resolve([])\n\n        const metadata = this.connection.getMetadata(entityClass)\n        return this.createQueryBuilder<Entity>(\n            entityClass as any,\n            metadata.name,\n        )\n            .andWhereInIds(ids)\n            .getMany()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // prepare alias for built query\n        let alias: string = metadata.name\n        if (options && options.join) {\n            alias = options.join.alias\n        }\n\n        if (!options.where) {\n            throw new Error(\n                `You must provide selection conditions in order to find a single row.`,\n            )\n        }\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, alias)\n            .setFindOptions({\n                ...options,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                where,\n                take: 1,\n            })\n            .getOne()\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        const metadata = this.connection.getMetadata(entityClass)\n\n        // create query builder and apply find options\n        return this.createQueryBuilder<Entity>(entityClass, metadata.name)\n            .setFindOptions({\n                take: 1,\n            })\n            .whereInIds(metadata.ensureEntityIdMap(id))\n            .getOne()\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        options: FindOneOptions<Entity>,\n    ): Promise<Entity> {\n        return this.findOne<Entity>(entityClass as any, options).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, options),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.findOneBy<Entity>(entityClass as any, where).then(\n            (value) => {\n                if (value === null) {\n                    return Promise.reject(\n                        new EntityNotFoundError(entityClass, where),\n                    )\n                }\n                return Promise.resolve(value)\n            },\n        )\n    }\n\n    /**\n     * Clears all the data from the given table (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    async clear<Entity>(entityClass: EntityTarget<Entity>): Promise<void> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const queryRunner =\n            this.queryRunner || this.connection.createQueryRunner()\n        try {\n            return await queryRunner.clearTable(metadata.tablePath) // await is needed here because we are using finally\n        } finally {\n            if (!this.queryRunner) await queryRunner.release()\n        }\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    async increment<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" + \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    async decrement<Entity extends ObjectLiteral>(\n        entityClass: EntityTarget<Entity>,\n        conditions: any,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        const metadata = this.connection.getMetadata(entityClass)\n        const column = metadata.findColumnWithPropertyPath(propertyPath)\n        if (!column)\n            throw new TypeORMError(\n                `Column ${propertyPath} was not found in ${metadata.targetName} entity.`,\n            )\n\n        if (isNaN(Number(value)))\n            throw new TypeORMError(`Value \"${value}\" is not a number.`)\n\n        // convert possible embeded path \"social.likes\" into object { social: { like: () => value } }\n        const values: QueryDeepPartialEntity<Entity> = propertyPath\n            .split(\".\")\n            .reduceRight(\n                (value, key) => ({ [key]: value } as any),\n                () =>\n                    this.connection.driver.escape(column.databaseName) +\n                    \" - \" +\n                    value,\n            )\n\n        return this.createQueryBuilder<Entity>(entityClass as any, \"entity\")\n            .update(entityClass)\n            .set(values)\n            .where(conditions)\n            .execute()\n    }\n\n    /**\n     * Gets repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): Repository<Entity> {\n        // find already created repository instance and return it if found\n        const repoFromMap = this.repositories.get(target)\n        if (repoFromMap) return repoFromMap\n\n        // if repository was not found then create it, store its instance and return it\n        if (this.connection.driver.options.type === \"mongodb\") {\n            const newRepository = new MongoRepository(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        } else {\n            const newRepository = new Repository<any>(\n                target,\n                this,\n                this.queryRunner,\n            )\n            this.repositories.set(target, newRepository)\n            return newRepository\n        }\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * If single database connection mode is used, then repository is obtained from the\n     * repository aggregator, where each repository is individually created for this entity manager.\n     * When single database connection is not used, repository is being obtained from the connection.\n     */\n    getTreeRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): TreeRepository<Entity> {\n        // tree tables aren't supported by some drivers (mongodb)\n        if (this.connection.driver.treeSupport === false)\n            throw new TreeRepositoryNotSupportedError(this.connection.driver)\n\n        // find already created repository instance and return it if found\n        const repository = this.treeRepositories.find(\n            (repository) => repository.target === target,\n        )\n        if (repository) return repository\n\n        // check if repository is real tree repository\n        const newRepository = new TreeRepository(target, this, this.queryRunner)\n        this.treeRepositories.push(newRepository)\n        return newRepository\n    }\n\n    /**\n     * Gets mongodb repository for the given entity class.\n     */\n    getMongoRepository<Entity extends ObjectLiteral>(\n        target: EntityTarget<Entity>,\n    ): MongoRepository<Entity> {\n        return this.connection.getMongoRepository<Entity>(target)\n    }\n\n    /**\n     * Creates a new repository instance out of a given Repository and\n     * sets current EntityManager instance to it. Used to work with custom repositories\n     * in transactions.\n     */\n    withRepository<Entity extends ObjectLiteral, R extends Repository<any>>(\n        repository: R & Repository<Entity>,\n    ): R {\n        const repositoryConstructor =\n            repository.constructor as typeof Repository\n        const { target, manager, queryRunner, ...otherRepositoryProperties } =\n            repository\n        return Object.assign(\n            new repositoryConstructor(repository.target, this) as R,\n            {\n                ...otherRepositoryProperties,\n            },\n        )\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     *\n     * @deprecated use Repository.extend to create custom repositories\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        const entityRepositoryMetadataArgs =\n            getMetadataArgsStorage().entityRepositories.find((repository) => {\n                return (\n                    repository.target ===\n                    (typeof customRepository === \"function\"\n                        ? customRepository\n                        : (customRepository as any).constructor)\n                )\n            })\n        if (!entityRepositoryMetadataArgs)\n            throw new CustomRepositoryNotFoundError(customRepository)\n\n        const entityMetadata = entityRepositoryMetadataArgs.entity\n            ? this.connection.getMetadata(entityRepositoryMetadataArgs.entity)\n            : undefined\n        const entityRepositoryInstance =\n            new (entityRepositoryMetadataArgs.target as any)(\n                this,\n                entityMetadata,\n            )\n\n        // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n        // however we need these properties for internal work of the class\n        if (entityRepositoryInstance instanceof AbstractRepository) {\n            if (!(entityRepositoryInstance as any)[\"manager\"])\n                (entityRepositoryInstance as any)[\"manager\"] = this\n        } else {\n            if (!entityMetadata)\n                throw new CustomRepositoryCannotInheritRepositoryError(\n                    customRepository,\n                )\n            ;(entityRepositoryInstance as any)[\"manager\"] = this\n            ;(entityRepositoryInstance as any)[\"metadata\"] = entityMetadata\n        }\n\n        return entityRepositoryInstance\n    }\n\n    /**\n     * Releases all resources used by entity manager.\n     * This is used when entity manager is created with a single query runner,\n     * and this single query runner needs to be released after job with entity manager is done.\n     */\n    async release(): Promise<void> {\n        if (!this.queryRunner) throw new NoNeedToReleaseEntityManagerError()\n\n        return this.queryRunner.release()\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/entity-manager/MongoEntityManager.d.ts b/node_modules/typeorm/entity-manager/MongoEntityManager.d.ts
index 4d426e5..542c64b 100644
--- a/node_modules/typeorm/entity-manager/MongoEntityManager.d.ts
+++ b/node_modules/typeorm/entity-manager/MongoEntityManager.d.ts
@@ -1,19 +1,19 @@
-import { EntityManager } from "./EntityManager";
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { MongoQueryRunner } from "../driver/mongodb/MongoQueryRunner";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { BulkWriteResult, AggregationCursor, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult as DeleteResultMongoDb, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult as UpdateResultMongoDb, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions, ObjectId, FilterOperators } from "../driver/mongodb/typings";
-import { DataSource } from "../data-source/DataSource";
-import { MongoFindManyOptions } from "../find-options/mongodb/MongoFindManyOptions";
-import { MongoFindOneOptions } from "../find-options/mongodb/MongoFindOneOptions";
-import { FindOptionsSelect, FindOptionsSelectByString } from "../find-options/FindOptionsSelect";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { MongoQueryRunner } from "typeorm/driver/mongodb/MongoQueryRunner";
+import { FindManyOptions } from "typeorm/find-options/FindManyOptions";
+import { QueryDeepPartialEntity } from "typeorm/query-builder/QueryPartialEntity";
+import { InsertResult } from "typeorm/query-builder/result/InsertResult";
+import { UpdateResult } from "typeorm/query-builder/result/UpdateResult";
+import { DeleteResult } from "typeorm/query-builder/result/DeleteResult";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { BulkWriteResult, AggregationCursor, Collection, FindCursor, Document, AggregateOptions, AnyBulkWriteOperation, BulkWriteOptions, Filter, CountOptions, IndexSpecification, CreateIndexesOptions, IndexDescription, DeleteResult as DeleteResultMongoDb, DeleteOptions, CommandOperationOptions, FindOneAndDeleteOptions, FindOneAndReplaceOptions, UpdateFilter, FindOneAndUpdateOptions, RenameOptions, ReplaceOptions, UpdateResult as UpdateResultMongoDb, CollStats, CollStatsOptions, ChangeStreamOptions, ChangeStream, UpdateOptions, ListIndexesOptions, ListIndexesCursor, OptionalId, InsertOneOptions, InsertOneResult, InsertManyResult, UnorderedBulkOperation, OrderedBulkOperation, IndexInformationOptions, ObjectId, FilterOperators, CountDocumentsOptions } from "typeorm/driver/mongodb/typings";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { MongoFindManyOptions } from "typeorm/find-options/mongodb/MongoFindManyOptions";
+import { MongoFindOneOptions } from "typeorm/find-options/mongodb/MongoFindOneOptions";
+import { FindOptionsSelect, FindOptionsSelectByString } from "typeorm/find-options/FindOptionsSelect";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
 /**
  * Entity manager supposed to work with any entity, automatically find its repository and call its methods,
  * whatever entity type are you passing.
@@ -114,6 +114,10 @@ export declare class MongoEntityManager extends EntityManager {
      * Count number of matching documents in the db to a query.
      */
     count<Entity>(entityClassOrName: EntityTarget<Entity>, query?: Filter<Document>, options?: CountOptions): Promise<number>;
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments<Entity>(entityClassOrName: EntityTarget<Entity>, query?: Filter<Document>, options?: CountDocumentsOptions): Promise<number>;
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/entity-manager/MongoEntityManager.js b/node_modules/typeorm/entity-manager/MongoEntityManager.js
index aaabde5..2214fe3 100644
--- a/node_modules/typeorm/entity-manager/MongoEntityManager.js
+++ b/node_modules/typeorm/entity-manager/MongoEntityManager.js
@@ -262,6 +262,13 @@ class MongoEntityManager extends EntityManager_1.EntityManager {
         const metadata = this.connection.getMetadata(entityClassOrName);
         return this.mongoQueryRunner.count(metadata.tableName, query, options);
     }
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments(entityClassOrName, query = {}, options = {}) {
+        const metadata = this.connection.getMetadata(entityClassOrName);
+        return this.mongoQueryRunner.countDocuments(metadata.tableName, query, options);
+    }
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/entity-manager/MongoEntityManager.js.map b/node_modules/typeorm/entity-manager/MongoEntityManager.js.map
index dd4a7c0..7683548 100644
--- a/node_modules/typeorm/entity-manager/MongoEntityManager.js.map
+++ b/node_modules/typeorm/entity-manager/MongoEntityManager.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":"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","file":"MongoEntityManager.js","sourcesContent":["import { EntityManager } from \"./EntityManager\"\nimport { EntityTarget } from \"../common/EntityTarget\"\n\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\"\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\n\nimport {\n    BulkWriteResult,\n    AggregationCursor,\n    Collection,\n    FindCursor,\n    Document,\n    AggregateOptions,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    Filter,\n    CountOptions,\n    IndexSpecification,\n    CreateIndexesOptions,\n    IndexDescription,\n    DeleteResult as DeleteResultMongoDb,\n    DeleteOptions,\n    CommandOperationOptions,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    UpdateFilter,\n    FindOneAndUpdateOptions,\n    RenameOptions,\n    ReplaceOptions,\n    UpdateResult as UpdateResultMongoDb,\n    CollStats,\n    CollStatsOptions,\n    ChangeStreamOptions,\n    ChangeStream,\n    UpdateOptions,\n    ListIndexesOptions,\n    ListIndexesCursor,\n    OptionalId,\n    InsertOneOptions,\n    InsertOneResult,\n    InsertManyResult,\n    UnorderedBulkOperation,\n    OrderedBulkOperation,\n    IndexInformationOptions,\n    ObjectId,\n    FilterOperators,\n} from \"../driver/mongodb/typings\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport {\n    FindOptionsSelect,\n    FindOptionsSelectByString,\n} from \"../find-options/FindOptionsSelect\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"MongoEntityManager\")\n\n    get mongoQueryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver)\n            .queryRunner as MongoQueryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options.\n     */\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, options)\n    }\n\n    /**\n     * Finds entities that match given where conditions.\n     */\n    async findAndCountBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead.\n     */\n    async findByIds<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        ids: any[],\n        optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            ) || {}\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        query[\"_id\"] = {\n            $in: ids.map((id) => {\n                if (typeof id === \"string\") {\n                    return new objectIdInstance(id)\n                }\n\n                if (typeof id === \"object\") {\n                    if (id instanceof objectIdInstance) {\n                        return id\n                    }\n\n                    const propertyName = metadata.objectIdColumn!.propertyName\n\n                    if (id[propertyName] instanceof objectIdInstance) {\n                        return id[propertyName]\n                    }\n                }\n            }),\n        }\n\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, id)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult()\n        if (Array.isArray(entity)) {\n            result.raw = await this.insertMany(target, entity)\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                let insertedId = result.raw.insertedIds[key]\n                result.generatedMaps.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n                result.identifiers.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n            })\n        } else {\n            result.raw = await this.insertOne(target, entity)\n            result.generatedMaps.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n            result.identifiers.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n        }\n\n        return result\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        const result = new UpdateResult()\n\n        if (Array.isArray(criteria)) {\n            const updateResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.update(target, criteriaItem, partialEntity)\n                }),\n            )\n\n            result.raw = updateResults.map((r) => r.raw)\n            result.affected = updateResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n            result.generatedMaps = updateResults.reduce(\n                (c, r) => c.concat(r.generatedMaps),\n                [] as ObjectLiteral[],\n            )\n        } else {\n            const metadata = this.connection.getMetadata(target)\n            const mongoResult = await this.updateMany(\n                target,\n                this.convertMixedCriteria(metadata, criteria),\n                { $set: partialEntity },\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.modifiedCount\n        }\n\n        return result\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral[],\n    ): Promise<DeleteResult> {\n        const result = new DeleteResult()\n\n        if (Array.isArray(criteria)) {\n            const deleteResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.delete(target, criteriaItem)\n                }),\n            )\n\n            result.raw = deleteResults.map((r) => r.raw)\n            result.affected = deleteResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n        } else {\n            const mongoResult = await this.deleteMany(\n                target,\n                this.convertMixedCriteria(\n                    this.connection.getMetadata(target),\n                    criteria,\n                ),\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.deletedCount\n        }\n\n        return result\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.cursor(metadata.tableName, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.createCursor(entityClassOrName, query)\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        operations: AnyBulkWriteOperation<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.bulkWrite(\n            metadata.tableName,\n            operations,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.count(metadata.tableName, query, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n        options?: CountOptions,\n    ): Promise<number> {\n        return this.count(entityClassOrName, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        fieldOrSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndex(\n            metadata.tableName,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexSpecs: IndexDescription[],\n    ): Promise<string[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndexes(\n            metadata.tableName,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteMany(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteOne(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        key: string,\n        query: Filter<Document>,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.distinct(\n            metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndex(\n            metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndDelete(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        replacement: Document,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndReplace(\n            metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndUpdate(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexes: string | string[],\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexExists(\n            metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: IndexInformationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexInformation(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeOrderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        docs: OptionalId<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertMany(\n            metadata.tableName,\n            docs,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        doc: OptionalId<Document>,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.isCapped(metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: ListIndexesOptions,\n    ): ListIndexesCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.listCollectionIndexes(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        newName: string,\n        options?: RenameOptions,\n    ): Promise<Collection<Document>> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.rename(\n            metadata.tableName,\n            newName,\n            options,\n        )\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        doc: Document,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.replaceOne(\n            metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: CollStatsOptions,\n    ): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.stats(metadata.tableName, options)\n    }\n\n    watch<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.watch(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateMany(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateOne(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>\n            | any[]\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindOneOptions<Entity>\n            | Partial<Entity>\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1\n                    break\n                case \"ASC\":\n                    orderCriteria[key] = 1\n                    break\n                default:\n                    orderCriteria[key] = order[key]\n            }\n            return orderCriteria\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    protected convertFindOptionsSelectToProjectCriteria(\n        selects: FindOptionsSelect<any> | FindOptionsSelectByString<any>,\n    ) {\n        if (Array.isArray(selects)) {\n            return selects.reduce((projectCriteria, key) => {\n                projectCriteria[key] = 1\n                return projectCriteria\n            }, {} as any)\n        } else {\n            // todo: implement\n            return {}\n        }\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(\n        metadata: EntityMetadata,\n        idMap: any,\n    ): ObjectLiteral {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n\n        // check first if it's ObjectId compatible:\n        // string, number, Buffer, ObjectId or ObjectId-like\n        if (objectIdInstance.isValid(idMap)) {\n            return {\n                _id: new objectIdInstance(idMap),\n            }\n        }\n\n        // if it's some other type of object build a query from the columns\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\n        if (ObjectUtils.isObject(idMap)) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap)\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue\n                return query\n            }, {} as any)\n        }\n\n        // last resort: try to convert it to an ObjectId anyway\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\n        // it can still pass with null/undefined\n        return {\n            _id: new objectIdInstance(idMap),\n        }\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity extends ObjectLiteral>(\n        metadata: EntityMetadata,\n        cursor: FindCursor<Entity> | AggregationCursor<Entity>,\n    ) {\n        const queryRunner = this.mongoQueryRunner\n        cursor.toArray = () =>\n            cursor\n                .clone()\n                .toArray()\n                .then(async (results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer()\n                    const entities = transformer.transformAll(results, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\n                        \"Load\",\n                        metadata,\n                        entities,\n                    )\n                    return entities\n                })\n\n        cursor.next = () =>\n            cursor\n                .clone()\n                .next()\n                .then(async (result: Entity) => {\n                    if (!result) {\n                        return result\n                    }\n                    const transformer = new DocumentToEntityTransformer()\n                    const entity = transformer.transform(result, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\"Load\", metadata, [\n                        entity,\n                    ])\n                    return entity\n                })\n    }\n\n    protected filterSoftDeleted<Entity>(\n        cursor: FindCursor<Entity>,\n        deleteDateColumn: ColumnMetadata,\n        query?: ObjectLiteral,\n    ) {\n        const { $or, ...restQuery } = query ?? {}\n        cursor.filter({\n            $or: [\n                { [deleteDateColumn.propertyName]: { $eq: null } },\n                ...(Array.isArray($or) ? $or : []),\n            ],\n            ...restQuery,\n        })\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    protected async executeFindOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: any,\n        maybeOptions?: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        const id =\n            optionsOrConditions instanceof objectIdInstance ||\n            typeof optionsOrConditions === \"string\"\n                ? optionsOrConditions\n                : undefined\n        const findOneOptionsOrConditions = (\n            id ? maybeOptions : optionsOrConditions\n        ) as any\n        const query =\n            this.convertFindOneOptionsOrConditionsToMongodbQuery(\n                findOneOptionsOrConditions,\n            ) || {}\n        if (id) {\n            query[\"_id\"] =\n                id instanceof objectIdInstance ? id : new ObjectId(id)\n        }\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\n            if (findOneOptionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        findOneOptionsOrConditions.select,\n                    ),\n                )\n            if (findOneOptionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        findOneOptionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !findOneOptionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray()\n        return result.length > 0 ? result[0] : null\n    }\n\n    protected async executeFind<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | any[],\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async executeFindAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: MongoFindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<[Entity[], number]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ])\n        return [results, parseInt(count)]\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/entity-manager/MongoEntityManager.ts"],"names":[],"mappings":"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","file":"MongoEntityManager.js","sourcesContent":["import { EntityManager } from \"./EntityManager\"\nimport { EntityTarget } from \"../common/EntityTarget\"\n\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { MongoQueryRunner } from \"../driver/mongodb/MongoQueryRunner\"\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\"\nimport { DocumentToEntityTransformer } from \"../query-builder/transformer/DocumentToEntityTransformer\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { FindOptionsUtils } from \"../find-options/FindOptionsUtils\"\nimport { PlatformTools } from \"../platform/PlatformTools\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\n\nimport {\n    BulkWriteResult,\n    AggregationCursor,\n    Collection,\n    FindCursor,\n    Document,\n    AggregateOptions,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    Filter,\n    CountOptions,\n    IndexSpecification,\n    CreateIndexesOptions,\n    IndexDescription,\n    DeleteResult as DeleteResultMongoDb,\n    DeleteOptions,\n    CommandOperationOptions,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    UpdateFilter,\n    FindOneAndUpdateOptions,\n    RenameOptions,\n    ReplaceOptions,\n    UpdateResult as UpdateResultMongoDb,\n    CollStats,\n    CollStatsOptions,\n    ChangeStreamOptions,\n    ChangeStream,\n    UpdateOptions,\n    ListIndexesOptions,\n    ListIndexesCursor,\n    OptionalId,\n    InsertOneOptions,\n    InsertOneResult,\n    InsertManyResult,\n    UnorderedBulkOperation,\n    OrderedBulkOperation,\n    IndexInformationOptions,\n    ObjectId,\n    FilterOperators,\n    CountDocumentsOptions,\n} from \"../driver/mongodb/typings\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport {\n    FindOptionsSelect,\n    FindOptionsSelectByString,\n} from \"../find-options/FindOptionsSelect\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\n\n/**\n * Entity manager supposed to work with any entity, automatically find its repository and call its methods,\n * whatever entity type are you passing.\n *\n * This implementation is used for MongoDB driver which has some specifics in its EntityManager.\n */\nexport class MongoEntityManager extends EntityManager {\n    readonly \"@instanceof\" = Symbol.for(\"MongoEntityManager\")\n\n    get mongoQueryRunner(): MongoQueryRunner {\n        return (this.connection.driver as MongoDriver)\n            .queryRunner as MongoQueryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: DataSource) {\n        super(connection)\n    }\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds entities that match given find options.\n     */\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async find<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    async findAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, options)\n    }\n\n    /**\n     * Finds entities that match given where conditions.\n     */\n    async findAndCountBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<[Entity[], number]> {\n        return this.executeFindAndCount(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead.\n     */\n    async findByIds<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        ids: any[],\n        optionsOrConditions?: FindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<Entity[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            ) || {}\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        query[\"_id\"] = {\n            $in: ids.map((id) => {\n                if (typeof id === \"string\") {\n                    return new objectIdInstance(id)\n                }\n\n                if (typeof id === \"object\") {\n                    if (id instanceof objectIdInstance) {\n                        return id\n                    }\n\n                    const propertyName = metadata.objectIdColumn!.propertyName\n\n                    if (id[propertyName] instanceof objectIdInstance) {\n                        return id[propertyName]\n                    }\n                }\n            }),\n        }\n\n        const cursor = this.createEntityCursor<Entity>(\n            entityClassOrName,\n            query as Filter<Entity>,\n        )\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    async findOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        where: any,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.executeFindOne(entityClassOrName, id)\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     * You can execute bulk inserts using this method.\n     */\n    async insert<Entity>(\n        target: EntityTarget<Entity>,\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        // todo: convert entity to its database name\n        const result = new InsertResult()\n        if (Array.isArray(entity)) {\n            result.raw = await this.insertMany(target, entity)\n            Object.keys(result.raw.insertedIds).forEach((key: any) => {\n                let insertedId = result.raw.insertedIds[key]\n                result.generatedMaps.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n                result.identifiers.push(\n                    this.connection.driver.createGeneratedMap(\n                        this.connection.getMetadata(target),\n                        insertedId,\n                    )!,\n                )\n            })\n        } else {\n            result.raw = await this.insertOne(target, entity)\n            result.generatedMaps.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n            result.identifiers.push(\n                this.connection.driver.createGeneratedMap(\n                    this.connection.getMetadata(target),\n                    result.raw.insertedId,\n                )!,\n            )\n        }\n\n        return result\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    async update<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        const result = new UpdateResult()\n\n        if (Array.isArray(criteria)) {\n            const updateResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.update(target, criteriaItem, partialEntity)\n                }),\n            )\n\n            result.raw = updateResults.map((r) => r.raw)\n            result.affected = updateResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n            result.generatedMaps = updateResults.reduce(\n                (c, r) => c.concat(r.generatedMaps),\n                [] as ObjectLiteral[],\n            )\n        } else {\n            const metadata = this.connection.getMetadata(target)\n            const mongoResult = await this.updateMany(\n                target,\n                this.convertMixedCriteria(metadata, criteria),\n                { $set: partialEntity },\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.modifiedCount\n        }\n\n        return result\n    }\n\n    /**\n     * Deletes entities by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    async delete<Entity>(\n        target: EntityTarget<Entity>,\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | ObjectLiteral[],\n    ): Promise<DeleteResult> {\n        const result = new DeleteResult()\n\n        if (Array.isArray(criteria)) {\n            const deleteResults = await Promise.all(\n                (criteria as any[]).map((criteriaItem) => {\n                    return this.delete(target, criteriaItem)\n                }),\n            )\n\n            result.raw = deleteResults.map((r) => r.raw)\n            result.affected = deleteResults\n                .map((r) => r.affected || 0)\n                .reduce((c, r) => c + r, 0)\n        } else {\n            const mongoResult = await this.deleteMany(\n                target,\n                this.convertMixedCriteria(\n                    this.connection.getMetadata(target),\n                    criteria,\n                ),\n            )\n\n            result.raw = mongoResult\n            result.affected = mongoResult.deletedCount\n        }\n\n        return result\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<Entity, T = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<T> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.cursor(metadata.tableName, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral = {},\n    ): FindCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.createCursor(entityClassOrName, query)\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<Entity, R = any>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<R> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline: Document[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        const cursor = this.mongoQueryRunner.aggregate(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n        this.applyEntityTransformationToCursor(metadata, cursor)\n        return cursor\n    }\n\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        operations: AnyBulkWriteOperation<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.bulkWrite(\n            metadata.tableName,\n            operations,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.count(metadata.tableName, query, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countDocuments<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document> = {},\n        options: CountDocumentsOptions = {},\n    ): Promise<number> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.countDocuments(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query?: ObjectLiteral,\n        options?: CountOptions,\n    ): Promise<number> {\n        return this.count(entityClassOrName, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        fieldOrSpec: IndexSpecification,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndex(\n            metadata.tableName,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexSpecs: IndexDescription[],\n    ): Promise<string[]> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.createCollectionIndexes(\n            metadata.tableName,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteMany(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        options: DeleteOptions = {},\n    ): Promise<DeleteResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.deleteOne(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        key: string,\n        query: Filter<Document>,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.distinct(\n            metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndex(\n            metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.dropCollectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndDelete(\n            metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        replacement: Document,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndReplace(\n            metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.findOneAndUpdate(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n    ): Promise<Document> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexes(metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        indexes: string | string[],\n    ): Promise<boolean> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexExists(\n            metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: IndexInformationOptions,\n    ): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.collectionIndexInformation(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): OrderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeOrderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.initializeUnorderedBulkOp(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        docs: OptionalId<Document>[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertMany(\n            metadata.tableName,\n            docs,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        doc: OptionalId<Document>,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.insertOne(metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped<Entity>(entityClassOrName: EntityTarget<Entity>): Promise<any> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.isCapped(metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: ListIndexesOptions,\n    ): ListIndexesCursor {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.listCollectionIndexes(\n            metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        newName: string,\n        options?: RenameOptions,\n    ): Promise<Collection<Document>> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.rename(\n            metadata.tableName,\n            newName,\n            options,\n        )\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        doc: Document,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.replaceOne(\n            metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        options?: CollStatsOptions,\n    ): Promise<CollStats> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.stats(metadata.tableName, options)\n    }\n\n    watch<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        pipeline?: Document[],\n        options?: ChangeStreamOptions,\n    ): ChangeStream {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.watch(\n            metadata.tableName,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateMany(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        query: Filter<Document>,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResultMongoDb> {\n        const metadata = this.connection.getMetadata(entityClassOrName)\n        return this.mongoQueryRunner.updateOne(\n            metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts FindManyOptions to mongodb query.\n     */\n    protected convertFindManyOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>\n            | any[]\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindManyOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOneOptions to mongodb query.\n     */\n    protected convertFindOneOptionsOrConditionsToMongodbQuery<Entity>(\n        optionsOrConditions:\n            | MongoFindOneOptions<Entity>\n            | Partial<Entity>\n            | undefined,\n    ): ObjectLiteral | undefined {\n        if (!optionsOrConditions) return undefined\n\n        if (FindOptionsUtils.isFindOneOptions<Entity>(optionsOrConditions))\n            // If where condition is passed as a string which contains sql we have to ignore\n            // as mongo is not a sql database\n            return typeof optionsOrConditions.where === \"string\"\n                ? {}\n                : optionsOrConditions.where\n\n        return optionsOrConditions\n    }\n\n    /**\n     * Converts FindOptions into mongodb order by criteria.\n     */\n    protected convertFindOptionsOrderToOrderCriteria(order: ObjectLiteral) {\n        return Object.keys(order).reduce((orderCriteria, key) => {\n            switch (order[key]) {\n                case \"DESC\":\n                    orderCriteria[key] = -1\n                    break\n                case \"ASC\":\n                    orderCriteria[key] = 1\n                    break\n                default:\n                    orderCriteria[key] = order[key]\n            }\n            return orderCriteria\n        }, {} as ObjectLiteral)\n    }\n\n    /**\n     * Converts FindOptions into mongodb select by criteria.\n     */\n    protected convertFindOptionsSelectToProjectCriteria(\n        selects: FindOptionsSelect<any> | FindOptionsSelectByString<any>,\n    ) {\n        if (Array.isArray(selects)) {\n            return selects.reduce((projectCriteria, key) => {\n                projectCriteria[key] = 1\n                return projectCriteria\n            }, {} as any)\n        } else {\n            // todo: implement\n            return {}\n        }\n    }\n\n    /**\n     * Ensures given id is an id for query.\n     */\n    protected convertMixedCriteria(\n        metadata: EntityMetadata,\n        idMap: any,\n    ): ObjectLiteral {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n\n        // check first if it's ObjectId compatible:\n        // string, number, Buffer, ObjectId or ObjectId-like\n        if (objectIdInstance.isValid(idMap)) {\n            return {\n                _id: new objectIdInstance(idMap),\n            }\n        }\n\n        // if it's some other type of object build a query from the columns\n        // this check needs to be after the ObjectId check, because a valid ObjectId is also an Object instance\n        if (ObjectUtils.isObject(idMap)) {\n            return metadata.columns.reduce((query, column) => {\n                const columnValue = column.getEntityValue(idMap)\n                if (columnValue !== undefined)\n                    query[column.databasePath] = columnValue\n                return query\n            }, {} as any)\n        }\n\n        // last resort: try to convert it to an ObjectId anyway\n        // most likely it will fail, but we want to be backwards compatible and keep the same thrown Errors.\n        // it can still pass with null/undefined\n        return {\n            _id: new objectIdInstance(idMap),\n        }\n    }\n\n    /**\n     * Overrides cursor's toArray and next methods to convert results to entity automatically.\n     */\n    protected applyEntityTransformationToCursor<Entity extends ObjectLiteral>(\n        metadata: EntityMetadata,\n        cursor: FindCursor<Entity> | AggregationCursor<Entity>,\n    ) {\n        const queryRunner = this.mongoQueryRunner\n        cursor.toArray = () =>\n            cursor\n                .clone()\n                .toArray()\n                .then(async (results: Entity[]) => {\n                    const transformer = new DocumentToEntityTransformer()\n                    const entities = transformer.transformAll(results, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\n                        \"Load\",\n                        metadata,\n                        entities,\n                    )\n                    return entities\n                })\n\n        cursor.next = () =>\n            cursor\n                .clone()\n                .next()\n                .then(async (result: Entity) => {\n                    if (!result) {\n                        return result\n                    }\n                    const transformer = new DocumentToEntityTransformer()\n                    const entity = transformer.transform(result, metadata)\n                    // broadcast \"load\" events\n                    await queryRunner.broadcaster.broadcast(\"Load\", metadata, [\n                        entity,\n                    ])\n                    return entity\n                })\n    }\n\n    protected filterSoftDeleted<Entity>(\n        cursor: FindCursor<Entity>,\n        deleteDateColumn: ColumnMetadata,\n        query?: ObjectLiteral,\n    ) {\n        const { $or, ...restQuery } = query ?? {}\n        cursor.filter({\n            $or: [\n                { [deleteDateColumn.propertyName]: { $eq: null } },\n                ...(Array.isArray($or) ? $or : []),\n            ],\n            ...restQuery,\n        })\n    }\n\n    /**\n     * Finds first entity that matches given conditions and/or find options.\n     */\n    protected async executeFindOne<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: any,\n        maybeOptions?: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        const objectIdInstance = PlatformTools.load(\"mongodb\").ObjectId\n        const id =\n            optionsOrConditions instanceof objectIdInstance ||\n            typeof optionsOrConditions === \"string\"\n                ? optionsOrConditions\n                : undefined\n        const findOneOptionsOrConditions = (\n            id ? maybeOptions : optionsOrConditions\n        ) as any\n        const query =\n            this.convertFindOneOptionsOrConditionsToMongodbQuery(\n                findOneOptionsOrConditions,\n            ) || {}\n        if (id) {\n            query[\"_id\"] =\n                id instanceof objectIdInstance ? id : new ObjectId(id)\n        }\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n        if (FindOptionsUtils.isFindOneOptions(findOneOptionsOrConditions)) {\n            if (findOneOptionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        findOneOptionsOrConditions.select,\n                    ),\n                )\n            if (findOneOptionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        findOneOptionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !findOneOptionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n\n        // const result = await cursor.limit(1).next();\n        const result = await cursor.limit(1).toArray()\n        return result.length > 0 ? result[0] : null\n    }\n\n    protected async executeFind<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?:\n            | MongoFindManyOptions<Entity>\n            | Partial<Entity>\n            | any[],\n    ): Promise<Entity[]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = this.createEntityCursor<Entity>(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        return cursor.toArray()\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    async executeFindAndCount<Entity>(\n        entityClassOrName: EntityTarget<Entity>,\n        optionsOrConditions?: MongoFindManyOptions<Entity> | Partial<Entity>,\n    ): Promise<[Entity[], number]> {\n        const query =\n            this.convertFindManyOptionsOrConditionsToMongodbQuery(\n                optionsOrConditions,\n            )\n        const cursor = await this.createEntityCursor(entityClassOrName, query)\n        const deleteDateColumn =\n            this.connection.getMetadata(entityClassOrName).deleteDateColumn\n\n        if (FindOptionsUtils.isFindManyOptions(optionsOrConditions)) {\n            if (optionsOrConditions.select)\n                cursor.project(\n                    this.convertFindOptionsSelectToProjectCriteria(\n                        optionsOrConditions.select,\n                    ),\n                )\n            if (optionsOrConditions.skip) cursor.skip(optionsOrConditions.skip)\n            if (optionsOrConditions.take) cursor.limit(optionsOrConditions.take)\n            if (optionsOrConditions.order)\n                cursor.sort(\n                    this.convertFindOptionsOrderToOrderCriteria(\n                        optionsOrConditions.order,\n                    ),\n                )\n            if (deleteDateColumn && !optionsOrConditions.withDeleted) {\n                this.filterSoftDeleted(cursor, deleteDateColumn, query)\n            }\n        } else if (deleteDateColumn) {\n            this.filterSoftDeleted(cursor, deleteDateColumn, query)\n        }\n        const [results, count] = await Promise.all<any>([\n            cursor.toArray(),\n            this.count(entityClassOrName, query),\n        ])\n        return [results, parseInt(count)]\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/entity-manager/SqljsEntityManager.d.ts b/node_modules/typeorm/entity-manager/SqljsEntityManager.d.ts
index 18e5c59..b43dce6 100644
--- a/node_modules/typeorm/entity-manager/SqljsEntityManager.d.ts
+++ b/node_modules/typeorm/entity-manager/SqljsEntityManager.d.ts
@@ -1,6 +1,6 @@
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { EntityManager } from "./EntityManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
 /**
  * A special EntityManager that includes import/export and load/save function
  * that are unique to Sql.js.
diff --git a/node_modules/typeorm/entity-schema/EntitySchema.d.ts b/node_modules/typeorm/entity-schema/EntitySchema.d.ts
index 36b35c2..c65a963 100644
--- a/node_modules/typeorm/entity-schema/EntitySchema.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchema.d.ts
@@ -1,4 +1,4 @@
-import { EntitySchemaOptions } from "./EntitySchemaOptions";
+import { EntitySchemaOptions } from "typeorm/entity-schema/EntitySchemaOptions";
 /**
  * Interface for entity metadata mappings stored inside "schemas" instead of models decorated by decorators.
  */
diff --git a/node_modules/typeorm/entity-schema/EntitySchemaColumnOptions.d.ts b/node_modules/typeorm/entity-schema/EntitySchemaColumnOptions.d.ts
index c25bbc2..8877125 100644
--- a/node_modules/typeorm/entity-schema/EntitySchemaColumnOptions.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchemaColumnOptions.d.ts
@@ -1,6 +1,6 @@
-import { ColumnType } from "../driver/types/ColumnTypes";
-import { ValueTransformer } from "../decorator/options/ValueTransformer";
-import { SpatialColumnOptions } from "../decorator/options/SpatialColumnOptions";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
+import { ValueTransformer } from "typeorm/decorator/options/ValueTransformer";
+import { SpatialColumnOptions } from "typeorm/decorator/options/SpatialColumnOptions";
 export interface EntitySchemaColumnOptions extends SpatialColumnOptions {
     /**
      * Indicates if this column is a primary column.
diff --git a/node_modules/typeorm/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts b/node_modules/typeorm/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts
index 959b376..ae8833f 100644
--- a/node_modules/typeorm/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchemaEmbeddedColumnOptions.d.ts
@@ -1,4 +1,4 @@
-import { EntitySchema } from "./EntitySchema";
+import { EntitySchema } from "typeorm/entity-schema/EntitySchema";
 export declare class EntitySchemaEmbeddedColumnOptions {
     /**
      * Schema of embedded entity
diff --git a/node_modules/typeorm/entity-schema/EntitySchemaInheritanceOptions.d.ts b/node_modules/typeorm/entity-schema/EntitySchemaInheritanceOptions.d.ts
index a054205..08661a7 100644
--- a/node_modules/typeorm/entity-schema/EntitySchemaInheritanceOptions.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchemaInheritanceOptions.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../decorator/options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 export interface EntitySchemaInheritanceOptions {
     /**
      * Inheritance pattern.
diff --git a/node_modules/typeorm/entity-schema/EntitySchemaOptions.d.ts b/node_modules/typeorm/entity-schema/EntitySchemaOptions.d.ts
index 8995bfd..627d9c1 100644
--- a/node_modules/typeorm/entity-schema/EntitySchemaOptions.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchemaOptions.d.ts
@@ -1,14 +1,14 @@
-import { DataSource, EntitySchemaEmbeddedColumnOptions, SelectQueryBuilder } from "..";
-import { EntitySchemaIndexOptions } from "./EntitySchemaIndexOptions";
-import { EntitySchemaColumnOptions } from "./EntitySchemaColumnOptions";
-import { EntitySchemaRelationOptions } from "./EntitySchemaRelationOptions";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { TableType } from "../metadata/types/TableTypes";
-import { EntitySchemaUniqueOptions } from "./EntitySchemaUniqueOptions";
-import { EntitySchemaCheckOptions } from "./EntitySchemaCheckOptions";
-import { EntitySchemaExclusionOptions } from "./EntitySchemaExclusionOptions";
-import { EntitySchemaInheritanceOptions } from "./EntitySchemaInheritanceOptions";
-import { EntitySchemaRelationIdOptions } from "./EntitySchemaRelationIdOptions";
+import { DataSource, EntitySchemaEmbeddedColumnOptions, SelectQueryBuilder } from "typeorm";
+import { EntitySchemaIndexOptions } from "typeorm/entity-schema/EntitySchemaIndexOptions";
+import { EntitySchemaColumnOptions } from "typeorm/entity-schema/EntitySchemaColumnOptions";
+import { EntitySchemaRelationOptions } from "typeorm/entity-schema/EntitySchemaRelationOptions";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
+import { TableType } from "typeorm/metadata/types/TableTypes";
+import { EntitySchemaUniqueOptions } from "typeorm/entity-schema/EntitySchemaUniqueOptions";
+import { EntitySchemaCheckOptions } from "typeorm/entity-schema/EntitySchemaCheckOptions";
+import { EntitySchemaExclusionOptions } from "typeorm/entity-schema/EntitySchemaExclusionOptions";
+import { EntitySchemaInheritanceOptions } from "typeorm/entity-schema/EntitySchemaInheritanceOptions";
+import { EntitySchemaRelationIdOptions } from "typeorm/entity-schema/EntitySchemaRelationIdOptions";
 /**
  * Interface for entity metadata mappings stored inside "schemas" instead of models decorated by decorators.
  */
diff --git a/node_modules/typeorm/entity-schema/EntitySchemaRelationIdOptions.d.ts b/node_modules/typeorm/entity-schema/EntitySchemaRelationIdOptions.d.ts
index ebf7858..d3c8769 100644
--- a/node_modules/typeorm/entity-schema/EntitySchemaRelationIdOptions.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchemaRelationIdOptions.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 export interface EntitySchemaRelationIdOptions {
     /**
      * Name of relation.
diff --git a/node_modules/typeorm/entity-schema/EntitySchemaRelationOptions.d.ts b/node_modules/typeorm/entity-schema/EntitySchemaRelationOptions.d.ts
index 447457c..ad4032c 100644
--- a/node_modules/typeorm/entity-schema/EntitySchemaRelationOptions.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchemaRelationOptions.d.ts
@@ -1,11 +1,11 @@
-import { JoinColumnOptions } from "../decorator/options/JoinColumnOptions";
-import { RelationType } from "../metadata/types/RelationTypes";
-import { JoinTableMultipleColumnsOptions } from "../decorator/options/JoinTableMultipleColumnsOptions";
-import { DeferrableType } from "../metadata/types/DeferrableType";
-import { OnDeleteType } from "../metadata/types/OnDeleteType";
-import { OnUpdateType } from "../metadata/types/OnUpdateType";
-import { JoinTableOptions } from "../decorator/options/JoinTableOptions";
-import { EntityTarget } from "../common/EntityTarget";
+import { JoinColumnOptions } from "typeorm/decorator/options/JoinColumnOptions";
+import { RelationType } from "typeorm/metadata/types/RelationTypes";
+import { JoinTableMultipleColumnsOptions } from "typeorm/decorator/options/JoinTableMultipleColumnsOptions";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
+import { OnDeleteType } from "typeorm/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/metadata/types/OnUpdateType";
+import { JoinTableOptions } from "typeorm/decorator/options/JoinTableOptions";
+import { EntityTarget } from "typeorm/common/EntityTarget";
 export interface EntitySchemaRelationOptions {
     /**
      * Indicates with which entity this relation is made.
diff --git a/node_modules/typeorm/entity-schema/EntitySchemaUniqueOptions.d.ts b/node_modules/typeorm/entity-schema/EntitySchemaUniqueOptions.d.ts
index 368f4af..aa84aeb 100644
--- a/node_modules/typeorm/entity-schema/EntitySchemaUniqueOptions.d.ts
+++ b/node_modules/typeorm/entity-schema/EntitySchemaUniqueOptions.d.ts
@@ -1,4 +1,4 @@
-import { DeferrableType } from "../metadata/types/DeferrableType";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
 export interface EntitySchemaUniqueOptions {
     /**
      * Unique constraint name.
diff --git a/node_modules/typeorm/error/AlreadyHasActiveConnectionError.d.ts b/node_modules/typeorm/error/AlreadyHasActiveConnectionError.d.ts
index 5329bed..09fb55e 100644
--- a/node_modules/typeorm/error/AlreadyHasActiveConnectionError.d.ts
+++ b/node_modules/typeorm/error/AlreadyHasActiveConnectionError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to recreate connection with the same name, but previous connection was not closed yet.
  */
diff --git a/node_modules/typeorm/error/CannotAttachTreeChildrenEntityError.d.ts b/node_modules/typeorm/error/CannotAttachTreeChildrenEntityError.d.ts
index 9947f60..54e8f95 100644
--- a/node_modules/typeorm/error/CannotAttachTreeChildrenEntityError.d.ts
+++ b/node_modules/typeorm/error/CannotAttachTreeChildrenEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user saves tree children entity but its parent is not saved yet.
  */
diff --git a/node_modules/typeorm/error/CannotConnectAlreadyConnectedError.d.ts b/node_modules/typeorm/error/CannotConnectAlreadyConnectedError.d.ts
index 48cbd98..f0a94d2 100644
--- a/node_modules/typeorm/error/CannotConnectAlreadyConnectedError.d.ts
+++ b/node_modules/typeorm/error/CannotConnectAlreadyConnectedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to connect when he already connected.
  */
diff --git a/node_modules/typeorm/error/CannotCreateEntityIdMapError.d.ts b/node_modules/typeorm/error/CannotCreateEntityIdMapError.d.ts
index bfaf176..d1e2bbc 100644
--- a/node_modules/typeorm/error/CannotCreateEntityIdMapError.d.ts
+++ b/node_modules/typeorm/error/CannotCreateEntityIdMapError.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user tries to create entity id map from the mixed id value,
  * but id value is a single value when entity requires multiple values.
diff --git a/node_modules/typeorm/error/CannotDetermineEntityError.d.ts b/node_modules/typeorm/error/CannotDetermineEntityError.d.ts
index d3f3a8a..3d9a739 100644
--- a/node_modules/typeorm/error/CannotDetermineEntityError.d.ts
+++ b/node_modules/typeorm/error/CannotDetermineEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user tries to save/remove/etc. constructor-less object (object literal) instead of entity.
  */
diff --git a/node_modules/typeorm/error/CannotExecuteNotConnectedError.d.ts b/node_modules/typeorm/error/CannotExecuteNotConnectedError.d.ts
index a7b2003..275d8a7 100644
--- a/node_modules/typeorm/error/CannotExecuteNotConnectedError.d.ts
+++ b/node_modules/typeorm/error/CannotExecuteNotConnectedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to execute operation allowed only if connection is opened.
  */
diff --git a/node_modules/typeorm/error/CannotGetEntityManagerNotConnectedError.d.ts b/node_modules/typeorm/error/CannotGetEntityManagerNotConnectedError.d.ts
index ecf88b8..08d8287 100644
--- a/node_modules/typeorm/error/CannotGetEntityManagerNotConnectedError.d.ts
+++ b/node_modules/typeorm/error/CannotGetEntityManagerNotConnectedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to access entity manager before connection is established.
  */
diff --git a/node_modules/typeorm/error/CannotReflectMethodParameterTypeError.d.ts b/node_modules/typeorm/error/CannotReflectMethodParameterTypeError.d.ts
index 8c1b794..657c78d 100644
--- a/node_modules/typeorm/error/CannotReflectMethodParameterTypeError.d.ts
+++ b/node_modules/typeorm/error/CannotReflectMethodParameterTypeError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when ORM cannot get method parameter's type.
  * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
diff --git a/node_modules/typeorm/error/CircularRelationsError.d.ts b/node_modules/typeorm/error/CircularRelationsError.d.ts
index ae78426..0ca9352 100644
--- a/node_modules/typeorm/error/CircularRelationsError.d.ts
+++ b/node_modules/typeorm/error/CircularRelationsError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when circular relations detected with nullable set to false.
  */
diff --git a/node_modules/typeorm/error/ColumnTypeUndefinedError.d.ts b/node_modules/typeorm/error/ColumnTypeUndefinedError.d.ts
index e36028d..a5fd476 100644
--- a/node_modules/typeorm/error/ColumnTypeUndefinedError.d.ts
+++ b/node_modules/typeorm/error/ColumnTypeUndefinedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when ORM cannot get column's type automatically.
  * Basically, when reflect-metadata is not available or tsconfig is not properly setup.
diff --git a/node_modules/typeorm/error/ConnectionIsNotSetError.d.ts b/node_modules/typeorm/error/ConnectionIsNotSetError.d.ts
index 1541558..f79397b 100644
--- a/node_modules/typeorm/error/ConnectionIsNotSetError.d.ts
+++ b/node_modules/typeorm/error/ConnectionIsNotSetError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user tries to execute operation that requires connection to be established.
  */
diff --git a/node_modules/typeorm/error/ConnectionNotFoundError.d.ts b/node_modules/typeorm/error/ConnectionNotFoundError.d.ts
index 3d5c4cd..1568d3e 100644
--- a/node_modules/typeorm/error/ConnectionNotFoundError.d.ts
+++ b/node_modules/typeorm/error/ConnectionNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to get connection that does not exist.
  */
diff --git a/node_modules/typeorm/error/CustomRepositoryCannotInheritRepositoryError.d.ts b/node_modules/typeorm/error/CustomRepositoryCannotInheritRepositoryError.d.ts
index 31e8606..87835a0 100644
--- a/node_modules/typeorm/error/CustomRepositoryCannotInheritRepositoryError.d.ts
+++ b/node_modules/typeorm/error/CustomRepositoryCannotInheritRepositoryError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown if custom repository inherits Repository class however entity is not set in @EntityRepository decorator.
  */
diff --git a/node_modules/typeorm/error/CustomRepositoryDoesNotHaveEntityError.d.ts b/node_modules/typeorm/error/CustomRepositoryDoesNotHaveEntityError.d.ts
index 32955f9..3a6e0d8 100644
--- a/node_modules/typeorm/error/CustomRepositoryDoesNotHaveEntityError.d.ts
+++ b/node_modules/typeorm/error/CustomRepositoryDoesNotHaveEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown if custom repositories that extend AbstractRepository classes does not have managed entity.
  */
diff --git a/node_modules/typeorm/error/CustomRepositoryNotFoundError.d.ts b/node_modules/typeorm/error/CustomRepositoryNotFoundError.d.ts
index 03079b3..896ba8a 100644
--- a/node_modules/typeorm/error/CustomRepositoryNotFoundError.d.ts
+++ b/node_modules/typeorm/error/CustomRepositoryNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown if custom repository was not found.
  */
diff --git a/node_modules/typeorm/error/DataTypeNotSupportedError.d.ts b/node_modules/typeorm/error/DataTypeNotSupportedError.d.ts
index 4901201..d38189d 100644
--- a/node_modules/typeorm/error/DataTypeNotSupportedError.d.ts
+++ b/node_modules/typeorm/error/DataTypeNotSupportedError.d.ts
@@ -1,7 +1,7 @@
-import { ColumnType } from "../driver/types/ColumnTypes";
-import { DatabaseType } from "../driver/types/DatabaseType";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
+import { DatabaseType } from "typeorm/driver/types/DatabaseType";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class DataTypeNotSupportedError extends TypeORMError {
     constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType);
 }
diff --git a/node_modules/typeorm/error/DriverOptionNotSetError.d.ts b/node_modules/typeorm/error/DriverOptionNotSetError.d.ts
index eaf039e..e8d87f4 100644
--- a/node_modules/typeorm/error/DriverOptionNotSetError.d.ts
+++ b/node_modules/typeorm/error/DriverOptionNotSetError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown if some required driver's option is not set.
  */
diff --git a/node_modules/typeorm/error/DriverPackageNotInstalledError.d.ts b/node_modules/typeorm/error/DriverPackageNotInstalledError.d.ts
index 5859509..62aa88e 100644
--- a/node_modules/typeorm/error/DriverPackageNotInstalledError.d.ts
+++ b/node_modules/typeorm/error/DriverPackageNotInstalledError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when required driver's package is not installed.
  */
diff --git a/node_modules/typeorm/error/EntityMetadataNotFoundError.d.ts b/node_modules/typeorm/error/EntityMetadataNotFoundError.d.ts
index 95ecd0d..dc6e9af 100644
--- a/node_modules/typeorm/error/EntityMetadataNotFoundError.d.ts
+++ b/node_modules/typeorm/error/EntityMetadataNotFoundError.d.ts
@@ -1,5 +1,5 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { TypeORMError } from "./TypeORMError";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class EntityMetadataNotFoundError extends TypeORMError {
     constructor(target: EntityTarget<any>);
     private stringifyTarget;
diff --git a/node_modules/typeorm/error/EntityNotFoundError.d.ts b/node_modules/typeorm/error/EntityNotFoundError.d.ts
index 0b7549b..f67201d 100644
--- a/node_modules/typeorm/error/EntityNotFoundError.d.ts
+++ b/node_modules/typeorm/error/EntityNotFoundError.d.ts
@@ -1,5 +1,5 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { TypeORMError } from "./TypeORMError";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.
  */
diff --git a/node_modules/typeorm/error/EntityPropertyNotFoundError.d.ts b/node_modules/typeorm/error/EntityPropertyNotFoundError.d.ts
index 48c7596..b839eca 100644
--- a/node_modules/typeorm/error/EntityPropertyNotFoundError.d.ts
+++ b/node_modules/typeorm/error/EntityPropertyNotFoundError.d.ts
@@ -1,5 +1,5 @@
-import { TypeORMError } from "./TypeORMError";
-import { EntityMetadata } from "../metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
 /**
  * Thrown when specified entity property was not found.
  */
diff --git a/node_modules/typeorm/error/FindRelationsNotFoundError.d.ts b/node_modules/typeorm/error/FindRelationsNotFoundError.d.ts
index ff84682..e6d9bdd 100644
--- a/node_modules/typeorm/error/FindRelationsNotFoundError.d.ts
+++ b/node_modules/typeorm/error/FindRelationsNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when relations specified in the find options were not found in the entities.
  */
diff --git a/node_modules/typeorm/error/ForbiddenTransactionModeOverrideError.d.ts b/node_modules/typeorm/error/ForbiddenTransactionModeOverrideError.d.ts
index dccb3e1..a4202e6 100644
--- a/node_modules/typeorm/error/ForbiddenTransactionModeOverrideError.d.ts
+++ b/node_modules/typeorm/error/ForbiddenTransactionModeOverrideError.d.ts
@@ -1,5 +1,5 @@
-import { Migration } from "../migration/Migration";
-import { TypeORMError } from "./TypeORMError";
+import { Migration } from "typeorm/migration/Migration";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when the per-migration transaction mode is overriden but the global transaction mode is set to "all".
  */
diff --git a/node_modules/typeorm/error/InitializedRelationError.d.ts b/node_modules/typeorm/error/InitializedRelationError.d.ts
index 321eaa4..518c029 100644
--- a/node_modules/typeorm/error/InitializedRelationError.d.ts
+++ b/node_modules/typeorm/error/InitializedRelationError.d.ts
@@ -1,5 +1,5 @@
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when relation has array initialized which is forbidden my ORM.
  *
diff --git a/node_modules/typeorm/error/InsertValuesMissingError.d.ts b/node_modules/typeorm/error/InsertValuesMissingError.d.ts
index db42add..4f6a285 100644
--- a/node_modules/typeorm/error/InsertValuesMissingError.d.ts
+++ b/node_modules/typeorm/error/InsertValuesMissingError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user tries to insert using QueryBuilder but do not specify what to insert.
  */
diff --git a/node_modules/typeorm/error/LimitOnUpdateNotSupportedError.d.ts b/node_modules/typeorm/error/LimitOnUpdateNotSupportedError.d.ts
index 05b044c..1b365c8 100644
--- a/node_modules/typeorm/error/LimitOnUpdateNotSupportedError.d.ts
+++ b/node_modules/typeorm/error/LimitOnUpdateNotSupportedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user tries to build an UPDATE query with LIMIT but the database does not support it.
  */
diff --git a/node_modules/typeorm/error/LockNotSupportedOnGivenDriverError.d.ts b/node_modules/typeorm/error/LockNotSupportedOnGivenDriverError.d.ts
index 28514b7..f95e6b0 100644
--- a/node_modules/typeorm/error/LockNotSupportedOnGivenDriverError.d.ts
+++ b/node_modules/typeorm/error/LockNotSupportedOnGivenDriverError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when selected sql driver does not supports locking.
  */
diff --git a/node_modules/typeorm/error/MetadataAlreadyExistsError.d.ts b/node_modules/typeorm/error/MetadataAlreadyExistsError.d.ts
index 8065352..f60b4be 100644
--- a/node_modules/typeorm/error/MetadataAlreadyExistsError.d.ts
+++ b/node_modules/typeorm/error/MetadataAlreadyExistsError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class MetadataAlreadyExistsError extends TypeORMError {
     constructor(metadataType: string, constructor: Function, propertyName?: string);
 }
diff --git a/node_modules/typeorm/error/MetadataWithSuchNameAlreadyExistsError.d.ts b/node_modules/typeorm/error/MetadataWithSuchNameAlreadyExistsError.d.ts
index 95524aa..091375b 100644
--- a/node_modules/typeorm/error/MetadataWithSuchNameAlreadyExistsError.d.ts
+++ b/node_modules/typeorm/error/MetadataWithSuchNameAlreadyExistsError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class MetadataWithSuchNameAlreadyExistsError extends TypeORMError {
     constructor(metadataType: string, name: string);
 }
diff --git a/node_modules/typeorm/error/MissingDeleteDateColumnError.d.ts b/node_modules/typeorm/error/MissingDeleteDateColumnError.d.ts
index 90fd4af..f3307f3 100644
--- a/node_modules/typeorm/error/MissingDeleteDateColumnError.d.ts
+++ b/node_modules/typeorm/error/MissingDeleteDateColumnError.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class MissingDeleteDateColumnError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata);
 }
diff --git a/node_modules/typeorm/error/MissingDriverError.d.ts b/node_modules/typeorm/error/MissingDriverError.d.ts
index 40f8888..f09f313 100644
--- a/node_modules/typeorm/error/MissingDriverError.d.ts
+++ b/node_modules/typeorm/error/MissingDriverError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer specifies driver type that does not exist or supported.
  */
diff --git a/node_modules/typeorm/error/MissingJoinColumnError.d.ts b/node_modules/typeorm/error/MissingJoinColumnError.d.ts
index a3f34f4..899db3f 100644
--- a/node_modules/typeorm/error/MissingJoinColumnError.d.ts
+++ b/node_modules/typeorm/error/MissingJoinColumnError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class MissingJoinColumnError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/error/MissingJoinTableError.d.ts b/node_modules/typeorm/error/MissingJoinTableError.d.ts
index 796904e..92c28a0 100644
--- a/node_modules/typeorm/error/MissingJoinTableError.d.ts
+++ b/node_modules/typeorm/error/MissingJoinTableError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class MissingJoinTableError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/error/MissingPrimaryColumnError.d.ts b/node_modules/typeorm/error/MissingPrimaryColumnError.d.ts
index 2221ff3..c3026e0 100644
--- a/node_modules/typeorm/error/MissingPrimaryColumnError.d.ts
+++ b/node_modules/typeorm/error/MissingPrimaryColumnError.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class MissingPrimaryColumnError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata);
 }
diff --git a/node_modules/typeorm/error/MustBeEntityError.d.ts b/node_modules/typeorm/error/MustBeEntityError.d.ts
index 5c77f06..4944a5b 100644
--- a/node_modules/typeorm/error/MustBeEntityError.d.ts
+++ b/node_modules/typeorm/error/MustBeEntityError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when method expects entity but instead something else is given.
  */
diff --git a/node_modules/typeorm/error/NamingStrategyNotFoundError.d.ts b/node_modules/typeorm/error/NamingStrategyNotFoundError.d.ts
index 32a2566..e0ce5cd 100644
--- a/node_modules/typeorm/error/NamingStrategyNotFoundError.d.ts
+++ b/node_modules/typeorm/error/NamingStrategyNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to use naming strategy that does not exist.
  */
diff --git a/node_modules/typeorm/error/NoConnectionForRepositoryError.d.ts b/node_modules/typeorm/error/NoConnectionForRepositoryError.d.ts
index 566f0d9..c3f74f8 100644
--- a/node_modules/typeorm/error/NoConnectionForRepositoryError.d.ts
+++ b/node_modules/typeorm/error/NoConnectionForRepositoryError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to access repository before connection is established.
  */
diff --git a/node_modules/typeorm/error/NoConnectionOptionError.d.ts b/node_modules/typeorm/error/NoConnectionOptionError.d.ts
index f7ea8ae..62c518b 100644
--- a/node_modules/typeorm/error/NoConnectionOptionError.d.ts
+++ b/node_modules/typeorm/error/NoConnectionOptionError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when some option is not set in the connection options.
  */
diff --git a/node_modules/typeorm/error/NoNeedToReleaseEntityManagerError.d.ts b/node_modules/typeorm/error/NoNeedToReleaseEntityManagerError.d.ts
index 47b19f9..f42558a 100644
--- a/node_modules/typeorm/error/NoNeedToReleaseEntityManagerError.d.ts
+++ b/node_modules/typeorm/error/NoNeedToReleaseEntityManagerError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to release entity manager that does not use single database connection.
  */
diff --git a/node_modules/typeorm/error/NoVersionOrUpdateDateColumnError.d.ts b/node_modules/typeorm/error/NoVersionOrUpdateDateColumnError.d.ts
index a2fc09a..8ff505f 100644
--- a/node_modules/typeorm/error/NoVersionOrUpdateDateColumnError.d.ts
+++ b/node_modules/typeorm/error/NoVersionOrUpdateDateColumnError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when an entity does not have no version and no update date column.
  */
diff --git a/node_modules/typeorm/error/OffsetWithoutLimitNotSupportedError.d.ts b/node_modules/typeorm/error/OffsetWithoutLimitNotSupportedError.d.ts
index 2e68d48..a037a3a 100644
--- a/node_modules/typeorm/error/OffsetWithoutLimitNotSupportedError.d.ts
+++ b/node_modules/typeorm/error/OffsetWithoutLimitNotSupportedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user tries to build SELECT query using OFFSET without LIMIT applied but database does not support it.
  */
diff --git a/node_modules/typeorm/error/OptimisticLockCanNotBeUsedError.d.ts b/node_modules/typeorm/error/OptimisticLockCanNotBeUsedError.d.ts
index 5e399e1..de613a5 100644
--- a/node_modules/typeorm/error/OptimisticLockCanNotBeUsedError.d.ts
+++ b/node_modules/typeorm/error/OptimisticLockCanNotBeUsedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when an optimistic lock cannot be used in query builder.
  */
diff --git a/node_modules/typeorm/error/OptimisticLockVersionMismatchError.d.ts b/node_modules/typeorm/error/OptimisticLockVersionMismatchError.d.ts
index d09679f..bcc4792 100644
--- a/node_modules/typeorm/error/OptimisticLockVersionMismatchError.d.ts
+++ b/node_modules/typeorm/error/OptimisticLockVersionMismatchError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when a version check on an object that uses optimistic locking through a version field fails.
  */
diff --git a/node_modules/typeorm/error/PersistedEntityNotFoundError.d.ts b/node_modules/typeorm/error/PersistedEntityNotFoundError.d.ts
index e688cf7..5245d58 100644
--- a/node_modules/typeorm/error/PersistedEntityNotFoundError.d.ts
+++ b/node_modules/typeorm/error/PersistedEntityNotFoundError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown . Theoretically can't be thrown.
  */
diff --git a/node_modules/typeorm/error/PessimisticLockTransactionRequiredError.d.ts b/node_modules/typeorm/error/PessimisticLockTransactionRequiredError.d.ts
index 75a9f93..256d77d 100644
--- a/node_modules/typeorm/error/PessimisticLockTransactionRequiredError.d.ts
+++ b/node_modules/typeorm/error/PessimisticLockTransactionRequiredError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when a transaction is required for the current operation, but there is none open.
  */
diff --git a/node_modules/typeorm/error/PrimaryColumnCannotBeNullableError.d.ts b/node_modules/typeorm/error/PrimaryColumnCannotBeNullableError.d.ts
index 12f0305..3299da9 100644
--- a/node_modules/typeorm/error/PrimaryColumnCannotBeNullableError.d.ts
+++ b/node_modules/typeorm/error/PrimaryColumnCannotBeNullableError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class PrimaryColumnCannotBeNullableError extends TypeORMError {
     constructor(object: Object, propertyName: string);
 }
diff --git a/node_modules/typeorm/error/QueryFailedError.d.ts b/node_modules/typeorm/error/QueryFailedError.d.ts
index a401a0d..ba814c2 100644
--- a/node_modules/typeorm/error/QueryFailedError.d.ts
+++ b/node_modules/typeorm/error/QueryFailedError.d.ts
@@ -1,10 +1,10 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when query execution has failed.
  */
-export declare class QueryFailedError extends TypeORMError {
+export declare class QueryFailedError<T extends Error = Error> extends TypeORMError {
     readonly query: string;
     readonly parameters: any[] | undefined;
-    readonly driverError: any;
-    constructor(query: string, parameters: any[] | undefined, driverError: any);
+    readonly driverError: T;
+    constructor(query: string, parameters: any[] | undefined, driverError: T);
 }
diff --git a/node_modules/typeorm/error/QueryFailedError.js.map b/node_modules/typeorm/error/QueryFailedError.js.map
index c844b20..a678081 100644
--- a/node_modules/typeorm/error/QueryFailedError.js.map
+++ b/node_modules/typeorm/error/QueryFailedError.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/error/QueryFailedError.ts"],"names":[],"mappings":";;;AAAA,qDAAiD;AACjD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,gBAAiB,SAAQ,2BAAY;IAC9C,YACa,KAAa,EACb,UAA6B,EAC7B,WAAgB;QAEzB,KAAK,CACD,WAAW;aACN,QAAQ,EAAE;aACV,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAC/B,CAAA;QAVQ,UAAK,GAAL,KAAK,CAAQ;QACb,eAAU,GAAV,UAAU,CAAmB;QAC7B,gBAAW,GAAX,WAAW,CAAK;QAUzB,IAAI,WAAW,EAAE;YACb,MAAM,EACF,IAAI,EAAE,CAAC,EAAE,sBAAsB;YAC/B,GAAG,eAAe,EACrB,GAAG,WAAW,CAAA;YAEf,yBAAW,CAAC,MAAM,CAAC,IAAI,EAAE;gBACrB,GAAG,eAAe;aACrB,CAAC,CAAA;SACL;IACL,CAAC;CACJ;AAzBD,4CAyBC","file":"QueryFailedError.js","sourcesContent":["import { ObjectUtils } from \"../util/ObjectUtils\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when query execution has failed.\n */\nexport class QueryFailedError extends TypeORMError {\n    constructor(\n        readonly query: string,\n        readonly parameters: any[] | undefined,\n        readonly driverError: any,\n    ) {\n        super(\n            driverError\n                .toString()\n                .replace(/^error: /, \"\")\n                .replace(/^Error: /, \"\")\n                .replace(/^Request/, \"\"),\n        )\n\n        if (driverError) {\n            const {\n                name: _, // eslint-disable-line\n                ...otherProperties\n            } = driverError\n\n            ObjectUtils.assign(this, {\n                ...otherProperties,\n            })\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/error/QueryFailedError.ts"],"names":[],"mappings":";;;AAAA,qDAAiD;AACjD,iDAA6C;AAE7C;;GAEG;AACH,MAAa,gBAA0C,SAAQ,2BAAY;IACvE,YACa,KAAa,EACb,UAA6B,EAC7B,WAAc;QAEvB,KAAK,CACD,WAAW;aACN,QAAQ,EAAE;aACV,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC;aACvB,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAC/B,CAAA;QAVQ,UAAK,GAAL,KAAK,CAAQ;QACb,eAAU,GAAV,UAAU,CAAmB;QAC7B,gBAAW,GAAX,WAAW,CAAG;QAUvB,IAAI,WAAW,EAAE;YACb,MAAM,EACF,IAAI,EAAE,CAAC,EAAE,sBAAsB;YAC/B,GAAG,eAAe,EACrB,GAAG,WAAW,CAAA;YAEf,yBAAW,CAAC,MAAM,CAAC,IAAI,EAAE;gBACrB,GAAG,eAAe;aACrB,CAAC,CAAA;SACL;IACL,CAAC;CACJ;AAzBD,4CAyBC","file":"QueryFailedError.js","sourcesContent":["import { ObjectUtils } from \"../util/ObjectUtils\"\nimport { TypeORMError } from \"./TypeORMError\"\n\n/**\n * Thrown when query execution has failed.\n */\nexport class QueryFailedError<T extends Error = Error> extends TypeORMError {\n    constructor(\n        readonly query: string,\n        readonly parameters: any[] | undefined,\n        readonly driverError: T,\n    ) {\n        super(\n            driverError\n                .toString()\n                .replace(/^error: /, \"\")\n                .replace(/^Error: /, \"\")\n                .replace(/^Request/, \"\"),\n        )\n\n        if (driverError) {\n            const {\n                name: _, // eslint-disable-line\n                ...otherProperties\n            } = driverError\n\n            ObjectUtils.assign(this, {\n                ...otherProperties,\n            })\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/error/QueryRunnerAlreadyReleasedError.d.ts b/node_modules/typeorm/error/QueryRunnerAlreadyReleasedError.d.ts
index 2ebabb1..b9799a5 100644
--- a/node_modules/typeorm/error/QueryRunnerAlreadyReleasedError.d.ts
+++ b/node_modules/typeorm/error/QueryRunnerAlreadyReleasedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class QueryRunnerAlreadyReleasedError extends TypeORMError {
     constructor();
 }
diff --git a/node_modules/typeorm/error/QueryRunnerProviderAlreadyReleasedError.d.ts b/node_modules/typeorm/error/QueryRunnerProviderAlreadyReleasedError.d.ts
index df6a438..e8c8e25 100644
--- a/node_modules/typeorm/error/QueryRunnerProviderAlreadyReleasedError.d.ts
+++ b/node_modules/typeorm/error/QueryRunnerProviderAlreadyReleasedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when consumer tries to use query runner from query runner provider after it was released.
  */
diff --git a/node_modules/typeorm/error/RepositoryNotTreeError.d.ts b/node_modules/typeorm/error/RepositoryNotTreeError.d.ts
index bbbac36..f903355 100644
--- a/node_modules/typeorm/error/RepositoryNotTreeError.d.ts
+++ b/node_modules/typeorm/error/RepositoryNotTreeError.d.ts
@@ -1,5 +1,5 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { TypeORMError } from "./TypeORMError";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when repository for the given class is not found.
  */
diff --git a/node_modules/typeorm/error/ReturningStatementNotSupportedError.d.ts b/node_modules/typeorm/error/ReturningStatementNotSupportedError.d.ts
index beb1506..4e0c8b5 100644
--- a/node_modules/typeorm/error/ReturningStatementNotSupportedError.d.ts
+++ b/node_modules/typeorm/error/ReturningStatementNotSupportedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when user tries to build a query with RETURNING / OUTPUT statement,
  * but used database does not support it.
diff --git a/node_modules/typeorm/error/SubjectRemovedAndUpdatedError.d.ts b/node_modules/typeorm/error/SubjectRemovedAndUpdatedError.d.ts
index 822585f..4645566 100644
--- a/node_modules/typeorm/error/SubjectRemovedAndUpdatedError.d.ts
+++ b/node_modules/typeorm/error/SubjectRemovedAndUpdatedError.d.ts
@@ -1,5 +1,5 @@
-import { Subject } from "../persistence/Subject";
-import { TypeORMError } from "./TypeORMError";
+import { Subject } from "typeorm/persistence/Subject";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when same object is scheduled for remove and updation at the same time.
  */
diff --git a/node_modules/typeorm/error/SubjectWithoutIdentifierError.d.ts b/node_modules/typeorm/error/SubjectWithoutIdentifierError.d.ts
index 7b4b730..bfdbae4 100644
--- a/node_modules/typeorm/error/SubjectWithoutIdentifierError.d.ts
+++ b/node_modules/typeorm/error/SubjectWithoutIdentifierError.d.ts
@@ -1,5 +1,5 @@
-import { Subject } from "../persistence/Subject";
-import { TypeORMError } from "./TypeORMError";
+import { Subject } from "typeorm/persistence/Subject";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when operation is going to be executed on a subject without identifier.
  * This error should never be thrown, however it still presents to prevent user from updation or removing the whole table.
diff --git a/node_modules/typeorm/error/TransactionAlreadyStartedError.d.ts b/node_modules/typeorm/error/TransactionAlreadyStartedError.d.ts
index 1e651be..36d3d9c 100644
--- a/node_modules/typeorm/error/TransactionAlreadyStartedError.d.ts
+++ b/node_modules/typeorm/error/TransactionAlreadyStartedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when transaction is already started and user tries to run it again.
  */
diff --git a/node_modules/typeorm/error/TransactionNotStartedError.d.ts b/node_modules/typeorm/error/TransactionNotStartedError.d.ts
index 9498cad..811353c 100644
--- a/node_modules/typeorm/error/TransactionNotStartedError.d.ts
+++ b/node_modules/typeorm/error/TransactionNotStartedError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 /**
  * Thrown when transaction is not started yet and user tries to run commit or rollback.
  */
diff --git a/node_modules/typeorm/error/TreeRepositoryNotSupportedError.d.ts b/node_modules/typeorm/error/TreeRepositoryNotSupportedError.d.ts
index 1eb9e04..8791909 100644
--- a/node_modules/typeorm/error/TreeRepositoryNotSupportedError.d.ts
+++ b/node_modules/typeorm/error/TreeRepositoryNotSupportedError.d.ts
@@ -1,5 +1,5 @@
-import { Driver } from "../driver/Driver";
-import { TypeORMError } from "./TypeORMError";
+import { Driver } from "typeorm/driver/Driver";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class TreeRepositoryNotSupportedError extends TypeORMError {
     constructor(driver: Driver);
 }
diff --git a/node_modules/typeorm/error/UpdateValuesMissingError.d.ts b/node_modules/typeorm/error/UpdateValuesMissingError.d.ts
index 5825396..aa7c1dd 100644
--- a/node_modules/typeorm/error/UpdateValuesMissingError.d.ts
+++ b/node_modules/typeorm/error/UpdateValuesMissingError.d.ts
@@ -1,4 +1,4 @@
-import { TypeORMError } from "./TypeORMError";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class UpdateValuesMissingError extends TypeORMError {
     constructor();
 }
diff --git a/node_modules/typeorm/error/UsingJoinColumnIsNotAllowedError.d.ts b/node_modules/typeorm/error/UsingJoinColumnIsNotAllowedError.d.ts
index b8e50d6..a682a44 100644
--- a/node_modules/typeorm/error/UsingJoinColumnIsNotAllowedError.d.ts
+++ b/node_modules/typeorm/error/UsingJoinColumnIsNotAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class UsingJoinColumnIsNotAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts b/node_modules/typeorm/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts
index fd69b60..aa2db13 100644
--- a/node_modules/typeorm/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts
+++ b/node_modules/typeorm/error/UsingJoinColumnOnlyOnOneSideAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class UsingJoinColumnOnlyOnOneSideAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/error/UsingJoinTableIsNotAllowedError.d.ts b/node_modules/typeorm/error/UsingJoinTableIsNotAllowedError.d.ts
index 4e81da1..5993222 100644
--- a/node_modules/typeorm/error/UsingJoinTableIsNotAllowedError.d.ts
+++ b/node_modules/typeorm/error/UsingJoinTableIsNotAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class UsingJoinTableIsNotAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts b/node_modules/typeorm/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts
index 6f969b0..344a078 100644
--- a/node_modules/typeorm/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts
+++ b/node_modules/typeorm/error/UsingJoinTableOnlyOnOneSideAllowedError.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { TypeORMError } from "./TypeORMError";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TypeORMError } from "typeorm/error/TypeORMError";
 export declare class UsingJoinTableOnlyOnOneSideAllowedError extends TypeORMError {
     constructor(entityMetadata: EntityMetadata, relation: RelationMetadata);
 }
diff --git a/node_modules/typeorm/error/index.d.ts b/node_modules/typeorm/error/index.d.ts
index cfe3615..e99c4bb 100644
--- a/node_modules/typeorm/error/index.d.ts
+++ b/node_modules/typeorm/error/index.d.ts
@@ -1,62 +1,62 @@
-export * from "./CannotReflectMethodParameterTypeError";
-export * from "./AlreadyHasActiveConnectionError";
-export * from "./SubjectWithoutIdentifierError";
-export * from "./CannotConnectAlreadyConnectedError";
-export * from "./LockNotSupportedOnGivenDriverError";
-export * from "./ConnectionIsNotSetError";
-export * from "./CannotCreateEntityIdMapError";
-export * from "./MetadataAlreadyExistsError";
-export * from "./CannotDetermineEntityError";
-export * from "./UpdateValuesMissingError";
-export * from "./TreeRepositoryNotSupportedError";
-export * from "./CustomRepositoryNotFoundError";
-export * from "./TransactionNotStartedError";
-export * from "./TransactionAlreadyStartedError";
-export * from "./EntityNotFoundError";
-export * from "./EntityMetadataNotFoundError";
-export * from "./MustBeEntityError";
-export * from "./OptimisticLockVersionMismatchError";
-export * from "./LimitOnUpdateNotSupportedError";
-export * from "./PrimaryColumnCannotBeNullableError";
-export * from "./CustomRepositoryCannotInheritRepositoryError";
-export * from "./QueryRunnerProviderAlreadyReleasedError";
-export * from "./CannotAttachTreeChildrenEntityError";
-export * from "./CustomRepositoryDoesNotHaveEntityError";
-export * from "./MissingDeleteDateColumnError";
-export * from "./NoConnectionForRepositoryError";
-export * from "./CircularRelationsError";
-export * from "./ReturningStatementNotSupportedError";
-export * from "./UsingJoinTableIsNotAllowedError";
-export * from "./MissingJoinColumnError";
-export * from "./MissingPrimaryColumnError";
-export * from "./EntityPropertyNotFoundError";
-export * from "./MissingDriverError";
-export * from "./DriverPackageNotInstalledError";
-export * from "./CannotGetEntityManagerNotConnectedError";
-export * from "./ConnectionNotFoundError";
-export * from "./NoVersionOrUpdateDateColumnError";
-export * from "./InsertValuesMissingError";
-export * from "./OptimisticLockCanNotBeUsedError";
-export * from "./MetadataWithSuchNameAlreadyExistsError";
-export * from "./DriverOptionNotSetError";
-export * from "./FindRelationsNotFoundError";
-export * from "./NamingStrategyNotFoundError";
-export * from "./PessimisticLockTransactionRequiredError";
-export * from "./RepositoryNotTreeError";
-export * from "./DataTypeNotSupportedError";
-export * from "./InitializedRelationError";
-export * from "./MissingJoinTableError";
-export * from "./QueryFailedError";
-export * from "./NoNeedToReleaseEntityManagerError";
-export * from "./UsingJoinColumnOnlyOnOneSideAllowedError";
-export * from "./UsingJoinTableOnlyOnOneSideAllowedError";
-export * from "./SubjectRemovedAndUpdatedError";
-export * from "./PersistedEntityNotFoundError";
-export * from "./UsingJoinColumnIsNotAllowedError";
-export * from "./ColumnTypeUndefinedError";
-export * from "./QueryRunnerAlreadyReleasedError";
-export * from "./OffsetWithoutLimitNotSupportedError";
-export * from "./CannotExecuteNotConnectedError";
-export * from "./NoConnectionOptionError";
-export * from "./TypeORMError";
-export * from "./ForbiddenTransactionModeOverrideError";
+export * from "typeorm/error/CannotReflectMethodParameterTypeError";
+export * from "typeorm/error/AlreadyHasActiveConnectionError";
+export * from "typeorm/error/SubjectWithoutIdentifierError";
+export * from "typeorm/error/CannotConnectAlreadyConnectedError";
+export * from "typeorm/error/LockNotSupportedOnGivenDriverError";
+export * from "typeorm/error/ConnectionIsNotSetError";
+export * from "typeorm/error/CannotCreateEntityIdMapError";
+export * from "typeorm/error/MetadataAlreadyExistsError";
+export * from "typeorm/error/CannotDetermineEntityError";
+export * from "typeorm/error/UpdateValuesMissingError";
+export * from "typeorm/error/TreeRepositoryNotSupportedError";
+export * from "typeorm/error/CustomRepositoryNotFoundError";
+export * from "typeorm/error/TransactionNotStartedError";
+export * from "typeorm/error/TransactionAlreadyStartedError";
+export * from "typeorm/error/EntityNotFoundError";
+export * from "typeorm/error/EntityMetadataNotFoundError";
+export * from "typeorm/error/MustBeEntityError";
+export * from "typeorm/error/OptimisticLockVersionMismatchError";
+export * from "typeorm/error/LimitOnUpdateNotSupportedError";
+export * from "typeorm/error/PrimaryColumnCannotBeNullableError";
+export * from "typeorm/error/CustomRepositoryCannotInheritRepositoryError";
+export * from "typeorm/error/QueryRunnerProviderAlreadyReleasedError";
+export * from "typeorm/error/CannotAttachTreeChildrenEntityError";
+export * from "typeorm/error/CustomRepositoryDoesNotHaveEntityError";
+export * from "typeorm/error/MissingDeleteDateColumnError";
+export * from "typeorm/error/NoConnectionForRepositoryError";
+export * from "typeorm/error/CircularRelationsError";
+export * from "typeorm/error/ReturningStatementNotSupportedError";
+export * from "typeorm/error/UsingJoinTableIsNotAllowedError";
+export * from "typeorm/error/MissingJoinColumnError";
+export * from "typeorm/error/MissingPrimaryColumnError";
+export * from "typeorm/error/EntityPropertyNotFoundError";
+export * from "typeorm/error/MissingDriverError";
+export * from "typeorm/error/DriverPackageNotInstalledError";
+export * from "typeorm/error/CannotGetEntityManagerNotConnectedError";
+export * from "typeorm/error/ConnectionNotFoundError";
+export * from "typeorm/error/NoVersionOrUpdateDateColumnError";
+export * from "typeorm/error/InsertValuesMissingError";
+export * from "typeorm/error/OptimisticLockCanNotBeUsedError";
+export * from "typeorm/error/MetadataWithSuchNameAlreadyExistsError";
+export * from "typeorm/error/DriverOptionNotSetError";
+export * from "typeorm/error/FindRelationsNotFoundError";
+export * from "typeorm/error/NamingStrategyNotFoundError";
+export * from "typeorm/error/PessimisticLockTransactionRequiredError";
+export * from "typeorm/error/RepositoryNotTreeError";
+export * from "typeorm/error/DataTypeNotSupportedError";
+export * from "typeorm/error/InitializedRelationError";
+export * from "typeorm/error/MissingJoinTableError";
+export * from "typeorm/error/QueryFailedError";
+export * from "typeorm/error/NoNeedToReleaseEntityManagerError";
+export * from "typeorm/error/UsingJoinColumnOnlyOnOneSideAllowedError";
+export * from "typeorm/error/UsingJoinTableOnlyOnOneSideAllowedError";
+export * from "typeorm/error/SubjectRemovedAndUpdatedError";
+export * from "typeorm/error/PersistedEntityNotFoundError";
+export * from "typeorm/error/UsingJoinColumnIsNotAllowedError";
+export * from "typeorm/error/ColumnTypeUndefinedError";
+export * from "typeorm/error/QueryRunnerAlreadyReleasedError";
+export * from "typeorm/error/OffsetWithoutLimitNotSupportedError";
+export * from "typeorm/error/CannotExecuteNotConnectedError";
+export * from "typeorm/error/NoConnectionOptionError";
+export * from "typeorm/error/TypeORMError";
+export * from "typeorm/error/ForbiddenTransactionModeOverrideError";
diff --git a/node_modules/typeorm/find-options/EqualOperator.d.ts b/node_modules/typeorm/find-options/EqualOperator.d.ts
index 7212b11..895d5c2 100644
--- a/node_modules/typeorm/find-options/EqualOperator.d.ts
+++ b/node_modules/typeorm/find-options/EqualOperator.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "./FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 export declare class EqualOperator<T> extends FindOperator<T> {
     readonly "@instanceof": symbol;
     constructor(value: T | FindOperator<T>);
diff --git a/node_modules/typeorm/find-options/FindManyOptions.d.ts b/node_modules/typeorm/find-options/FindManyOptions.d.ts
index a2561d6..6f7a1a1 100644
--- a/node_modules/typeorm/find-options/FindManyOptions.d.ts
+++ b/node_modules/typeorm/find-options/FindManyOptions.d.ts
@@ -1,4 +1,4 @@
-import { FindOneOptions } from "./FindOneOptions";
+import { FindOneOptions } from "typeorm/find-options/FindOneOptions";
 /**
  * Defines a special criteria to find specific entities.
  */
diff --git a/node_modules/typeorm/find-options/FindOneOptions.d.ts b/node_modules/typeorm/find-options/FindOneOptions.d.ts
index 55371f3..47da55f 100644
--- a/node_modules/typeorm/find-options/FindOneOptions.d.ts
+++ b/node_modules/typeorm/find-options/FindOneOptions.d.ts
@@ -1,8 +1,8 @@
-import { JoinOptions } from "./JoinOptions";
-import { FindOptionsWhere } from "./FindOptionsWhere";
-import { FindOptionsSelect, FindOptionsSelectByString } from "./FindOptionsSelect";
-import { FindOptionsRelationByString, FindOptionsRelations } from "./FindOptionsRelations";
-import { FindOptionsOrder } from "./FindOptionsOrder";
+import { JoinOptions } from "typeorm/find-options/JoinOptions";
+import { FindOptionsWhere } from "typeorm/find-options/FindOptionsWhere";
+import { FindOptionsSelect, FindOptionsSelectByString } from "typeorm/find-options/FindOptionsSelect";
+import { FindOptionsRelationByString, FindOptionsRelations } from "typeorm/find-options/FindOptionsRelations";
+import { FindOptionsOrder } from "typeorm/find-options/FindOptionsOrder";
 /**
  * Defines a special criteria to find specific entity.
  */
diff --git a/node_modules/typeorm/find-options/FindOperator.d.ts b/node_modules/typeorm/find-options/FindOperator.d.ts
index 6161376..703b1bd 100644
--- a/node_modules/typeorm/find-options/FindOperator.d.ts
+++ b/node_modules/typeorm/find-options/FindOperator.d.ts
@@ -1,6 +1,6 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { FindOperatorType } from "./FindOperatorType";
-import { ValueTransformer } from "../decorator/options/ValueTransformer";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { FindOperatorType } from "typeorm/find-options/FindOperatorType";
+import { ValueTransformer } from "typeorm/decorator/options/ValueTransformer";
 type SqlGeneratorType = (aliasPath: string) => string;
 /**
  * Find Operator used in Find Conditions.
diff --git a/node_modules/typeorm/find-options/FindOptionsOrder.d.ts b/node_modules/typeorm/find-options/FindOptionsOrder.d.ts
index 31b188a..6aef6de 100644
--- a/node_modules/typeorm/find-options/FindOptionsOrder.d.ts
+++ b/node_modules/typeorm/find-options/FindOptionsOrder.d.ts
@@ -1,5 +1,5 @@
 
-import { ObjectId } from "../driver/mongodb/typings";
+import { ObjectId } from "typeorm/driver/mongodb/typings";
 /**
  * A single property handler for FindOptionsOrder.
  */
diff --git a/node_modules/typeorm/find-options/FindOptionsRelations.d.ts b/node_modules/typeorm/find-options/FindOptionsRelations.d.ts
index c5044af..4d41507 100644
--- a/node_modules/typeorm/find-options/FindOptionsRelations.d.ts
+++ b/node_modules/typeorm/find-options/FindOptionsRelations.d.ts
@@ -1,5 +1,5 @@
 
-import { ObjectId } from "../driver/mongodb/typings";
+import { ObjectId } from "typeorm/driver/mongodb/typings";
 /**
  * A single property handler for FindOptionsRelations.
  */
diff --git a/node_modules/typeorm/find-options/FindOptionsSelect.d.ts b/node_modules/typeorm/find-options/FindOptionsSelect.d.ts
index 92551de..8230c32 100644
--- a/node_modules/typeorm/find-options/FindOptionsSelect.d.ts
+++ b/node_modules/typeorm/find-options/FindOptionsSelect.d.ts
@@ -1,5 +1,5 @@
 
-import { ObjectId } from "../driver/mongodb/typings";
+import { ObjectId } from "typeorm/driver/mongodb/typings";
 /**
  * A single property handler for FindOptionsSelect.
  */
diff --git a/node_modules/typeorm/find-options/FindOptionsUtils.d.ts b/node_modules/typeorm/find-options/FindOptionsUtils.d.ts
index 677ca22..a582a8f 100644
--- a/node_modules/typeorm/find-options/FindOptionsUtils.d.ts
+++ b/node_modules/typeorm/find-options/FindOptionsUtils.d.ts
@@ -1,9 +1,9 @@
-import { FindManyOptions } from "./FindManyOptions";
-import { FindOneOptions } from "./FindOneOptions";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { FindTreeOptions } from "./FindTreeOptions";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { FindManyOptions } from "typeorm/find-options/FindManyOptions";
+import { FindOneOptions } from "typeorm/find-options/FindOneOptions";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { FindTreeOptions } from "typeorm/find-options/FindTreeOptions";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Utilities to work with FindOptions.
  */
diff --git a/node_modules/typeorm/find-options/FindOptionsUtils.js b/node_modules/typeorm/find-options/FindOptionsUtils.js
index 3014596..6bd2d86 100644
--- a/node_modules/typeorm/find-options/FindOptionsUtils.js
+++ b/node_modules/typeorm/find-options/FindOptionsUtils.js
@@ -303,7 +303,7 @@ class FindOptionsUtils {
     static joinEagerRelations(qb, alias, metadata) {
         metadata.eagerRelations.forEach((relation) => {
             // generate a relation alias
-            let relationAlias = DriverUtils_1.DriverUtils.buildAlias(qb.connection.driver, { joiner: "__" }, alias, relation.propertyPath);
+            let relationAlias = DriverUtils_1.DriverUtils.buildAlias(qb.connection.driver, { joiner: "__" }, alias, relation.propertyName);
             // add a join for the relation
             // Checking whether the relation wasn't joined yet.
             let addJoin = true;
diff --git a/node_modules/typeorm/find-options/FindOptionsUtils.js.map b/node_modules/typeorm/find-options/FindOptionsUtils.js.map
index 9308127..252ea56 100644
--- a/node_modules/typeorm/find-options/FindOptionsUtils.js.map
+++ b/node_modules/typeorm/find-options/FindOptionsUtils.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/find-options/FindOptionsUtils.ts"],"names":[],"mappings":"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","file":"FindOptionsUtils.js","sourcesContent":["import { FindManyOptions } from \"./FindManyOptions\"\nimport { FindOneOptions } from \"./FindOneOptions\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { FindRelationsNotFoundError } from \"../error\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { FindTreeOptions } from \"./FindTreeOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { EntityPropertyNotFoundError } from \"../error\"\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions<Entity = any>(\n        obj: any,\n    ): obj is FindOneOptions<Entity> {\n        const possibleOptions: FindOneOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (Array.isArray(possibleOptions.select) ||\n                Array.isArray(possibleOptions.relations) ||\n                typeof possibleOptions.select === \"object\" ||\n                typeof possibleOptions.relations === \"object\" ||\n                typeof possibleOptions.where === \"object\" ||\n                // typeof possibleOptions.where === \"string\" ||\n                typeof possibleOptions.join === \"object\" ||\n                typeof possibleOptions.order === \"object\" ||\n                typeof possibleOptions.cache === \"object\" ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                typeof possibleOptions.comment === \"string\" ||\n                typeof possibleOptions.lock === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                typeof possibleOptions.withDeleted === \"boolean\" ||\n                typeof possibleOptions.relationLoadStrategy === \"string\" ||\n                typeof possibleOptions.transaction === \"boolean\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions<Entity = any>(\n        obj: any,\n    ): obj is FindManyOptions<Entity> {\n        const possibleOptions: FindManyOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (this.isFindOneOptions(possibleOptions) ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"string\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"string\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string | undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias\n\n        return undefined\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }*/\n\n    /**\n     * Applies give find options to the given query builder.\n\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (options.transaction === true) {\n            qb.expressionMap.useTransaction = true;\n        }\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.comment) {\n            qb.comment(options.comment);\n        }\n\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.hasColumnWithPropertyPath(`${select}`))\n                    throw new TypeORMError(`${select} column was not found in the ${metadata.name} entity.`);\n\n                const columns = metadata.findColumnsWithPropertyPath(`${select}`);\n\n                for (const column of columns) {\n                    qb.addSelect(qb.alias + \".\" + column.propertyPath);\n                }\n            });\n        }\n\n        if (options.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations];\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version);\n            } else if (\n                options.lock.mode === \"pessimistic_read\" ||\n                options.lock.mode === \"pessimistic_write\" ||\n                options.lock.mode === \"dirty_read\" ||\n                options.lock.mode === \"pessimistic_partial_write\" ||\n                options.lock.mode === \"pessimistic_write_or_fail\" ||\n                options.lock.mode === \"for_no_key_update\" ||\n                options.lock.mode === \"for_key_share\"\n            ) {\n                const tableNames = options.lock.tables ? options.lock.tables.map((table) => {\n                    const tableAlias = qb.expressionMap.aliases.find((alias) => {\n                        return alias.metadata.tableNameWithoutPrefix === table;\n                    });\n                    if (!tableAlias) {\n                        throw new TypeORMError(`\"${table}\" is not part of this query`);\n                    }\n                    return qb.escape(tableAlias.name);\n                }) : undefined;\n                qb.setLock(options.lock.mode, undefined, tableNames);\n            }\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        return qb;\n    }*/\n\n    static applyOptionsToTreeQueryBuilder<T extends ObjectLiteral>(\n        qb: SelectQueryBuilder<T>,\n        options?: FindTreeOptions,\n    ): SelectQueryBuilder<T> {\n        if (options?.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations]\n\n            FindOptionsUtils.applyRelationsRecursively(\n                qb,\n                allRelations,\n                qb.expressionMap.mainAlias!.name,\n                qb.expressionMap.mainAlias!.metadata,\n                \"\",\n            )\n\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations)\n        }\n\n        return qb\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    public static applyRelationsRecursively(\n        qb: SelectQueryBuilder<any>,\n        allRelations: string[],\n        alias: string,\n        metadata: EntityMetadata,\n        prefix: string,\n    ): void {\n        // find all relations that match given prefix\n        let matchedBaseRelations: RelationMetadata[] = []\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\")\n            matchedBaseRelations = allRelations\n                .filter((relation) => relation.match(regexp))\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(\n                        relation.replace(regexp, \"\"),\n                    ),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        } else {\n            matchedBaseRelations = allRelations\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(relation),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        }\n\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyPath,\n            )\n\n            // add a join for the found relation\n            const selection = alias + \".\" + relation.propertyPath\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                qb.concatRelationMetadata(relation)\n            } else {\n                qb.leftJoinAndSelect(selection, relationAlias)\n            }\n\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(\n                allRelations.indexOf(\n                    prefix\n                        ? prefix + \".\" + relation.propertyPath\n                        : relation.propertyPath,\n                ),\n                1,\n            )\n\n            // try to find sub-relations\n            let relationMetadata: EntityMetadata | undefined\n            let relationName: string | undefined\n\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                relationMetadata = relation.inverseEntityMetadata\n                relationName = relationAlias\n            } else {\n                const join = qb.expressionMap.joinAttributes.find(\n                    (join) => join.entityOrProperty === selection,\n                )\n                relationMetadata = join!.metadata!\n                relationName = join!.alias.name\n            }\n\n            if (!relationName || !relationMetadata) {\n                throw new EntityPropertyNotFoundError(\n                    relation.propertyPath,\n                    metadata,\n                )\n            }\n\n            this.applyRelationsRecursively(\n                qb,\n                allRelations,\n                relationName,\n                relationMetadata,\n                prefix\n                    ? prefix + \".\" + relation.propertyPath\n                    : relation.propertyPath,\n            )\n\n            // join the eager relations of the found relation\n            // Only supported for \"join\" relationLoadStrategy\n            if (qb.expressionMap.relationLoadStrategy === \"join\") {\n                const relMetadata = metadata.relations.find(\n                    (metadata) =>\n                        metadata.propertyName === relation.propertyPath,\n                )\n                if (relMetadata) {\n                    this.joinEagerRelations(\n                        qb,\n                        relationAlias,\n                        relMetadata.inverseEntityMetadata,\n                    )\n                }\n            }\n        })\n    }\n\n    public static joinEagerRelations(\n        qb: SelectQueryBuilder<any>,\n        alias: string,\n        metadata: EntityMetadata,\n    ) {\n        metadata.eagerRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyPath,\n            )\n\n            // add a join for the relation\n            // Checking whether the relation wasn't joined yet.\n            let addJoin = true\n            // TODO: Review this validation\n            for (const join of qb.expressionMap.joinAttributes) {\n                if (\n                    join.condition !== undefined ||\n                    join.mapToProperty !== undefined ||\n                    join.isMappingMany !== undefined ||\n                    join.direction !== \"LEFT\" ||\n                    join.entityOrProperty !==\n                        `${alias}.${relation.propertyPath}`\n                ) {\n                    continue\n                }\n                addJoin = false\n                relationAlias = join.alias.name\n                break\n            }\n\n            const joinAlreadyAdded = Boolean(\n                qb.expressionMap.joinAttributes.find(\n                    (joinAttribute) =>\n                        joinAttribute.alias.name === relationAlias,\n                ),\n            )\n\n            if (addJoin && !joinAlreadyAdded) {\n                qb.leftJoin(alias + \".\" + relation.propertyPath, relationAlias)\n            }\n\n            // Checking whether the relation wasn't selected yet.\n            // This check shall be after the join check to detect relationAlias.\n            let addSelect = true\n            for (const select of qb.expressionMap.selects) {\n                if (\n                    select.aliasName !== undefined ||\n                    select.virtual !== undefined ||\n                    select.selection !== relationAlias\n                ) {\n                    continue\n                }\n                addSelect = false\n                break\n            }\n\n            if (addSelect) {\n                qb.addSelect(relationAlias)\n            }\n\n            // (recursive) join the eager relations\n            this.joinEagerRelations(\n                qb,\n                relationAlias,\n                relation.inverseEntityMetadata,\n            )\n        })\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/find-options/FindOptionsUtils.ts"],"names":[],"mappings":"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","file":"FindOptionsUtils.js","sourcesContent":["import { FindManyOptions } from \"./FindManyOptions\"\nimport { FindOneOptions } from \"./FindOneOptions\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { FindRelationsNotFoundError } from \"../error\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { DriverUtils } from \"../driver/DriverUtils\"\nimport { FindTreeOptions } from \"./FindTreeOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { EntityPropertyNotFoundError } from \"../error\"\n\n/**\n * Utilities to work with FindOptions.\n */\nexport class FindOptionsUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if given object is really instance of FindOneOptions interface.\n     */\n    static isFindOneOptions<Entity = any>(\n        obj: any,\n    ): obj is FindOneOptions<Entity> {\n        const possibleOptions: FindOneOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (Array.isArray(possibleOptions.select) ||\n                Array.isArray(possibleOptions.relations) ||\n                typeof possibleOptions.select === \"object\" ||\n                typeof possibleOptions.relations === \"object\" ||\n                typeof possibleOptions.where === \"object\" ||\n                // typeof possibleOptions.where === \"string\" ||\n                typeof possibleOptions.join === \"object\" ||\n                typeof possibleOptions.order === \"object\" ||\n                typeof possibleOptions.cache === \"object\" ||\n                typeof possibleOptions.cache === \"boolean\" ||\n                typeof possibleOptions.cache === \"number\" ||\n                typeof possibleOptions.comment === \"string\" ||\n                typeof possibleOptions.lock === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"object\" ||\n                typeof possibleOptions.loadRelationIds === \"boolean\" ||\n                typeof possibleOptions.loadEagerRelations === \"boolean\" ||\n                typeof possibleOptions.withDeleted === \"boolean\" ||\n                typeof possibleOptions.relationLoadStrategy === \"string\" ||\n                typeof possibleOptions.transaction === \"boolean\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindManyOptions interface.\n     */\n    static isFindManyOptions<Entity = any>(\n        obj: any,\n    ): obj is FindManyOptions<Entity> {\n        const possibleOptions: FindManyOptions<Entity> = obj\n        return (\n            possibleOptions &&\n            (this.isFindOneOptions(possibleOptions) ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"number\" ||\n                typeof (possibleOptions as FindManyOptions<any>).skip ===\n                    \"string\" ||\n                typeof (possibleOptions as FindManyOptions<any>).take ===\n                    \"string\")\n        )\n    }\n\n    /**\n     * Checks if given object is really instance of FindOptions interface.\n     */\n    static extractFindManyOptionsAlias(object: any): string | undefined {\n        if (this.isFindManyOptions(object) && object.join)\n            return object.join.alias\n\n        return undefined\n    }\n\n    /**\n     * Applies give find many options to the given query builder.\n\n    static applyFindManyOptionsOrConditionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindManyOptions<T>|Partial<T>|undefined): SelectQueryBuilder<T> {\n        if (this.isFindManyOptions(options))\n            return this.applyOptionsToQueryBuilder(qb, options);\n\n        if (options)\n            return qb.where(options);\n\n        return qb;\n    }*/\n\n    /**\n     * Applies give find options to the given query builder.\n\n    static applyOptionsToQueryBuilder<T>(qb: SelectQueryBuilder<T>, options: FindOneOptions<T>|FindManyOptions<T>|undefined): SelectQueryBuilder<T> {\n\n        // if options are not set then simply return query builder. This is made for simplicity of usage.\n        if (!options || (!this.isFindOneOptions(options) && !this.isFindManyOptions(options)))\n            return qb;\n\n        if (options.transaction === true) {\n            qb.expressionMap.useTransaction = true;\n        }\n\n        if (!qb.expressionMap.mainAlias || !qb.expressionMap.mainAlias.hasMetadata)\n            return qb;\n\n        const metadata = qb.expressionMap.mainAlias!.metadata;\n\n        // apply all options from FindOptions\n        if (options.comment) {\n            qb.comment(options.comment);\n        }\n\n        if (options.withDeleted) {\n            qb.withDeleted();\n        }\n\n        if (options.select) {\n            qb.select([]);\n            options.select.forEach(select => {\n                if (!metadata.hasColumnWithPropertyPath(`${select}`))\n                    throw new TypeORMError(`${select} column was not found in the ${metadata.name} entity.`);\n\n                const columns = metadata.findColumnsWithPropertyPath(`${select}`);\n\n                for (const column of columns) {\n                    qb.addSelect(qb.alias + \".\" + column.propertyPath);\n                }\n            });\n        }\n\n        if (options.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations];\n            this.applyRelationsRecursively(qb, allRelations, qb.expressionMap.mainAlias!.name, qb.expressionMap.mainAlias!.metadata, \"\");\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations);\n        }\n\n        if (options.join) {\n            if (options.join.leftJoin)\n                Object.keys(options.join.leftJoin).forEach(key => {\n                    qb.leftJoin(options.join!.leftJoin![key], key);\n                });\n\n            if (options.join.innerJoin)\n                Object.keys(options.join.innerJoin).forEach(key => {\n                    qb.innerJoin(options.join!.innerJoin![key], key);\n                });\n\n            if (options.join.leftJoinAndSelect)\n                Object.keys(options.join.leftJoinAndSelect).forEach(key => {\n                    qb.leftJoinAndSelect(options.join!.leftJoinAndSelect![key], key);\n                });\n\n            if (options.join.innerJoinAndSelect)\n                Object.keys(options.join.innerJoinAndSelect).forEach(key => {\n                    qb.innerJoinAndSelect(options.join!.innerJoinAndSelect![key], key);\n                });\n        }\n\n        if (options.cache) {\n            if (options.cache instanceof Object) {\n                const cache = options.cache as { id: any, milliseconds: number };\n                qb.cache(cache.id, cache.milliseconds);\n            } else {\n                qb.cache(options.cache);\n            }\n        }\n\n        if (options.lock) {\n            if (options.lock.mode === \"optimistic\") {\n                qb.setLock(options.lock.mode, options.lock.version);\n            } else if (\n                options.lock.mode === \"pessimistic_read\" ||\n                options.lock.mode === \"pessimistic_write\" ||\n                options.lock.mode === \"dirty_read\" ||\n                options.lock.mode === \"pessimistic_partial_write\" ||\n                options.lock.mode === \"pessimistic_write_or_fail\" ||\n                options.lock.mode === \"for_no_key_update\" ||\n                options.lock.mode === \"for_key_share\"\n            ) {\n                const tableNames = options.lock.tables ? options.lock.tables.map((table) => {\n                    const tableAlias = qb.expressionMap.aliases.find((alias) => {\n                        return alias.metadata.tableNameWithoutPrefix === table;\n                    });\n                    if (!tableAlias) {\n                        throw new TypeORMError(`\"${table}\" is not part of this query`);\n                    }\n                    return qb.escape(tableAlias.name);\n                }) : undefined;\n                qb.setLock(options.lock.mode, undefined, tableNames);\n            }\n        }\n\n        if (options.loadRelationIds === true) {\n            qb.loadAllRelationIds();\n\n        } else if (options.loadRelationIds instanceof Object) {\n            qb.loadAllRelationIds(options.loadRelationIds as any);\n        }\n\n        if (options.where)\n            qb.where(options.where);\n\n        if ((options as FindManyOptions<T>).skip)\n            qb.skip((options as FindManyOptions<T>).skip!);\n\n        if ((options as FindManyOptions<T>).take)\n            qb.take((options as FindManyOptions<T>).take!);\n\n        if (options.order)\n            Object.keys(options.order).forEach(key => {\n                const order = ((options as FindOneOptions<T>).order as any)[key as any];\n\n                if (!metadata.findColumnWithPropertyPath(key))\n                    throw new Error(`${key} column was not found in the ${metadata.name} entity.`);\n\n                switch (order) {\n                    case 1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case -1:\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                    case \"ASC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"ASC\");\n                        break;\n                    case \"DESC\":\n                        qb.addOrderBy(qb.alias + \".\" + key, \"DESC\");\n                        break;\n                }\n            });\n\n        return qb;\n    }*/\n\n    static applyOptionsToTreeQueryBuilder<T extends ObjectLiteral>(\n        qb: SelectQueryBuilder<T>,\n        options?: FindTreeOptions,\n    ): SelectQueryBuilder<T> {\n        if (options?.relations) {\n            // Copy because `applyRelationsRecursively` modifies it\n            const allRelations = [...options.relations]\n\n            FindOptionsUtils.applyRelationsRecursively(\n                qb,\n                allRelations,\n                qb.expressionMap.mainAlias!.name,\n                qb.expressionMap.mainAlias!.metadata,\n                \"\",\n            )\n\n            // recursive removes found relations from allRelations array\n            // if there are relations left in this array it means those relations were not found in the entity structure\n            // so, we give an exception about not found relations\n            if (allRelations.length > 0)\n                throw new FindRelationsNotFoundError(allRelations)\n        }\n\n        return qb\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Adds joins for all relations and sub-relations of the given relations provided in the find options.\n     */\n    public static applyRelationsRecursively(\n        qb: SelectQueryBuilder<any>,\n        allRelations: string[],\n        alias: string,\n        metadata: EntityMetadata,\n        prefix: string,\n    ): void {\n        // find all relations that match given prefix\n        let matchedBaseRelations: RelationMetadata[] = []\n        if (prefix) {\n            const regexp = new RegExp(\"^\" + prefix.replace(\".\", \"\\\\.\") + \"\\\\.\")\n            matchedBaseRelations = allRelations\n                .filter((relation) => relation.match(regexp))\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(\n                        relation.replace(regexp, \"\"),\n                    ),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        } else {\n            matchedBaseRelations = allRelations\n                .map((relation) =>\n                    metadata.findRelationWithPropertyPath(relation),\n                )\n                .filter((entity) => entity) as RelationMetadata[]\n        }\n\n        // go through all matched relations and add join for them\n        matchedBaseRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyPath,\n            )\n\n            // add a join for the found relation\n            const selection = alias + \".\" + relation.propertyPath\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                qb.concatRelationMetadata(relation)\n            } else {\n                qb.leftJoinAndSelect(selection, relationAlias)\n            }\n\n            // remove added relations from the allRelations array, this is needed to find all not found relations at the end\n            allRelations.splice(\n                allRelations.indexOf(\n                    prefix\n                        ? prefix + \".\" + relation.propertyPath\n                        : relation.propertyPath,\n                ),\n                1,\n            )\n\n            // try to find sub-relations\n            let relationMetadata: EntityMetadata | undefined\n            let relationName: string | undefined\n\n            if (qb.expressionMap.relationLoadStrategy === \"query\") {\n                relationMetadata = relation.inverseEntityMetadata\n                relationName = relationAlias\n            } else {\n                const join = qb.expressionMap.joinAttributes.find(\n                    (join) => join.entityOrProperty === selection,\n                )\n                relationMetadata = join!.metadata!\n                relationName = join!.alias.name\n            }\n\n            if (!relationName || !relationMetadata) {\n                throw new EntityPropertyNotFoundError(\n                    relation.propertyPath,\n                    metadata,\n                )\n            }\n\n            this.applyRelationsRecursively(\n                qb,\n                allRelations,\n                relationName,\n                relationMetadata,\n                prefix\n                    ? prefix + \".\" + relation.propertyPath\n                    : relation.propertyPath,\n            )\n\n            // join the eager relations of the found relation\n            // Only supported for \"join\" relationLoadStrategy\n            if (qb.expressionMap.relationLoadStrategy === \"join\") {\n                const relMetadata = metadata.relations.find(\n                    (metadata) =>\n                        metadata.propertyName === relation.propertyPath,\n                )\n                if (relMetadata) {\n                    this.joinEagerRelations(\n                        qb,\n                        relationAlias,\n                        relMetadata.inverseEntityMetadata,\n                    )\n                }\n            }\n        })\n    }\n\n    public static joinEagerRelations(\n        qb: SelectQueryBuilder<any>,\n        alias: string,\n        metadata: EntityMetadata,\n    ) {\n        metadata.eagerRelations.forEach((relation) => {\n            // generate a relation alias\n            let relationAlias: string = DriverUtils.buildAlias(\n                qb.connection.driver,\n                { joiner: \"__\" },\n                alias,\n                relation.propertyName,\n            )\n\n            // add a join for the relation\n            // Checking whether the relation wasn't joined yet.\n            let addJoin = true\n            // TODO: Review this validation\n            for (const join of qb.expressionMap.joinAttributes) {\n                if (\n                    join.condition !== undefined ||\n                    join.mapToProperty !== undefined ||\n                    join.isMappingMany !== undefined ||\n                    join.direction !== \"LEFT\" ||\n                    join.entityOrProperty !==\n                        `${alias}.${relation.propertyPath}`\n                ) {\n                    continue\n                }\n                addJoin = false\n                relationAlias = join.alias.name\n                break\n            }\n\n            const joinAlreadyAdded = Boolean(\n                qb.expressionMap.joinAttributes.find(\n                    (joinAttribute) =>\n                        joinAttribute.alias.name === relationAlias,\n                ),\n            )\n\n            if (addJoin && !joinAlreadyAdded) {\n                qb.leftJoin(alias + \".\" + relation.propertyPath, relationAlias)\n            }\n\n            // Checking whether the relation wasn't selected yet.\n            // This check shall be after the join check to detect relationAlias.\n            let addSelect = true\n            for (const select of qb.expressionMap.selects) {\n                if (\n                    select.aliasName !== undefined ||\n                    select.virtual !== undefined ||\n                    select.selection !== relationAlias\n                ) {\n                    continue\n                }\n                addSelect = false\n                break\n            }\n\n            if (addSelect) {\n                qb.addSelect(relationAlias)\n            }\n\n            // (recursive) join the eager relations\n            this.joinEagerRelations(\n                qb,\n                relationAlias,\n                relation.inverseEntityMetadata,\n            )\n        })\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/find-options/FindOptionsWhere.d.ts b/node_modules/typeorm/find-options/FindOptionsWhere.d.ts
index 593f302..5820463 100644
--- a/node_modules/typeorm/find-options/FindOptionsWhere.d.ts
+++ b/node_modules/typeorm/find-options/FindOptionsWhere.d.ts
@@ -1,7 +1,7 @@
 
-import { FindOperator } from "./FindOperator";
-import { ObjectId } from "../driver/mongodb/typings";
-import { EqualOperator } from "./EqualOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
+import { ObjectId } from "typeorm/driver/mongodb/typings";
+import { EqualOperator } from "typeorm/find-options/EqualOperator";
 /**
  * A single property handler for FindOptionsWhere.
  *
diff --git a/node_modules/typeorm/find-options/mongodb/MongoFindManyOptions.d.ts b/node_modules/typeorm/find-options/mongodb/MongoFindManyOptions.d.ts
index 0d16250..b6d825f 100644
--- a/node_modules/typeorm/find-options/mongodb/MongoFindManyOptions.d.ts
+++ b/node_modules/typeorm/find-options/mongodb/MongoFindManyOptions.d.ts
@@ -1,4 +1,4 @@
-import { MongoFindOneOptions } from "./MongoFindOneOptions";
+import { MongoFindOneOptions } from "typeorm/find-options/mongodb/MongoFindOneOptions";
 /**
  * Defines a special criteria to find specific entities.
  */
diff --git a/node_modules/typeorm/find-options/mongodb/MongoFindOneOptions.d.ts b/node_modules/typeorm/find-options/mongodb/MongoFindOneOptions.d.ts
index c8bd14e..b7f9d1d 100644
--- a/node_modules/typeorm/find-options/mongodb/MongoFindOneOptions.d.ts
+++ b/node_modules/typeorm/find-options/mongodb/MongoFindOneOptions.d.ts
@@ -1,5 +1,5 @@
-import { FindOneOptions } from "../FindOneOptions";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { FindOneOptions } from "typeorm/find-options/FindOneOptions";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Defines a special criteria to find specific entity.
  */
diff --git a/node_modules/typeorm/find-options/operator/And.d.ts b/node_modules/typeorm/find-options/operator/And.d.ts
index ca8d0be..53e83eb 100644
--- a/node_modules/typeorm/find-options/operator/And.d.ts
+++ b/node_modules/typeorm/find-options/operator/And.d.ts
@@ -1,2 +1,2 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 export declare function And<T>(...values: FindOperator<T>[]): FindOperator<T>;
diff --git a/node_modules/typeorm/find-options/operator/Any.d.ts b/node_modules/typeorm/find-options/operator/Any.d.ts
index a152720..320cf90 100644
--- a/node_modules/typeorm/find-options/operator/Any.d.ts
+++ b/node_modules/typeorm/find-options/operator/Any.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: Any([...]) }
diff --git a/node_modules/typeorm/find-options/operator/ArrayContainedBy.d.ts b/node_modules/typeorm/find-options/operator/ArrayContainedBy.d.ts
index 3f40057..9a4b64e 100644
--- a/node_modules/typeorm/find-options/operator/ArrayContainedBy.d.ts
+++ b/node_modules/typeorm/find-options/operator/ArrayContainedBy.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: ArrayContainedBy([...]) }
diff --git a/node_modules/typeorm/find-options/operator/ArrayContains.d.ts b/node_modules/typeorm/find-options/operator/ArrayContains.d.ts
index 97998e2..0812d3f 100644
--- a/node_modules/typeorm/find-options/operator/ArrayContains.d.ts
+++ b/node_modules/typeorm/find-options/operator/ArrayContains.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: ArrayContains([...]) }
diff --git a/node_modules/typeorm/find-options/operator/ArrayOverlap.d.ts b/node_modules/typeorm/find-options/operator/ArrayOverlap.d.ts
index 6ea8a70..73fc7b3 100644
--- a/node_modules/typeorm/find-options/operator/ArrayOverlap.d.ts
+++ b/node_modules/typeorm/find-options/operator/ArrayOverlap.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: ArrayOverlap([...]) }
diff --git a/node_modules/typeorm/find-options/operator/Between.d.ts b/node_modules/typeorm/find-options/operator/Between.d.ts
index b328156..3b4785c 100644
--- a/node_modules/typeorm/find-options/operator/Between.d.ts
+++ b/node_modules/typeorm/find-options/operator/Between.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: Between(x, y) }
diff --git a/node_modules/typeorm/find-options/operator/Equal.d.ts b/node_modules/typeorm/find-options/operator/Equal.d.ts
index fb3c901..3bcf1ec 100644
--- a/node_modules/typeorm/find-options/operator/Equal.d.ts
+++ b/node_modules/typeorm/find-options/operator/Equal.d.ts
@@ -1,5 +1,5 @@
-import { FindOperator } from "../FindOperator";
-import { EqualOperator } from "../EqualOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
+import { EqualOperator } from "typeorm/find-options/EqualOperator";
 /**
  * Find Options Operator.
  * This operator is handy to provide object value for non-relational properties of the Entity.
diff --git a/node_modules/typeorm/find-options/operator/ILike.d.ts b/node_modules/typeorm/find-options/operator/ILike.d.ts
index c4726aa..d77f8db 100644
--- a/node_modules/typeorm/find-options/operator/ILike.d.ts
+++ b/node_modules/typeorm/find-options/operator/ILike.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: ILike("%SOME string%") }
diff --git a/node_modules/typeorm/find-options/operator/In.d.ts b/node_modules/typeorm/find-options/operator/In.d.ts
index a8e2cf9..bff5b86 100644
--- a/node_modules/typeorm/find-options/operator/In.d.ts
+++ b/node_modules/typeorm/find-options/operator/In.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: In([...]) }
diff --git a/node_modules/typeorm/find-options/operator/IsNull.d.ts b/node_modules/typeorm/find-options/operator/IsNull.d.ts
index 0e36681..ba97b90 100644
--- a/node_modules/typeorm/find-options/operator/IsNull.d.ts
+++ b/node_modules/typeorm/find-options/operator/IsNull.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: IsNull() }
diff --git a/node_modules/typeorm/find-options/operator/JsonContains.d.ts b/node_modules/typeorm/find-options/operator/JsonContains.d.ts
index ce939f5..633ea33 100644
--- a/node_modules/typeorm/find-options/operator/JsonContains.d.ts
+++ b/node_modules/typeorm/find-options/operator/JsonContains.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * FindOptions Operator.
  * Example: { someField: JsonContains({...}) }
diff --git a/node_modules/typeorm/find-options/operator/LessThan.d.ts b/node_modules/typeorm/find-options/operator/LessThan.d.ts
index 99ebf73..4de0a81 100644
--- a/node_modules/typeorm/find-options/operator/LessThan.d.ts
+++ b/node_modules/typeorm/find-options/operator/LessThan.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: LessThan(10) }
diff --git a/node_modules/typeorm/find-options/operator/LessThanOrEqual.d.ts b/node_modules/typeorm/find-options/operator/LessThanOrEqual.d.ts
index e7d7163..03a4bf3 100644
--- a/node_modules/typeorm/find-options/operator/LessThanOrEqual.d.ts
+++ b/node_modules/typeorm/find-options/operator/LessThanOrEqual.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: LessThanOrEqual(10) }
diff --git a/node_modules/typeorm/find-options/operator/Like.d.ts b/node_modules/typeorm/find-options/operator/Like.d.ts
index 47f1547..e15b811 100644
--- a/node_modules/typeorm/find-options/operator/Like.d.ts
+++ b/node_modules/typeorm/find-options/operator/Like.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: Like("%some string%") }
diff --git a/node_modules/typeorm/find-options/operator/MoreThan.d.ts b/node_modules/typeorm/find-options/operator/MoreThan.d.ts
index acdfbc1..9823431 100644
--- a/node_modules/typeorm/find-options/operator/MoreThan.d.ts
+++ b/node_modules/typeorm/find-options/operator/MoreThan.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: MoreThan(10) }
diff --git a/node_modules/typeorm/find-options/operator/MoreThanOrEqual.d.ts b/node_modules/typeorm/find-options/operator/MoreThanOrEqual.d.ts
index b09605b..93929b3 100644
--- a/node_modules/typeorm/find-options/operator/MoreThanOrEqual.d.ts
+++ b/node_modules/typeorm/find-options/operator/MoreThanOrEqual.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Example: { someField: MoreThanOrEqual(10) }
diff --git a/node_modules/typeorm/find-options/operator/Not.d.ts b/node_modules/typeorm/find-options/operator/Not.d.ts
index 9ac81b2..ec3ecc9 100644
--- a/node_modules/typeorm/find-options/operator/Not.d.ts
+++ b/node_modules/typeorm/find-options/operator/Not.d.ts
@@ -1,4 +1,4 @@
-import { FindOperator } from "../FindOperator";
+import { FindOperator } from "typeorm/find-options/FindOperator";
 /**
  * Find Options Operator.
  * Used to negate expression.
diff --git a/node_modules/typeorm/find-options/operator/Raw.d.ts b/node_modules/typeorm/find-options/operator/Raw.d.ts
index 9e2b8c6..205be1b 100644
--- a/node_modules/typeorm/find-options/operator/Raw.d.ts
+++ b/node_modules/typeorm/find-options/operator/Raw.d.ts
@@ -1,5 +1,5 @@
-import { FindOperator } from "../FindOperator";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { FindOperator } from "typeorm/find-options/FindOperator";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Find Options Operator.
  * Example: { someField: Raw("12") }
diff --git a/node_modules/typeorm/globals.d.ts b/node_modules/typeorm/globals.d.ts
index 9236985..945fd9e 100644
--- a/node_modules/typeorm/globals.d.ts
+++ b/node_modules/typeorm/globals.d.ts
@@ -1,17 +1,17 @@
-import { MetadataArgsStorage } from "./metadata-args/MetadataArgsStorage";
-import { DataSourceOptions } from "./data-source/DataSourceOptions";
-import { ConnectionManager } from "./connection/ConnectionManager";
-import { DataSource } from "./data-source/DataSource";
-import { EntityManager } from "./entity-manager/EntityManager";
-import { MongoEntityManager } from "./entity-manager/MongoEntityManager";
-import { SqljsEntityManager } from "./entity-manager/SqljsEntityManager";
-import { EntityTarget } from "./common/EntityTarget";
-import { Repository } from "./repository/Repository";
-import { TreeRepository } from "./repository/TreeRepository";
-import { ObjectType } from "./common/ObjectType";
-import { MongoRepository } from "./repository/MongoRepository";
-import { SelectQueryBuilder } from "./query-builder/SelectQueryBuilder";
-import { ObjectLiteral } from "./common/ObjectLiteral";
+import { MetadataArgsStorage } from "typeorm/metadata-args/MetadataArgsStorage";
+import { DataSourceOptions } from "typeorm/data-source/DataSourceOptions";
+import { ConnectionManager } from "typeorm/connection/ConnectionManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { MongoEntityManager } from "typeorm/entity-manager/MongoEntityManager";
+import { SqljsEntityManager } from "typeorm/entity-manager/SqljsEntityManager";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { Repository } from "typeorm/repository/Repository";
+import { TreeRepository } from "typeorm/repository/TreeRepository";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { MongoRepository } from "typeorm/repository/MongoRepository";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Gets metadata args storage.
  */
diff --git a/node_modules/typeorm/index.d.ts b/node_modules/typeorm/index.d.ts
index 20bf12f..b4e12e4 100644
--- a/node_modules/typeorm/index.d.ts
+++ b/node_modules/typeorm/index.d.ts
@@ -1,177 +1,178 @@
 /*!
  */
 import "reflect-metadata";
-export * from "./globals";
-export * from "./container";
-export * from "./common/EntityTarget";
-export * from "./common/ObjectType";
-export * from "./common/ObjectLiteral";
-export * from "./common/MixedList";
-export * from "./common/DeepPartial";
-export * from "./common/RelationType";
-export * from "./error";
-export * from "./decorator/columns/Column";
-export * from "./decorator/columns/CreateDateColumn";
-export * from "./decorator/columns/DeleteDateColumn";
-export * from "./decorator/columns/PrimaryGeneratedColumn";
-export * from "./decorator/columns/PrimaryColumn";
-export * from "./decorator/columns/UpdateDateColumn";
-export * from "./decorator/columns/VersionColumn";
-export * from "./decorator/columns/VirtualColumn";
-export * from "./decorator/columns/ViewColumn";
-export * from "./decorator/columns/ObjectIdColumn";
-export * from "./decorator/listeners/AfterInsert";
-export * from "./decorator/listeners/AfterLoad";
-export * from "./decorator/listeners/AfterRemove";
-export * from "./decorator/listeners/AfterSoftRemove";
-export * from "./decorator/listeners/AfterRecover";
-export * from "./decorator/listeners/AfterUpdate";
-export * from "./decorator/listeners/BeforeInsert";
-export * from "./decorator/listeners/BeforeRemove";
-export * from "./decorator/listeners/BeforeSoftRemove";
-export * from "./decorator/listeners/BeforeRecover";
-export * from "./decorator/listeners/BeforeUpdate";
-export * from "./decorator/listeners/EventSubscriber";
-export * from "./decorator/options/ColumnOptions";
-export * from "./decorator/options/IndexOptions";
-export * from "./decorator/options/JoinColumnOptions";
-export * from "./decorator/options/JoinTableOptions";
-export * from "./decorator/options/RelationOptions";
-export * from "./decorator/options/EntityOptions";
-export * from "./decorator/options/ValueTransformer";
-export * from "./decorator/relations/JoinColumn";
-export * from "./decorator/relations/JoinTable";
-export * from "./decorator/relations/ManyToMany";
-export * from "./decorator/relations/ManyToOne";
-export * from "./decorator/relations/OneToMany";
-export * from "./decorator/relations/OneToOne";
-export * from "./decorator/relations/RelationCount";
-export * from "./decorator/relations/RelationId";
-export * from "./decorator/entity/Entity";
-export * from "./decorator/entity/ChildEntity";
-export * from "./decorator/entity/TableInheritance";
-export * from "./decorator/entity-view/ViewEntity";
-export * from "./decorator/tree/TreeLevelColumn";
-export * from "./decorator/tree/TreeParent";
-export * from "./decorator/tree/TreeChildren";
-export * from "./decorator/tree/Tree";
-export * from "./decorator/Index";
-export * from "./decorator/Unique";
-export * from "./decorator/Check";
-export * from "./decorator/Exclusion";
-export * from "./decorator/Generated";
-export * from "./decorator/EntityRepository";
-export * from "./find-options/operator/And";
-export * from "./find-options/operator/Any";
-export * from "./find-options/operator/ArrayContainedBy";
-export * from "./find-options/operator/ArrayContains";
-export * from "./find-options/operator/ArrayOverlap";
-export * from "./find-options/operator/Between";
-export * from "./find-options/operator/Equal";
-export * from "./find-options/operator/In";
-export * from "./find-options/operator/IsNull";
-export * from "./find-options/operator/LessThan";
-export * from "./find-options/operator/LessThanOrEqual";
-export * from "./find-options/operator/ILike";
-export * from "./find-options/operator/Like";
-export * from "./find-options/operator/MoreThan";
-export * from "./find-options/operator/MoreThanOrEqual";
-export * from "./find-options/operator/Not";
-export * from "./find-options/operator/Raw";
-export * from "./find-options/operator/JsonContains";
-export * from "./find-options/EqualOperator";
-export * from "./find-options/FindManyOptions";
-export * from "./find-options/FindOneOptions";
-export * from "./find-options/FindOperator";
-export * from "./find-options/FindOperatorType";
-export * from "./find-options/FindOptionsOrder";
-export * from "./find-options/FindOptionsRelations";
-export * from "./find-options/FindOptionsSelect";
-export * from "./find-options/FindOptionsUtils";
-export * from "./find-options/FindOptionsWhere";
-export * from "./find-options/FindTreeOptions";
-export * from "./find-options/JoinOptions";
-export * from "./find-options/OrderByCondition";
-export * from "./logger/AbstractLogger";
-export * from "./logger/Logger";
-export * from "./logger/LoggerOptions";
-export * from "./logger/AdvancedConsoleLogger";
-export * from "./logger/SimpleConsoleLogger";
-export * from "./logger/FileLogger";
-export * from "./metadata/EntityMetadata";
-export * from "./entity-manager/EntityManager";
-export * from "./repository/AbstractRepository";
-export * from "./repository/Repository";
-export * from "./repository/BaseEntity";
-export * from "./repository/TreeRepository";
-export * from "./repository/MongoRepository";
-export * from "./repository/RemoveOptions";
-export * from "./repository/SaveOptions";
-export * from "./schema-builder/table/TableCheck";
-export * from "./schema-builder/table/TableColumn";
-export * from "./schema-builder/table/TableExclusion";
-export * from "./schema-builder/table/TableForeignKey";
-export * from "./schema-builder/table/TableIndex";
-export * from "./schema-builder/table/TableUnique";
-export * from "./schema-builder/table/Table";
-export * from "./schema-builder/options/TableCheckOptions";
-export * from "./schema-builder/options/TableColumnOptions";
-export * from "./schema-builder/options/TableExclusionOptions";
-export * from "./schema-builder/options/TableForeignKeyOptions";
-export * from "./schema-builder/options/TableIndexOptions";
-export * from "./schema-builder/options/TableOptions";
-export * from "./schema-builder/options/TableUniqueOptions";
-export * from "./schema-builder/options/ViewOptions";
-export * from "./driver/mongodb/typings";
-export * from "./driver/types/DatabaseType";
-export * from "./driver/types/GeoJsonTypes";
-export * from "./driver/types/ReplicationMode";
-export * from "./driver/sqlserver/MssqlParameter";
-export { ConnectionOptionsReader } from "./connection/ConnectionOptionsReader";
-export { ConnectionOptions } from "./connection/ConnectionOptions";
-export { DataSource } from "./data-source/DataSource";
-export { Connection } from "./connection/Connection";
-export { ConnectionManager } from "./connection/ConnectionManager";
-export { DataSourceOptions } from "./data-source/DataSourceOptions";
-export { Driver } from "./driver/Driver";
-export { QueryBuilder } from "./query-builder/QueryBuilder";
-export { SelectQueryBuilder } from "./query-builder/SelectQueryBuilder";
-export { DeleteQueryBuilder } from "./query-builder/DeleteQueryBuilder";
-export { InsertQueryBuilder } from "./query-builder/InsertQueryBuilder";
-export { UpdateQueryBuilder } from "./query-builder/UpdateQueryBuilder";
-export { RelationQueryBuilder } from "./query-builder/RelationQueryBuilder";
-export { Brackets } from "./query-builder/Brackets";
-export { NotBrackets } from "./query-builder/NotBrackets";
-export { WhereExpressionBuilder } from "./query-builder/WhereExpressionBuilder";
-export { WhereExpression } from "./query-builder/WhereExpressionBuilder";
-export { InsertResult } from "./query-builder/result/InsertResult";
-export { UpdateResult } from "./query-builder/result/UpdateResult";
-export { DeleteResult } from "./query-builder/result/DeleteResult";
-export { QueryResult } from "./query-runner/QueryResult";
-export { QueryRunner } from "./query-runner/QueryRunner";
-export { MongoEntityManager } from "./entity-manager/MongoEntityManager";
-export { Migration } from "./migration/Migration";
-export { MigrationExecutor } from "./migration/MigrationExecutor";
-export { MigrationInterface } from "./migration/MigrationInterface";
-export { DefaultNamingStrategy } from "./naming-strategy/DefaultNamingStrategy";
-export { NamingStrategyInterface } from "./naming-strategy/NamingStrategyInterface";
-export { LegacyOracleNamingStrategy } from "./naming-strategy/LegacyOracleNamingStrategy";
-export { InsertEvent } from "./subscriber/event/InsertEvent";
-export { LoadEvent } from "./subscriber/event/LoadEvent";
-export { UpdateEvent } from "./subscriber/event/UpdateEvent";
-export { RemoveEvent } from "./subscriber/event/RemoveEvent";
-export { SoftRemoveEvent } from "./subscriber/event/SoftRemoveEvent";
-export { RecoverEvent } from "./subscriber/event/RecoverEvent";
-export { TransactionCommitEvent } from "./subscriber/event/TransactionCommitEvent";
-export { TransactionRollbackEvent } from "./subscriber/event/TransactionRollbackEvent";
-export { TransactionStartEvent } from "./subscriber/event/TransactionStartEvent";
-export { EntitySubscriberInterface } from "./subscriber/EntitySubscriberInterface";
-export { EntitySchema } from "./entity-schema/EntitySchema";
-export { EntitySchemaColumnOptions } from "./entity-schema/EntitySchemaColumnOptions";
-export { EntitySchemaIndexOptions } from "./entity-schema/EntitySchemaIndexOptions";
-export { EntitySchemaRelationOptions } from "./entity-schema/EntitySchemaRelationOptions";
-export { EntitySchemaEmbeddedColumnOptions } from "./entity-schema/EntitySchemaEmbeddedColumnOptions";
-export { ColumnType } from "./driver/types/ColumnTypes";
-export { EntitySchemaOptions } from "./entity-schema/EntitySchemaOptions";
-export { InstanceChecker } from "./util/InstanceChecker";
-export { TreeRepositoryUtils } from "./util/TreeRepositoryUtils";
+export * from "typeorm/globals";
+export * from "typeorm/container";
+export * from "typeorm/common/EntityTarget";
+export * from "typeorm/common/ObjectType";
+export * from "typeorm/common/ObjectLiteral";
+export * from "typeorm/common/MixedList";
+export * from "typeorm/common/DeepPartial";
+export * from "typeorm/common/RelationType";
+export * from "typeorm/error";
+export * from "typeorm/decorator/columns/Column";
+export * from "typeorm/decorator/columns/CreateDateColumn";
+export * from "typeorm/decorator/columns/DeleteDateColumn";
+export * from "typeorm/decorator/columns/PrimaryGeneratedColumn";
+export * from "typeorm/decorator/columns/PrimaryColumn";
+export * from "typeorm/decorator/columns/UpdateDateColumn";
+export * from "typeorm/decorator/columns/VersionColumn";
+export * from "typeorm/decorator/columns/VirtualColumn";
+export * from "typeorm/decorator/columns/ViewColumn";
+export * from "typeorm/decorator/columns/ObjectIdColumn";
+export * from "typeorm/decorator/listeners/AfterInsert";
+export * from "typeorm/decorator/listeners/AfterLoad";
+export * from "typeorm/decorator/listeners/AfterRemove";
+export * from "typeorm/decorator/listeners/AfterSoftRemove";
+export * from "typeorm/decorator/listeners/AfterRecover";
+export * from "typeorm/decorator/listeners/AfterUpdate";
+export * from "typeorm/decorator/listeners/BeforeInsert";
+export * from "typeorm/decorator/listeners/BeforeRemove";
+export * from "typeorm/decorator/listeners/BeforeSoftRemove";
+export * from "typeorm/decorator/listeners/BeforeRecover";
+export * from "typeorm/decorator/listeners/BeforeUpdate";
+export * from "typeorm/decorator/listeners/EventSubscriber";
+export * from "typeorm/decorator/options/ColumnOptions";
+export * from "typeorm/decorator/options/IndexOptions";
+export * from "typeorm/decorator/options/JoinColumnOptions";
+export * from "typeorm/decorator/options/JoinTableOptions";
+export * from "typeorm/decorator/options/RelationOptions";
+export * from "typeorm/decorator/options/EntityOptions";
+export * from "typeorm/decorator/options/ValueTransformer";
+export * from "typeorm/decorator/relations/JoinColumn";
+export * from "typeorm/decorator/relations/JoinTable";
+export * from "typeorm/decorator/relations/ManyToMany";
+export * from "typeorm/decorator/relations/ManyToOne";
+export * from "typeorm/decorator/relations/OneToMany";
+export * from "typeorm/decorator/relations/OneToOne";
+export * from "typeorm/decorator/relations/RelationCount";
+export * from "typeorm/decorator/relations/RelationId";
+export * from "typeorm/decorator/entity/Entity";
+export * from "typeorm/decorator/entity/ChildEntity";
+export * from "typeorm/decorator/entity/TableInheritance";
+export * from "typeorm/decorator/entity-view/ViewEntity";
+export * from "typeorm/decorator/tree/TreeLevelColumn";
+export * from "typeorm/decorator/tree/TreeParent";
+export * from "typeorm/decorator/tree/TreeChildren";
+export * from "typeorm/decorator/tree/Tree";
+export * from "typeorm/decorator/Index";
+export * from "typeorm/decorator/Unique";
+export * from "typeorm/decorator/Check";
+export * from "typeorm/decorator/Exclusion";
+export * from "typeorm/decorator/Generated";
+export * from "typeorm/decorator/EntityRepository";
+export * from "typeorm/find-options/operator/And";
+export * from "typeorm/find-options/operator/Any";
+export * from "typeorm/find-options/operator/ArrayContainedBy";
+export * from "typeorm/find-options/operator/ArrayContains";
+export * from "typeorm/find-options/operator/ArrayOverlap";
+export * from "typeorm/find-options/operator/Between";
+export * from "typeorm/find-options/operator/Equal";
+export * from "typeorm/find-options/operator/In";
+export * from "typeorm/find-options/operator/IsNull";
+export * from "typeorm/find-options/operator/LessThan";
+export * from "typeorm/find-options/operator/LessThanOrEqual";
+export * from "typeorm/find-options/operator/ILike";
+export * from "typeorm/find-options/operator/Like";
+export * from "typeorm/find-options/operator/MoreThan";
+export * from "typeorm/find-options/operator/MoreThanOrEqual";
+export * from "typeorm/find-options/operator/Not";
+export * from "typeorm/find-options/operator/Raw";
+export * from "typeorm/find-options/operator/JsonContains";
+export * from "typeorm/find-options/EqualOperator";
+export * from "typeorm/find-options/FindManyOptions";
+export * from "typeorm/find-options/FindOneOptions";
+export * from "typeorm/find-options/FindOperator";
+export * from "typeorm/find-options/FindOperatorType";
+export * from "typeorm/find-options/FindOptionsOrder";
+export * from "typeorm/find-options/FindOptionsRelations";
+export * from "typeorm/find-options/FindOptionsSelect";
+export * from "typeorm/find-options/FindOptionsUtils";
+export * from "typeorm/find-options/FindOptionsWhere";
+export * from "typeorm/find-options/FindTreeOptions";
+export * from "typeorm/find-options/JoinOptions";
+export * from "typeorm/find-options/OrderByCondition";
+export * from "typeorm/logger/AbstractLogger";
+export * from "typeorm/logger/Logger";
+export * from "typeorm/logger/LoggerOptions";
+export * from "typeorm/logger/AdvancedConsoleLogger";
+export * from "typeorm/logger/SimpleConsoleLogger";
+export * from "typeorm/logger/FileLogger";
+export * from "typeorm/metadata/EntityMetadata";
+export * from "typeorm/entity-manager/EntityManager";
+export * from "typeorm/repository/AbstractRepository";
+export * from "typeorm/repository/Repository";
+export * from "typeorm/repository/BaseEntity";
+export * from "typeorm/repository/TreeRepository";
+export * from "typeorm/repository/MongoRepository";
+export * from "typeorm/repository/RemoveOptions";
+export * from "typeorm/repository/SaveOptions";
+export * from "typeorm/schema-builder/table/TableCheck";
+export * from "typeorm/schema-builder/table/TableColumn";
+export * from "typeorm/schema-builder/table/TableExclusion";
+export * from "typeorm/schema-builder/table/TableForeignKey";
+export * from "typeorm/schema-builder/table/TableIndex";
+export * from "typeorm/schema-builder/table/TableUnique";
+export * from "typeorm/schema-builder/table/Table";
+export * from "typeorm/schema-builder/view/View";
+export * from "typeorm/schema-builder/options/TableCheckOptions";
+export * from "typeorm/schema-builder/options/TableColumnOptions";
+export * from "typeorm/schema-builder/options/TableExclusionOptions";
+export * from "typeorm/schema-builder/options/TableForeignKeyOptions";
+export * from "typeorm/schema-builder/options/TableIndexOptions";
+export * from "typeorm/schema-builder/options/TableOptions";
+export * from "typeorm/schema-builder/options/TableUniqueOptions";
+export * from "typeorm/schema-builder/options/ViewOptions";
+export * from "typeorm/driver/mongodb/typings";
+export * from "typeorm/driver/types/DatabaseType";
+export * from "typeorm/driver/types/GeoJsonTypes";
+export * from "typeorm/driver/types/ReplicationMode";
+export * from "typeorm/driver/sqlserver/MssqlParameter";
+export { ConnectionOptionsReader } from "typeorm/connection/ConnectionOptionsReader";
+export { ConnectionOptions } from "typeorm/connection/ConnectionOptions";
+export { DataSource } from "typeorm/data-source/DataSource";
+export { Connection } from "typeorm/connection/Connection";
+export { ConnectionManager } from "typeorm/connection/ConnectionManager";
+export { DataSourceOptions } from "typeorm/data-source/DataSourceOptions";
+export { Driver } from "typeorm/driver/Driver";
+export { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+export { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+export { DeleteQueryBuilder } from "typeorm/query-builder/DeleteQueryBuilder";
+export { InsertQueryBuilder } from "typeorm/query-builder/InsertQueryBuilder";
+export { UpdateQueryBuilder } from "typeorm/query-builder/UpdateQueryBuilder";
+export { RelationQueryBuilder } from "typeorm/query-builder/RelationQueryBuilder";
+export { Brackets } from "typeorm/query-builder/Brackets";
+export { NotBrackets } from "typeorm/query-builder/NotBrackets";
+export { WhereExpressionBuilder } from "typeorm/query-builder/WhereExpressionBuilder";
+export { WhereExpression } from "typeorm/query-builder/WhereExpressionBuilder";
+export { InsertResult } from "typeorm/query-builder/result/InsertResult";
+export { UpdateResult } from "typeorm/query-builder/result/UpdateResult";
+export { DeleteResult } from "typeorm/query-builder/result/DeleteResult";
+export { QueryResult } from "typeorm/query-runner/QueryResult";
+export { QueryRunner } from "typeorm/query-runner/QueryRunner";
+export { MongoEntityManager } from "typeorm/entity-manager/MongoEntityManager";
+export { Migration } from "typeorm/migration/Migration";
+export { MigrationExecutor } from "typeorm/migration/MigrationExecutor";
+export { MigrationInterface } from "typeorm/migration/MigrationInterface";
+export { DefaultNamingStrategy } from "typeorm/naming-strategy/DefaultNamingStrategy";
+export { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+export { LegacyOracleNamingStrategy } from "typeorm/naming-strategy/LegacyOracleNamingStrategy";
+export { InsertEvent } from "typeorm/subscriber/event/InsertEvent";
+export { LoadEvent } from "typeorm/subscriber/event/LoadEvent";
+export { UpdateEvent } from "typeorm/subscriber/event/UpdateEvent";
+export { RemoveEvent } from "typeorm/subscriber/event/RemoveEvent";
+export { SoftRemoveEvent } from "typeorm/subscriber/event/SoftRemoveEvent";
+export { RecoverEvent } from "typeorm/subscriber/event/RecoverEvent";
+export { TransactionCommitEvent } from "typeorm/subscriber/event/TransactionCommitEvent";
+export { TransactionRollbackEvent } from "typeorm/subscriber/event/TransactionRollbackEvent";
+export { TransactionStartEvent } from "typeorm/subscriber/event/TransactionStartEvent";
+export { EntitySubscriberInterface } from "typeorm/subscriber/EntitySubscriberInterface";
+export { EntitySchema } from "typeorm/entity-schema/EntitySchema";
+export { EntitySchemaColumnOptions } from "typeorm/entity-schema/EntitySchemaColumnOptions";
+export { EntitySchemaIndexOptions } from "typeorm/entity-schema/EntitySchemaIndexOptions";
+export { EntitySchemaRelationOptions } from "typeorm/entity-schema/EntitySchemaRelationOptions";
+export { EntitySchemaEmbeddedColumnOptions } from "typeorm/entity-schema/EntitySchemaEmbeddedColumnOptions";
+export { ColumnType } from "typeorm/driver/types/ColumnTypes";
+export { EntitySchemaOptions } from "typeorm/entity-schema/EntitySchemaOptions";
+export { InstanceChecker } from "typeorm/util/InstanceChecker";
+export { TreeRepositoryUtils } from "typeorm/util/TreeRepositoryUtils";
diff --git a/node_modules/typeorm/index.js b/node_modules/typeorm/index.js
index b278cbe..810ffca 100644
--- a/node_modules/typeorm/index.js
+++ b/node_modules/typeorm/index.js
@@ -121,6 +121,7 @@ tslib_1.__exportStar(require("./schema-builder/table/TableForeignKey"), exports)
 tslib_1.__exportStar(require("./schema-builder/table/TableIndex"), exports);
 tslib_1.__exportStar(require("./schema-builder/table/TableUnique"), exports);
 tslib_1.__exportStar(require("./schema-builder/table/Table"), exports);
+tslib_1.__exportStar(require("./schema-builder/view/View"), exports);
 tslib_1.__exportStar(require("./schema-builder/options/TableCheckOptions"), exports);
 tslib_1.__exportStar(require("./schema-builder/options/TableColumnOptions"), exports);
 tslib_1.__exportStar(require("./schema-builder/options/TableExclusionOptions"), exports);
diff --git a/node_modules/typeorm/index.js.map b/node_modules/typeorm/index.js.map
index 353963d..db1eac9 100644
--- a/node_modules/typeorm/index.js.map
+++ b/node_modules/typeorm/index.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*!\n */\nimport \"reflect-metadata\"\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./globals\"\nexport * from \"./container\"\nexport * from \"./common/EntityTarget\"\nexport * from \"./common/ObjectType\"\nexport * from \"./common/ObjectLiteral\"\nexport * from \"./common/MixedList\"\nexport * from \"./common/DeepPartial\"\nexport * from \"./common/RelationType\"\nexport * from \"./error\"\nexport * from \"./decorator/columns/Column\"\nexport * from \"./decorator/columns/CreateDateColumn\"\nexport * from \"./decorator/columns/DeleteDateColumn\"\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\"\nexport * from \"./decorator/columns/PrimaryColumn\"\nexport * from \"./decorator/columns/UpdateDateColumn\"\nexport * from \"./decorator/columns/VersionColumn\"\nexport * from \"./decorator/columns/VirtualColumn\"\nexport * from \"./decorator/columns/ViewColumn\"\nexport * from \"./decorator/columns/ObjectIdColumn\"\nexport * from \"./decorator/listeners/AfterInsert\"\nexport * from \"./decorator/listeners/AfterLoad\"\nexport * from \"./decorator/listeners/AfterRemove\"\nexport * from \"./decorator/listeners/AfterSoftRemove\"\nexport * from \"./decorator/listeners/AfterRecover\"\nexport * from \"./decorator/listeners/AfterUpdate\"\nexport * from \"./decorator/listeners/BeforeInsert\"\nexport * from \"./decorator/listeners/BeforeRemove\"\nexport * from \"./decorator/listeners/BeforeSoftRemove\"\nexport * from \"./decorator/listeners/BeforeRecover\"\nexport * from \"./decorator/listeners/BeforeUpdate\"\nexport * from \"./decorator/listeners/EventSubscriber\"\nexport * from \"./decorator/options/ColumnOptions\"\nexport * from \"./decorator/options/IndexOptions\"\nexport * from \"./decorator/options/JoinColumnOptions\"\nexport * from \"./decorator/options/JoinTableOptions\"\nexport * from \"./decorator/options/RelationOptions\"\nexport * from \"./decorator/options/EntityOptions\"\nexport * from \"./decorator/options/ValueTransformer\"\nexport * from \"./decorator/relations/JoinColumn\"\nexport * from \"./decorator/relations/JoinTable\"\nexport * from \"./decorator/relations/ManyToMany\"\nexport * from \"./decorator/relations/ManyToOne\"\nexport * from \"./decorator/relations/OneToMany\"\nexport * from \"./decorator/relations/OneToOne\"\nexport * from \"./decorator/relations/RelationCount\"\nexport * from \"./decorator/relations/RelationId\"\nexport * from \"./decorator/entity/Entity\"\nexport * from \"./decorator/entity/ChildEntity\"\nexport * from \"./decorator/entity/TableInheritance\"\nexport * from \"./decorator/entity-view/ViewEntity\"\nexport * from \"./decorator/tree/TreeLevelColumn\"\nexport * from \"./decorator/tree/TreeParent\"\nexport * from \"./decorator/tree/TreeChildren\"\nexport * from \"./decorator/tree/Tree\"\nexport * from \"./decorator/Index\"\nexport * from \"./decorator/Unique\"\nexport * from \"./decorator/Check\"\nexport * from \"./decorator/Exclusion\"\nexport * from \"./decorator/Generated\"\nexport * from \"./decorator/EntityRepository\"\nexport * from \"./find-options/operator/And\"\nexport * from \"./find-options/operator/Any\"\nexport * from \"./find-options/operator/ArrayContainedBy\"\nexport * from \"./find-options/operator/ArrayContains\"\nexport * from \"./find-options/operator/ArrayOverlap\"\nexport * from \"./find-options/operator/Between\"\nexport * from \"./find-options/operator/Equal\"\nexport * from \"./find-options/operator/In\"\nexport * from \"./find-options/operator/IsNull\"\nexport * from \"./find-options/operator/LessThan\"\nexport * from \"./find-options/operator/LessThanOrEqual\"\nexport * from \"./find-options/operator/ILike\"\nexport * from \"./find-options/operator/Like\"\nexport * from \"./find-options/operator/MoreThan\"\nexport * from \"./find-options/operator/MoreThanOrEqual\"\nexport * from \"./find-options/operator/Not\"\nexport * from \"./find-options/operator/Raw\"\nexport * from \"./find-options/operator/JsonContains\"\nexport * from \"./find-options/EqualOperator\"\nexport * from \"./find-options/FindManyOptions\"\nexport * from \"./find-options/FindOneOptions\"\nexport * from \"./find-options/FindOperator\"\nexport * from \"./find-options/FindOperatorType\"\nexport * from \"./find-options/FindOptionsOrder\"\nexport * from \"./find-options/FindOptionsRelations\"\nexport * from \"./find-options/FindOptionsSelect\"\nexport * from \"./find-options/FindOptionsUtils\"\nexport * from \"./find-options/FindOptionsWhere\"\nexport * from \"./find-options/FindTreeOptions\"\nexport * from \"./find-options/JoinOptions\"\nexport * from \"./find-options/OrderByCondition\"\nexport * from \"./logger/AbstractLogger\"\nexport * from \"./logger/Logger\"\nexport * from \"./logger/LoggerOptions\"\nexport * from \"./logger/AdvancedConsoleLogger\"\nexport * from \"./logger/SimpleConsoleLogger\"\nexport * from \"./logger/FileLogger\"\nexport * from \"./metadata/EntityMetadata\"\nexport * from \"./entity-manager/EntityManager\"\nexport * from \"./repository/AbstractRepository\"\nexport * from \"./repository/Repository\"\nexport * from \"./repository/BaseEntity\"\nexport * from \"./repository/TreeRepository\"\nexport * from \"./repository/MongoRepository\"\nexport * from \"./repository/RemoveOptions\"\nexport * from \"./repository/SaveOptions\"\nexport * from \"./schema-builder/table/TableCheck\"\nexport * from \"./schema-builder/table/TableColumn\"\nexport * from \"./schema-builder/table/TableExclusion\"\nexport * from \"./schema-builder/table/TableForeignKey\"\nexport * from \"./schema-builder/table/TableIndex\"\nexport * from \"./schema-builder/table/TableUnique\"\nexport * from \"./schema-builder/table/Table\"\nexport * from \"./schema-builder/options/TableCheckOptions\"\nexport * from \"./schema-builder/options/TableColumnOptions\"\nexport * from \"./schema-builder/options/TableExclusionOptions\"\nexport * from \"./schema-builder/options/TableForeignKeyOptions\"\nexport * from \"./schema-builder/options/TableIndexOptions\"\nexport * from \"./schema-builder/options/TableOptions\"\nexport * from \"./schema-builder/options/TableUniqueOptions\"\nexport * from \"./schema-builder/options/ViewOptions\"\nexport * from \"./driver/mongodb/typings\"\nexport * from \"./driver/types/DatabaseType\"\nexport * from \"./driver/types/GeoJsonTypes\"\nexport * from \"./driver/types/ReplicationMode\"\nexport * from \"./driver/sqlserver/MssqlParameter\"\n\n// export * from \"./data-source\";\n\nexport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"\nexport { ConnectionOptions } from \"./connection/ConnectionOptions\"\nexport { DataSource } from \"./data-source/DataSource\"\nexport { Connection } from \"./connection/Connection\"\nexport { ConnectionManager } from \"./connection/ConnectionManager\"\nexport { DataSourceOptions } from \"./data-source/DataSourceOptions\"\nexport { Driver } from \"./driver/Driver\"\nexport { QueryBuilder } from \"./query-builder/QueryBuilder\"\nexport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\"\nexport { DeleteQueryBuilder } from \"./query-builder/DeleteQueryBuilder\"\nexport { InsertQueryBuilder } from \"./query-builder/InsertQueryBuilder\"\nexport { UpdateQueryBuilder } from \"./query-builder/UpdateQueryBuilder\"\nexport { RelationQueryBuilder } from \"./query-builder/RelationQueryBuilder\"\nexport { Brackets } from \"./query-builder/Brackets\"\nexport { NotBrackets } from \"./query-builder/NotBrackets\"\nexport { WhereExpressionBuilder } from \"./query-builder/WhereExpressionBuilder\"\nexport { WhereExpression } from \"./query-builder/WhereExpressionBuilder\"\nexport { InsertResult } from \"./query-builder/result/InsertResult\"\nexport { UpdateResult } from \"./query-builder/result/UpdateResult\"\nexport { DeleteResult } from \"./query-builder/result/DeleteResult\"\nexport { QueryResult } from \"./query-runner/QueryResult\"\nexport { QueryRunner } from \"./query-runner/QueryRunner\"\nexport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\"\nexport { Migration } from \"./migration/Migration\"\nexport { MigrationExecutor } from \"./migration/MigrationExecutor\"\nexport { MigrationInterface } from \"./migration/MigrationInterface\"\nexport { DefaultNamingStrategy } from \"./naming-strategy/DefaultNamingStrategy\"\nexport { NamingStrategyInterface } from \"./naming-strategy/NamingStrategyInterface\"\nexport { LegacyOracleNamingStrategy } from \"./naming-strategy/LegacyOracleNamingStrategy\"\nexport { InsertEvent } from \"./subscriber/event/InsertEvent\"\nexport { LoadEvent } from \"./subscriber/event/LoadEvent\"\nexport { UpdateEvent } from \"./subscriber/event/UpdateEvent\"\nexport { RemoveEvent } from \"./subscriber/event/RemoveEvent\"\nexport { SoftRemoveEvent } from \"./subscriber/event/SoftRemoveEvent\"\nexport { RecoverEvent } from \"./subscriber/event/RecoverEvent\"\nexport { TransactionCommitEvent } from \"./subscriber/event/TransactionCommitEvent\"\nexport { TransactionRollbackEvent } from \"./subscriber/event/TransactionRollbackEvent\"\nexport { TransactionStartEvent } from \"./subscriber/event/TransactionStartEvent\"\nexport { EntitySubscriberInterface } from \"./subscriber/EntitySubscriberInterface\"\nexport { EntitySchema } from \"./entity-schema/EntitySchema\"\nexport { EntitySchemaColumnOptions } from \"./entity-schema/EntitySchemaColumnOptions\"\nexport { EntitySchemaIndexOptions } from \"./entity-schema/EntitySchemaIndexOptions\"\nexport { EntitySchemaRelationOptions } from \"./entity-schema/EntitySchemaRelationOptions\"\nexport { EntitySchemaEmbeddedColumnOptions } from \"./entity-schema/EntitySchemaEmbeddedColumnOptions\"\nexport { ColumnType } from \"./driver/types/ColumnTypes\"\nexport { EntitySchemaOptions } from \"./entity-schema/EntitySchemaOptions\"\nexport { InstanceChecker } from \"./util/InstanceChecker\"\nexport { TreeRepositoryUtils } from \"./util/TreeRepositoryUtils\"\n"],"sourceRoot":"."}
\ No newline at end of file
+{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["/*!\n */\nimport \"reflect-metadata\"\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./globals\"\nexport * from \"./container\"\nexport * from \"./common/EntityTarget\"\nexport * from \"./common/ObjectType\"\nexport * from \"./common/ObjectLiteral\"\nexport * from \"./common/MixedList\"\nexport * from \"./common/DeepPartial\"\nexport * from \"./common/RelationType\"\nexport * from \"./error\"\nexport * from \"./decorator/columns/Column\"\nexport * from \"./decorator/columns/CreateDateColumn\"\nexport * from \"./decorator/columns/DeleteDateColumn\"\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\"\nexport * from \"./decorator/columns/PrimaryColumn\"\nexport * from \"./decorator/columns/UpdateDateColumn\"\nexport * from \"./decorator/columns/VersionColumn\"\nexport * from \"./decorator/columns/VirtualColumn\"\nexport * from \"./decorator/columns/ViewColumn\"\nexport * from \"./decorator/columns/ObjectIdColumn\"\nexport * from \"./decorator/listeners/AfterInsert\"\nexport * from \"./decorator/listeners/AfterLoad\"\nexport * from \"./decorator/listeners/AfterRemove\"\nexport * from \"./decorator/listeners/AfterSoftRemove\"\nexport * from \"./decorator/listeners/AfterRecover\"\nexport * from \"./decorator/listeners/AfterUpdate\"\nexport * from \"./decorator/listeners/BeforeInsert\"\nexport * from \"./decorator/listeners/BeforeRemove\"\nexport * from \"./decorator/listeners/BeforeSoftRemove\"\nexport * from \"./decorator/listeners/BeforeRecover\"\nexport * from \"./decorator/listeners/BeforeUpdate\"\nexport * from \"./decorator/listeners/EventSubscriber\"\nexport * from \"./decorator/options/ColumnOptions\"\nexport * from \"./decorator/options/IndexOptions\"\nexport * from \"./decorator/options/JoinColumnOptions\"\nexport * from \"./decorator/options/JoinTableOptions\"\nexport * from \"./decorator/options/RelationOptions\"\nexport * from \"./decorator/options/EntityOptions\"\nexport * from \"./decorator/options/ValueTransformer\"\nexport * from \"./decorator/relations/JoinColumn\"\nexport * from \"./decorator/relations/JoinTable\"\nexport * from \"./decorator/relations/ManyToMany\"\nexport * from \"./decorator/relations/ManyToOne\"\nexport * from \"./decorator/relations/OneToMany\"\nexport * from \"./decorator/relations/OneToOne\"\nexport * from \"./decorator/relations/RelationCount\"\nexport * from \"./decorator/relations/RelationId\"\nexport * from \"./decorator/entity/Entity\"\nexport * from \"./decorator/entity/ChildEntity\"\nexport * from \"./decorator/entity/TableInheritance\"\nexport * from \"./decorator/entity-view/ViewEntity\"\nexport * from \"./decorator/tree/TreeLevelColumn\"\nexport * from \"./decorator/tree/TreeParent\"\nexport * from \"./decorator/tree/TreeChildren\"\nexport * from \"./decorator/tree/Tree\"\nexport * from \"./decorator/Index\"\nexport * from \"./decorator/Unique\"\nexport * from \"./decorator/Check\"\nexport * from \"./decorator/Exclusion\"\nexport * from \"./decorator/Generated\"\nexport * from \"./decorator/EntityRepository\"\nexport * from \"./find-options/operator/And\"\nexport * from \"./find-options/operator/Any\"\nexport * from \"./find-options/operator/ArrayContainedBy\"\nexport * from \"./find-options/operator/ArrayContains\"\nexport * from \"./find-options/operator/ArrayOverlap\"\nexport * from \"./find-options/operator/Between\"\nexport * from \"./find-options/operator/Equal\"\nexport * from \"./find-options/operator/In\"\nexport * from \"./find-options/operator/IsNull\"\nexport * from \"./find-options/operator/LessThan\"\nexport * from \"./find-options/operator/LessThanOrEqual\"\nexport * from \"./find-options/operator/ILike\"\nexport * from \"./find-options/operator/Like\"\nexport * from \"./find-options/operator/MoreThan\"\nexport * from \"./find-options/operator/MoreThanOrEqual\"\nexport * from \"./find-options/operator/Not\"\nexport * from \"./find-options/operator/Raw\"\nexport * from \"./find-options/operator/JsonContains\"\nexport * from \"./find-options/EqualOperator\"\nexport * from \"./find-options/FindManyOptions\"\nexport * from \"./find-options/FindOneOptions\"\nexport * from \"./find-options/FindOperator\"\nexport * from \"./find-options/FindOperatorType\"\nexport * from \"./find-options/FindOptionsOrder\"\nexport * from \"./find-options/FindOptionsRelations\"\nexport * from \"./find-options/FindOptionsSelect\"\nexport * from \"./find-options/FindOptionsUtils\"\nexport * from \"./find-options/FindOptionsWhere\"\nexport * from \"./find-options/FindTreeOptions\"\nexport * from \"./find-options/JoinOptions\"\nexport * from \"./find-options/OrderByCondition\"\nexport * from \"./logger/AbstractLogger\"\nexport * from \"./logger/Logger\"\nexport * from \"./logger/LoggerOptions\"\nexport * from \"./logger/AdvancedConsoleLogger\"\nexport * from \"./logger/SimpleConsoleLogger\"\nexport * from \"./logger/FileLogger\"\nexport * from \"./metadata/EntityMetadata\"\nexport * from \"./entity-manager/EntityManager\"\nexport * from \"./repository/AbstractRepository\"\nexport * from \"./repository/Repository\"\nexport * from \"./repository/BaseEntity\"\nexport * from \"./repository/TreeRepository\"\nexport * from \"./repository/MongoRepository\"\nexport * from \"./repository/RemoveOptions\"\nexport * from \"./repository/SaveOptions\"\nexport * from \"./schema-builder/table/TableCheck\"\nexport * from \"./schema-builder/table/TableColumn\"\nexport * from \"./schema-builder/table/TableExclusion\"\nexport * from \"./schema-builder/table/TableForeignKey\"\nexport * from \"./schema-builder/table/TableIndex\"\nexport * from \"./schema-builder/table/TableUnique\"\nexport * from \"./schema-builder/table/Table\"\nexport * from \"./schema-builder/view/View\"\nexport * from \"./schema-builder/options/TableCheckOptions\"\nexport * from \"./schema-builder/options/TableColumnOptions\"\nexport * from \"./schema-builder/options/TableExclusionOptions\"\nexport * from \"./schema-builder/options/TableForeignKeyOptions\"\nexport * from \"./schema-builder/options/TableIndexOptions\"\nexport * from \"./schema-builder/options/TableOptions\"\nexport * from \"./schema-builder/options/TableUniqueOptions\"\nexport * from \"./schema-builder/options/ViewOptions\"\nexport * from \"./driver/mongodb/typings\"\nexport * from \"./driver/types/DatabaseType\"\nexport * from \"./driver/types/GeoJsonTypes\"\nexport * from \"./driver/types/ReplicationMode\"\nexport * from \"./driver/sqlserver/MssqlParameter\"\n\n// export * from \"./data-source\";\n\nexport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"\nexport { ConnectionOptions } from \"./connection/ConnectionOptions\"\nexport { DataSource } from \"./data-source/DataSource\"\nexport { Connection } from \"./connection/Connection\"\nexport { ConnectionManager } from \"./connection/ConnectionManager\"\nexport { DataSourceOptions } from \"./data-source/DataSourceOptions\"\nexport { Driver } from \"./driver/Driver\"\nexport { QueryBuilder } from \"./query-builder/QueryBuilder\"\nexport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\"\nexport { DeleteQueryBuilder } from \"./query-builder/DeleteQueryBuilder\"\nexport { InsertQueryBuilder } from \"./query-builder/InsertQueryBuilder\"\nexport { UpdateQueryBuilder } from \"./query-builder/UpdateQueryBuilder\"\nexport { RelationQueryBuilder } from \"./query-builder/RelationQueryBuilder\"\nexport { Brackets } from \"./query-builder/Brackets\"\nexport { NotBrackets } from \"./query-builder/NotBrackets\"\nexport { WhereExpressionBuilder } from \"./query-builder/WhereExpressionBuilder\"\nexport { WhereExpression } from \"./query-builder/WhereExpressionBuilder\"\nexport { InsertResult } from \"./query-builder/result/InsertResult\"\nexport { UpdateResult } from \"./query-builder/result/UpdateResult\"\nexport { DeleteResult } from \"./query-builder/result/DeleteResult\"\nexport { QueryResult } from \"./query-runner/QueryResult\"\nexport { QueryRunner } from \"./query-runner/QueryRunner\"\nexport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\"\nexport { Migration } from \"./migration/Migration\"\nexport { MigrationExecutor } from \"./migration/MigrationExecutor\"\nexport { MigrationInterface } from \"./migration/MigrationInterface\"\nexport { DefaultNamingStrategy } from \"./naming-strategy/DefaultNamingStrategy\"\nexport { NamingStrategyInterface } from \"./naming-strategy/NamingStrategyInterface\"\nexport { LegacyOracleNamingStrategy } from \"./naming-strategy/LegacyOracleNamingStrategy\"\nexport { InsertEvent } from \"./subscriber/event/InsertEvent\"\nexport { LoadEvent } from \"./subscriber/event/LoadEvent\"\nexport { UpdateEvent } from \"./subscriber/event/UpdateEvent\"\nexport { RemoveEvent } from \"./subscriber/event/RemoveEvent\"\nexport { SoftRemoveEvent } from \"./subscriber/event/SoftRemoveEvent\"\nexport { RecoverEvent } from \"./subscriber/event/RecoverEvent\"\nexport { TransactionCommitEvent } from \"./subscriber/event/TransactionCommitEvent\"\nexport { TransactionRollbackEvent } from \"./subscriber/event/TransactionRollbackEvent\"\nexport { TransactionStartEvent } from \"./subscriber/event/TransactionStartEvent\"\nexport { EntitySubscriberInterface } from \"./subscriber/EntitySubscriberInterface\"\nexport { EntitySchema } from \"./entity-schema/EntitySchema\"\nexport { EntitySchemaColumnOptions } from \"./entity-schema/EntitySchemaColumnOptions\"\nexport { EntitySchemaIndexOptions } from \"./entity-schema/EntitySchemaIndexOptions\"\nexport { EntitySchemaRelationOptions } from \"./entity-schema/EntitySchemaRelationOptions\"\nexport { EntitySchemaEmbeddedColumnOptions } from \"./entity-schema/EntitySchemaEmbeddedColumnOptions\"\nexport { ColumnType } from \"./driver/types/ColumnTypes\"\nexport { EntitySchemaOptions } from \"./entity-schema/EntitySchemaOptions\"\nexport { InstanceChecker } from \"./util/InstanceChecker\"\nexport { TreeRepositoryUtils } from \"./util/TreeRepositoryUtils\"\n"],"sourceRoot":"."}
\ No newline at end of file
diff --git a/node_modules/typeorm/index.mjs b/node_modules/typeorm/index.mjs
index 6e30812..e605462 100644
--- a/node_modules/typeorm/index.mjs
+++ b/node_modules/typeorm/index.mjs
@@ -187,6 +187,7 @@ const {
     TableIndex,
     TableUnique,
     Table,
+    View,
     Binary,
     BSON,
     BSONRegExp,
@@ -394,6 +395,7 @@ export {
     TableIndex,
     TableUnique,
     Table,
+    View,
     Binary,
     BSON,
     BSONRegExp,
diff --git a/node_modules/typeorm/logger/AbstractLogger.d.ts b/node_modules/typeorm/logger/AbstractLogger.d.ts
index a5dd8b7..46e93b7 100644
--- a/node_modules/typeorm/logger/AbstractLogger.d.ts
+++ b/node_modules/typeorm/logger/AbstractLogger.d.ts
@@ -1,6 +1,6 @@
-import { Logger, LogLevel, LogMessage, LogMessageType, PrepareLogMessagesOptions } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { LoggerOptions } from "./LoggerOptions";
+import { Logger, LogLevel, LogMessage, LogMessageType, PrepareLogMessagesOptions } from "typeorm/logger/Logger";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { LoggerOptions } from "typeorm/logger/LoggerOptions";
 export declare abstract class AbstractLogger implements Logger {
     protected options?: LoggerOptions | undefined;
     constructor(options?: LoggerOptions | undefined);
diff --git a/node_modules/typeorm/logger/AdvancedConsoleLogger.d.ts b/node_modules/typeorm/logger/AdvancedConsoleLogger.d.ts
index e6cbf50..d89544b 100644
--- a/node_modules/typeorm/logger/AdvancedConsoleLogger.d.ts
+++ b/node_modules/typeorm/logger/AdvancedConsoleLogger.d.ts
@@ -1,6 +1,6 @@
-import { AbstractLogger } from "./AbstractLogger";
-import { LogLevel, LogMessage } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { AbstractLogger } from "typeorm/logger/AbstractLogger";
+import { LogLevel, LogMessage } from "typeorm/logger/Logger";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * Performs logging of the events in TypeORM.
  * This version of logger uses console to log events and use syntax highlighting.
diff --git a/node_modules/typeorm/logger/FileLogger.d.ts b/node_modules/typeorm/logger/FileLogger.d.ts
index 47bc422..b1a10d0 100644
--- a/node_modules/typeorm/logger/FileLogger.d.ts
+++ b/node_modules/typeorm/logger/FileLogger.d.ts
@@ -1,7 +1,7 @@
-import { FileLoggerOptions, LoggerOptions } from "./LoggerOptions";
-import { LogLevel, LogMessage } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { AbstractLogger } from "./AbstractLogger";
+import { FileLoggerOptions, LoggerOptions } from "typeorm/logger/LoggerOptions";
+import { LogLevel, LogMessage } from "typeorm/logger/Logger";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { AbstractLogger } from "typeorm/logger/AbstractLogger";
 /**
  * Performs logging of the events in TypeORM.
  * This version of logger logs everything into ormlogs.log file.
diff --git a/node_modules/typeorm/logger/Logger.d.ts b/node_modules/typeorm/logger/Logger.d.ts
index 91d24b1..7968416 100644
--- a/node_modules/typeorm/logger/Logger.d.ts
+++ b/node_modules/typeorm/logger/Logger.d.ts
@@ -1,4 +1,4 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * Performs logging of the events in TypeORM.
  */
diff --git a/node_modules/typeorm/logger/LoggerOptions.d.ts b/node_modules/typeorm/logger/LoggerOptions.d.ts
index b36a8e5..587ace5 100644
--- a/node_modules/typeorm/logger/LoggerOptions.d.ts
+++ b/node_modules/typeorm/logger/LoggerOptions.d.ts
@@ -1,4 +1,4 @@
-import { LogLevel } from "./Logger";
+import { LogLevel } from "typeorm/logger/Logger";
 /**
  * Logging options.
  */
diff --git a/node_modules/typeorm/logger/SimpleConsoleLogger.d.ts b/node_modules/typeorm/logger/SimpleConsoleLogger.d.ts
index ab77c03..8466c7f 100644
--- a/node_modules/typeorm/logger/SimpleConsoleLogger.d.ts
+++ b/node_modules/typeorm/logger/SimpleConsoleLogger.d.ts
@@ -1,6 +1,6 @@
-import { AbstractLogger } from "./AbstractLogger";
-import { LogLevel, LogMessage } from "./Logger";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { AbstractLogger } from "typeorm/logger/AbstractLogger";
+import { LogLevel, LogMessage } from "typeorm/logger/Logger";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * Performs logging of the events in TypeORM.
  * This version of logger uses console to log events and does not use syntax highlighting.
diff --git a/node_modules/typeorm/metadata-args/ColumnMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/ColumnMetadataArgs.d.ts
index f1a67c1..2c32ab6 100644
--- a/node_modules/typeorm/metadata-args/ColumnMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/ColumnMetadataArgs.d.ts
@@ -1,5 +1,5 @@
-import { ColumnOptions } from "../decorator/options/ColumnOptions";
-import { ColumnMode } from "./types/ColumnMode";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
+import { ColumnMode } from "typeorm/metadata-args/types/ColumnMode";
 /**
  * Arguments for ColumnMetadata class.
  */
diff --git a/node_modules/typeorm/metadata-args/EntityListenerMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/EntityListenerMetadataArgs.d.ts
index 9465ae7..a31d99b 100644
--- a/node_modules/typeorm/metadata-args/EntityListenerMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/EntityListenerMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { EventListenerType } from "../metadata/types/EventListenerTypes";
+import { EventListenerType } from "typeorm/metadata/types/EventListenerTypes";
 /**
  * Arguments for EntityListenerMetadata class.
  */
diff --git a/node_modules/typeorm/metadata-args/EntityRepositoryMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/EntityRepositoryMetadataArgs.d.ts
index 5e3ac71..3191ae0 100644
--- a/node_modules/typeorm/metadata-args/EntityRepositoryMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/EntityRepositoryMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { EntityTarget } from "../common/EntityTarget";
+import { EntityTarget } from "typeorm/common/EntityTarget";
 /**
  * Arguments for EntityRepositoryMetadata class, helps to construct an EntityRepositoryMetadata object.
  */
diff --git a/node_modules/typeorm/metadata-args/InheritanceMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/InheritanceMetadataArgs.d.ts
index afc3272..8695511 100644
--- a/node_modules/typeorm/metadata-args/InheritanceMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/InheritanceMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { ColumnOptions } from "../decorator/options/ColumnOptions";
+import { ColumnOptions } from "typeorm/decorator/options/ColumnOptions";
 /**
  * Arguments for InheritanceMetadata class.
  */
diff --git a/node_modules/typeorm/metadata-args/JoinTableMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/JoinTableMetadataArgs.d.ts
index d8ab79e..2ccadf9 100644
--- a/node_modules/typeorm/metadata-args/JoinTableMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/JoinTableMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { JoinColumnMetadataArgs } from "./JoinColumnMetadataArgs";
+import { JoinColumnMetadataArgs } from "typeorm/metadata-args/JoinColumnMetadataArgs";
 /**
  * Arguments for JoinTableMetadata class.
  */
diff --git a/node_modules/typeorm/metadata-args/MetadataArgsStorage.d.ts b/node_modules/typeorm/metadata-args/MetadataArgsStorage.d.ts
index cdbccdb..b584b88 100644
--- a/node_modules/typeorm/metadata-args/MetadataArgsStorage.d.ts
+++ b/node_modules/typeorm/metadata-args/MetadataArgsStorage.d.ts
@@ -1,25 +1,25 @@
-import { RelationMetadataArgs } from "./RelationMetadataArgs";
-import { ColumnMetadataArgs } from "./ColumnMetadataArgs";
-import { RelationCountMetadataArgs } from "./RelationCountMetadataArgs";
-import { IndexMetadataArgs } from "./IndexMetadataArgs";
-import { EntityListenerMetadataArgs } from "./EntityListenerMetadataArgs";
-import { TableMetadataArgs } from "./TableMetadataArgs";
-import { NamingStrategyMetadataArgs } from "./NamingStrategyMetadataArgs";
-import { JoinTableMetadataArgs } from "./JoinTableMetadataArgs";
-import { JoinColumnMetadataArgs } from "./JoinColumnMetadataArgs";
-import { EmbeddedMetadataArgs } from "./EmbeddedMetadataArgs";
-import { EntitySubscriberMetadataArgs } from "./EntitySubscriberMetadataArgs";
-import { RelationIdMetadataArgs } from "./RelationIdMetadataArgs";
-import { InheritanceMetadataArgs } from "./InheritanceMetadataArgs";
-import { DiscriminatorValueMetadataArgs } from "./DiscriminatorValueMetadataArgs";
-import { EntityRepositoryMetadataArgs } from "./EntityRepositoryMetadataArgs";
-import { TransactionEntityMetadataArgs } from "./TransactionEntityMetadataArgs";
-import { TransactionRepositoryMetadataArgs } from "./TransactionRepositoryMetadataArgs";
-import { GeneratedMetadataArgs } from "./GeneratedMetadataArgs";
-import { TreeMetadataArgs } from "./TreeMetadataArgs";
-import { UniqueMetadataArgs } from "./UniqueMetadataArgs";
-import { CheckMetadataArgs } from "./CheckMetadataArgs";
-import { ExclusionMetadataArgs } from "./ExclusionMetadataArgs";
+import { RelationMetadataArgs } from "typeorm/metadata-args/RelationMetadataArgs";
+import { ColumnMetadataArgs } from "typeorm/metadata-args/ColumnMetadataArgs";
+import { RelationCountMetadataArgs } from "typeorm/metadata-args/RelationCountMetadataArgs";
+import { IndexMetadataArgs } from "typeorm/metadata-args/IndexMetadataArgs";
+import { EntityListenerMetadataArgs } from "typeorm/metadata-args/EntityListenerMetadataArgs";
+import { TableMetadataArgs } from "typeorm/metadata-args/TableMetadataArgs";
+import { NamingStrategyMetadataArgs } from "typeorm/metadata-args/NamingStrategyMetadataArgs";
+import { JoinTableMetadataArgs } from "typeorm/metadata-args/JoinTableMetadataArgs";
+import { JoinColumnMetadataArgs } from "typeorm/metadata-args/JoinColumnMetadataArgs";
+import { EmbeddedMetadataArgs } from "typeorm/metadata-args/EmbeddedMetadataArgs";
+import { EntitySubscriberMetadataArgs } from "typeorm/metadata-args/EntitySubscriberMetadataArgs";
+import { RelationIdMetadataArgs } from "typeorm/metadata-args/RelationIdMetadataArgs";
+import { InheritanceMetadataArgs } from "typeorm/metadata-args/InheritanceMetadataArgs";
+import { DiscriminatorValueMetadataArgs } from "typeorm/metadata-args/DiscriminatorValueMetadataArgs";
+import { EntityRepositoryMetadataArgs } from "typeorm/metadata-args/EntityRepositoryMetadataArgs";
+import { TransactionEntityMetadataArgs } from "typeorm/metadata-args/TransactionEntityMetadataArgs";
+import { TransactionRepositoryMetadataArgs } from "typeorm/metadata-args/TransactionRepositoryMetadataArgs";
+import { GeneratedMetadataArgs } from "typeorm/metadata-args/GeneratedMetadataArgs";
+import { TreeMetadataArgs } from "typeorm/metadata-args/TreeMetadataArgs";
+import { UniqueMetadataArgs } from "typeorm/metadata-args/UniqueMetadataArgs";
+import { CheckMetadataArgs } from "typeorm/metadata-args/CheckMetadataArgs";
+import { ExclusionMetadataArgs } from "typeorm/metadata-args/ExclusionMetadataArgs";
 /**
  * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.
  * Each metadata args represents some specifications of what it represents.
diff --git a/node_modules/typeorm/metadata-args/RelationCountMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/RelationCountMetadataArgs.d.ts
index f631a56..bd4fed5 100644
--- a/node_modules/typeorm/metadata-args/RelationCountMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/RelationCountMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Arguments for RelationCountMetadata class.
  */
diff --git a/node_modules/typeorm/metadata-args/RelationIdMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/RelationIdMetadataArgs.d.ts
index 73d6b20..9f06e58 100644
--- a/node_modules/typeorm/metadata-args/RelationIdMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/RelationIdMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Arguments for RelationIdMetadataArgs class.
  */
diff --git a/node_modules/typeorm/metadata-args/RelationMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/RelationMetadataArgs.d.ts
index 49e4afc..4a88e74 100644
--- a/node_modules/typeorm/metadata-args/RelationMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/RelationMetadataArgs.d.ts
@@ -1,7 +1,7 @@
-import { RelationType } from "../metadata/types/RelationTypes";
-import { RelationOptions } from "../decorator/options/RelationOptions";
-import { PropertyTypeFactory } from "../metadata/types/PropertyTypeInFunction";
-import { RelationTypeInFunction } from "../metadata/types/RelationTypeInFunction";
+import { RelationType } from "typeorm/metadata/types/RelationTypes";
+import { RelationOptions } from "typeorm/decorator/options/RelationOptions";
+import { PropertyTypeFactory } from "typeorm/metadata/types/PropertyTypeInFunction";
+import { RelationTypeInFunction } from "typeorm/metadata/types/RelationTypeInFunction";
 /**
  * Arguments for RelationMetadata class.
  */
diff --git a/node_modules/typeorm/metadata-args/TableMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/TableMetadataArgs.d.ts
index 9f5683f..d2b9262 100644
--- a/node_modules/typeorm/metadata-args/TableMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/TableMetadataArgs.d.ts
@@ -1,6 +1,6 @@
-import { DataSource, SelectQueryBuilder } from "..";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { TableType } from "../metadata/types/TableTypes";
+import { DataSource, SelectQueryBuilder } from "typeorm";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
+import { TableType } from "typeorm/metadata/types/TableTypes";
 /**
  * Arguments for TableMetadata class, helps to construct an TableMetadata object.
  */
diff --git a/node_modules/typeorm/metadata-args/TreeMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/TreeMetadataArgs.d.ts
index cff47ed..b18cb8a 100644
--- a/node_modules/typeorm/metadata-args/TreeMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/TreeMetadataArgs.d.ts
@@ -1,5 +1,5 @@
-import { TreeType } from "../metadata/types/TreeTypes";
-import { ClosureTreeOptions } from "../metadata/types/ClosureTreeOptions";
+import { TreeType } from "typeorm/metadata/types/TreeTypes";
+import { ClosureTreeOptions } from "typeorm/metadata/types/ClosureTreeOptions";
 /**
  * Stores metadata collected for Tree entities.
  */
diff --git a/node_modules/typeorm/metadata-args/UniqueMetadataArgs.d.ts b/node_modules/typeorm/metadata-args/UniqueMetadataArgs.d.ts
index 29565ec..8f7ee00 100644
--- a/node_modules/typeorm/metadata-args/UniqueMetadataArgs.d.ts
+++ b/node_modules/typeorm/metadata-args/UniqueMetadataArgs.d.ts
@@ -1,4 +1,4 @@
-import { DeferrableType } from "../metadata/types/DeferrableType";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
 /**
  * Arguments for UniqueMetadata class.
  */
diff --git a/node_modules/typeorm/metadata/CheckMetadata.d.ts b/node_modules/typeorm/metadata/CheckMetadata.d.ts
index 191d270..fe453d4 100644
--- a/node_modules/typeorm/metadata/CheckMetadata.d.ts
+++ b/node_modules/typeorm/metadata/CheckMetadata.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { CheckMetadataArgs } from "../metadata-args/CheckMetadataArgs";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { CheckMetadataArgs } from "typeorm/metadata-args/CheckMetadataArgs";
 /**
  * Check metadata contains all information about table's check constraints.
  */
diff --git a/node_modules/typeorm/metadata/ColumnMetadata.d.ts b/node_modules/typeorm/metadata/ColumnMetadata.d.ts
index 434c7ba..70afdf8 100644
--- a/node_modules/typeorm/metadata/ColumnMetadata.d.ts
+++ b/node_modules/typeorm/metadata/ColumnMetadata.d.ts
@@ -1,11 +1,11 @@
-import { ColumnType } from "../driver/types/ColumnTypes";
-import { EntityMetadata } from "./EntityMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnMetadataArgs } from "../metadata-args/ColumnMetadataArgs";
-import { DataSource } from "../data-source/DataSource";
-import { ValueTransformer } from "../decorator/options/ValueTransformer";
+import { ColumnType } from "typeorm/driver/types/ColumnTypes";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { EmbeddedMetadata } from "typeorm/metadata/EmbeddedMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { ColumnMetadataArgs } from "typeorm/metadata-args/ColumnMetadataArgs";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { ValueTransformer } from "typeorm/decorator/options/ValueTransformer";
 /**
  * This metadata contains all information about entity's column.
  */
diff --git a/node_modules/typeorm/metadata/EmbeddedMetadata.d.ts b/node_modules/typeorm/metadata/EmbeddedMetadata.d.ts
index 2110319..d5246d5 100644
--- a/node_modules/typeorm/metadata/EmbeddedMetadata.d.ts
+++ b/node_modules/typeorm/metadata/EmbeddedMetadata.d.ts
@@ -1,13 +1,13 @@
-import { ColumnMetadata } from "./ColumnMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { EntityMetadata } from "./EntityMetadata";
-import { EmbeddedMetadataArgs } from "../metadata-args/EmbeddedMetadataArgs";
-import { RelationIdMetadata } from "./RelationIdMetadata";
-import { RelationCountMetadata } from "./RelationCountMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { EntityListenerMetadata } from "./EntityListenerMetadata";
-import { IndexMetadata } from "./IndexMetadata";
-import { UniqueMetadata } from "./UniqueMetadata";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { EmbeddedMetadataArgs } from "typeorm/metadata-args/EmbeddedMetadataArgs";
+import { RelationIdMetadata } from "typeorm/metadata/RelationIdMetadata";
+import { RelationCountMetadata } from "typeorm/metadata/RelationCountMetadata";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { EntityListenerMetadata } from "typeorm/metadata/EntityListenerMetadata";
+import { IndexMetadata } from "typeorm/metadata/IndexMetadata";
+import { UniqueMetadata } from "typeorm/metadata/UniqueMetadata";
 /**
  * Contains all information about entity's embedded property.
  */
diff --git a/node_modules/typeorm/metadata/EntityListenerMetadata.d.ts b/node_modules/typeorm/metadata/EntityListenerMetadata.d.ts
index 35463f3..8274652 100644
--- a/node_modules/typeorm/metadata/EntityListenerMetadata.d.ts
+++ b/node_modules/typeorm/metadata/EntityListenerMetadata.d.ts
@@ -1,8 +1,8 @@
-import { EventListenerType } from "./types/EventListenerTypes";
-import { EntityListenerMetadataArgs } from "../metadata-args/EntityListenerMetadataArgs";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityMetadata } from "./EntityMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
+import { EventListenerType } from "typeorm/metadata/types/EventListenerTypes";
+import { EntityListenerMetadataArgs } from "typeorm/metadata-args/EntityListenerMetadataArgs";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { EmbeddedMetadata } from "typeorm/metadata/EmbeddedMetadata";
 /**
  * This metadata contains all information about entity's listeners.
  */
diff --git a/node_modules/typeorm/metadata/EntityMetadata.d.ts b/node_modules/typeorm/metadata/EntityMetadata.d.ts
index 7964825..8325f10 100644
--- a/node_modules/typeorm/metadata/EntityMetadata.d.ts
+++ b/node_modules/typeorm/metadata/EntityMetadata.d.ts
@@ -1,23 +1,23 @@
-import { QueryRunner, SelectQueryBuilder } from "..";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { DataSource } from "../data-source/DataSource";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { TableMetadataArgs } from "../metadata-args/TableMetadataArgs";
-import { TreeMetadataArgs } from "../metadata-args/TreeMetadataArgs";
-import { CheckMetadata } from "./CheckMetadata";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { EntityListenerMetadata } from "./EntityListenerMetadata";
-import { ExclusionMetadata } from "./ExclusionMetadata";
-import { ForeignKeyMetadata } from "./ForeignKeyMetadata";
-import { IndexMetadata } from "./IndexMetadata";
-import { RelationCountMetadata } from "./RelationCountMetadata";
-import { RelationIdMetadata } from "./RelationIdMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { TableType } from "./types/TableTypes";
-import { TreeType } from "./types/TreeTypes";
-import { UniqueMetadata } from "./UniqueMetadata";
-import { ClosureTreeOptions } from "./types/ClosureTreeOptions";
+import { QueryRunner, SelectQueryBuilder } from "typeorm";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
+import { TableMetadataArgs } from "typeorm/metadata-args/TableMetadataArgs";
+import { TreeMetadataArgs } from "typeorm/metadata-args/TreeMetadataArgs";
+import { CheckMetadata } from "typeorm/metadata/CheckMetadata";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { EmbeddedMetadata } from "typeorm/metadata/EmbeddedMetadata";
+import { EntityListenerMetadata } from "typeorm/metadata/EntityListenerMetadata";
+import { ExclusionMetadata } from "typeorm/metadata/ExclusionMetadata";
+import { ForeignKeyMetadata } from "typeorm/metadata/ForeignKeyMetadata";
+import { IndexMetadata } from "typeorm/metadata/IndexMetadata";
+import { RelationCountMetadata } from "typeorm/metadata/RelationCountMetadata";
+import { RelationIdMetadata } from "typeorm/metadata/RelationIdMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { TableType } from "typeorm/metadata/types/TableTypes";
+import { TreeType } from "typeorm/metadata/types/TreeTypes";
+import { UniqueMetadata } from "typeorm/metadata/UniqueMetadata";
+import { ClosureTreeOptions } from "typeorm/metadata/types/ClosureTreeOptions";
 /**
  * Contains all entity metadata.
  */
diff --git a/node_modules/typeorm/metadata/ExclusionMetadata.d.ts b/node_modules/typeorm/metadata/ExclusionMetadata.d.ts
index 2632892..3ae4747 100644
--- a/node_modules/typeorm/metadata/ExclusionMetadata.d.ts
+++ b/node_modules/typeorm/metadata/ExclusionMetadata.d.ts
@@ -1,6 +1,6 @@
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { ExclusionMetadataArgs } from "../metadata-args/ExclusionMetadataArgs";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { ExclusionMetadataArgs } from "typeorm/metadata-args/ExclusionMetadataArgs";
 /**
  * Exclusion metadata contains all information about table's exclusion constraints.
  */
diff --git a/node_modules/typeorm/metadata/ForeignKeyMetadata.d.ts b/node_modules/typeorm/metadata/ForeignKeyMetadata.d.ts
index 14e2466..f5f8c49 100644
--- a/node_modules/typeorm/metadata/ForeignKeyMetadata.d.ts
+++ b/node_modules/typeorm/metadata/ForeignKeyMetadata.d.ts
@@ -1,9 +1,9 @@
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { DeferrableType } from "./types/DeferrableType";
-import { OnDeleteType } from "./types/OnDeleteType";
-import { OnUpdateType } from "./types/OnUpdateType";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
+import { OnDeleteType } from "typeorm/metadata/types/OnDeleteType";
+import { OnUpdateType } from "typeorm/metadata/types/OnUpdateType";
 /**
  * Contains all information about entity's foreign key.
  */
diff --git a/node_modules/typeorm/metadata/IndexMetadata.d.ts b/node_modules/typeorm/metadata/IndexMetadata.d.ts
index c4c06b8..f8d1c4d 100644
--- a/node_modules/typeorm/metadata/IndexMetadata.d.ts
+++ b/node_modules/typeorm/metadata/IndexMetadata.d.ts
@@ -1,8 +1,8 @@
-import { EntityMetadata } from "./EntityMetadata";
-import { IndexMetadataArgs } from "../metadata-args/IndexMetadataArgs";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { IndexMetadataArgs } from "typeorm/metadata-args/IndexMetadataArgs";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { EmbeddedMetadata } from "typeorm/metadata/EmbeddedMetadata";
 /**
  * Index metadata contains all information about table's index.
  */
diff --git a/node_modules/typeorm/metadata/RelationCountMetadata.d.ts b/node_modules/typeorm/metadata/RelationCountMetadata.d.ts
index 3e7ea48..e369f3d 100644
--- a/node_modules/typeorm/metadata/RelationCountMetadata.d.ts
+++ b/node_modules/typeorm/metadata/RelationCountMetadata.d.ts
@@ -1,7 +1,7 @@
-import { RelationCountMetadataArgs } from "../metadata-args/RelationCountMetadataArgs";
-import { EntityMetadata } from "./EntityMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { RelationCountMetadataArgs } from "typeorm/metadata-args/RelationCountMetadataArgs";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Contains all information about entity's relation count.
  */
diff --git a/node_modules/typeorm/metadata/RelationIdMetadata.d.ts b/node_modules/typeorm/metadata/RelationIdMetadata.d.ts
index d698e89..2d12ac6 100644
--- a/node_modules/typeorm/metadata/RelationIdMetadata.d.ts
+++ b/node_modules/typeorm/metadata/RelationIdMetadata.d.ts
@@ -1,8 +1,8 @@
-import { RelationIdMetadataArgs } from "../metadata-args/RelationIdMetadataArgs";
-import { EntityMetadata } from "./EntityMetadata";
-import { RelationMetadata } from "./RelationMetadata";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { RelationIdMetadataArgs } from "typeorm/metadata-args/RelationIdMetadataArgs";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Contains all information about entity's relation count.
  */
diff --git a/node_modules/typeorm/metadata/RelationMetadata.d.ts b/node_modules/typeorm/metadata/RelationMetadata.d.ts
index efcdced..55ef97c 100644
--- a/node_modules/typeorm/metadata/RelationMetadata.d.ts
+++ b/node_modules/typeorm/metadata/RelationMetadata.d.ts
@@ -1,14 +1,14 @@
-import { RelationType } from "./types/RelationTypes";
-import { EntityMetadata } from "./EntityMetadata";
-import { ForeignKeyMetadata } from "./ForeignKeyMetadata";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { RelationMetadataArgs } from "../metadata-args/RelationMetadataArgs";
-import { DeferrableType } from "./types/DeferrableType";
-import { OnUpdateType } from "./types/OnUpdateType";
-import { OnDeleteType } from "./types/OnDeleteType";
-import { PropertyTypeFactory } from "./types/PropertyTypeInFunction";
+import { RelationType } from "typeorm/metadata/types/RelationTypes";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { ForeignKeyMetadata } from "typeorm/metadata/ForeignKeyMetadata";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { EmbeddedMetadata } from "typeorm/metadata/EmbeddedMetadata";
+import { RelationMetadataArgs } from "typeorm/metadata-args/RelationMetadataArgs";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
+import { OnUpdateType } from "typeorm/metadata/types/OnUpdateType";
+import { OnDeleteType } from "typeorm/metadata/types/OnDeleteType";
+import { PropertyTypeFactory } from "typeorm/metadata/types/PropertyTypeInFunction";
 /**
  * Contains all information about some entity's relation.
  */
diff --git a/node_modules/typeorm/metadata/UniqueMetadata.d.ts b/node_modules/typeorm/metadata/UniqueMetadata.d.ts
index 20dda6c..e96f669 100644
--- a/node_modules/typeorm/metadata/UniqueMetadata.d.ts
+++ b/node_modules/typeorm/metadata/UniqueMetadata.d.ts
@@ -1,9 +1,9 @@
-import { EmbeddedMetadata } from "./EmbeddedMetadata";
-import { EntityMetadata } from "./EntityMetadata";
-import { NamingStrategyInterface } from "../naming-strategy/NamingStrategyInterface";
-import { ColumnMetadata } from "./ColumnMetadata";
-import { UniqueMetadataArgs } from "../metadata-args/UniqueMetadataArgs";
-import { DeferrableType } from "./types/DeferrableType";
+import { EmbeddedMetadata } from "typeorm/metadata/EmbeddedMetadata";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { UniqueMetadataArgs } from "typeorm/metadata-args/UniqueMetadataArgs";
+import { DeferrableType } from "typeorm/metadata/types/DeferrableType";
 /**
  * Unique metadata contains all information about table's unique constraints.
  */
diff --git a/node_modules/typeorm/metadata/types/ClosureTreeOptions.d.ts b/node_modules/typeorm/metadata/types/ClosureTreeOptions.d.ts
index 1c9c9c5..2fd1750 100644
--- a/node_modules/typeorm/metadata/types/ClosureTreeOptions.d.ts
+++ b/node_modules/typeorm/metadata/types/ClosureTreeOptions.d.ts
@@ -2,7 +2,7 @@
  * Tree type.
  * Specifies what table pattern will be used for the tree entity.
  */
-import { ColumnMetadata } from "../ColumnMetadata";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
 export interface ClosureTreeOptions {
     closureTableName?: string;
     ancestorColumnName?: (column: ColumnMetadata) => string;
diff --git a/node_modules/typeorm/metadata/types/RelationTypeInFunction.d.ts b/node_modules/typeorm/metadata/types/RelationTypeInFunction.d.ts
index 3d65f3e..b653194 100644
--- a/node_modules/typeorm/metadata/types/RelationTypeInFunction.d.ts
+++ b/node_modules/typeorm/metadata/types/RelationTypeInFunction.d.ts
@@ -1,4 +1,4 @@
-import { EntityTarget } from "../../common/EntityTarget";
+import { EntityTarget } from "typeorm/common/EntityTarget";
 /**
  * Function that returns a type of the field. Returned value must be a class used on the relation.
  */
diff --git a/node_modules/typeorm/migration/Migration.d.ts b/node_modules/typeorm/migration/Migration.d.ts
index aadc352..653d20b 100644
--- a/node_modules/typeorm/migration/Migration.d.ts
+++ b/node_modules/typeorm/migration/Migration.d.ts
@@ -1,4 +1,4 @@
-import { MigrationInterface } from "./MigrationInterface";
+import { MigrationInterface } from "typeorm/migration/MigrationInterface";
 /**
  * Represents entity of the migration in the database.
  */
diff --git a/node_modules/typeorm/migration/MigrationExecutor.d.ts b/node_modules/typeorm/migration/MigrationExecutor.d.ts
index efcad3d..8b84db1 100644
--- a/node_modules/typeorm/migration/MigrationExecutor.d.ts
+++ b/node_modules/typeorm/migration/MigrationExecutor.d.ts
@@ -1,6 +1,6 @@
-import { DataSource } from "../data-source/DataSource";
-import { Migration } from "./Migration";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { Migration } from "typeorm/migration/Migration";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * Executes migrations: runs pending and reverts previously executed migrations.
  */
diff --git a/node_modules/typeorm/migration/MigrationInterface.d.ts b/node_modules/typeorm/migration/MigrationInterface.d.ts
index 6b9eba8..b43628d 100644
--- a/node_modules/typeorm/migration/MigrationInterface.d.ts
+++ b/node_modules/typeorm/migration/MigrationInterface.d.ts
@@ -1,4 +1,4 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * Migrations should implement this interface and all its methods.
  */
diff --git a/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.d.ts b/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.d.ts
index 20c9b57..9c428cd 100644
--- a/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.d.ts
+++ b/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.d.ts
@@ -1,5 +1,5 @@
-import { NamingStrategyInterface } from "./NamingStrategyInterface";
-import { Table } from "../schema-builder/table/Table";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { Table } from "typeorm/schema-builder/table/Table";
 /**
  * Naming strategy that is used by default.
  */
@@ -40,7 +40,6 @@ export declare class DefaultNamingStrategy implements NamingStrategyInterface {
      * Note that table name comes here already normalized by #tableName method.
      */
     prefixTableName(prefix: string, tableName: string): string;
-    eagerJoinRelationAlias(alias: string, propertyPath: string): string;
     nestedSetColumnNames: {
         left: string;
         right: string;
diff --git a/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js b/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js
index 9d1bf3f..b842e78 100644
--- a/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js
+++ b/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js
@@ -139,9 +139,6 @@ class DefaultNamingStrategy {
     prefixTableName(prefix, tableName) {
         return prefix + tableName;
     }
-    eagerJoinRelationAlias(alias, propertyPath) {
-        return alias + "_" + propertyPath.replace(".", "_");
-    }
 }
 exports.DefaultNamingStrategy = DefaultNamingStrategy;
 
diff --git a/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js.map b/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js.map
index fabd745..0fe6f99 100644
--- a/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js.map
+++ b/node_modules/typeorm/naming-strategy/DefaultNamingStrategy.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","file":"DefaultNamingStrategy.js","sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\"\nimport { Table } from \"../schema-builder/table/Table\"\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n    protected getTableName(tableOrName: Table | string): string {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name\n        }\n\n        return tableOrName.split(\".\").pop()!\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(\n        targetName: string,\n        userSpecifiedName: string | undefined,\n    ): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName)\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\"\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const name = customName || propertyName\n\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name)\n\n        return name\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName\n    }\n\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${columnName}`\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        _referencedTablePath?: string,\n        _referencedColumnNames?: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    indexName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26)\n        return isEnum ? `${name}_ENUM` : name\n    }\n\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName)\n    }\n\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string {\n        return snakeCase(\n            firstTableName +\n                \"_\" +\n                firstPropertyName.replace(/\\./gi, \"_\") +\n                \"_\" +\n                secondTableName,\n        )\n    }\n\n    joinTableColumnDuplicationPrefix(\n        columnName: string,\n        index: number,\n    ): string {\n        return columnName + \"_\" + index\n    }\n\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return camelCase(\n            tableName + \"_\" + (columnName ? columnName : propertyName),\n        )\n    }\n\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName)\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName\n    }\n\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\")\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" }\n    materializedPathColumnName = \"mpath\"\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","file":"DefaultNamingStrategy.js","sourcesContent":["import { NamingStrategyInterface } from \"./NamingStrategyInterface\"\nimport { RandomGenerator } from \"../util/RandomGenerator\"\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\"\nimport { Table } from \"../schema-builder/table/Table\"\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n    protected getTableName(tableOrName: Table | string): string {\n        if (typeof tableOrName !== \"string\") {\n            tableOrName = tableOrName.name\n        }\n\n        return tableOrName.split(\".\").pop()!\n    }\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(\n        targetName: string,\n        userSpecifiedName: string | undefined,\n    ): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName)\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\"\n    }\n\n    columnName(\n        propertyName: string,\n        customName: string,\n        embeddedPrefixes: string[],\n    ): string {\n        const name = customName || propertyName\n\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name)\n\n        return name\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName\n    }\n\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${columnName}`\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        _referencedTablePath?: string,\n        _referencedColumnNames?: string[],\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27)\n    }\n\n    indexName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames]\n        clonedColumnNames.sort()\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`\n        if (where) key += `_${where}`\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26)\n        return isEnum ? `${name}_ENUM` : name\n    }\n\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string {\n        const tableName = this.getTableName(tableOrName)\n        const replacedTableName = tableName.replace(\".\", \"_\")\n        const key = `${replacedTableName}_${expression}`\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26)\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName)\n    }\n\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string {\n        return snakeCase(\n            firstTableName +\n                \"_\" +\n                firstPropertyName.replace(/\\./gi, \"_\") +\n                \"_\" +\n                secondTableName,\n        )\n    }\n\n    joinTableColumnDuplicationPrefix(\n        columnName: string,\n        index: number,\n    ): string {\n        return columnName + \"_\" + index\n    }\n\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return camelCase(\n            tableName + \"_\" + (columnName ? columnName : propertyName),\n        )\n    }\n\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName)\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" }\n    materializedPathColumnName = \"mpath\"\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/naming-strategy/LegacyOracleNamingStrategy.d.ts b/node_modules/typeorm/naming-strategy/LegacyOracleNamingStrategy.d.ts
index a038fbf..cc9b09b 100644
--- a/node_modules/typeorm/naming-strategy/LegacyOracleNamingStrategy.d.ts
+++ b/node_modules/typeorm/naming-strategy/LegacyOracleNamingStrategy.d.ts
@@ -1,5 +1,5 @@
-import { NamingStrategyInterface } from "./NamingStrategyInterface";
-import { DefaultNamingStrategy } from "./DefaultNamingStrategy";
+import { NamingStrategyInterface } from "typeorm/naming-strategy/NamingStrategyInterface";
+import { DefaultNamingStrategy } from "typeorm/naming-strategy/DefaultNamingStrategy";
 /**
  * Shorten strategy
  */
diff --git a/node_modules/typeorm/naming-strategy/NamingStrategyInterface.d.ts b/node_modules/typeorm/naming-strategy/NamingStrategyInterface.d.ts
index bd40ab8..dfa958a 100644
--- a/node_modules/typeorm/naming-strategy/NamingStrategyInterface.d.ts
+++ b/node_modules/typeorm/naming-strategy/NamingStrategyInterface.d.ts
@@ -1,5 +1,5 @@
-import { Table } from "../schema-builder/table/Table";
-import { View } from "../schema-builder/view/View";
+import { Table } from "typeorm/schema-builder/table/Table";
+import { View } from "typeorm/schema-builder/view/View";
 /**
  * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be
  * generated.
@@ -99,10 +99,6 @@ export interface NamingStrategyInterface {
      * Note that table name comes here already normalized by #tableName method.
      */
     prefixTableName(prefix: string, tableName: string): string;
-    /**
-     * Gets the name of the alias used for relation joins.
-     */
-    eagerJoinRelationAlias(alias: string, propertyPath: string): string;
     /**
      * Column names for nested sets.
      */
diff --git a/node_modules/typeorm/naming-strategy/NamingStrategyInterface.js.map b/node_modules/typeorm/naming-strategy/NamingStrategyInterface.js.map
index 3ae82f5..0dcb97e 100644
--- a/node_modules/typeorm/naming-strategy/NamingStrategyInterface.js.map
+++ b/node_modules/typeorm/naming-strategy/NamingStrategyInterface.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/naming-strategy/NamingStrategyInterface.ts"],"names":[],"mappings":"","file":"NamingStrategyInterface.js","sourcesContent":["import { Table } from \"../schema-builder/table/Table\"\nimport { View } from \"../schema-builder/view/View\"\n\n/**\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\n * generated.\n */\nexport interface NamingStrategyInterface {\n    /**\n     * Naming strategy name.\n     */\n    name?: string\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string | undefined): string\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string\n\n    /**\n     * Gets the table's column name from the given property name.\n     */\n    columnName(\n        propertyName: string,\n        customName: string | undefined,\n        embeddedPrefixes: string[],\n    ): string\n\n    /**\n     * Gets the table's relation name from the given property name.\n     */\n    relationName(propertyName: string): string\n\n    /**\n     * Gets the table's primary key name from the given table name and column names.\n     */\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string\n\n    /**\n     * Gets the table's unique constraint name from the given table name and column names.\n     */\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string\n\n    /**\n     * Gets the relation constraint (UNIQUE or UNIQUE INDEX) name from the given table name, column names\n     * and WHERE condition, if UNIQUE INDEX used.\n     */\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the table's default constraint name from the given table name and column name.\n     */\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string\n\n    /**\n     * Gets the name of the foreign key.\n     */\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        referencedTablePath?: string,\n        referencedColumnNames?: string[],\n    ): string\n\n    /**\n     * Gets the name of the index - simple and compose index.\n     */\n    indexName(\n        tableOrName: Table | View | string,\n        columns: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the name of the check constraint.\n     *\n     * \"isEnum\" parameter is used to indicate if this check constraint used\n     * to handle \"simple-enum\" type for databases that are not supporting \"enum\"\n     * type out of the box. If \"true\", constraint is ignored during CHECK constraints\n     * synchronization.\n     */\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string\n\n    /**\n     * Gets the name of the exclusion constraint.\n     */\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string\n\n    /**\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\n     */\n    joinColumnName(relationName: string, referencedColumnName: string): string\n\n    /**\n     * Gets the name of the join table used in the many-to-many relations.\n     */\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string\n\n    /**\n     * Columns in join tables can have duplicate names in case of self-referencing.\n     * This method provide a resolution for such column names.\n     */\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables.\n     *\n     * The reverse?:boolean parameter denotes if the joinTableColumnName is called for the junctionColumn (false)\n     * or the inverseJunctionColumns (true)\n     */\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables from the invers side of the relationship.\n     */\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string\n\n    /**\n     * Gets the name of the alias used for relation joins.\n     */\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string\n\n    /**\n     * Column names for nested sets.\n     */\n    nestedSetColumnNames: { left: string; right: string }\n\n    /**\n     * Column name for materialized paths.\n     */\n    materializedPathColumnName: string\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/naming-strategy/NamingStrategyInterface.ts"],"names":[],"mappings":"","file":"NamingStrategyInterface.js","sourcesContent":["import { Table } from \"../schema-builder/table/Table\"\nimport { View } from \"../schema-builder/view/View\"\n\n/**\n * Naming strategy defines how auto-generated names for such things like table name, or table column gonna be\n * generated.\n */\nexport interface NamingStrategyInterface {\n    /**\n     * Naming strategy name.\n     */\n    name?: string\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string | undefined): string\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string\n\n    /**\n     * Gets the table's column name from the given property name.\n     */\n    columnName(\n        propertyName: string,\n        customName: string | undefined,\n        embeddedPrefixes: string[],\n    ): string\n\n    /**\n     * Gets the table's relation name from the given property name.\n     */\n    relationName(propertyName: string): string\n\n    /**\n     * Gets the table's primary key name from the given table name and column names.\n     */\n    primaryKeyName(tableOrName: Table | string, columnNames: string[]): string\n\n    /**\n     * Gets the table's unique constraint name from the given table name and column names.\n     */\n    uniqueConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n    ): string\n\n    /**\n     * Gets the relation constraint (UNIQUE or UNIQUE INDEX) name from the given table name, column names\n     * and WHERE condition, if UNIQUE INDEX used.\n     */\n    relationConstraintName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the table's default constraint name from the given table name and column name.\n     */\n    defaultConstraintName(\n        tableOrName: Table | string,\n        columnName: string,\n    ): string\n\n    /**\n     * Gets the name of the foreign key.\n     */\n    foreignKeyName(\n        tableOrName: Table | string,\n        columnNames: string[],\n        referencedTablePath?: string,\n        referencedColumnNames?: string[],\n    ): string\n\n    /**\n     * Gets the name of the index - simple and compose index.\n     */\n    indexName(\n        tableOrName: Table | View | string,\n        columns: string[],\n        where?: string,\n    ): string\n\n    /**\n     * Gets the name of the check constraint.\n     *\n     * \"isEnum\" parameter is used to indicate if this check constraint used\n     * to handle \"simple-enum\" type for databases that are not supporting \"enum\"\n     * type out of the box. If \"true\", constraint is ignored during CHECK constraints\n     * synchronization.\n     */\n    checkConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n        isEnum?: boolean,\n    ): string\n\n    /**\n     * Gets the name of the exclusion constraint.\n     */\n    exclusionConstraintName(\n        tableOrName: Table | string,\n        expression: string,\n    ): string\n\n    /**\n     * Gets the name of the join column used in the one-to-one and many-to-one relations.\n     */\n    joinColumnName(relationName: string, referencedColumnName: string): string\n\n    /**\n     * Gets the name of the join table used in the many-to-many relations.\n     */\n    joinTableName(\n        firstTableName: string,\n        secondTableName: string,\n        firstPropertyName: string,\n        secondPropertyName: string,\n    ): string\n\n    /**\n     * Columns in join tables can have duplicate names in case of self-referencing.\n     * This method provide a resolution for such column names.\n     */\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables.\n     *\n     * The reverse?:boolean parameter denotes if the joinTableColumnName is called for the junctionColumn (false)\n     * or the inverseJunctionColumns (true)\n     */\n    joinTableColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Gets the name of the column used for columns in the junction tables from the invers side of the relationship.\n     */\n    joinTableInverseColumnName(\n        tableName: string,\n        propertyName: string,\n        columnName?: string,\n    ): string\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string\n\n    /**\n     * Column names for nested sets.\n     */\n    nestedSetColumnNames: { left: string; right: string }\n\n    /**\n     * Column name for materialized paths.\n     */\n    materializedPathColumnName: string\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/persistence/Subject.d.ts b/node_modules/typeorm/persistence/Subject.d.ts
index 6c56c1c..13e1e59 100644
--- a/node_modules/typeorm/persistence/Subject.d.ts
+++ b/node_modules/typeorm/persistence/Subject.d.ts
@@ -1,8 +1,8 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { SubjectChangeMap } from "./SubjectChangeMap";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { SubjectChangeMap } from "typeorm/persistence/SubjectChangeMap";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
 /**
  * Subject is a subject of persistence.
  * It holds information about each entity that needs to be persisted:
diff --git a/node_modules/typeorm/persistence/Subject.js b/node_modules/typeorm/persistence/Subject.js
index 3b1b964..c046a9e 100644
--- a/node_modules/typeorm/persistence/Subject.js
+++ b/node_modules/typeorm/persistence/Subject.js
@@ -118,7 +118,8 @@ class Subject {
             (this.databaseEntityLoaded === false ||
                 (this.databaseEntityLoaded && this.databaseEntity)) &&
             // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&
-            this.changeMaps.length > 0);
+            // ensure there are one or more changes for updatable columns
+            this.changeMaps.some((change) => !change.column || change.column.isUpdate));
     }
     /**
      * Checks if this subject must be soft-removed into the database.
diff --git a/node_modules/typeorm/persistence/Subject.js.map b/node_modules/typeorm/persistence/Subject.js.map
index 62857e9..42e922b 100644
--- a/node_modules/typeorm/persistence/Subject.js.map
+++ b/node_modules/typeorm/persistence/Subject.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/persistence/Subject.ts"],"names":[],"mappings":"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","file":"Subject.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { SubjectChangeMap } from \"./SubjectChangeMap\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n    readonly \"@instanceof\" = Symbol.for(\"Subject\")\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    metadata: EntityMetadata\n\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    identifier: ObjectLiteral | undefined = undefined\n\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    entityWithFulfilledIds: ObjectLiteral | undefined = undefined\n\n    /**\n     * If subject was created by cascades this property will contain subject\n     * from where this subject was created.\n     */\n    parentSubject?: Subject\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * If entity is not set then this subject is created only for the entity loaded from the database,\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\n     */\n    entity?: ObjectLiteral\n\n    /**\n     * Database entity.\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\n     */\n    databaseEntity?: ObjectLiteral\n\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    databaseEntityLoaded: boolean = false\n\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    changeMaps: SubjectChangeMap[] = []\n\n    /**\n     * Generated values returned by a database (for example generated id or default values).\n     * Used in insert and update operations.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMap?: ObjectLiteral\n\n    /**\n     * Inserted values with updated values of special and default columns.\n     * Has entity-like structure (not just column database name and values).\n     */\n    insertedValueSet?: ObjectLiteral\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    canBeSoftRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    canBeRecovered: boolean = false\n\n    /**\n     * Relations updated by the change maps.\n     */\n    updatedRelationMaps: {\n        relation: RelationMetadata\n        value: ObjectLiteral\n    }[] = []\n\n    /**\n     * List of updated columns\n     */\n    diffColumns: ColumnMetadata[] = []\n\n    /**\n     * List of updated relations\n     */\n    diffRelations: RelationMetadata[] = []\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: {\n        metadata: EntityMetadata\n        parentSubject?: Subject\n        entity?: ObjectLiteral\n        canBeInserted?: boolean\n        canBeUpdated?: boolean\n        mustBeRemoved?: boolean\n        canBeSoftRemoved?: boolean\n        canBeRecovered?: boolean\n        identifier?: ObjectLiteral\n        changeMaps?: SubjectChangeMap[]\n    }) {\n        this.metadata = options.metadata\n        this.entity = options.entity\n        this.parentSubject = options.parentSubject\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps)\n\n        this.recompute()\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return (\n            this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            this.changeMaps.length > 0\n        )\n    }\n\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return (\n            this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return (\n            this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap(): ObjectLiteral {\n        const changeMapsWithoutValues: SubjectChangeMap[] = []\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value\n            if (InstanceChecker.isSubject(value)) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet\n                    ? value.insertedValueSet\n                    : value.entity\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n\n            let valueMap: ObjectLiteral | undefined\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(\n                    changeMap.column.referencedColumn!.getEntityValue(value),\n                )\n            } else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value)\n            } else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId =\n                        changeMap.relation!.getRelationIdMap(value)\n\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap)\n                        this.canBeUpdated = true\n                        return updateMap\n                    }\n                    valueMap = changeMap.relation!.createValueMap(relationId)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: relationId,\n                    })\n                } else {\n                    // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation!.createValueMap(value)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: value,\n                    })\n                }\n            }\n\n            OrmUtils.mergeDeep(updateMap, valueMap)\n            return updateMap\n        }, {} as ObjectLiteral)\n        this.changeMaps = changeMapsWithoutValues\n        return changeSet\n    }\n\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute(): void {\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity)\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\n                    if (\n                        primaryColumn.relationMetadata &&\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\n                            this.parentSubject!.metadata\n                    ) {\n                        const value =\n                            primaryColumn.referencedColumn!.getEntityValue(\n                                this.parentSubject!.entity!,\n                            )\n                        primaryColumn.setEntityValue(\n                            this.entityWithFulfilledIds!,\n                            value,\n                        )\n                    }\n                })\n            }\n            this.identifier = this.metadata.getEntityIdMap(\n                this.entityWithFulfilledIds,\n            )\n        } else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity)\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/persistence/Subject.ts"],"names":[],"mappings":"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","file":"Subject.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { SubjectChangeMap } from \"./SubjectChangeMap\"\nimport { OrmUtils } from \"../util/OrmUtils\"\nimport { RelationMetadata } from \"../metadata/RelationMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { ObjectUtils } from \"../util/ObjectUtils\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\n\n/**\n * Subject is a subject of persistence.\n * It holds information about each entity that needs to be persisted:\n * - what entity should be persisted\n * - what is database representation of the persisted entity\n * - what entity metadata of the persisted entity\n * - what is allowed to with persisted entity (insert/update/remove)\n *\n * Having this collection of subjects we can perform database queries.\n */\nexport class Subject {\n    readonly \"@instanceof\" = Symbol.for(\"Subject\")\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the subject entity.\n     */\n    metadata: EntityMetadata\n\n    /**\n     * Subject identifier.\n     * This identifier is not limited to table entity primary columns.\n     * This can be entity id or ids as well as some unique entity properties, like name or title.\n     * Insert / Update / Remove operation will be executed by a given identifier.\n     */\n    identifier: ObjectLiteral | undefined = undefined\n\n    /**\n     * Copy of entity but with relational ids fulfilled.\n     */\n    entityWithFulfilledIds: ObjectLiteral | undefined = undefined\n\n    /**\n     * If subject was created by cascades this property will contain subject\n     * from where this subject was created.\n     */\n    parentSubject?: Subject\n\n    /**\n     * Gets entity sent to the persistence (e.g. changed entity).\n     * If entity is not set then this subject is created only for the entity loaded from the database,\n     * or this subject is used for the junction operation (junction operations are relying only on identifier).\n     */\n    entity?: ObjectLiteral\n\n    /**\n     * Database entity.\n     * THIS IS NOT RAW ENTITY DATA, its a real entity.\n     */\n    databaseEntity?: ObjectLiteral\n\n    /**\n     * Indicates if database entity was loaded.\n     * No matter if it was found or not, it indicates the fact of loading.\n     */\n    databaseEntityLoaded: boolean = false\n\n    /**\n     * Changes needs to be applied in the database for the given subject.\n     */\n    changeMaps: SubjectChangeMap[] = []\n\n    /**\n     * Generated values returned by a database (for example generated id or default values).\n     * Used in insert and update operations.\n     * Has entity-like structure (not just column database name and values).\n     */\n    generatedMap?: ObjectLiteral\n\n    /**\n     * Inserted values with updated values of special and default columns.\n     * Has entity-like structure (not just column database name and values).\n     */\n    insertedValueSet?: ObjectLiteral\n\n    /**\n     * Indicates if this subject can be inserted into the database.\n     * This means that this subject either is newly persisted, either can be inserted by cascades.\n     */\n    canBeInserted: boolean = false\n\n    /**\n     * Indicates if this subject can be updated in the database.\n     * This means that this subject either was persisted, either can be updated by cascades.\n     */\n    canBeUpdated: boolean = false\n\n    /**\n     * Indicates if this subject MUST be removed from the database.\n     * This means that this subject either was removed, either was removed by cascades.\n     */\n    mustBeRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be soft-removed from the database.\n     * This means that this subject either was soft-removed, either was soft-removed by cascades.\n     */\n    canBeSoftRemoved: boolean = false\n\n    /**\n     * Indicates if this subject can be recovered from the database.\n     * This means that this subject either was recovered, either was recovered by cascades.\n     */\n    canBeRecovered: boolean = false\n\n    /**\n     * Relations updated by the change maps.\n     */\n    updatedRelationMaps: {\n        relation: RelationMetadata\n        value: ObjectLiteral\n    }[] = []\n\n    /**\n     * List of updated columns\n     */\n    diffColumns: ColumnMetadata[] = []\n\n    /**\n     * List of updated relations\n     */\n    diffRelations: RelationMetadata[] = []\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: {\n        metadata: EntityMetadata\n        parentSubject?: Subject\n        entity?: ObjectLiteral\n        canBeInserted?: boolean\n        canBeUpdated?: boolean\n        mustBeRemoved?: boolean\n        canBeSoftRemoved?: boolean\n        canBeRecovered?: boolean\n        identifier?: ObjectLiteral\n        changeMaps?: SubjectChangeMap[]\n    }) {\n        this.metadata = options.metadata\n        this.entity = options.entity\n        this.parentSubject = options.parentSubject\n        if (options.canBeInserted !== undefined)\n            this.canBeInserted = options.canBeInserted\n        if (options.canBeUpdated !== undefined)\n            this.canBeUpdated = options.canBeUpdated\n        if (options.mustBeRemoved !== undefined)\n            this.mustBeRemoved = options.mustBeRemoved\n        if (options.canBeSoftRemoved !== undefined)\n            this.canBeSoftRemoved = options.canBeSoftRemoved\n        if (options.canBeRecovered !== undefined)\n            this.canBeRecovered = options.canBeRecovered\n        if (options.identifier !== undefined)\n            this.identifier = options.identifier\n        if (options.changeMaps !== undefined)\n            this.changeMaps.push(...options.changeMaps)\n\n        this.recompute()\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if this subject must be inserted into the database.\n     * Subject can be inserted into the database if it is allowed to be inserted (explicitly persisted or by cascades)\n     * and if it does not have database entity set.\n     */\n    get mustBeInserted() {\n        return this.canBeInserted && !this.databaseEntity\n    }\n\n    /**\n     * Checks if this subject must be updated into the database.\n     * Subject can be updated in the database if it is allowed to be updated (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeUpdated() {\n        return (\n            this.canBeUpdated &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity)) &&\n            // ((this.entity && this.databaseEntity) || (!this.entity && !this.databaseEntity)) &&\n            // ensure there are one or more changes for updatable columns\n            this.changeMaps.some(\n                (change) => !change.column || change.column.isUpdate,\n            )\n        )\n    }\n\n    /**\n     * Checks if this subject must be soft-removed into the database.\n     * Subject can be updated in the database if it is allowed to be soft-removed (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeSoftRemoved() {\n        return (\n            this.canBeSoftRemoved &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    /**\n     * Checks if this subject must be recovered into the database.\n     * Subject can be updated in the database if it is allowed to be recovered (explicitly persisted or by cascades)\n     * and if it does have differentiated columns or relations.\n     */\n    get mustBeRecovered() {\n        return (\n            this.canBeRecovered &&\n            this.identifier &&\n            (this.databaseEntityLoaded === false ||\n                (this.databaseEntityLoaded && this.databaseEntity))\n        )\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a value set needs to be inserted / updated in the database.\n     * Value set is based on the entity and change maps of the subject.\n     * Important note: this method pops data from this subject's change maps.\n     */\n    createValueSetAndPopChangeMap(): ObjectLiteral {\n        const changeMapsWithoutValues: SubjectChangeMap[] = []\n        const changeSet = this.changeMaps.reduce((updateMap, changeMap) => {\n            let value = changeMap.value\n            if (InstanceChecker.isSubject(value)) {\n                // referenced columns can refer on values both which were just inserted and which were present in the model\n                // if entity was just inserted valueSets must contain all values from the entity and values just inserted in the database\n                // so, here we check if we have a value set then we simply use it as value to get our reference column values\n                // otherwise simply use an entity which cannot be just inserted at the moment and have all necessary data\n                value = value.insertedValueSet\n                    ? value.insertedValueSet\n                    : value.entity\n            }\n            // value = changeMap.valueFactory ? changeMap.valueFactory(value) : changeMap.column.createValueMap(value);\n\n            let valueMap: ObjectLiteral | undefined\n            if (this.metadata.isJunction && changeMap.column) {\n                valueMap = changeMap.column.createValueMap(\n                    changeMap.column.referencedColumn!.getEntityValue(value),\n                )\n            } else if (changeMap.column) {\n                valueMap = changeMap.column.createValueMap(value)\n            } else if (changeMap.relation) {\n                // value can be a related object, for example: post.question = { id: 1 }\n                // or value can be a null or direct relation id, e.g. post.question = 1\n                // if its a direction relation id then we just set it to the valueMap,\n                // however if its an object then we need to extract its relation id map and set it to the valueMap\n                if (ObjectUtils.isObject(value) && !Buffer.isBuffer(value)) {\n                    // get relation id, e.g. referenced column name and its value,\n                    // for example: { id: 1 } which then will be set to relation, e.g. post.category = { id: 1 }\n                    const relationId =\n                        changeMap.relation!.getRelationIdMap(value)\n\n                    // but relation id can be empty, for example in the case when you insert a new post with category\n                    // and both post and category are newly inserted objects (by cascades) and in this case category will not have id\n                    // this means we need to insert post without question id and update post's questionId once question be inserted\n                    // that's why we create a new changeMap operation for future updation of the post entity\n                    if (relationId === undefined) {\n                        changeMapsWithoutValues.push(changeMap)\n                        this.canBeUpdated = true\n                        return updateMap\n                    }\n                    valueMap = changeMap.relation!.createValueMap(relationId)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: relationId,\n                    })\n                } else {\n                    // value can be \"null\" or direct relation id here\n                    valueMap = changeMap.relation!.createValueMap(value)\n                    this.updatedRelationMaps.push({\n                        relation: changeMap.relation,\n                        value: value,\n                    })\n                }\n            }\n\n            OrmUtils.mergeDeep(updateMap, valueMap)\n            return updateMap\n        }, {} as ObjectLiteral)\n        this.changeMaps = changeMapsWithoutValues\n        return changeSet\n    }\n\n    /**\n     * Recomputes entityWithFulfilledIds and identifier when entity changes.\n     */\n    recompute(): void {\n        if (this.entity) {\n            this.entityWithFulfilledIds = Object.assign({}, this.entity)\n            if (this.parentSubject) {\n                this.metadata.primaryColumns.forEach((primaryColumn) => {\n                    if (\n                        primaryColumn.relationMetadata &&\n                        primaryColumn.relationMetadata.inverseEntityMetadata ===\n                            this.parentSubject!.metadata\n                    ) {\n                        const value =\n                            primaryColumn.referencedColumn!.getEntityValue(\n                                this.parentSubject!.entity!,\n                            )\n                        primaryColumn.setEntityValue(\n                            this.entityWithFulfilledIds!,\n                            value,\n                        )\n                    }\n                })\n            }\n            this.identifier = this.metadata.getEntityIdMap(\n                this.entityWithFulfilledIds,\n            )\n        } else if (this.databaseEntity) {\n            this.identifier = this.metadata.getEntityIdMap(this.databaseEntity)\n        }\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/persistence/SubjectChangeMap.d.ts b/node_modules/typeorm/persistence/SubjectChangeMap.d.ts
index 6f61cc0..44ee174 100644
--- a/node_modules/typeorm/persistence/SubjectChangeMap.d.ts
+++ b/node_modules/typeorm/persistence/SubjectChangeMap.d.ts
@@ -1,6 +1,6 @@
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { Subject } from "./Subject";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { Subject } from "typeorm/persistence/Subject";
 /**
  * Change for insertion or updation of the column of the subject.
  */
diff --git a/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js b/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js
index d938e14..844c9e1 100644
--- a/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js
+++ b/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js
@@ -83,8 +83,12 @@ class ManyToManySubjectBuilder {
         let databaseRelatedEntityIds = [];
         // if subject don't have database entity it means all related entities in persisted subject are new and must be bind
         // and we don't need to remove something that is not exist
-        if (subject.databaseEntity)
-            databaseRelatedEntityIds = relation.getEntityValue(subject.databaseEntity);
+        if (subject.databaseEntity) {
+            const databaseRelatedEntityValue = relation.getEntityValue(subject.databaseEntity);
+            if (databaseRelatedEntityValue) {
+                databaseRelatedEntityIds = databaseRelatedEntityValue.map((e) => relation.inverseEntityMetadata.getEntityIdMap(e));
+            }
+        }
         // extract entity's relation value
         // by example: categories inside our post (subject.entity is post)
         let relatedEntities = relation.getEntityValue(subject.entity);
diff --git a/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js.map b/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js.map
index ad38cf2..17d104f 100644
--- a/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js.map
+++ b/node_modules/typeorm/persistence/subject-builder/ManyToManySubjectBuilder.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/persistence/subject-builder/ManyToManySubjectBuilder.ts"],"names":[],"mappings":"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","file":"ManyToManySubjectBuilder.js","sourcesContent":["import { Subject } from \"../Subject\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\n\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {}\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build(): void {\n        this.subjects.forEach((subject) => {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity) return\n\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false) return\n\n                this.buildForSubjectRelation(subject, relation)\n            })\n        })\n    }\n\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject: Subject) {\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity) return\n\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach((relation) => {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false) return\n\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase: ObjectLiteral[] =\n                relation.getEntityValue(subject.databaseEntity!)\n\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach((relationId) => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata!,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(\n                        subject,\n                        relation,\n                        relationId,\n                    ),\n                })\n\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject)\n            })\n        })\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(\n        subject: Subject,\n        relation: RelationMetadata,\n    ) {\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds: ObjectLiteral[] = []\n\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity)\n            databaseRelatedEntityIds = relation.getEntityValue(\n                subject.databaseEntity,\n            )\n\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(\n            subject.entity!,\n        )\n        if (relatedEntities === null)\n            // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = []\n        if (!Array.isArray(relatedEntities)) return\n\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is category from categories saved with post\n\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n\n            // extract only relation id from the related entities, since we only need it for comparison\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject) return\n            }\n\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(\n                (databaseRelatedEntityRelationId) => {\n                    return OrmUtils.compareIds(\n                        databaseRelatedEntityRelationId,\n                        relatedEntityRelationIdMap,\n                    )\n                },\n            )\n\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase) return\n\n            const ownerValue = relation.isOwning\n                ? subject\n                : relatedEntitySubject || relatedEntity // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning\n                ? relatedEntitySubject || relatedEntity\n                : subject // by example: inverseEntityMap is category from categories array here\n\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                canBeInserted: true,\n            })\n            this.subjects.push(junctionSubject)\n\n            relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                })\n            })\n\n            relation.junctionEntityMetadata!.inverseColumns.forEach(\n                (column) => {\n                    junctionSubject.changeMaps.push({\n                        column: column,\n                        value: inverseValue,\n                        // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                    })\n                },\n            )\n        })\n\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds: ObjectLiteral[] = []\n        relatedEntities.forEach((relatedEntity) => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            if (\n                relatedEntityRelationIdMap !== undefined &&\n                relatedEntityRelationIdMap !== null\n            )\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap)\n        })\n\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter(\n            (existRelationId) => {\n                return !changedInverseEntityRelationIds.find(\n                    (changedRelationId) => {\n                        return OrmUtils.compareIds(\n                            changedRelationId,\n                            existRelationId,\n                        )\n                    },\n                )\n            },\n        )\n\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach((removedEntityRelationId) => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(\n                    subject,\n                    relation,\n                    removedEntityRelationId,\n                ),\n            })\n            this.subjects.push(junctionSubject)\n        })\n    }\n\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    protected buildJunctionIdentifier(\n        subject: Subject,\n        relation: RelationMetadata,\n        relationId: ObjectLiteral,\n    ) {\n        const ownerEntityMap = relation.isOwning ? subject.entity! : relationId\n        const inverseEntityMap = relation.isOwning\n            ? relationId\n            : subject.entity!\n\n        const identifier: ObjectLiteral = {}\n        relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(ownerEntityMap),\n                ),\n            )\n        })\n        relation.junctionEntityMetadata!.inverseColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(inverseEntityMap),\n                ),\n            )\n        })\n        return identifier\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
+{"version":3,"sources":["../../src/persistence/subject-builder/ManyToManySubjectBuilder.ts"],"names":[],"mappings":"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","file":"ManyToManySubjectBuilder.js","sourcesContent":["import { Subject } from \"../Subject\"\nimport { OrmUtils } from \"../../util/OrmUtils\"\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\"\nimport { RelationMetadata } from \"../../metadata/RelationMetadata\"\n\n/**\n * Builds operations needs to be executed for many-to-many relations of the given subjects.\n *\n * by example: post contains owner many-to-many relation with categories in the property called \"categories\", e.g.\n *             @ManyToMany(type => Category, category => category.posts) categories: Category[]\n *             If user adds categories into the post and saves post we need to bind them.\n *             This operation requires updation of junction table.\n */\nexport class ManyToManySubjectBuilder {\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(protected subjects: Subject[]) {}\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for any changes in the many-to-many relations of the subjects.\n     */\n    build(): void {\n        this.subjects.forEach((subject) => {\n            // if subject doesn't have entity then no need to find something that should be inserted or removed\n            if (!subject.entity) return\n\n            // go through all persistence enabled many-to-many relations and build subject operations for them\n            subject.metadata.manyToManyRelations.forEach((relation) => {\n                // skip relations for which persistence is disabled\n                if (relation.persistenceEnabled === false) return\n\n                this.buildForSubjectRelation(subject, relation)\n            })\n        })\n    }\n\n    /**\n     * Builds operations for removal of all many-to-many records of all many-to-many relations of the given subject.\n     */\n    buildForAllRemoval(subject: Subject) {\n        // if subject does not have a database entity then it means it does not exist in the database\n        // if it does not exist in the database then we don't have anything for deletion\n        if (!subject.databaseEntity) return\n\n        // go through all persistence enabled many-to-many relations and build subject operations for them\n        subject.metadata.manyToManyRelations.forEach((relation) => {\n            // skip relations for which persistence is disabled\n            if (relation.persistenceEnabled === false) return\n\n            // get all related entities (actually related entity relation ids) bind to this subject entity\n            // by example: returns category ids of the post we are currently working with (subject.entity is post)\n            const relatedEntityRelationIdsInDatabase: ObjectLiteral[] =\n                relation.getEntityValue(subject.databaseEntity!)\n\n            // go through all related entities and create a new junction subject for each row in junction table\n            relatedEntityRelationIdsInDatabase.forEach((relationId) => {\n                const junctionSubject = new Subject({\n                    metadata: relation.junctionEntityMetadata!,\n                    parentSubject: subject,\n                    mustBeRemoved: true,\n                    identifier: this.buildJunctionIdentifier(\n                        subject,\n                        relation,\n                        relationId,\n                    ),\n                })\n\n                // we use unshift because we need to perform those operations before post deletion is performed\n                // but post deletion was already added as an subject\n                // this is temporary solution, later we need to implement proper sorting of subjects before their removal\n                this.subjects.push(junctionSubject)\n            })\n        })\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds operations for a given subject and relation.\n     *\n     * by example: subject is \"post\" entity we are saving here and relation is \"categories\" inside it here.\n     */\n    protected buildForSubjectRelation(\n        subject: Subject,\n        relation: RelationMetadata,\n    ) {\n        // load from db all relation ids of inverse entities that are \"bind\" to the subject's entity\n        // this way we gonna check which relation ids are missing and which are new (e.g. inserted or removed)\n        let databaseRelatedEntityIds: ObjectLiteral[] = []\n\n        // if subject don't have database entity it means all related entities in persisted subject are new and must be bind\n        // and we don't need to remove something that is not exist\n        if (subject.databaseEntity) {\n            const databaseRelatedEntityValue = relation.getEntityValue(\n                subject.databaseEntity,\n            )\n            if (databaseRelatedEntityValue) {\n                databaseRelatedEntityIds = databaseRelatedEntityValue.map(\n                    (e: any) =>\n                        relation.inverseEntityMetadata.getEntityIdMap(e),\n                )\n            }\n        }\n\n        // extract entity's relation value\n        // by example: categories inside our post (subject.entity is post)\n        let relatedEntities: ObjectLiteral[] = relation.getEntityValue(\n            subject.entity!,\n        )\n        if (relatedEntities === null)\n            // if value set to null its equal if we set it to empty array - all items must be removed from the database\n            relatedEntities = []\n        if (!Array.isArray(relatedEntities)) return\n\n        // from all related entities find only those which aren't found in the db - for them we will create operation subjects\n        relatedEntities.forEach((relatedEntity) => {\n            // by example: relatedEntity is category from categories saved with post\n\n            // todo: check how it will work for entities which are saved by cascades, but aren't saved in the database yet\n\n            // extract only relation id from the related entities, since we only need it for comparison\n            // by example: extract from category only relation id (category id, or let's say category title, depend on join column options)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            // if related entity relation id map is empty it means related entity is newly persisted\n            if (!relatedEntityRelationIdMap) {\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if related entity does not have a subject then it means user tries to bind entity which wasn't saved\n                // in this persistence because he didn't pass this entity for save or he did not set cascades\n                // but without entity being inserted we cannot bind it in the relation operation, so we throw an exception here\n                // we decided to remove this error because it brings complications when saving object with non-saved entities\n                // if (!relatedEntitySubject)\n                //     throw new TypeORMError(`Many-to-many relation \"${relation.entityMetadata.name}.${relation.propertyPath}\" contains ` +\n                //         `entities which do not exist in the database yet, thus they cannot be bind in the database. ` +\n                //         `Please setup cascade insertion or save entities before binding it.`);\n                if (!relatedEntitySubject) return\n            }\n\n            // try to find related entity in the database\n            // by example: find post's category in the database post's categories\n            const relatedEntityExistInDatabase = databaseRelatedEntityIds.find(\n                (databaseRelatedEntityRelationId) => {\n                    return OrmUtils.compareIds(\n                        databaseRelatedEntityRelationId,\n                        relatedEntityRelationIdMap,\n                    )\n                },\n            )\n\n            // if entity is found then don't do anything - it means binding in junction table already exist, we don't need to add anything\n            if (relatedEntityExistInDatabase) return\n\n            const ownerValue = relation.isOwning\n                ? subject\n                : relatedEntitySubject || relatedEntity // by example: ownerEntityMap is post from subject here\n            const inverseValue = relation.isOwning\n                ? relatedEntitySubject || relatedEntity\n                : subject // by example: inverseEntityMap is category from categories array here\n\n            // create a new subject for insert operation of junction rows\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                canBeInserted: true,\n            })\n            this.subjects.push(junctionSubject)\n\n            relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n                junctionSubject.changeMaps.push({\n                    column: column,\n                    value: ownerValue,\n                    // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(ownerEntityMap),\n                })\n            })\n\n            relation.junctionEntityMetadata!.inverseColumns.forEach(\n                (column) => {\n                    junctionSubject.changeMaps.push({\n                        column: column,\n                        value: inverseValue,\n                        // valueFactory: (value) => column.referencedColumn!.getEntityValue(value) // column.referencedColumn!.getEntityValue(inverseEntityMap),\n                    })\n                },\n            )\n        })\n\n        // get all inverse entities relation ids that are \"bind\" to the currently persisted entity\n        const changedInverseEntityRelationIds: ObjectLiteral[] = []\n        relatedEntities.forEach((relatedEntity) => {\n            // relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n            let relatedEntityRelationIdMap =\n                relation.inverseEntityMetadata!.getEntityIdMap(relatedEntity)\n\n            // try to find a subject of this related entity, maybe it was loaded or was marked for persistence\n            const relatedEntitySubject = this.subjects.find((subject) => {\n                return subject.entity === relatedEntity\n            })\n\n            // if subject with entity was found take subject identifier as relation id map since it may contain extra properties resolved\n            if (relatedEntitySubject)\n                relatedEntityRelationIdMap = relatedEntitySubject.identifier\n\n            if (\n                relatedEntityRelationIdMap !== undefined &&\n                relatedEntityRelationIdMap !== null\n            )\n                changedInverseEntityRelationIds.push(relatedEntityRelationIdMap)\n        })\n\n        // now from all entities in the persisted entity find only those which aren't found in the db\n        const removedJunctionEntityIds = databaseRelatedEntityIds.filter(\n            (existRelationId) => {\n                return !changedInverseEntityRelationIds.find(\n                    (changedRelationId) => {\n                        return OrmUtils.compareIds(\n                            changedRelationId,\n                            existRelationId,\n                        )\n                    },\n                )\n            },\n        )\n\n        // finally create a new junction remove operations for missing related entities\n        removedJunctionEntityIds.forEach((removedEntityRelationId) => {\n            const junctionSubject = new Subject({\n                metadata: relation.junctionEntityMetadata!,\n                parentSubject: subject,\n                mustBeRemoved: true,\n                identifier: this.buildJunctionIdentifier(\n                    subject,\n                    relation,\n                    removedEntityRelationId,\n                ),\n            })\n            this.subjects.push(junctionSubject)\n        })\n    }\n\n    /**\n     * Creates identifiers for junction table.\n     * Example: { postId: 1, categoryId: 2 }\n     */\n    protected buildJunctionIdentifier(\n        subject: Subject,\n        relation: RelationMetadata,\n        relationId: ObjectLiteral,\n    ) {\n        const ownerEntityMap = relation.isOwning ? subject.entity! : relationId\n        const inverseEntityMap = relation.isOwning\n            ? relationId\n            : subject.entity!\n\n        const identifier: ObjectLiteral = {}\n        relation.junctionEntityMetadata!.ownerColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(ownerEntityMap),\n                ),\n            )\n        })\n        relation.junctionEntityMetadata!.inverseColumns.forEach((column) => {\n            OrmUtils.mergeDeep(\n                identifier,\n                column.createValueMap(\n                    column.referencedColumn!.getEntityValue(inverseEntityMap),\n                ),\n            )\n        })\n        return identifier\n    }\n}\n"],"sourceRoot":"../.."}
\ No newline at end of file
diff --git a/node_modules/typeorm/query-builder/Alias.d.ts b/node_modules/typeorm/query-builder/Alias.d.ts
index 3ecd14f..ff1b0fa 100644
--- a/node_modules/typeorm/query-builder/Alias.d.ts
+++ b/node_modules/typeorm/query-builder/Alias.d.ts
@@ -1,4 +1,4 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
 /**
  */
 export declare class Alias {
diff --git a/node_modules/typeorm/query-builder/Brackets.d.ts b/node_modules/typeorm/query-builder/Brackets.d.ts
index 5305071..498d06a 100644
--- a/node_modules/typeorm/query-builder/Brackets.d.ts
+++ b/node_modules/typeorm/query-builder/Brackets.d.ts
@@ -1,4 +1,4 @@
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
+import { WhereExpressionBuilder } from "typeorm/query-builder/WhereExpressionBuilder";
 /**
  * Syntax sugar.
  * Allows to use brackets in WHERE expressions for better syntax.
diff --git a/node_modules/typeorm/query-builder/DeleteQueryBuilder.d.ts b/node_modules/typeorm/query-builder/DeleteQueryBuilder.d.ts
index 917752b..2e40f05 100644
--- a/node_modules/typeorm/query-builder/DeleteQueryBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/DeleteQueryBuilder.d.ts
@@ -1,11 +1,11 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityTarget } from "../common/EntityTarget";
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { DeleteResult } from "./result/DeleteResult";
+import { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/query-builder/Brackets";
+import { DeleteResult } from "typeorm/query-builder/result/DeleteResult";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/query-builder/InsertOrUpdateOptions.d.ts b/node_modules/typeorm/query-builder/InsertOrUpdateOptions.d.ts
index 1a5b7c0..b263109 100644
--- a/node_modules/typeorm/query-builder/InsertOrUpdateOptions.d.ts
+++ b/node_modules/typeorm/query-builder/InsertOrUpdateOptions.d.ts
@@ -1,4 +1,4 @@
-import { UpsertType } from "../driver/types/UpsertType";
+import { UpsertType } from "typeorm/driver/types/UpsertType";
 export type InsertOrUpdateOptions = {
     /**
      * If true, postgres will skip the update if no values would be changed (reduces writes)
diff --git a/node_modules/typeorm/query-builder/InsertQueryBuilder.d.ts b/node_modules/typeorm/query-builder/InsertQueryBuilder.d.ts
index 10bb3a9..bb47b97 100644
--- a/node_modules/typeorm/query-builder/InsertQueryBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/InsertQueryBuilder.d.ts
@@ -1,10 +1,10 @@
-import { EntityTarget } from "../common/EntityTarget";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { InsertOrUpdateOptions } from "./InsertOrUpdateOptions";
-import { QueryBuilder } from "./QueryBuilder";
-import { QueryDeepPartialEntity } from "./QueryPartialEntity";
-import { InsertResult } from "./result/InsertResult";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { InsertOrUpdateOptions } from "typeorm/query-builder/InsertOrUpdateOptions";
+import { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+import { QueryDeepPartialEntity } from "typeorm/query-builder/QueryPartialEntity";
+import { InsertResult } from "typeorm/query-builder/result/InsertResult";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/query-builder/JoinAttribute.d.ts b/node_modules/typeorm/query-builder/JoinAttribute.d.ts
index 4145c4b..7a586e4 100644
--- a/node_modules/typeorm/query-builder/JoinAttribute.d.ts
+++ b/node_modules/typeorm/query-builder/JoinAttribute.d.ts
@@ -1,8 +1,8 @@
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { QueryExpressionMap } from "./QueryExpressionMap";
-import { Alias } from "./Alias";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { QueryExpressionMap } from "typeorm/query-builder/QueryExpressionMap";
+import { Alias } from "typeorm/query-builder/Alias";
 /**
  * Stores all join attributes which will be used to build a JOIN query.
  */
diff --git a/node_modules/typeorm/query-builder/NotBrackets.d.ts b/node_modules/typeorm/query-builder/NotBrackets.d.ts
index 44161a0..1b9aa11 100644
--- a/node_modules/typeorm/query-builder/NotBrackets.d.ts
+++ b/node_modules/typeorm/query-builder/NotBrackets.d.ts
@@ -1,4 +1,4 @@
-import { Brackets } from "./Brackets";
+import { Brackets } from "typeorm/query-builder/Brackets";
 /**
  * Syntax sugar.
  * Allows to use negate brackets in WHERE expressions for better syntax.
diff --git a/node_modules/typeorm/query-builder/QueryBuilder.d.ts b/node_modules/typeorm/query-builder/QueryBuilder.d.ts
index f01563a..c27e967 100644
--- a/node_modules/typeorm/query-builder/QueryBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/QueryBuilder.d.ts
@@ -1,23 +1,23 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { DataSource } from "../data-source/DataSource";
-import { QueryBuilderCteOptions } from "./QueryBuilderCte";
-import { QueryExpressionMap } from "./QueryExpressionMap";
-import { SelectQueryBuilder } from "./SelectQueryBuilder";
-import { UpdateQueryBuilder } from "./UpdateQueryBuilder";
-import { DeleteQueryBuilder } from "./DeleteQueryBuilder";
-import { SoftDeleteQueryBuilder } from "./SoftDeleteQueryBuilder";
-import { InsertQueryBuilder } from "./InsertQueryBuilder";
-import { RelationQueryBuilder } from "./RelationQueryBuilder";
-import { EntityTarget } from "../common/EntityTarget";
-import { Alias } from "./Alias";
-import { Brackets } from "./Brackets";
-import { QueryDeepPartialEntity } from "./QueryPartialEntity";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { WhereClause, WhereClauseCondition } from "./WhereClause";
-import { NotBrackets } from "./NotBrackets";
-import { ReturningType } from "../driver/Driver";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryBuilderCteOptions } from "typeorm/query-builder/QueryBuilderCte";
+import { QueryExpressionMap } from "typeorm/query-builder/QueryExpressionMap";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { UpdateQueryBuilder } from "typeorm/query-builder/UpdateQueryBuilder";
+import { DeleteQueryBuilder } from "typeorm/query-builder/DeleteQueryBuilder";
+import { SoftDeleteQueryBuilder } from "typeorm/query-builder/SoftDeleteQueryBuilder";
+import { InsertQueryBuilder } from "typeorm/query-builder/InsertQueryBuilder";
+import { RelationQueryBuilder } from "typeorm/query-builder/RelationQueryBuilder";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { Alias } from "typeorm/query-builder/Alias";
+import { Brackets } from "typeorm/query-builder/Brackets";
+import { QueryDeepPartialEntity } from "typeorm/query-builder/QueryPartialEntity";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { WhereClause, WhereClauseCondition } from "typeorm/query-builder/WhereClause";
+import { NotBrackets } from "typeorm/query-builder/NotBrackets";
+import { ReturningType } from "typeorm/driver/Driver";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
@@ -51,6 +51,8 @@ export declare abstract class QueryBuilder<Entity extends ObjectLiteral> {
      * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.
      */
     constructor(connection: DataSource, queryRunner?: QueryRunner);
+    private static queryBuilderRegistry;
+    static registerQueryBuilderClass(name: string, factory: any): void;
     /**
      * Gets generated SQL query without parameters being replaced.
      */
diff --git a/node_modules/typeorm/query-builder/QueryBuilder.js b/node_modules/typeorm/query-builder/QueryBuilder.js
index 0176a13..aecfe58 100644
--- a/node_modules/typeorm/query-builder/QueryBuilder.js
+++ b/node_modules/typeorm/query-builder/QueryBuilder.js
@@ -3,7 +3,6 @@ Object.defineProperty(exports, "__esModule", { value: true });
 exports.QueryBuilder = void 0;
 const QueryExpressionMap_1 = require("./QueryExpressionMap");
 const Brackets_1 = require("./Brackets");
-const FindOperator_1 = require("../find-options/FindOperator");
 const In_1 = require("../find-options/operator/In");
 const error_1 = require("../error");
 const EntityPropertyNotFoundError_1 = require("../error/EntityPropertyNotFoundError");
@@ -46,6 +45,9 @@ class QueryBuilder {
             this.expressionMap = connectionOrQueryBuilder.expressionMap.clone();
         }
     }
+    static registerQueryBuilderClass(name, factory) {
+        QueryBuilder.queryBuilderRegistry[name] = factory;
+    }
     // -------------------------------------------------------------------------
     // Accessors
     // -------------------------------------------------------------------------
@@ -73,11 +75,9 @@ class QueryBuilder {
                 { selection: selection, aliasName: selectionAliasName },
             ];
         }
-        // loading it dynamically because of circular issue
-        const SelectQueryBuilderCls = require("./SelectQueryBuilder").SelectQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isSelectQueryBuilder(this))
             return this;
-        return new SelectQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['SelectQueryBuilder'](this);
     }
     /**
      * Creates INSERT query.
@@ -85,10 +85,9 @@ class QueryBuilder {
     insert() {
         this.expressionMap.queryType = "insert";
         // loading it dynamically because of circular issue
-        const InsertQueryBuilderCls = require("./InsertQueryBuilder").InsertQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isInsertQueryBuilder(this))
             return this;
-        return new InsertQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['InsertQueryBuilder'](this);
     }
     /**
      * Creates UPDATE query and applies given update values.
@@ -108,10 +107,9 @@ class QueryBuilder {
         this.expressionMap.queryType = "update";
         this.expressionMap.valuesSet = updateSet;
         // loading it dynamically because of circular issue
-        const UpdateQueryBuilderCls = require("./UpdateQueryBuilder").UpdateQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isUpdateQueryBuilder(this))
             return this;
-        return new UpdateQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['UpdateQueryBuilder'](this);
     }
     /**
      * Creates DELETE query.
@@ -119,26 +117,23 @@ class QueryBuilder {
     delete() {
         this.expressionMap.queryType = "delete";
         // loading it dynamically because of circular issue
-        const DeleteQueryBuilderCls = require("./DeleteQueryBuilder").DeleteQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isDeleteQueryBuilder(this))
             return this;
-        return new DeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['DeleteQueryBuilder'](this);
     }
     softDelete() {
         this.expressionMap.queryType = "soft-delete";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this);
     }
     restore() {
         this.expressionMap.queryType = "restore";
         // loading it dynamically because of circular issue
-        const SoftDeleteQueryBuilderCls = require("./SoftDeleteQueryBuilder").SoftDeleteQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isSoftDeleteQueryBuilder(this))
             return this;
-        return new SoftDeleteQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this);
     }
     /**
      * Sets entity's relation with which this query builder gonna work.
@@ -155,10 +150,9 @@ class QueryBuilder {
             this.expressionMap.setMainAlias(mainAlias);
         }
         // loading it dynamically because of circular issue
-        const RelationQueryBuilderCls = require("./RelationQueryBuilder").RelationQueryBuilder;
         if (InstanceChecker_1.InstanceChecker.isRelationQueryBuilder(this))
             return this;
-        return new RelationQueryBuilderCls(this);
+        return QueryBuilder.queryBuilderRegistry['RelationQueryBuilder'](this);
     }
     /**
      * Checks if given relation or relations exist in the entity.
@@ -532,7 +526,7 @@ class QueryBuilder {
         // In some dialects query nesting is available - but not all.  Because of this, we'll need
         // to scrub "ending" characters from the SQL but otherwise we can leave everything else
         // as-is and it should be valid.
-        return `/* ${this.expressionMap.comment.replace("*/", "")} */ `;
+        return `/* ${this.expressionMap.comment.replace(/\*\//g, "")} */ `;
     }
     /**
      * Time travel queries for CockroachDB
@@ -758,7 +752,6 @@ class QueryBuilder {
             case "and":
                 return condition.parameters.join(" AND ");
         }
-        throw new TypeError(`Unsupported FindOperator ${FindOperator_1.FindOperator.constructor.name}`);
     }
     createCteExpression() {
         if (!this.hasCommonTableExpressions()) {
@@ -1125,5 +1118,6 @@ class QueryBuilder {
     }
 }
 exports.QueryBuilder = QueryBuilder;
+QueryBuilder.queryBuilderRegistry = {};
 
 //# sourceMappingURL=QueryBuilder.js.map
diff --git a/node_modules/typeorm/query-builder/QueryBuilder.js.map b/node_modules/typeorm/query-builder/QueryBuilder.js.map
index 6eaa712..8575e03 100644
--- a/node_modules/typeorm/query-builder/QueryBuilder.js.map
+++ b/node_modules/typeorm/query-builder/QueryBuilder.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/query-builder/QueryBuilder.ts"],"names":[],"mappings":"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","file":"QueryBuilder.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { QueryBuilderCteOptions } from \"./QueryBuilderCte\"\nimport { QueryExpressionMap } from \"./QueryExpressionMap\"\nimport { SelectQueryBuilder } from \"./SelectQueryBuilder\"\nimport { UpdateQueryBuilder } from \"./UpdateQueryBuilder\"\nimport { DeleteQueryBuilder } from \"./DeleteQueryBuilder\"\nimport { SoftDeleteQueryBuilder } from \"./SoftDeleteQueryBuilder\"\nimport { InsertQueryBuilder } from \"./InsertQueryBuilder\"\nimport { RelationQueryBuilder } from \"./RelationQueryBuilder\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { Alias } from \"./Alias\"\nimport { Brackets } from \"./Brackets\"\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { FindOperator } from \"../find-options/FindOperator\"\nimport { In } from \"../find-options/operator/In\"\nimport { TypeORMError } from \"../error\"\nimport { WhereClause, WhereClauseCondition } from \"./WhereClause\"\nimport { NotBrackets } from \"./NotBrackets\"\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\"\nimport { ReturningType } from \"../driver/Driver\"\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { escapeRegExp } from \"../util/escapeRegExp\"\n\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport abstract class QueryBuilder<Entity extends ObjectLiteral> {\n    readonly \"@instanceof\" = Symbol.for(\"QueryBuilder\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection on which QueryBuilder was created.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\n     */\n    readonly expressionMap: QueryExpressionMap\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Query runner used to execute query builder query.\n     */\n    protected queryRunner?: QueryRunner\n\n    /**\n     * If QueryBuilder was created in a subquery mode then its parent QueryBuilder (who created subquery) will be stored here.\n     */\n    protected parentQueryBuilder: QueryBuilder<any>\n\n    /**\n     * Memo to help keep place of current parameter index for `createParameter`\n     */\n    private parameterIndex = 0\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(queryBuilder: QueryBuilder<any>)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connection: DataSource, queryRunner?: QueryRunner)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\n        queryRunner?: QueryRunner,\n    ) {\n        if (InstanceChecker.isDataSource(connectionOrQueryBuilder)) {\n            this.connection = connectionOrQueryBuilder\n            this.queryRunner = queryRunner\n            this.expressionMap = new QueryExpressionMap(this.connection)\n        } else {\n            this.connection = connectionOrQueryBuilder.connection\n            this.queryRunner = connectionOrQueryBuilder.queryRunner\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone()\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    abstract getQuery(): string\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(`Main alias is not set`) // todo: better exception\n\n        return this.expressionMap.mainAlias.name\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection: string,\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection?: string | string[],\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\"\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map((selection) => ({\n                selection: selection,\n            }))\n        } else if (selection) {\n            this.expressionMap.selects = [\n                { selection: selection, aliasName: selectionAliasName },\n            ]\n        }\n\n        // loading it dynamically because of circular issue\n        const SelectQueryBuilderCls =\n            require(\"./SelectQueryBuilder\").SelectQueryBuilder\n        if (InstanceChecker.isSelectQueryBuilder(this)) return this as any\n\n        return new SelectQueryBuilderCls(this)\n    }\n\n    /**\n     * Creates INSERT query.\n     */\n    insert(): InsertQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"insert\"\n\n        // loading it dynamically because of circular issue\n        const InsertQueryBuilderCls =\n            require(\"./InsertQueryBuilder\").InsertQueryBuilder\n        if (InstanceChecker.isInsertQueryBuilder(this)) return this as any\n\n        return new InsertQueryBuilderCls(this)\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        updateSet: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<Entity extends ObjectLiteral>(\n        entity: EntityTarget<Entity>,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(\n        tableName: string,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        entityOrTableNameUpdateSet?: EntityTarget<any> | ObjectLiteral,\n        maybeUpdateSet?: ObjectLiteral,\n    ): UpdateQueryBuilder<any> {\n        const updateSet = maybeUpdateSet\n            ? maybeUpdateSet\n            : (entityOrTableNameUpdateSet as ObjectLiteral | undefined)\n        entityOrTableNameUpdateSet = InstanceChecker.isEntitySchema(\n            entityOrTableNameUpdateSet,\n        )\n            ? entityOrTableNameUpdateSet.options.name\n            : entityOrTableNameUpdateSet\n\n        if (\n            typeof entityOrTableNameUpdateSet === \"function\" ||\n            typeof entityOrTableNameUpdateSet === \"string\"\n        ) {\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        this.expressionMap.queryType = \"update\"\n        this.expressionMap.valuesSet = updateSet\n\n        // loading it dynamically because of circular issue\n        const UpdateQueryBuilderCls =\n            require(\"./UpdateQueryBuilder\").UpdateQueryBuilder\n        if (InstanceChecker.isUpdateQueryBuilder(this)) return this as any\n\n        return new UpdateQueryBuilderCls(this)\n    }\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): DeleteQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"delete\"\n\n        // loading it dynamically because of circular issue\n        const DeleteQueryBuilderCls =\n            require(\"./DeleteQueryBuilder\").DeleteQueryBuilder\n        if (InstanceChecker.isDeleteQueryBuilder(this)) return this as any\n\n        return new DeleteQueryBuilderCls(this)\n    }\n\n    softDelete(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"soft-delete\"\n\n        // loading it dynamically because of circular issue\n        const SoftDeleteQueryBuilderCls =\n            require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder\n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return new SoftDeleteQueryBuilderCls(this)\n    }\n\n    restore(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"restore\"\n\n        // loading it dynamically because of circular issue\n        const SoftDeleteQueryBuilderCls =\n            require(\"./SoftDeleteQueryBuilder\").SoftDeleteQueryBuilder\n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return new SoftDeleteQueryBuilderCls(this)\n    }\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(propertyPath: string): RelationQueryBuilder<Entity>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation<T extends ObjectLiteral>(\n        entityTarget: EntityTarget<T>,\n        propertyPath: string,\n    ): RelationQueryBuilder<T>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(\n        entityTargetOrPropertyPath: Function | string,\n        maybePropertyPath?: string,\n    ): RelationQueryBuilder<Entity> {\n        const entityTarget =\n            arguments.length === 2 ? entityTargetOrPropertyPath : undefined\n        const propertyPath =\n            arguments.length === 2\n                ? (maybePropertyPath as string)\n                : (entityTargetOrPropertyPath as string)\n\n        this.expressionMap.queryType = \"relation\"\n        this.expressionMap.relationPropertyPath = propertyPath\n\n        if (entityTarget) {\n            const mainAlias = this.createFromAlias(entityTarget)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        // loading it dynamically because of circular issue\n        const RelationQueryBuilderCls =\n            require(\"./RelationQueryBuilder\").RelationQueryBuilder\n        if (InstanceChecker.isRelationQueryBuilder(this)) return this as any\n\n        return new RelationQueryBuilderCls(this)\n    }\n\n    /**\n     * Checks if given relation exists in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string): boolean\n\n    /**\n     * Checks if given relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string[]): boolean\n\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(\n        target: EntityTarget<T>,\n        relation: string | string[],\n    ): boolean {\n        const entityMetadata = this.connection.getMetadata(target)\n        const relations = Array.isArray(relation) ? relation : [relation]\n        return relations.every((relation) => {\n            return !!entityMetadata.findRelationWithPropertyPath(relation)\n        })\n    }\n\n    /**\n     * Check the existence of a parameter for this query builder.\n     */\n    hasParameter(key: string): boolean {\n        return (\n            this.parentQueryBuilder?.hasParameter(key) ||\n            key in this.expressionMap.parameters\n        )\n    }\n\n    /**\n     * Sets parameter name and its value.\n     *\n     * The key for this parameter may contain numbers, letters, underscores, or periods.\n     */\n    setParameter(key: string, value: any): this {\n        if (typeof value === \"function\") {\n            throw new TypeORMError(\n                `Function parameter isn't supported in the parameters. Please check \"${key}\" parameter.`,\n            )\n        }\n\n        if (!key.match(/^([A-Za-z0-9_.]+)$/)) {\n            throw new TypeORMError(\n                \"QueryBuilder parameter keys may only contain numbers, letters, underscores, or periods.\",\n            )\n        }\n\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setParameter(key, value)\n        }\n\n        this.expressionMap.parameters[key] = value\n        return this\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n        for (const [key, value] of Object.entries(parameters)) {\n            this.setParameter(key, value)\n        }\n\n        return this\n    }\n\n    protected createParameter(value: any): string {\n        let parameterName\n\n        do {\n            parameterName = `orm_param_${this.parameterIndex++}`\n        } while (this.hasParameter(parameterName))\n\n        this.setParameter(parameterName, value)\n\n        return `:${parameterName}`\n    }\n\n    /**\n     * Adds native parameters from the given object.\n     *\n     * @deprecated Use `setParameters` instead\n     */\n    setNativeParameters(parameters: ObjectLiteral): this {\n        // set parent query builder parameters as well in sub-query mode\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setNativeParameters(parameters)\n        }\n\n        Object.keys(parameters).forEach((key) => {\n            this.expressionMap.nativeParameters[key] = parameters[key]\n        })\n        return this\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign(\n            {},\n            this.expressionMap.parameters,\n        )\n\n        // add discriminator column parameter if it exist\n        if (\n            this.expressionMap.mainAlias &&\n            this.expressionMap.mainAlias.hasMetadata\n        ) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter(\n                        (childMetadata) => childMetadata.discriminatorColumn,\n                    )\n                    .map((childMetadata) => childMetadata.discriminatorValue)\n                values.push(metadata.discriminatorValue)\n                parameters[\"discriminatorColumnValues\"] = values\n            }\n        }\n\n        return parameters\n    }\n\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql(): this {\n        // TODO rename to logSql()\n        const [query, parameters] = this.getQueryAndParameters()\n        this.connection.logger.logQuery(query, parameters)\n        return this\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        return this.getQueryAndParameters()[0]\n    }\n\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    getQueryAndParameters(): [string, any[]] {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        const query = this.getQuery()\n        const parameters = this.getParameters()\n        return this.connection.driver.escapeQueryWithParameters(\n            query,\n            parameters,\n            this.expressionMap.nativeParameters,\n        )\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const [sql, parameters] = this.getQueryAndParameters()\n        const queryRunner = this.obtainQueryRunner()\n        try {\n            return await queryRunner.query(sql, parameters) // await is needed here because we are using finally\n        } finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release()\n            }\n        }\n    }\n\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    createQueryBuilder(): this {\n        return new (this.constructor as any)(this.connection, this.queryRunner)\n    }\n\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone(): this {\n        return new (this.constructor as any)(this)\n    }\n\n    /**\n     * Includes a Query comment in the query builder.  This is helpful for debugging purposes,\n     * such as finding a specific query in the database server's logs, or for categorization using\n     * an APM product.\n     */\n    comment(comment: string): this {\n        this.expressionMap.comment = comment\n        return this\n    }\n\n    /**\n     * Disables escaping.\n     */\n    disableEscaping(): this {\n        this.expressionMap.disableEscaping = false\n        return this\n    }\n\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name: string): string {\n        if (!this.expressionMap.disableEscaping) return name\n        return this.connection.driver.escape(name)\n    }\n\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    setQueryRunner(queryRunner: QueryRunner): this {\n        this.queryRunner = queryRunner\n        return this\n    }\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    callListeners(enabled: boolean): this {\n        this.expressionMap.callListeners = enabled\n        return this\n    }\n\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    useTransaction(enabled: boolean): this {\n        this.expressionMap.useTransaction = enabled\n        return this\n    }\n\n    /**\n     * Adds CTE to query\n     */\n    addCommonTableExpression(\n        queryBuilder: QueryBuilder<any> | string,\n        alias: string,\n        options?: QueryBuilderCteOptions,\n    ): this {\n        this.expressionMap.commonTableExpressions.push({\n            queryBuilder,\n            alias,\n            options: options || {},\n        })\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\") return i\n                return this.escape(i)\n            })\n            .join(\".\")\n    }\n\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    protected getMainTableName(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(\n                `Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`,\n            )\n\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath\n\n        return this.expressionMap.mainAlias.tablePath!\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    protected createFromAlias(\n        entityTarget:\n            | EntityTarget<any>\n            | ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>),\n        aliasName?: string,\n    ): Alias {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            const metadata = this.connection.getMetadata(entityTarget)\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath,\n            })\n        } else {\n            if (typeof entityTarget === \"string\") {\n                const isSubquery =\n                    entityTarget.substr(0, 1) === \"(\" &&\n                    entityTarget.substr(-1) === \")\"\n\n                return this.expressionMap.createAlias({\n                    type: \"from\",\n                    name: aliasName,\n                    tablePath: !isSubquery\n                        ? (entityTarget as string)\n                        : undefined,\n                    subQuery: isSubquery ? entityTarget : undefined,\n                })\n            }\n\n            const subQueryBuilder: SelectQueryBuilder<any> = (\n                entityTarget as any\n            )((this as any as SelectQueryBuilder<any>).subQuery())\n            this.setParameters(subQueryBuilder.getParameters())\n            const subquery = subQueryBuilder.getQuery()\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                subQuery: subquery,\n            })\n        }\n    }\n\n    /**\n     * @deprecated this way of replace property names is too slow.\n     *  Instead, we'll replace property names at the end - once query is build.\n     */\n    protected replacePropertyNames(statement: string) {\n        return statement\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given SQL string.\n     */\n    protected replacePropertyNamesForTheWholeQuery(statement: string) {\n        const replacements: { [key: string]: { [key: string]: string } } = {}\n\n        for (const alias of this.expressionMap.aliases) {\n            if (!alias.hasMetadata) continue\n            const replaceAliasNamePrefix =\n                this.expressionMap.aliasNamePrefixingEnabled && alias.name\n                    ? `${alias.name}.`\n                    : \"\"\n\n            if (!replacements[replaceAliasNamePrefix]) {\n                replacements[replaceAliasNamePrefix] = {}\n            }\n\n            // Insert & overwrite the replacements from least to most relevant in our replacements object.\n            // To do this we iterate and overwrite in the order of relevance.\n            // Least to Most Relevant:\n            // * Relation Property Path to first join column key\n            // * Relation Property Path + Column Path\n            // * Column Database Name\n            // * Column Property Name\n            // * Column Property Path\n\n            for (const relation of alias.metadata.relations) {\n                if (relation.joinColumns.length > 0)\n                    replacements[replaceAliasNamePrefix][\n                        relation.propertyPath\n                    ] = relation.joinColumns[0].databaseName\n            }\n\n            for (const relation of alias.metadata.relations) {\n                const allColumns = [\n                    ...relation.joinColumns,\n                    ...relation.inverseJoinColumns,\n                ]\n                for (const joinColumn of allColumns) {\n                    const propertyKey = `${relation.propertyPath}.${\n                        joinColumn.referencedColumn!.propertyPath\n                    }`\n                    replacements[replaceAliasNamePrefix][propertyKey] =\n                        joinColumn.databaseName\n                }\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.databaseName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyPath] =\n                    column.databaseName\n            }\n        }\n\n        const replacementKeys = Object.keys(replacements)\n        const replaceAliasNamePrefixes = replacementKeys\n            .map((key) => escapeRegExp(key))\n            .join(\"|\")\n\n        if (replacementKeys.length > 0) {\n            statement = statement.replace(\n                new RegExp(\n                    // Avoid a lookbehind here since it's not well supported\n                    `([ =\\(]|^.{0})` + // any of ' =(' or start of line\n                        // followed by our prefix, e.g. 'tablename.' or ''\n                        `${\n                            replaceAliasNamePrefixes\n                                ? \"(\" + replaceAliasNamePrefixes + \")\"\n                                : \"\"\n                        }([^ =\\(\\)\\,]+)` + // a possible property name: sequence of anything but ' =(),'\n                        // terminated by ' =),' or end of line\n                        `(?=[ =\\)\\,]|.{0}$)`,\n                    \"gm\",\n                ),\n                (...matches) => {\n                    let match: string, pre: string, p: string\n                    if (replaceAliasNamePrefixes) {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[3]\n\n                        if (replacements[matches[2]][p]) {\n                            return `${pre}${this.escape(\n                                matches[2].substring(0, matches[2].length - 1),\n                            )}.${this.escape(replacements[matches[2]][p])}`\n                        }\n                    } else {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[2]\n\n                        if (replacements[\"\"][p]) {\n                            return `${pre}${this.escape(replacements[\"\"][p])}`\n                        }\n                    }\n                    return match\n                },\n            )\n        }\n\n        return statement\n    }\n\n    protected createComment(): string {\n        if (!this.expressionMap.comment) {\n            return \"\"\n        }\n\n        // ANSI SQL 2003 support C style comments - comments that start with `/*` and end with `*/`\n        // In some dialects query nesting is available - but not all.  Because of this, we'll need\n        // to scrub \"ending\" characters from the SQL but otherwise we can leave everything else\n        // as-is and it should be valid.\n\n        return `/* ${this.expressionMap.comment.replace(\"*/\", \"\")} */ `\n    }\n\n    /**\n     * Time travel queries for CockroachDB\n     */\n    protected createTimeTravelQuery(): string {\n        if (\n            this.expressionMap.queryType === \"select\" &&\n            this.expressionMap.timeTravel\n        ) {\n            return ` AS OF SYSTEM TIME ${this.expressionMap.timeTravel}`\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    protected createWhereExpression() {\n        const conditionsArray = []\n\n        const whereExpression = this.createWhereClausesExpression(\n            this.expressionMap.wheres,\n        )\n\n        if (whereExpression.length > 0 && whereExpression !== \"1=1\") {\n            conditionsArray.push(this.replacePropertyNames(whereExpression))\n        }\n\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            // Adds the global condition of \"non-deleted\" for the entity with delete date columns in select query.\n            if (\n                this.expressionMap.queryType === \"select\" &&\n                !this.expressionMap.withDeleted &&\n                metadata.deleteDateColumn\n            ) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.deleteDateColumn.propertyName\n                    : metadata.deleteDateColumn.propertyName\n\n                const condition = `${this.replacePropertyNames(column)} IS NULL`\n                conditionsArray.push(condition)\n            }\n\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName\n\n                const condition = `${this.replacePropertyNames(\n                    column,\n                )} IN (:...discriminatorColumnValues)`\n                conditionsArray.push(condition)\n            }\n        }\n\n        if (this.expressionMap.extraAppendedAndWhereCondition) {\n            const condition = this.replacePropertyNames(\n                this.expressionMap.extraAppendedAndWhereCondition,\n            )\n            conditionsArray.push(condition)\n        }\n\n        let condition = \"\"\n\n        // time travel\n        condition += this.createTimeTravelQuery()\n\n        if (!conditionsArray.length) {\n            condition += \"\"\n        } else if (conditionsArray.length === 1) {\n            condition += ` WHERE ${conditionsArray[0]}`\n        } else {\n            condition += ` WHERE ( ${conditionsArray.join(\" ) AND ( \")} )`\n        }\n\n        return condition\n    }\n\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    protected createReturningExpression(returningType: ReturningType): string {\n        const columns = this.getReturningColumns()\n        const driver = this.connection.driver\n\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (\n            typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported(returningType)\n        ) {\n            columns.push(\n                ...this.expressionMap.extraReturningColumns.filter((column) => {\n                    return columns.indexOf(column) === -1\n                }),\n            )\n        }\n\n        if (columns.length) {\n            let columnsExpression = columns\n                .map((column) => {\n                    const name = this.escape(column.databaseName)\n                    if (driver.options.type === \"mssql\") {\n                        if (\n                            this.expressionMap.queryType === \"insert\" ||\n                            this.expressionMap.queryType === \"update\" ||\n                            this.expressionMap.queryType === \"soft-delete\" ||\n                            this.expressionMap.queryType === \"restore\"\n                        ) {\n                            return \"INSERTED.\" + name\n                        } else {\n                            return (\n                                this.escape(this.getMainTableName()) +\n                                \".\" +\n                                name\n                            )\n                        }\n                    } else {\n                        return name\n                    }\n                })\n                .join(\", \")\n\n            if (driver.options.type === \"oracle\") {\n                columnsExpression +=\n                    \" INTO \" +\n                    columns\n                        .map((column) => {\n                            return this.createParameter({\n                                type: (\n                                    driver as OracleDriver\n                                ).columnTypeToNativeParameter(column.type),\n                                dir: (driver as OracleDriver).oracle.BIND_OUT,\n                            })\n                        })\n                        .join(\", \")\n            }\n\n            if (driver.options.type === \"mssql\") {\n                if (\n                    this.expressionMap.queryType === \"insert\" ||\n                    this.expressionMap.queryType === \"update\"\n                ) {\n                    columnsExpression += \" INTO @OutputTable\"\n                }\n            }\n\n            return columnsExpression\n        } else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning\n        }\n\n        return \"\"\n    }\n\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    protected getReturningColumns(): ColumnMetadata[] {\n        const columns: ColumnMetadata[] = []\n        if (Array.isArray(this.expressionMap.returning)) {\n            ;(this.expressionMap.returning as string[]).forEach(\n                (columnName) => {\n                    if (this.expressionMap.mainAlias!.hasMetadata) {\n                        columns.push(\n                            ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(\n                                columnName,\n                            ),\n                        )\n                    }\n                },\n            )\n        }\n        return columns\n    }\n\n    protected createWhereClausesExpression(clauses: WhereClause[]): string {\n        return clauses\n            .map((clause, index) => {\n                const expression = this.createWhereConditionExpression(\n                    clause.condition,\n                )\n\n                switch (clause.type) {\n                    case \"and\":\n                        return (index > 0 ? \"AND \" : \"\") + expression\n                    case \"or\":\n                        return (index > 0 ? \"OR \" : \"\") + expression\n                }\n\n                return expression\n            })\n            .join(\" \")\n            .trim()\n    }\n\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    protected createWhereConditionExpression(\n        condition: WhereClauseCondition,\n        alwaysWrap: boolean = false,\n    ): string {\n        if (typeof condition === \"string\") return condition\n\n        if (Array.isArray(condition)) {\n            if (condition.length === 0) {\n                return \"1=1\"\n            }\n\n            // In the future we should probably remove this entire condition\n            // but for now to prevent any breaking changes it exists.\n            if (condition.length === 1 && !alwaysWrap) {\n                return this.createWhereClausesExpression(condition)\n            }\n\n            return \"(\" + this.createWhereClausesExpression(condition) + \")\"\n        }\n\n        const { driver } = this.connection\n\n        switch (condition.operator) {\n            case \"lessThan\":\n                return `${condition.parameters[0]} < ${condition.parameters[1]}`\n            case \"lessThanOrEqual\":\n                return `${condition.parameters[0]} <= ${condition.parameters[1]}`\n            case \"arrayContains\":\n                return `${condition.parameters[0]} @> ${condition.parameters[1]}`\n            case \"jsonContains\":\n                return `${condition.parameters[0]} ::jsonb @> ${condition.parameters[1]}`\n            case \"arrayContainedBy\":\n                return `${condition.parameters[0]} <@ ${condition.parameters[1]}`\n            case \"arrayOverlap\":\n                return `${condition.parameters[0]} && ${condition.parameters[1]}`\n            case \"moreThan\":\n                return `${condition.parameters[0]} > ${condition.parameters[1]}`\n            case \"moreThanOrEqual\":\n                return `${condition.parameters[0]} >= ${condition.parameters[1]}`\n            case \"notEqual\":\n                return `${condition.parameters[0]} != ${condition.parameters[1]}`\n            case \"equal\":\n                return `${condition.parameters[0]} = ${condition.parameters[1]}`\n            case \"ilike\":\n                if (\n                    driver.options.type === \"postgres\" ||\n                    driver.options.type === \"cockroachdb\"\n                ) {\n                    return `${condition.parameters[0]} ILIKE ${condition.parameters[1]}`\n                }\n\n                return `UPPER(${condition.parameters[0]}) LIKE UPPER(${condition.parameters[1]})`\n            case \"like\":\n                return `${condition.parameters[0]} LIKE ${condition.parameters[1]}`\n            case \"between\":\n                return `${condition.parameters[0]} BETWEEN ${condition.parameters[1]} AND ${condition.parameters[2]}`\n            case \"in\":\n                if (condition.parameters.length <= 1) {\n                    return \"0=1\"\n                }\n                return `${condition.parameters[0]} IN (${condition.parameters\n                    .slice(1)\n                    .join(\", \")})`\n            case \"any\":\n                if (driver.options.type === \"cockroachdb\") {\n                    return `${condition.parameters[0]}::STRING = ANY(${condition.parameters[1]}::STRING[])`\n                }\n\n                return `${condition.parameters[0]} = ANY(${condition.parameters[1]})`\n            case \"isNull\":\n                return `${condition.parameters[0]} IS NULL`\n\n            case \"not\":\n                return `NOT(${this.createWhereConditionExpression(\n                    condition.condition,\n                )})`\n            case \"brackets\":\n                return `${this.createWhereConditionExpression(\n                    condition.condition,\n                    true,\n                )}`\n            case \"and\":\n                return condition.parameters.join(\" AND \")\n        }\n\n        throw new TypeError(\n            `Unsupported FindOperator ${FindOperator.constructor.name}`,\n        )\n    }\n\n    protected createCteExpression(): string {\n        if (!this.hasCommonTableExpressions()) {\n            return \"\"\n        }\n        const databaseRequireRecusiveHint =\n            this.connection.driver.cteCapabilities.requiresRecursiveHint\n\n        const cteStrings = this.expressionMap.commonTableExpressions.map(\n            (cte) => {\n                const cteBodyExpression =\n                    typeof cte.queryBuilder === \"string\"\n                        ? cte.queryBuilder\n                        : cte.queryBuilder.getQuery()\n                if (typeof cte.queryBuilder !== \"string\") {\n                    if (cte.queryBuilder.hasCommonTableExpressions()) {\n                        throw new TypeORMError(\n                            `Nested CTEs aren't supported (CTE: ${cte.alias})`,\n                        )\n                    }\n                    if (\n                        !this.connection.driver.cteCapabilities.writable &&\n                        !InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        throw new TypeORMError(\n                            `Only select queries are supported in CTEs in ${this.connection.options.type} (CTE: ${cte.alias})`,\n                        )\n                    }\n                    this.setParameters(cte.queryBuilder.getParameters())\n                }\n                let cteHeader = this.escape(cte.alias)\n                if (cte.options.columnNames) {\n                    const escapedColumnNames = cte.options.columnNames.map(\n                        (column) => this.escape(column),\n                    )\n                    if (\n                        InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        if (\n                            cte.queryBuilder.expressionMap.selects.length &&\n                            cte.options.columnNames.length !==\n                                cte.queryBuilder.expressionMap.selects.length\n                        ) {\n                            throw new TypeORMError(\n                                `cte.options.columnNames length (${cte.options.columnNames.length}) doesn't match subquery select list length ${cte.queryBuilder.expressionMap.selects.length} (CTE: ${cte.alias})`,\n                            )\n                        }\n                    }\n                    cteHeader += `(${escapedColumnNames.join(\", \")})`\n                }\n                const recursiveClause =\n                    cte.options.recursive && databaseRequireRecusiveHint\n                        ? \"RECURSIVE\"\n                        : \"\"\n                let materializeClause = \"\"\n                if (\n                    this.connection.driver.cteCapabilities.materializedHint &&\n                    cte.options.materialized !== undefined\n                ) {\n                    materializeClause = cte.options.materialized\n                        ? \"MATERIALIZED\"\n                        : \"NOT MATERIALIZED\"\n                }\n\n                return [\n                    recursiveClause,\n                    cteHeader,\n                    \"AS\",\n                    materializeClause,\n                    `(${cteBodyExpression})`,\n                ]\n                    .filter(Boolean)\n                    .join(\" \")\n            },\n        )\n\n        return \"WITH \" + cteStrings.join(\", \") + \" \"\n    }\n\n    /**\n     * Creates \"WHERE\" condition for an in-ids condition.\n     */\n    protected getWhereInIdsCondition(\n        ids: any | any[],\n    ): ObjectLiteral | Brackets {\n        const metadata = this.expressionMap.mainAlias!.metadata\n        const normalized = (Array.isArray(ids) ? ids : [ids]).map((id) =>\n            metadata.ensureEntityIdMap(id),\n        )\n\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys) {\n            const primaryColumn = metadata.primaryColumns[0]\n\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            // This also fails for embedded & relation, so until that is fixed skip it.\n            if (\n                !primaryColumn.transformer &&\n                !primaryColumn.relationMetadata &&\n                !primaryColumn.embeddedMetadata\n            ) {\n                return {\n                    [primaryColumn.propertyName]: In(\n                        normalized.map((id) =>\n                            primaryColumn.getEntityValue(id, false),\n                        ),\n                    ),\n                }\n            }\n        }\n\n        return new Brackets((qb) => {\n            for (const data of normalized) {\n                qb.orWhere(new Brackets((qb) => qb.where(data)))\n            }\n        })\n    }\n\n    protected getExistsCondition(subQuery: any): [string, any[]] {\n        const query = subQuery\n            .clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(\"1\")\n            .setOption(\"disable-global-order\")\n\n        return [`EXISTS (${query.getQuery()})`, query.getParameters()]\n    }\n\n    private findColumnsForPropertyPath(\n        propertyPath: string,\n    ): [Alias, string[], ColumnMetadata[]] {\n        // Make a helper to iterate the entity & relations?\n        // Use that to set the correct alias?  Or the other way around?\n\n        // Start with the main alias with our property paths\n        let alias = this.expressionMap.mainAlias\n        const root: string[] = []\n        const propertyPathParts = propertyPath.split(\".\")\n\n        while (propertyPathParts.length > 1) {\n            const part = propertyPathParts[0]\n\n            if (!alias?.hasMetadata) {\n                // If there's no metadata, we're wasting our time\n                // and can't actually look any of this up.\n                break\n            }\n\n            if (alias.metadata.hasEmbeddedWithPropertyPath(part)) {\n                // If this is an embedded then we should combine the two as part of our lookup.\n                // Instead of just breaking, we keep going with this in case there's an embedded/relation\n                // inside an embedded.\n                propertyPathParts.unshift(\n                    `${propertyPathParts.shift()}.${propertyPathParts.shift()}`,\n                )\n                continue\n            }\n\n            if (alias.metadata.hasRelationWithPropertyPath(part)) {\n                // If this is a relation then we should find the aliases\n                // that match the relation & then continue further down\n                // the property path\n                const joinAttr = this.expressionMap.joinAttributes.find(\n                    (joinAttr) => joinAttr.relationPropertyPath === part,\n                )\n\n                if (!joinAttr?.alias) {\n                    const fullRelationPath =\n                        root.length > 0 ? `${root.join(\".\")}.${part}` : part\n                    throw new Error(\n                        `Cannot find alias for relation at ${fullRelationPath}`,\n                    )\n                }\n\n                alias = joinAttr.alias\n                root.push(...part.split(\".\"))\n                propertyPathParts.shift()\n                continue\n            }\n\n            break\n        }\n\n        if (!alias) {\n            throw new Error(`Cannot find alias for property ${propertyPath}`)\n        }\n\n        // Remaining parts are combined back and used to find the actual property path\n        const aliasPropertyPath = propertyPathParts.join(\".\")\n\n        const columns =\n            alias.metadata.findColumnsWithPropertyPath(aliasPropertyPath)\n\n        if (!columns.length) {\n            throw new EntityPropertyNotFoundError(propertyPath, alias.metadata)\n        }\n\n        return [alias, root, columns]\n    }\n\n    /**\n     * Creates a property paths for a given ObjectLiteral.\n     */\n    protected createPropertyPath(\n        metadata: EntityMetadata,\n        entity: ObjectLiteral,\n        prefix: string = \"\",\n    ) {\n        const paths: string[] = []\n\n        for (const key of Object.keys(entity)) {\n            const path = prefix ? `${prefix}.${key}` : key\n\n            // There's times where we don't actually want to traverse deeper.\n            // If the value is a `FindOperator`, or null, or not an object, then we don't, for example.\n            if (\n                entity[key] === null ||\n                typeof entity[key] !== \"object\" ||\n                InstanceChecker.isFindOperator(entity[key])\n            ) {\n                paths.push(path)\n                continue\n            }\n\n            if (metadata.hasEmbeddedWithPropertyPath(path)) {\n                const subPaths = this.createPropertyPath(\n                    metadata,\n                    entity[key],\n                    path,\n                )\n                paths.push(...subPaths)\n                continue\n            }\n\n            if (metadata.hasRelationWithPropertyPath(path)) {\n                const relation = metadata.findRelationWithPropertyPath(path)!\n\n                // There's also cases where we don't want to return back all of the properties.\n                // These handles the situation where someone passes the model & we don't need to make\n                // a HUGE `where` to uniquely look up the entity.\n\n                // In the case of a *-to-one, there's only ever one possible entity on the other side\n                // so if the join columns are all defined we can return just the relation itself\n                // because it will fetch only the join columns and do the lookup.\n                if (\n                    relation.relationType === \"one-to-one\" ||\n                    relation.relationType === \"many-to-one\"\n                ) {\n                    const joinColumns = relation.joinColumns\n                        .map((j) => j.referencedColumn)\n                        .filter((j): j is ColumnMetadata => !!j)\n\n                    const hasAllJoinColumns =\n                        joinColumns.length > 0 &&\n                        joinColumns.every((column) =>\n                            column.getEntityValue(entity[key], false),\n                        )\n\n                    if (hasAllJoinColumns) {\n                        paths.push(path)\n                        continue\n                    }\n                }\n\n                if (\n                    relation.relationType === \"one-to-many\" ||\n                    relation.relationType === \"many-to-many\"\n                ) {\n                    throw new Error(\n                        `Cannot query across ${relation.relationType} for property ${path}`,\n                    )\n                }\n\n                // For any other case, if the `entity[key]` contains all of the primary keys we can do a\n                // lookup via these.  We don't need to look up via any other values 'cause these are\n                // the unique primary keys.\n                // This handles the situation where someone passes the model & we don't need to make\n                // a HUGE where.\n                const primaryColumns =\n                    relation.inverseEntityMetadata.primaryColumns\n                const hasAllPrimaryKeys =\n                    primaryColumns.length > 0 &&\n                    primaryColumns.every((column) =>\n                        column.getEntityValue(entity[key], false),\n                    )\n\n                if (hasAllPrimaryKeys) {\n                    const subPaths = primaryColumns.map(\n                        (column) => `${path}.${column.propertyPath}`,\n                    )\n                    paths.push(...subPaths)\n                    continue\n                }\n\n                // If nothing else, just return every property that's being passed to us.\n                const subPaths = this.createPropertyPath(\n                    relation.inverseEntityMetadata,\n                    entity[key],\n                ).map((p) => `${path}.${p}`)\n                paths.push(...subPaths)\n                continue\n            }\n\n            paths.push(path)\n        }\n\n        return paths\n    }\n\n    protected *getPredicates(where: ObjectLiteral) {\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const propertyPaths = this.createPropertyPath(\n                this.expressionMap.mainAlias!.metadata,\n                where,\n            )\n\n            for (const propertyPath of propertyPaths) {\n                const [alias, aliasPropertyPath, columns] =\n                    this.findColumnsForPropertyPath(propertyPath)\n\n                for (const column of columns) {\n                    let containedWhere = where\n\n                    for (const part of aliasPropertyPath) {\n                        if (!containedWhere || !(part in containedWhere)) {\n                            containedWhere = {}\n                            break\n                        }\n\n                        containedWhere = containedWhere[part]\n                    }\n\n                    // Use the correct alias & the property path from the column\n                    const aliasPath = this.expressionMap\n                        .aliasNamePrefixingEnabled\n                        ? `${alias.name}.${column.propertyPath}`\n                        : column.propertyPath\n\n                    const parameterValue = column.getEntityValue(\n                        containedWhere,\n                        true,\n                    )\n\n                    yield [aliasPath, parameterValue]\n                }\n            }\n        } else {\n            for (const key of Object.keys(where)) {\n                const parameterValue = where[key]\n                const aliasPath = this.expressionMap.aliasNamePrefixingEnabled\n                    ? `${this.alias}.${key}`\n                    : key\n\n                yield [aliasPath, parameterValue]\n            }\n        }\n    }\n\n    protected getWherePredicateCondition(\n        aliasPath: string,\n        parameterValue: any,\n    ): WhereClauseCondition {\n        if (InstanceChecker.isFindOperator(parameterValue)) {\n            let parameters: any[] = []\n            if (parameterValue.useParameter) {\n                if (parameterValue.objectLiteralParameters) {\n                    this.setParameters(parameterValue.objectLiteralParameters)\n                } else if (parameterValue.multipleParameters) {\n                    for (const v of parameterValue.value) {\n                        parameters.push(this.createParameter(v))\n                    }\n                } else {\n                    parameters.push(this.createParameter(parameterValue.value))\n                }\n            }\n\n            if (parameterValue.type === \"raw\") {\n                if (parameterValue.getSql) {\n                    return parameterValue.getSql(aliasPath)\n                } else {\n                    return {\n                        operator: \"equal\",\n                        parameters: [aliasPath, parameterValue.value],\n                    }\n                }\n            } else if (parameterValue.type === \"not\") {\n                if (parameterValue.child) {\n                    return {\n                        operator: parameterValue.type,\n                        condition: this.getWherePredicateCondition(\n                            aliasPath,\n                            parameterValue.child,\n                        ),\n                    }\n                } else {\n                    return {\n                        operator: \"notEqual\",\n                        parameters: [aliasPath, ...parameters],\n                    }\n                }\n            } else if (parameterValue.type === \"and\") {\n                const values: FindOperator<any>[] = parameterValue.value\n\n                return {\n                    operator: parameterValue.type,\n                    parameters: values.map((operator) =>\n                        this.createWhereConditionExpression(\n                            this.getWherePredicateCondition(\n                                aliasPath,\n                                operator,\n                            ),\n                        ),\n                    ),\n                }\n            } else {\n                return {\n                    operator: parameterValue.type,\n                    parameters: [aliasPath, ...parameters],\n                }\n            }\n            // } else if (parameterValue === null) {\n            //     return {\n            //         operator: \"isNull\",\n            //         parameters: [\n            //             aliasPath,\n            //         ]\n            //     };\n        } else {\n            return {\n                operator: \"equal\",\n                parameters: [aliasPath, this.createParameter(parameterValue)],\n            }\n        }\n    }\n\n    protected getWhereCondition(\n        where:\n            | string\n            | ((qb: this) => string)\n            | Brackets\n            | NotBrackets\n            | ObjectLiteral\n            | ObjectLiteral[],\n    ): WhereClauseCondition {\n        if (typeof where === \"string\") {\n            return where\n        }\n\n        if (InstanceChecker.isBrackets(where)) {\n            const whereQueryBuilder = this.createQueryBuilder()\n\n            whereQueryBuilder.parentQueryBuilder = this\n\n            whereQueryBuilder.expressionMap.mainAlias =\n                this.expressionMap.mainAlias\n            whereQueryBuilder.expressionMap.aliasNamePrefixingEnabled =\n                this.expressionMap.aliasNamePrefixingEnabled\n            whereQueryBuilder.expressionMap.parameters =\n                this.expressionMap.parameters\n            whereQueryBuilder.expressionMap.nativeParameters =\n                this.expressionMap.nativeParameters\n\n            whereQueryBuilder.expressionMap.wheres = []\n\n            where.whereFactory(whereQueryBuilder as any)\n\n            return {\n                operator: InstanceChecker.isNotBrackets(where)\n                    ? \"not\"\n                    : \"brackets\",\n                condition: whereQueryBuilder.expressionMap.wheres,\n            }\n        }\n\n        if (typeof where === \"function\") {\n            return where(this)\n        }\n\n        const wheres: ObjectLiteral[] = Array.isArray(where) ? where : [where]\n        const clauses: WhereClause[] = []\n\n        for (const where of wheres) {\n            const conditions: WhereClauseCondition = []\n\n            // Filter the conditions and set up the parameter values\n            for (const [aliasPath, parameterValue] of this.getPredicates(\n                where,\n            )) {\n                conditions.push({\n                    type: \"and\",\n                    condition: this.getWherePredicateCondition(\n                        aliasPath,\n                        parameterValue,\n                    ),\n                })\n            }\n\n            clauses.push({ type: \"or\", condition: conditions })\n        }\n\n        if (clauses.length === 1) {\n            return clauses[0].condition\n        }\n\n        return clauses\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner()\n    }\n\n    protected hasCommonTableExpressions(): boolean {\n        return this.expressionMap.commonTableExpressions.length > 0\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/query-builder/QueryBuilder.ts"],"names":[],"mappings":"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","file":"QueryBuilder.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { DataSource } from \"../data-source/DataSource\"\nimport { QueryBuilderCteOptions } from \"./QueryBuilderCte\"\nimport { QueryExpressionMap } from \"./QueryExpressionMap\"\nimport { SelectQueryBuilder } from \"./SelectQueryBuilder\"\nimport { UpdateQueryBuilder } from \"./UpdateQueryBuilder\"\nimport { DeleteQueryBuilder } from \"./DeleteQueryBuilder\"\nimport { SoftDeleteQueryBuilder } from \"./SoftDeleteQueryBuilder\"\nimport { InsertQueryBuilder } from \"./InsertQueryBuilder\"\nimport { RelationQueryBuilder } from \"./RelationQueryBuilder\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { Alias } from \"./Alias\"\nimport { Brackets } from \"./Brackets\"\nimport { QueryDeepPartialEntity } from \"./QueryPartialEntity\"\nimport { EntityMetadata } from \"../metadata/EntityMetadata\"\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\"\nimport { FindOperator } from \"../find-options/FindOperator\"\nimport { In } from \"../find-options/operator/In\"\nimport { TypeORMError } from \"../error\"\nimport { WhereClause, WhereClauseCondition } from \"./WhereClause\"\nimport { NotBrackets } from \"./NotBrackets\"\nimport { EntityPropertyNotFoundError } from \"../error/EntityPropertyNotFoundError\"\nimport { ReturningType } from \"../driver/Driver\"\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\"\nimport { InstanceChecker } from \"../util/InstanceChecker\"\nimport { escapeRegExp } from \"../util/escapeRegExp\"\n\n// todo: completely cover query builder with tests\n// todo: entityOrProperty can be target name. implement proper behaviour if it is.\n// todo: check in persistment if id exist on object and throw exception (can be in partial selection?)\n// todo: fix problem with long aliases eg getMaxIdentifierLength\n// todo: fix replacing in .select(\"COUNT(post.id) AS cnt\") statement\n// todo: implement joinAlways in relations and relationId\n// todo: finish partial selection\n// todo: sugar methods like: .addCount and .selectCount, selectCountAndMap, selectSum, selectSumAndMap, ...\n// todo: implement @Select decorator\n// todo: add select and map functions\n\n// todo: implement relation/entity loading and setting them into properties within a separate query\n// .loadAndMap(\"post.categories\", \"post.categories\", qb => ...)\n// .loadAndMap(\"post.categories\", Category, qb => ...)\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport abstract class QueryBuilder<Entity extends ObjectLiteral> {\n    readonly \"@instanceof\" = Symbol.for(\"QueryBuilder\")\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection on which QueryBuilder was created.\n     */\n    readonly connection: DataSource\n\n    /**\n     * Contains all properties of the QueryBuilder that needs to be build a final query.\n     */\n    readonly expressionMap: QueryExpressionMap\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Query runner used to execute query builder query.\n     */\n    protected queryRunner?: QueryRunner\n\n    /**\n     * If QueryBuilder was created in a subquery mode then its parent QueryBuilder (who created subquery) will be stored here.\n     */\n    protected parentQueryBuilder: QueryBuilder<any>\n\n    /**\n     * Memo to help keep place of current parameter index for `createParameter`\n     */\n    private parameterIndex = 0\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(queryBuilder: QueryBuilder<any>)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(connection: DataSource, queryRunner?: QueryRunner)\n\n    /**\n     * QueryBuilder can be initialized from given Connection and QueryRunner objects or from given other QueryBuilder.\n     */\n    constructor(\n        connectionOrQueryBuilder: DataSource | QueryBuilder<any>,\n        queryRunner?: QueryRunner,\n    ) {\n        if (InstanceChecker.isDataSource(connectionOrQueryBuilder)) {\n            this.connection = connectionOrQueryBuilder\n            this.queryRunner = queryRunner\n            this.expressionMap = new QueryExpressionMap(this.connection)\n        } else {\n            this.connection = connectionOrQueryBuilder.connection\n            this.queryRunner = connectionOrQueryBuilder.queryRunner\n            this.expressionMap = connectionOrQueryBuilder.expressionMap.clone()\n        }\n    }\n\n    private static queryBuilderRegistry: Record<string, any> = {}\n\n    static registerQueryBuilderClass(name: string, factory: any) {\n        QueryBuilder.queryBuilderRegistry[name] = factory\n    }\n    \n    // -------------------------------------------------------------------------\n    // Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated SQL query without parameters being replaced.\n     */\n    abstract getQuery(): string\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the main alias string used in this query builder.\n     */\n    get alias(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(`Main alias is not set`) // todo: better exception\n\n        return this.expressionMap.mainAlias.name\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates SELECT query.\n     * Replaces all previous selections if they exist.\n     */\n    select(): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection: string,\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(selection: string[]): SelectQueryBuilder<Entity>\n\n    /**\n     * Creates SELECT query and selects given data.\n     * Replaces all previous selections if they exist.\n     */\n    select(\n        selection?: string | string[],\n        selectionAliasName?: string,\n    ): SelectQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"select\"\n        if (Array.isArray(selection)) {\n            this.expressionMap.selects = selection.map((selection) => ({\n                selection: selection,\n            }))\n        } else if (selection) {\n            this.expressionMap.selects = [\n                { selection: selection, aliasName: selectionAliasName },\n            ]\n        }\n\n     \n        if (InstanceChecker.isSelectQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['SelectQueryBuilder'](this)\n    }\n\n    /**\n     * Creates INSERT query.\n     */\n    insert(): InsertQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"insert\"\n\n        // loading it dynamically because of circular issue\n   \n        if (InstanceChecker.isInsertQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['InsertQueryBuilder'](this)\n    }\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        updateSet: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given entity and applies given update values.\n     */\n    update<Entity extends ObjectLiteral>(\n        entity: EntityTarget<Entity>,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query for the given table name and applies given update values.\n     */\n    update(\n        tableName: string,\n        updateSet?: QueryDeepPartialEntity<Entity>,\n    ): UpdateQueryBuilder<Entity>\n\n    /**\n     * Creates UPDATE query and applies given update values.\n     */\n    update(\n        entityOrTableNameUpdateSet?: EntityTarget<any> | ObjectLiteral,\n        maybeUpdateSet?: ObjectLiteral,\n    ): UpdateQueryBuilder<any> {\n        const updateSet = maybeUpdateSet\n            ? maybeUpdateSet\n            : (entityOrTableNameUpdateSet as ObjectLiteral | undefined)\n        entityOrTableNameUpdateSet = InstanceChecker.isEntitySchema(\n            entityOrTableNameUpdateSet,\n        )\n            ? entityOrTableNameUpdateSet.options.name\n            : entityOrTableNameUpdateSet\n\n        if (\n            typeof entityOrTableNameUpdateSet === \"function\" ||\n            typeof entityOrTableNameUpdateSet === \"string\"\n        ) {\n            const mainAlias = this.createFromAlias(entityOrTableNameUpdateSet)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        this.expressionMap.queryType = \"update\"\n        this.expressionMap.valuesSet = updateSet\n\n        // loading it dynamically because of circular issue\n        \n        if (InstanceChecker.isUpdateQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['UpdateQueryBuilder'](this)\n    }\n\n    /**\n     * Creates DELETE query.\n     */\n    delete(): DeleteQueryBuilder<Entity> {\n        this.expressionMap.queryType = \"delete\"\n\n        // loading it dynamically because of circular issue\n  \n        if (InstanceChecker.isDeleteQueryBuilder(this)) return this as any\n\n         return QueryBuilder.queryBuilderRegistry['DeleteQueryBuilder'](this)\n    }\n\n    softDelete(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"soft-delete\"\n\n        // loading it dynamically because of circular issue\n    \n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this)\n    }\n\n    restore(): SoftDeleteQueryBuilder<any> {\n        this.expressionMap.queryType = \"restore\"\n\n        // loading it dynamically because of circular issue\n       \n        if (InstanceChecker.isSoftDeleteQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['SoftDeleteQueryBuilder'](this)\n    }\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(propertyPath: string): RelationQueryBuilder<Entity>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation<T extends ObjectLiteral>(\n        entityTarget: EntityTarget<T>,\n        propertyPath: string,\n    ): RelationQueryBuilder<T>\n\n    /**\n     * Sets entity's relation with which this query builder gonna work.\n     */\n    relation(\n        entityTargetOrPropertyPath: Function | string,\n        maybePropertyPath?: string,\n    ): RelationQueryBuilder<Entity> {\n        const entityTarget =\n            arguments.length === 2 ? entityTargetOrPropertyPath : undefined\n        const propertyPath =\n            arguments.length === 2\n                ? (maybePropertyPath as string)\n                : (entityTargetOrPropertyPath as string)\n\n        this.expressionMap.queryType = \"relation\"\n        this.expressionMap.relationPropertyPath = propertyPath\n\n        if (entityTarget) {\n            const mainAlias = this.createFromAlias(entityTarget)\n            this.expressionMap.setMainAlias(mainAlias)\n        }\n\n        // loading it dynamically because of circular issue\n        \n        if (InstanceChecker.isRelationQueryBuilder(this)) return this as any\n\n        return QueryBuilder.queryBuilderRegistry['RelationQueryBuilder'](this)\n    }\n\n    /**\n     * Checks if given relation exists in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string): boolean\n\n    /**\n     * Checks if given relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(target: EntityTarget<T>, relation: string[]): boolean\n\n    /**\n     * Checks if given relation or relations exist in the entity.\n     * Returns true if relation exists, false otherwise.\n     *\n     * todo: move this method to manager? or create a shortcut?\n     */\n    hasRelation<T>(\n        target: EntityTarget<T>,\n        relation: string | string[],\n    ): boolean {\n        const entityMetadata = this.connection.getMetadata(target)\n        const relations = Array.isArray(relation) ? relation : [relation]\n        return relations.every((relation) => {\n            return !!entityMetadata.findRelationWithPropertyPath(relation)\n        })\n    }\n\n    /**\n     * Check the existence of a parameter for this query builder.\n     */\n    hasParameter(key: string): boolean {\n        return (\n            this.parentQueryBuilder?.hasParameter(key) ||\n            key in this.expressionMap.parameters\n        )\n    }\n\n    /**\n     * Sets parameter name and its value.\n     *\n     * The key for this parameter may contain numbers, letters, underscores, or periods.\n     */\n    setParameter(key: string, value: any): this {\n        if (typeof value === \"function\") {\n            throw new TypeORMError(\n                `Function parameter isn't supported in the parameters. Please check \"${key}\" parameter.`,\n            )\n        }\n\n        if (!key.match(/^([A-Za-z0-9_.]+)$/)) {\n            throw new TypeORMError(\n                \"QueryBuilder parameter keys may only contain numbers, letters, underscores, or periods.\",\n            )\n        }\n\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setParameter(key, value)\n        }\n\n        this.expressionMap.parameters[key] = value\n        return this\n    }\n\n    /**\n     * Adds all parameters from the given object.\n     */\n    setParameters(parameters: ObjectLiteral): this {\n        for (const [key, value] of Object.entries(parameters)) {\n            this.setParameter(key, value)\n        }\n\n        return this\n    }\n\n    protected createParameter(value: any): string {\n        let parameterName\n\n        do {\n            parameterName = `orm_param_${this.parameterIndex++}`\n        } while (this.hasParameter(parameterName))\n\n        this.setParameter(parameterName, value)\n\n        return `:${parameterName}`\n    }\n\n    /**\n     * Adds native parameters from the given object.\n     *\n     * @deprecated Use `setParameters` instead\n     */\n    setNativeParameters(parameters: ObjectLiteral): this {\n        // set parent query builder parameters as well in sub-query mode\n        if (this.parentQueryBuilder) {\n            this.parentQueryBuilder.setNativeParameters(parameters)\n        }\n\n        Object.keys(parameters).forEach((key) => {\n            this.expressionMap.nativeParameters[key] = parameters[key]\n        })\n        return this\n    }\n\n    /**\n     * Gets all parameters.\n     */\n    getParameters(): ObjectLiteral {\n        const parameters: ObjectLiteral = Object.assign(\n            {},\n            this.expressionMap.parameters,\n        )\n\n        // add discriminator column parameter if it exist\n        if (\n            this.expressionMap.mainAlias &&\n            this.expressionMap.mainAlias.hasMetadata\n        ) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const values = metadata.childEntityMetadatas\n                    .filter(\n                        (childMetadata) => childMetadata.discriminatorColumn,\n                    )\n                    .map((childMetadata) => childMetadata.discriminatorValue)\n                values.push(metadata.discriminatorValue)\n                parameters[\"discriminatorColumnValues\"] = values\n            }\n        }\n\n        return parameters\n    }\n\n    /**\n     * Prints sql to stdout using console.log.\n     */\n    printSql(): this {\n        // TODO rename to logSql()\n        const [query, parameters] = this.getQueryAndParameters()\n        this.connection.logger.logQuery(query, parameters)\n        return this\n    }\n\n    /**\n     * Gets generated sql that will be executed.\n     * Parameters in the query are escaped for the currently used driver.\n     */\n    getSql(): string {\n        return this.getQueryAndParameters()[0]\n    }\n\n    /**\n     * Gets query to be executed with all parameters used in it.\n     */\n    getQueryAndParameters(): [string, any[]] {\n        // this execution order is important because getQuery method generates this.expressionMap.nativeParameters values\n        const query = this.getQuery()\n        const parameters = this.getParameters()\n        return this.connection.driver.escapeQueryWithParameters(\n            query,\n            parameters,\n            this.expressionMap.nativeParameters,\n        )\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<any> {\n        const [sql, parameters] = this.getQueryAndParameters()\n        const queryRunner = this.obtainQueryRunner()\n        try {\n            return await queryRunner.query(sql, parameters) // await is needed here because we are using finally\n        } finally {\n            if (queryRunner !== this.queryRunner) {\n                // means we created our own query runner\n                await queryRunner.release()\n            }\n        }\n    }\n\n    /**\n     * Creates a completely new query builder.\n     * Uses same query runner as current QueryBuilder.\n     */\n    createQueryBuilder(): this {\n        return new (this.constructor as any)(this.connection, this.queryRunner)\n    }\n\n    /**\n     * Clones query builder as it is.\n     * Note: it uses new query runner, if you want query builder that uses exactly same query runner,\n     * you can create query builder using its constructor, for example new SelectQueryBuilder(queryBuilder)\n     * where queryBuilder is cloned QueryBuilder.\n     */\n    clone(): this {\n        return new (this.constructor as any)(this)\n    }\n\n    /**\n     * Includes a Query comment in the query builder.  This is helpful for debugging purposes,\n     * such as finding a specific query in the database server's logs, or for categorization using\n     * an APM product.\n     */\n    comment(comment: string): this {\n        this.expressionMap.comment = comment\n        return this\n    }\n\n    /**\n     * Disables escaping.\n     */\n    disableEscaping(): this {\n        this.expressionMap.disableEscaping = false\n        return this\n    }\n\n    /**\n     * Escapes table name, column name or alias name using current database's escaping character.\n     */\n    escape(name: string): string {\n        if (!this.expressionMap.disableEscaping) return name\n        return this.connection.driver.escape(name)\n    }\n\n    /**\n     * Sets or overrides query builder's QueryRunner.\n     */\n    setQueryRunner(queryRunner: QueryRunner): this {\n        this.queryRunner = queryRunner\n        return this\n    }\n\n    /**\n     * Indicates if listeners and subscribers must be called before and after query execution.\n     * Enabled by default.\n     */\n    callListeners(enabled: boolean): this {\n        this.expressionMap.callListeners = enabled\n        return this\n    }\n\n    /**\n     * If set to true the query will be wrapped into a transaction.\n     */\n    useTransaction(enabled: boolean): this {\n        this.expressionMap.useTransaction = enabled\n        return this\n    }\n\n    /**\n     * Adds CTE to query\n     */\n    addCommonTableExpression(\n        queryBuilder: QueryBuilder<any> | string,\n        alias: string,\n        options?: QueryBuilderCteOptions,\n    ): this {\n        this.expressionMap.commonTableExpressions.push({\n            queryBuilder,\n            alias,\n            options: options || {},\n        })\n        return this\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets escaped table name with schema name if SqlServer driver used with custom\n     * schema name, otherwise returns escaped table name.\n     */\n    protected getTableName(tablePath: string): string {\n        return tablePath\n            .split(\".\")\n            .map((i) => {\n                // this condition need because in SQL Server driver when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n                if (i === \"\") return i\n                return this.escape(i)\n            })\n            .join(\".\")\n    }\n\n    /**\n     * Gets name of the table where insert should be performed.\n     */\n    protected getMainTableName(): string {\n        if (!this.expressionMap.mainAlias)\n            throw new TypeORMError(\n                `Entity where values should be inserted is not specified. Call \"qb.into(entity)\" method to specify it.`,\n            )\n\n        if (this.expressionMap.mainAlias.hasMetadata)\n            return this.expressionMap.mainAlias.metadata.tablePath\n\n        return this.expressionMap.mainAlias.tablePath!\n    }\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    protected createFromAlias(\n        entityTarget:\n            | EntityTarget<any>\n            | ((qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>),\n        aliasName?: string,\n    ): Alias {\n        // if table has a metadata then find it to properly escape its properties\n        // const metadata = this.connection.entityMetadatas.find(metadata => metadata.tableName === tableName);\n        if (this.connection.hasMetadata(entityTarget)) {\n            const metadata = this.connection.getMetadata(entityTarget)\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                metadata: this.connection.getMetadata(entityTarget),\n                tablePath: metadata.tablePath,\n            })\n        } else {\n            if (typeof entityTarget === \"string\") {\n                const isSubquery =\n                    entityTarget.substr(0, 1) === \"(\" &&\n                    entityTarget.substr(-1) === \")\"\n\n                return this.expressionMap.createAlias({\n                    type: \"from\",\n                    name: aliasName,\n                    tablePath: !isSubquery\n                        ? (entityTarget as string)\n                        : undefined,\n                    subQuery: isSubquery ? entityTarget : undefined,\n                })\n            }\n\n            const subQueryBuilder: SelectQueryBuilder<any> = (\n                entityTarget as any\n            )((this as any as SelectQueryBuilder<any>).subQuery())\n            this.setParameters(subQueryBuilder.getParameters())\n            const subquery = subQueryBuilder.getQuery()\n\n            return this.expressionMap.createAlias({\n                type: \"from\",\n                name: aliasName,\n                subQuery: subquery,\n            })\n        }\n    }\n\n    /**\n     * @deprecated this way of replace property names is too slow.\n     *  Instead, we'll replace property names at the end - once query is build.\n     */\n    protected replacePropertyNames(statement: string) {\n        return statement\n    }\n\n    /**\n     * Replaces all entity's propertyName to name in the given SQL string.\n     */\n    protected replacePropertyNamesForTheWholeQuery(statement: string) {\n        const replacements: { [key: string]: { [key: string]: string } } = {}\n\n        for (const alias of this.expressionMap.aliases) {\n            if (!alias.hasMetadata) continue\n            const replaceAliasNamePrefix =\n                this.expressionMap.aliasNamePrefixingEnabled && alias.name\n                    ? `${alias.name}.`\n                    : \"\"\n\n            if (!replacements[replaceAliasNamePrefix]) {\n                replacements[replaceAliasNamePrefix] = {}\n            }\n\n            // Insert & overwrite the replacements from least to most relevant in our replacements object.\n            // To do this we iterate and overwrite in the order of relevance.\n            // Least to Most Relevant:\n            // * Relation Property Path to first join column key\n            // * Relation Property Path + Column Path\n            // * Column Database Name\n            // * Column Property Name\n            // * Column Property Path\n\n            for (const relation of alias.metadata.relations) {\n                if (relation.joinColumns.length > 0)\n                    replacements[replaceAliasNamePrefix][\n                        relation.propertyPath\n                    ] = relation.joinColumns[0].databaseName\n            }\n\n            for (const relation of alias.metadata.relations) {\n                const allColumns = [\n                    ...relation.joinColumns,\n                    ...relation.inverseJoinColumns,\n                ]\n                for (const joinColumn of allColumns) {\n                    const propertyKey = `${relation.propertyPath}.${\n                        joinColumn.referencedColumn!.propertyPath\n                    }`\n                    replacements[replaceAliasNamePrefix][propertyKey] =\n                        joinColumn.databaseName\n                }\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.databaseName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyName] =\n                    column.databaseName\n            }\n\n            for (const column of alias.metadata.columns) {\n                replacements[replaceAliasNamePrefix][column.propertyPath] =\n                    column.databaseName\n            }\n        }\n\n        const replacementKeys = Object.keys(replacements)\n        const replaceAliasNamePrefixes = replacementKeys\n            .map((key) => escapeRegExp(key))\n            .join(\"|\")\n\n        if (replacementKeys.length > 0) {\n            statement = statement.replace(\n                new RegExp(\n                    // Avoid a lookbehind here since it's not well supported\n                    `([ =\\(]|^.{0})` + // any of ' =(' or start of line\n                        // followed by our prefix, e.g. 'tablename.' or ''\n                        `${\n                            replaceAliasNamePrefixes\n                                ? \"(\" + replaceAliasNamePrefixes + \")\"\n                                : \"\"\n                        }([^ =\\(\\)\\,]+)` + // a possible property name: sequence of anything but ' =(),'\n                        // terminated by ' =),' or end of line\n                        `(?=[ =\\)\\,]|.{0}$)`,\n                    \"gm\",\n                ),\n                (...matches) => {\n                    let match: string, pre: string, p: string\n                    if (replaceAliasNamePrefixes) {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[3]\n\n                        if (replacements[matches[2]][p]) {\n                            return `${pre}${this.escape(\n                                matches[2].substring(0, matches[2].length - 1),\n                            )}.${this.escape(replacements[matches[2]][p])}`\n                        }\n                    } else {\n                        match = matches[0]\n                        pre = matches[1]\n                        p = matches[2]\n\n                        if (replacements[\"\"][p]) {\n                            return `${pre}${this.escape(replacements[\"\"][p])}`\n                        }\n                    }\n                    return match\n                },\n            )\n        }\n\n        return statement\n    }\n\n    protected createComment(): string {\n        if (!this.expressionMap.comment) {\n            return \"\"\n        }\n\n        // ANSI SQL 2003 support C style comments - comments that start with `/*` and end with `*/`\n        // In some dialects query nesting is available - but not all.  Because of this, we'll need\n        // to scrub \"ending\" characters from the SQL but otherwise we can leave everything else\n        // as-is and it should be valid.\n\n        return `/* ${this.expressionMap.comment.replace(/\\*\\//g, \"\")} */ `\n    }\n\n    /**\n     * Time travel queries for CockroachDB\n     */\n    protected createTimeTravelQuery(): string {\n        if (\n            this.expressionMap.queryType === \"select\" &&\n            this.expressionMap.timeTravel\n        ) {\n            return ` AS OF SYSTEM TIME ${this.expressionMap.timeTravel}`\n        }\n\n        return \"\"\n    }\n\n    /**\n     * Creates \"WHERE\" expression.\n     */\n    protected createWhereExpression() {\n        const conditionsArray = []\n\n        const whereExpression = this.createWhereClausesExpression(\n            this.expressionMap.wheres,\n        )\n\n        if (whereExpression.length > 0 && whereExpression !== \"1=1\") {\n            conditionsArray.push(this.replacePropertyNames(whereExpression))\n        }\n\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const metadata = this.expressionMap.mainAlias!.metadata\n            // Adds the global condition of \"non-deleted\" for the entity with delete date columns in select query.\n            if (\n                this.expressionMap.queryType === \"select\" &&\n                !this.expressionMap.withDeleted &&\n                metadata.deleteDateColumn\n            ) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.deleteDateColumn.propertyName\n                    : metadata.deleteDateColumn.propertyName\n\n                const condition = `${this.replacePropertyNames(column)} IS NULL`\n                conditionsArray.push(condition)\n            }\n\n            if (metadata.discriminatorColumn && metadata.parentEntityMetadata) {\n                const column = this.expressionMap.aliasNamePrefixingEnabled\n                    ? this.expressionMap.mainAlias!.name +\n                      \".\" +\n                      metadata.discriminatorColumn.databaseName\n                    : metadata.discriminatorColumn.databaseName\n\n                const condition = `${this.replacePropertyNames(\n                    column,\n                )} IN (:...discriminatorColumnValues)`\n                conditionsArray.push(condition)\n            }\n        }\n\n        if (this.expressionMap.extraAppendedAndWhereCondition) {\n            const condition = this.replacePropertyNames(\n                this.expressionMap.extraAppendedAndWhereCondition,\n            )\n            conditionsArray.push(condition)\n        }\n\n        let condition = \"\"\n\n        // time travel\n        condition += this.createTimeTravelQuery()\n\n        if (!conditionsArray.length) {\n            condition += \"\"\n        } else if (conditionsArray.length === 1) {\n            condition += ` WHERE ${conditionsArray[0]}`\n        } else {\n            condition += ` WHERE ( ${conditionsArray.join(\" ) AND ( \")} )`\n        }\n\n        return condition\n    }\n\n    /**\n     * Creates \"RETURNING\" / \"OUTPUT\" expression.\n     */\n    protected createReturningExpression(returningType: ReturningType): string {\n        const columns = this.getReturningColumns()\n        const driver = this.connection.driver\n\n        // also add columns we must auto-return to perform entity updation\n        // if user gave his own returning\n        if (\n            typeof this.expressionMap.returning !== \"string\" &&\n            this.expressionMap.extraReturningColumns.length > 0 &&\n            driver.isReturningSqlSupported(returningType)\n        ) {\n            columns.push(\n                ...this.expressionMap.extraReturningColumns.filter((column) => {\n                    return columns.indexOf(column) === -1\n                }),\n            )\n        }\n\n        if (columns.length) {\n            let columnsExpression = columns\n                .map((column) => {\n                    const name = this.escape(column.databaseName)\n                    if (driver.options.type === \"mssql\") {\n                        if (\n                            this.expressionMap.queryType === \"insert\" ||\n                            this.expressionMap.queryType === \"update\" ||\n                            this.expressionMap.queryType === \"soft-delete\" ||\n                            this.expressionMap.queryType === \"restore\"\n                        ) {\n                            return \"INSERTED.\" + name\n                        } else {\n                            return (\n                                this.escape(this.getMainTableName()) +\n                                \".\" +\n                                name\n                            )\n                        }\n                    } else {\n                        return name\n                    }\n                })\n                .join(\", \")\n\n            if (driver.options.type === \"oracle\") {\n                columnsExpression +=\n                    \" INTO \" +\n                    columns\n                        .map((column) => {\n                            return this.createParameter({\n                                type: (\n                                    driver as OracleDriver\n                                ).columnTypeToNativeParameter(column.type),\n                                dir: (driver as OracleDriver).oracle.BIND_OUT,\n                            })\n                        })\n                        .join(\", \")\n            }\n\n            if (driver.options.type === \"mssql\") {\n                if (\n                    this.expressionMap.queryType === \"insert\" ||\n                    this.expressionMap.queryType === \"update\"\n                ) {\n                    columnsExpression += \" INTO @OutputTable\"\n                }\n            }\n\n            return columnsExpression\n        } else if (typeof this.expressionMap.returning === \"string\") {\n            return this.expressionMap.returning\n        }\n\n        return \"\"\n    }\n\n    /**\n     * If returning / output cause is set to array of column names,\n     * then this method will return all column metadatas of those column names.\n     */\n    protected getReturningColumns(): ColumnMetadata[] {\n        const columns: ColumnMetadata[] = []\n        if (Array.isArray(this.expressionMap.returning)) {\n            ;(this.expressionMap.returning as string[]).forEach(\n                (columnName) => {\n                    if (this.expressionMap.mainAlias!.hasMetadata) {\n                        columns.push(\n                            ...this.expressionMap.mainAlias!.metadata.findColumnsWithPropertyPath(\n                                columnName,\n                            ),\n                        )\n                    }\n                },\n            )\n        }\n        return columns\n    }\n\n    protected createWhereClausesExpression(clauses: WhereClause[]): string {\n        return clauses\n            .map((clause, index) => {\n                const expression = this.createWhereConditionExpression(\n                    clause.condition,\n                )\n\n                switch (clause.type) {\n                    case \"and\":\n                        return (index > 0 ? \"AND \" : \"\") + expression\n                    case \"or\":\n                        return (index > 0 ? \"OR \" : \"\") + expression\n                }\n\n                return expression\n            })\n            .join(\" \")\n            .trim()\n    }\n\n    /**\n     * Computes given where argument - transforms to a where string all forms it can take.\n     */\n    protected createWhereConditionExpression(\n        condition: WhereClauseCondition,\n        alwaysWrap: boolean = false,\n    ): string {\n        if (typeof condition === \"string\") return condition\n\n        if (Array.isArray(condition)) {\n            if (condition.length === 0) {\n                return \"1=1\"\n            }\n\n            // In the future we should probably remove this entire condition\n            // but for now to prevent any breaking changes it exists.\n            if (condition.length === 1 && !alwaysWrap) {\n                return this.createWhereClausesExpression(condition)\n            }\n\n            return \"(\" + this.createWhereClausesExpression(condition) + \")\"\n        }\n\n        const { driver } = this.connection\n\n        switch (condition.operator) {\n            case \"lessThan\":\n                return `${condition.parameters[0]} < ${condition.parameters[1]}`\n            case \"lessThanOrEqual\":\n                return `${condition.parameters[0]} <= ${condition.parameters[1]}`\n            case \"arrayContains\":\n                return `${condition.parameters[0]} @> ${condition.parameters[1]}`\n            case \"jsonContains\":\n                return `${condition.parameters[0]} ::jsonb @> ${condition.parameters[1]}`\n            case \"arrayContainedBy\":\n                return `${condition.parameters[0]} <@ ${condition.parameters[1]}`\n            case \"arrayOverlap\":\n                return `${condition.parameters[0]} && ${condition.parameters[1]}`\n            case \"moreThan\":\n                return `${condition.parameters[0]} > ${condition.parameters[1]}`\n            case \"moreThanOrEqual\":\n                return `${condition.parameters[0]} >= ${condition.parameters[1]}`\n            case \"notEqual\":\n                return `${condition.parameters[0]} != ${condition.parameters[1]}`\n            case \"equal\":\n                return `${condition.parameters[0]} = ${condition.parameters[1]}`\n            case \"ilike\":\n                if (\n                    driver.options.type === \"postgres\" ||\n                    driver.options.type === \"cockroachdb\"\n                ) {\n                    return `${condition.parameters[0]} ILIKE ${condition.parameters[1]}`\n                }\n\n                return `UPPER(${condition.parameters[0]}) LIKE UPPER(${condition.parameters[1]})`\n            case \"like\":\n                return `${condition.parameters[0]} LIKE ${condition.parameters[1]}`\n            case \"between\":\n                return `${condition.parameters[0]} BETWEEN ${condition.parameters[1]} AND ${condition.parameters[2]}`\n            case \"in\":\n                if (condition.parameters.length <= 1) {\n                    return \"0=1\"\n                }\n                return `${condition.parameters[0]} IN (${condition.parameters\n                    .slice(1)\n                    .join(\", \")})`\n            case \"any\":\n                if (driver.options.type === \"cockroachdb\") {\n                    return `${condition.parameters[0]}::STRING = ANY(${condition.parameters[1]}::STRING[])`\n                }\n\n                return `${condition.parameters[0]} = ANY(${condition.parameters[1]})`\n            case \"isNull\":\n                return `${condition.parameters[0]} IS NULL`\n\n            case \"not\":\n                return `NOT(${this.createWhereConditionExpression(\n                    condition.condition,\n                )})`\n            case \"brackets\":\n                return `${this.createWhereConditionExpression(\n                    condition.condition,\n                    true,\n                )}`\n            case \"and\":\n                return condition.parameters.join(\" AND \")\n        }\n\n    }\n\n    protected createCteExpression(): string {\n        if (!this.hasCommonTableExpressions()) {\n            return \"\"\n        }\n        const databaseRequireRecusiveHint =\n            this.connection.driver.cteCapabilities.requiresRecursiveHint\n\n        const cteStrings = this.expressionMap.commonTableExpressions.map(\n            (cte) => {\n                const cteBodyExpression =\n                    typeof cte.queryBuilder === \"string\"\n                        ? cte.queryBuilder\n                        : cte.queryBuilder.getQuery()\n                if (typeof cte.queryBuilder !== \"string\") {\n                    if (cte.queryBuilder.hasCommonTableExpressions()) {\n                        throw new TypeORMError(\n                            `Nested CTEs aren't supported (CTE: ${cte.alias})`,\n                        )\n                    }\n                    if (\n                        !this.connection.driver.cteCapabilities.writable &&\n                        !InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        throw new TypeORMError(\n                            `Only select queries are supported in CTEs in ${this.connection.options.type} (CTE: ${cte.alias})`,\n                        )\n                    }\n                    this.setParameters(cte.queryBuilder.getParameters())\n                }\n                let cteHeader = this.escape(cte.alias)\n                if (cte.options.columnNames) {\n                    const escapedColumnNames = cte.options.columnNames.map(\n                        (column) => this.escape(column),\n                    )\n                    if (\n                        InstanceChecker.isSelectQueryBuilder(cte.queryBuilder)\n                    ) {\n                        if (\n                            cte.queryBuilder.expressionMap.selects.length &&\n                            cte.options.columnNames.length !==\n                                cte.queryBuilder.expressionMap.selects.length\n                        ) {\n                            throw new TypeORMError(\n                                `cte.options.columnNames length (${cte.options.columnNames.length}) doesn't match subquery select list length ${cte.queryBuilder.expressionMap.selects.length} (CTE: ${cte.alias})`,\n                            )\n                        }\n                    }\n                    cteHeader += `(${escapedColumnNames.join(\", \")})`\n                }\n                const recursiveClause =\n                    cte.options.recursive && databaseRequireRecusiveHint\n                        ? \"RECURSIVE\"\n                        : \"\"\n                let materializeClause = \"\"\n                if (\n                    this.connection.driver.cteCapabilities.materializedHint &&\n                    cte.options.materialized !== undefined\n                ) {\n                    materializeClause = cte.options.materialized\n                        ? \"MATERIALIZED\"\n                        : \"NOT MATERIALIZED\"\n                }\n\n                return [\n                    recursiveClause,\n                    cteHeader,\n                    \"AS\",\n                    materializeClause,\n                    `(${cteBodyExpression})`,\n                ]\n                    .filter(Boolean)\n                    .join(\" \")\n            },\n        )\n\n        return \"WITH \" + cteStrings.join(\", \") + \" \"\n    }\n\n    /**\n     * Creates \"WHERE\" condition for an in-ids condition.\n     */\n    protected getWhereInIdsCondition(\n        ids: any | any[],\n    ): ObjectLiteral | Brackets {\n        const metadata = this.expressionMap.mainAlias!.metadata\n        const normalized = (Array.isArray(ids) ? ids : [ids]).map((id) =>\n            metadata.ensureEntityIdMap(id),\n        )\n\n        // using in(...ids) for single primary key entities\n        if (!metadata.hasMultiplePrimaryKeys) {\n            const primaryColumn = metadata.primaryColumns[0]\n\n            // getEntityValue will try to transform `In`, it is a bug\n            // todo: remove this transformer check after #2390 is fixed\n            // This also fails for embedded & relation, so until that is fixed skip it.\n            if (\n                !primaryColumn.transformer &&\n                !primaryColumn.relationMetadata &&\n                !primaryColumn.embeddedMetadata\n            ) {\n                return {\n                    [primaryColumn.propertyName]: In(\n                        normalized.map((id) =>\n                            primaryColumn.getEntityValue(id, false),\n                        ),\n                    ),\n                }\n            }\n        }\n\n        return new Brackets((qb) => {\n            for (const data of normalized) {\n                qb.orWhere(new Brackets((qb) => qb.where(data)))\n            }\n        })\n    }\n\n    protected getExistsCondition(subQuery: any): [string, any[]] {\n        const query = subQuery\n            .clone()\n            .orderBy()\n            .groupBy()\n            .offset(undefined)\n            .limit(undefined)\n            .skip(undefined)\n            .take(undefined)\n            .select(\"1\")\n            .setOption(\"disable-global-order\")\n\n        return [`EXISTS (${query.getQuery()})`, query.getParameters()]\n    }\n\n    private findColumnsForPropertyPath(\n        propertyPath: string,\n    ): [Alias, string[], ColumnMetadata[]] {\n        // Make a helper to iterate the entity & relations?\n        // Use that to set the correct alias?  Or the other way around?\n\n        // Start with the main alias with our property paths\n        let alias = this.expressionMap.mainAlias\n        const root: string[] = []\n        const propertyPathParts = propertyPath.split(\".\")\n\n        while (propertyPathParts.length > 1) {\n            const part = propertyPathParts[0]\n\n            if (!alias?.hasMetadata) {\n                // If there's no metadata, we're wasting our time\n                // and can't actually look any of this up.\n                break\n            }\n\n            if (alias.metadata.hasEmbeddedWithPropertyPath(part)) {\n                // If this is an embedded then we should combine the two as part of our lookup.\n                // Instead of just breaking, we keep going with this in case there's an embedded/relation\n                // inside an embedded.\n                propertyPathParts.unshift(\n                    `${propertyPathParts.shift()}.${propertyPathParts.shift()}`,\n                )\n                continue\n            }\n\n            if (alias.metadata.hasRelationWithPropertyPath(part)) {\n                // If this is a relation then we should find the aliases\n                // that match the relation & then continue further down\n                // the property path\n                const joinAttr = this.expressionMap.joinAttributes.find(\n                    (joinAttr) => joinAttr.relationPropertyPath === part,\n                )\n\n                if (!joinAttr?.alias) {\n                    const fullRelationPath =\n                        root.length > 0 ? `${root.join(\".\")}.${part}` : part\n                    throw new Error(\n                        `Cannot find alias for relation at ${fullRelationPath}`,\n                    )\n                }\n\n                alias = joinAttr.alias\n                root.push(...part.split(\".\"))\n                propertyPathParts.shift()\n                continue\n            }\n\n            break\n        }\n\n        if (!alias) {\n            throw new Error(`Cannot find alias for property ${propertyPath}`)\n        }\n\n        // Remaining parts are combined back and used to find the actual property path\n        const aliasPropertyPath = propertyPathParts.join(\".\")\n\n        const columns =\n            alias.metadata.findColumnsWithPropertyPath(aliasPropertyPath)\n\n        if (!columns.length) {\n            throw new EntityPropertyNotFoundError(propertyPath, alias.metadata)\n        }\n\n        return [alias, root, columns]\n    }\n\n    /**\n     * Creates a property paths for a given ObjectLiteral.\n     */\n    protected createPropertyPath(\n        metadata: EntityMetadata,\n        entity: ObjectLiteral,\n        prefix: string = \"\",\n    ) {\n        const paths: string[] = []\n\n        for (const key of Object.keys(entity)) {\n            const path = prefix ? `${prefix}.${key}` : key\n\n            // There's times where we don't actually want to traverse deeper.\n            // If the value is a `FindOperator`, or null, or not an object, then we don't, for example.\n            if (\n                entity[key] === null ||\n                typeof entity[key] !== \"object\" ||\n                InstanceChecker.isFindOperator(entity[key])\n            ) {\n                paths.push(path)\n                continue\n            }\n\n            if (metadata.hasEmbeddedWithPropertyPath(path)) {\n                const subPaths = this.createPropertyPath(\n                    metadata,\n                    entity[key],\n                    path,\n                )\n                paths.push(...subPaths)\n                continue\n            }\n\n            if (metadata.hasRelationWithPropertyPath(path)) {\n                const relation = metadata.findRelationWithPropertyPath(path)!\n\n                // There's also cases where we don't want to return back all of the properties.\n                // These handles the situation where someone passes the model & we don't need to make\n                // a HUGE `where` to uniquely look up the entity.\n\n                // In the case of a *-to-one, there's only ever one possible entity on the other side\n                // so if the join columns are all defined we can return just the relation itself\n                // because it will fetch only the join columns and do the lookup.\n                if (\n                    relation.relationType === \"one-to-one\" ||\n                    relation.relationType === \"many-to-one\"\n                ) {\n                    const joinColumns = relation.joinColumns\n                        .map((j) => j.referencedColumn)\n                        .filter((j): j is ColumnMetadata => !!j)\n\n                    const hasAllJoinColumns =\n                        joinColumns.length > 0 &&\n                        joinColumns.every((column) =>\n                            column.getEntityValue(entity[key], false),\n                        )\n\n                    if (hasAllJoinColumns) {\n                        paths.push(path)\n                        continue\n                    }\n                }\n\n                if (\n                    relation.relationType === \"one-to-many\" ||\n                    relation.relationType === \"many-to-many\"\n                ) {\n                    throw new Error(\n                        `Cannot query across ${relation.relationType} for property ${path}`,\n                    )\n                }\n\n                // For any other case, if the `entity[key]` contains all of the primary keys we can do a\n                // lookup via these.  We don't need to look up via any other values 'cause these are\n                // the unique primary keys.\n                // This handles the situation where someone passes the model & we don't need to make\n                // a HUGE where.\n                const primaryColumns =\n                    relation.inverseEntityMetadata.primaryColumns\n                const hasAllPrimaryKeys =\n                    primaryColumns.length > 0 &&\n                    primaryColumns.every((column) =>\n                        column.getEntityValue(entity[key], false),\n                    )\n\n                if (hasAllPrimaryKeys) {\n                    const subPaths = primaryColumns.map(\n                        (column) => `${path}.${column.propertyPath}`,\n                    )\n                    paths.push(...subPaths)\n                    continue\n                }\n\n                // If nothing else, just return every property that's being passed to us.\n                const subPaths = this.createPropertyPath(\n                    relation.inverseEntityMetadata,\n                    entity[key],\n                ).map((p) => `${path}.${p}`)\n                paths.push(...subPaths)\n                continue\n            }\n\n            paths.push(path)\n        }\n\n        return paths\n    }\n\n    protected *getPredicates(where: ObjectLiteral) {\n        if (this.expressionMap.mainAlias!.hasMetadata) {\n            const propertyPaths = this.createPropertyPath(\n                this.expressionMap.mainAlias!.metadata,\n                where,\n            )\n\n            for (const propertyPath of propertyPaths) {\n                const [alias, aliasPropertyPath, columns] =\n                    this.findColumnsForPropertyPath(propertyPath)\n\n                for (const column of columns) {\n                    let containedWhere = where\n\n                    for (const part of aliasPropertyPath) {\n                        if (!containedWhere || !(part in containedWhere)) {\n                            containedWhere = {}\n                            break\n                        }\n\n                        containedWhere = containedWhere[part]\n                    }\n\n                    // Use the correct alias & the property path from the column\n                    const aliasPath = this.expressionMap\n                        .aliasNamePrefixingEnabled\n                        ? `${alias.name}.${column.propertyPath}`\n                        : column.propertyPath\n\n                    const parameterValue = column.getEntityValue(\n                        containedWhere,\n                        true,\n                    )\n\n                    yield [aliasPath, parameterValue]\n                }\n            }\n        } else {\n            for (const key of Object.keys(where)) {\n                const parameterValue = where[key]\n                const aliasPath = this.expressionMap.aliasNamePrefixingEnabled\n                    ? `${this.alias}.${key}`\n                    : key\n\n                yield [aliasPath, parameterValue]\n            }\n        }\n    }\n\n    protected getWherePredicateCondition(\n        aliasPath: string,\n        parameterValue: any,\n    ): WhereClauseCondition {\n        if (InstanceChecker.isFindOperator(parameterValue)) {\n            let parameters: any[] = []\n            if (parameterValue.useParameter) {\n                if (parameterValue.objectLiteralParameters) {\n                    this.setParameters(parameterValue.objectLiteralParameters)\n                } else if (parameterValue.multipleParameters) {\n                    for (const v of parameterValue.value) {\n                        parameters.push(this.createParameter(v))\n                    }\n                } else {\n                    parameters.push(this.createParameter(parameterValue.value))\n                }\n            }\n\n            if (parameterValue.type === \"raw\") {\n                if (parameterValue.getSql) {\n                    return parameterValue.getSql(aliasPath)\n                } else {\n                    return {\n                        operator: \"equal\",\n                        parameters: [aliasPath, parameterValue.value],\n                    }\n                }\n            } else if (parameterValue.type === \"not\") {\n                if (parameterValue.child) {\n                    return {\n                        operator: parameterValue.type,\n                        condition: this.getWherePredicateCondition(\n                            aliasPath,\n                            parameterValue.child,\n                        ),\n                    }\n                } else {\n                    return {\n                        operator: \"notEqual\",\n                        parameters: [aliasPath, ...parameters],\n                    }\n                }\n            } else if (parameterValue.type === \"and\") {\n                const values: FindOperator<any>[] = parameterValue.value\n\n                return {\n                    operator: parameterValue.type,\n                    parameters: values.map((operator) =>\n                        this.createWhereConditionExpression(\n                            this.getWherePredicateCondition(\n                                aliasPath,\n                                operator,\n                            ),\n                        ),\n                    ),\n                }\n            } else {\n                return {\n                    operator: parameterValue.type,\n                    parameters: [aliasPath, ...parameters],\n                }\n            }\n            // } else if (parameterValue === null) {\n            //     return {\n            //         operator: \"isNull\",\n            //         parameters: [\n            //             aliasPath,\n            //         ]\n            //     };\n        } else {\n            return {\n                operator: \"equal\",\n                parameters: [aliasPath, this.createParameter(parameterValue)],\n            }\n        }\n    }\n\n    protected getWhereCondition(\n        where:\n            | string\n            | ((qb: this) => string)\n            | Brackets\n            | NotBrackets\n            | ObjectLiteral\n            | ObjectLiteral[],\n    ): WhereClauseCondition {\n        if (typeof where === \"string\") {\n            return where\n        }\n\n        if (InstanceChecker.isBrackets(where)) {\n            const whereQueryBuilder = this.createQueryBuilder()\n\n            whereQueryBuilder.parentQueryBuilder = this\n\n            whereQueryBuilder.expressionMap.mainAlias =\n                this.expressionMap.mainAlias\n            whereQueryBuilder.expressionMap.aliasNamePrefixingEnabled =\n                this.expressionMap.aliasNamePrefixingEnabled\n            whereQueryBuilder.expressionMap.parameters =\n                this.expressionMap.parameters\n            whereQueryBuilder.expressionMap.nativeParameters =\n                this.expressionMap.nativeParameters\n\n            whereQueryBuilder.expressionMap.wheres = []\n\n            where.whereFactory(whereQueryBuilder as any)\n\n            return {\n                operator: InstanceChecker.isNotBrackets(where)\n                    ? \"not\"\n                    : \"brackets\",\n                condition: whereQueryBuilder.expressionMap.wheres,\n            }\n        }\n\n        if (typeof where === \"function\") {\n            return where(this)\n        }\n\n        const wheres: ObjectLiteral[] = Array.isArray(where) ? where : [where]\n        const clauses: WhereClause[] = []\n\n        for (const where of wheres) {\n            const conditions: WhereClauseCondition = []\n\n            // Filter the conditions and set up the parameter values\n            for (const [aliasPath, parameterValue] of this.getPredicates(\n                where,\n            )) {\n                conditions.push({\n                    type: \"and\",\n                    condition: this.getWherePredicateCondition(\n                        aliasPath,\n                        parameterValue,\n                    ),\n                })\n            }\n\n            clauses.push({ type: \"or\", condition: conditions })\n        }\n\n        if (clauses.length === 1) {\n            return clauses[0].condition\n        }\n\n        return clauses\n    }\n\n    /**\n     * Creates a query builder used to execute sql queries inside this query builder.\n     */\n    protected obtainQueryRunner() {\n        return this.queryRunner || this.connection.createQueryRunner()\n    }\n\n    protected hasCommonTableExpressions(): boolean {\n        return this.expressionMap.commonTableExpressions.length > 0\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/query-builder/QueryExpressionMap.d.ts b/node_modules/typeorm/query-builder/QueryExpressionMap.d.ts
index fd5e3b9..53f2df3 100644
--- a/node_modules/typeorm/query-builder/QueryExpressionMap.d.ts
+++ b/node_modules/typeorm/query-builder/QueryExpressionMap.d.ts
@@ -1,19 +1,19 @@
-import { Alias } from "./Alias";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { JoinAttribute } from "./JoinAttribute";
-import { QueryBuilder } from "./QueryBuilder";
-import { QueryBuilderCteOptions } from "./QueryBuilderCte";
-import { RelationIdAttribute } from "./relation-id/RelationIdAttribute";
-import { RelationCountAttribute } from "./relation-count/RelationCountAttribute";
-import { DataSource } from "../data-source/DataSource";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { SelectQuery } from "./SelectQuery";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { SelectQueryBuilderOption } from "./SelectQueryBuilderOption";
-import { WhereClause } from "./WhereClause";
-import { UpsertType } from "../driver/types/UpsertType";
+import { Alias } from "typeorm/query-builder/Alias";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
+import { JoinAttribute } from "typeorm/query-builder/JoinAttribute";
+import { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+import { QueryBuilderCteOptions } from "typeorm/query-builder/QueryBuilderCte";
+import { RelationIdAttribute } from "typeorm/query-builder/relation-id/RelationIdAttribute";
+import { RelationCountAttribute } from "typeorm/query-builder/relation-count/RelationCountAttribute";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { SelectQuery } from "typeorm/query-builder/SelectQuery";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { SelectQueryBuilderOption } from "typeorm/query-builder/SelectQueryBuilderOption";
+import { WhereClause } from "typeorm/query-builder/WhereClause";
+import { UpsertType } from "typeorm/driver/types/UpsertType";
 /**
  * Contains all properties of the QueryBuilder that needs to be build a final query.
  */
diff --git a/node_modules/typeorm/query-builder/QueryPartialEntity.d.ts b/node_modules/typeorm/query-builder/QueryPartialEntity.d.ts
index b30253a..fc8f2d1 100644
--- a/node_modules/typeorm/query-builder/QueryPartialEntity.d.ts
+++ b/node_modules/typeorm/query-builder/QueryPartialEntity.d.ts
@@ -1,4 +1,4 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Make all properties in T optional
  */
diff --git a/node_modules/typeorm/query-builder/RelationIdLoader.d.ts b/node_modules/typeorm/query-builder/RelationIdLoader.d.ts
index 1ca2ed6..4015d2b 100644
--- a/node_modules/typeorm/query-builder/RelationIdLoader.d.ts
+++ b/node_modules/typeorm/query-builder/RelationIdLoader.d.ts
@@ -1,8 +1,8 @@
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { SelectQueryBuilder } from "./SelectQueryBuilder";
-import { QueryRunner } from "../query-runner/QueryRunner";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * Loads relation ids for the given entities.
  */
diff --git a/node_modules/typeorm/query-builder/RelationLoader.d.ts b/node_modules/typeorm/query-builder/RelationLoader.d.ts
index d23d012..d2ad032 100644
--- a/node_modules/typeorm/query-builder/RelationLoader.d.ts
+++ b/node_modules/typeorm/query-builder/RelationLoader.d.ts
@@ -1,8 +1,8 @@
-import { DataSource } from "../data-source/DataSource";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { SelectQueryBuilder } from "./SelectQueryBuilder";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Wraps entities and creates getters/setters for their relations
  * to be able to lazily load relations when accessing these relations.
diff --git a/node_modules/typeorm/query-builder/RelationQueryBuilder.d.ts b/node_modules/typeorm/query-builder/RelationQueryBuilder.d.ts
index e635fd7..1b105b2 100644
--- a/node_modules/typeorm/query-builder/RelationQueryBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/RelationQueryBuilder.d.ts
@@ -1,5 +1,5 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
+import { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Allows to work with entity relations and perform specific operations with those relations.
  *
diff --git a/node_modules/typeorm/query-builder/SelectQueryBuilder.d.ts b/node_modules/typeorm/query-builder/SelectQueryBuilder.d.ts
index 18d1d4d..f428bc2 100644
--- a/node_modules/typeorm/query-builder/SelectQueryBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/SelectQueryBuilder.d.ts
@@ -1,22 +1,22 @@
 
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryBuilder } from "./QueryBuilder";
-import { ReadStream } from "../platform/PlatformTools";
-import { SelectQuery } from "./SelectQuery";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { QueryExpressionMap } from "./QueryExpressionMap";
-import { EntityTarget } from "../common/EntityTarget";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { SelectQueryBuilderOption } from "./SelectQueryBuilderOption";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { FindOptionsSelect } from "../find-options/FindOptionsSelect";
-import { RelationMetadata } from "../metadata/RelationMetadata";
-import { FindOptionsOrder } from "../find-options/FindOptionsOrder";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { FindOptionsRelations } from "../find-options/FindOptionsRelations";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+import { ReadStream } from "typeorm/platform/PlatformTools";
+import { SelectQuery } from "typeorm/query-builder/SelectQuery";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
+import { QueryExpressionMap } from "typeorm/query-builder/QueryExpressionMap";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/query-builder/Brackets";
+import { SelectQueryBuilderOption } from "typeorm/query-builder/SelectQueryBuilderOption";
+import { FindManyOptions } from "typeorm/find-options/FindManyOptions";
+import { FindOptionsSelect } from "typeorm/find-options/FindOptionsSelect";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { FindOptionsOrder } from "typeorm/find-options/FindOptionsOrder";
+import { FindOptionsWhere } from "typeorm/find-options/FindOptionsWhere";
+import { FindOptionsRelations } from "typeorm/find-options/FindOptionsRelations";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/query-builder/SoftDeleteQueryBuilder.d.ts b/node_modules/typeorm/query-builder/SoftDeleteQueryBuilder.d.ts
index f178248..412d983 100644
--- a/node_modules/typeorm/query-builder/SoftDeleteQueryBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/SoftDeleteQueryBuilder.d.ts
@@ -1,12 +1,12 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityTarget } from "../common/EntityTarget";
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { UpdateResult } from "./result/UpdateResult";
-import { OrderByCondition } from "../find-options/OrderByCondition";
+import { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/query-builder/Brackets";
+import { UpdateResult } from "typeorm/query-builder/result/UpdateResult";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/query-builder/UpdateQueryBuilder.d.ts b/node_modules/typeorm/query-builder/UpdateQueryBuilder.d.ts
index 3ee2933..3ea15ab 100644
--- a/node_modules/typeorm/query-builder/UpdateQueryBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/UpdateQueryBuilder.d.ts
@@ -1,12 +1,12 @@
-import { QueryBuilder } from "./QueryBuilder";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { DataSource } from "../data-source/DataSource";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { WhereExpressionBuilder } from "./WhereExpressionBuilder";
-import { Brackets } from "./Brackets";
-import { UpdateResult } from "./result/UpdateResult";
-import { OrderByCondition } from "../find-options/OrderByCondition";
-import { QueryDeepPartialEntity } from "./QueryPartialEntity";
+import { QueryBuilder } from "typeorm/query-builder/QueryBuilder";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { WhereExpressionBuilder } from "typeorm/query-builder/WhereExpressionBuilder";
+import { Brackets } from "typeorm/query-builder/Brackets";
+import { UpdateResult } from "typeorm/query-builder/result/UpdateResult";
+import { OrderByCondition } from "typeorm/find-options/OrderByCondition";
+import { QueryDeepPartialEntity } from "typeorm/query-builder/QueryPartialEntity";
 /**
  * Allows to build complex sql queries in a fashion way and execute those queries.
  */
diff --git a/node_modules/typeorm/query-builder/WhereExpressionBuilder.d.ts b/node_modules/typeorm/query-builder/WhereExpressionBuilder.d.ts
index e29f6c5..113d10a 100644
--- a/node_modules/typeorm/query-builder/WhereExpressionBuilder.d.ts
+++ b/node_modules/typeorm/query-builder/WhereExpressionBuilder.d.ts
@@ -1,5 +1,5 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { Brackets } from "./Brackets";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { Brackets } from "typeorm/query-builder/Brackets";
 /**
  * Query Builders can implement this interface to support where expression
  */
diff --git a/node_modules/typeorm/query-builder/index.d.ts b/node_modules/typeorm/query-builder/index.d.ts
new file mode 100644
index 0000000..1714e09
--- /dev/null
+++ b/node_modules/typeorm/query-builder/index.d.ts
@@ -0,0 +1 @@
+export declare function registerQueryBuilders(): void;
diff --git a/node_modules/typeorm/query-builder/index.js b/node_modules/typeorm/query-builder/index.js
new file mode 100644
index 0000000..fdf46a5
--- /dev/null
+++ b/node_modules/typeorm/query-builder/index.js
@@ -0,0 +1,21 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.registerQueryBuilders = void 0;
+const DeleteQueryBuilder_1 = require("./DeleteQueryBuilder");
+const InsertQueryBuilder_1 = require("./InsertQueryBuilder");
+const QueryBuilder_1 = require("./QueryBuilder");
+const RelationQueryBuilder_1 = require("./RelationQueryBuilder");
+const SelectQueryBuilder_1 = require(".//SelectQueryBuilder");
+const SoftDeleteQueryBuilder_1 = require("./SoftDeleteQueryBuilder");
+const UpdateQueryBuilder_1 = require("./UpdateQueryBuilder");
+function registerQueryBuilders() {
+    QueryBuilder_1.QueryBuilder.registerQueryBuilderClass('DeleteQueryBuilder', (qb) => new DeleteQueryBuilder_1.DeleteQueryBuilder(qb));
+    QueryBuilder_1.QueryBuilder.registerQueryBuilderClass('InsertQueryBuilder', (qb) => new InsertQueryBuilder_1.InsertQueryBuilder(qb));
+    QueryBuilder_1.QueryBuilder.registerQueryBuilderClass('RelationQueryBuilder', (qb) => new RelationQueryBuilder_1.RelationQueryBuilder(qb));
+    QueryBuilder_1.QueryBuilder.registerQueryBuilderClass('SelectQueryBuilder', (qb) => new SelectQueryBuilder_1.SelectQueryBuilder(qb));
+    QueryBuilder_1.QueryBuilder.registerQueryBuilderClass('SoftDeleteQueryBuilder', (qb) => new SoftDeleteQueryBuilder_1.SoftDeleteQueryBuilder(qb));
+    QueryBuilder_1.QueryBuilder.registerQueryBuilderClass('UpdateQueryBuilder', (qb) => new UpdateQueryBuilder_1.UpdateQueryBuilder(qb));
+}
+exports.registerQueryBuilders = registerQueryBuilders;
+
+//# sourceMappingURL=index.js.map
diff --git a/node_modules/typeorm/query-builder/index.js.map b/node_modules/typeorm/query-builder/index.js.map
new file mode 100644
index 0000000..c8b326c
--- /dev/null
+++ b/node_modules/typeorm/query-builder/index.js.map
@@ -0,0 +1 @@
+{"version":3,"sources":["../../src/query-builder/index.ts"],"names":[],"mappings":";;;AAAA,6DAA0D;AAC1D,6DAAyD;AACzD,iDAA6C;AAC7C,iEAA6D;AAC7D,8DAA0D;AAC1D,qEAAiE;AACjE,6DAAyD;AAEzD,SAAgB,qBAAqB;IACjC,2BAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,uCAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;IACnH,2BAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,uCAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;IACnH,2BAAY,CAAC,yBAAyB,CAAC,sBAAsB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,2CAAoB,CAAC,EAAE,CAAC,CAAC,CAAA;IACvH,2BAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,uCAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;IACnH,2BAAY,CAAC,yBAAyB,CAAC,wBAAwB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,+CAAsB,CAAC,EAAE,CAAC,CAAC,CAAA;IAC3H,2BAAY,CAAC,yBAAyB,CAAC,oBAAoB,EAAE,CAAC,EAAqB,EAAE,EAAE,CAAC,IAAI,uCAAkB,CAAC,EAAE,CAAC,CAAC,CAAA;AACvH,CAAC;AAPD,sDAOC","file":"index.js","sourcesContent":["import { DeleteQueryBuilder  } from \"./DeleteQueryBuilder\"\nimport { InsertQueryBuilder } from \"./InsertQueryBuilder\"\nimport { QueryBuilder } from \"./QueryBuilder\"\nimport { RelationQueryBuilder } from \"./RelationQueryBuilder\"\nimport { SelectQueryBuilder } from \".//SelectQueryBuilder\"\nimport { SoftDeleteQueryBuilder } from \"./SoftDeleteQueryBuilder\"\nimport { UpdateQueryBuilder } from \"./UpdateQueryBuilder\"\n\nexport function registerQueryBuilders () {\n    QueryBuilder.registerQueryBuilderClass('DeleteQueryBuilder', (qb: QueryBuilder<any>) => new DeleteQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('InsertQueryBuilder', (qb: QueryBuilder<any>) => new InsertQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('RelationQueryBuilder', (qb: QueryBuilder<any>) => new RelationQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('SelectQueryBuilder', (qb: QueryBuilder<any>) => new SelectQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('SoftDeleteQueryBuilder', (qb: QueryBuilder<any>) => new SoftDeleteQueryBuilder(qb))\n    QueryBuilder.registerQueryBuilderClass('UpdateQueryBuilder', (qb: QueryBuilder<any>) => new UpdateQueryBuilder(qb))\n}"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/query-builder/relation-count/RelationCountAttribute.d.ts b/node_modules/typeorm/query-builder/relation-count/RelationCountAttribute.d.ts
index bfd274c..3a99e9d 100644
--- a/node_modules/typeorm/query-builder/relation-count/RelationCountAttribute.d.ts
+++ b/node_modules/typeorm/query-builder/relation-count/RelationCountAttribute.d.ts
@@ -1,7 +1,7 @@
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { RelationMetadata } from "../../metadata/RelationMetadata";
-import { QueryExpressionMap } from "../QueryExpressionMap";
-import { SelectQueryBuilder } from "../SelectQueryBuilder";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { QueryExpressionMap } from "typeorm/query-builder/QueryExpressionMap";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 export declare class RelationCountAttribute {
     private expressionMap;
     /**
diff --git a/node_modules/typeorm/query-builder/relation-id/RelationIdAttribute.d.ts b/node_modules/typeorm/query-builder/relation-id/RelationIdAttribute.d.ts
index 9ca47bd..80ba63a 100644
--- a/node_modules/typeorm/query-builder/relation-id/RelationIdAttribute.d.ts
+++ b/node_modules/typeorm/query-builder/relation-id/RelationIdAttribute.d.ts
@@ -1,7 +1,7 @@
-import { RelationMetadata } from "../../metadata/RelationMetadata";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { QueryExpressionMap } from "../QueryExpressionMap";
-import { SelectQueryBuilder } from "../SelectQueryBuilder";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { QueryExpressionMap } from "typeorm/query-builder/QueryExpressionMap";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Stores all join relation id attributes which will be used to build a JOIN query.
  */
diff --git a/node_modules/typeorm/query-builder/result/DeleteResult.d.ts b/node_modules/typeorm/query-builder/result/DeleteResult.d.ts
index 9c98830..663441d 100644
--- a/node_modules/typeorm/query-builder/result/DeleteResult.d.ts
+++ b/node_modules/typeorm/query-builder/result/DeleteResult.d.ts
@@ -1,4 +1,4 @@
-import { QueryResult } from "../../query-runner/QueryResult";
+import { QueryResult } from "typeorm/query-runner/QueryResult";
 /**
  * Result object returned by DeleteQueryBuilder execution.
  */
diff --git a/node_modules/typeorm/query-builder/result/InsertResult.d.ts b/node_modules/typeorm/query-builder/result/InsertResult.d.ts
index e52d72f..6104e9c 100644
--- a/node_modules/typeorm/query-builder/result/InsertResult.d.ts
+++ b/node_modules/typeorm/query-builder/result/InsertResult.d.ts
@@ -1,5 +1,5 @@
-import { ObjectLiteral } from "../../common/ObjectLiteral";
-import { QueryResult } from "../../query-runner/QueryResult";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { QueryResult } from "typeorm/query-runner/QueryResult";
 /**
  * Result object returned by InsertQueryBuilder execution.
  */
diff --git a/node_modules/typeorm/query-builder/result/UpdateResult.d.ts b/node_modules/typeorm/query-builder/result/UpdateResult.d.ts
index a9c6844..d772e3c 100644
--- a/node_modules/typeorm/query-builder/result/UpdateResult.d.ts
+++ b/node_modules/typeorm/query-builder/result/UpdateResult.d.ts
@@ -1,5 +1,5 @@
-import { ObjectLiteral } from "../../common/ObjectLiteral";
-import { QueryResult } from "../../query-runner/QueryResult";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { QueryResult } from "typeorm/query-runner/QueryResult";
 /**
  * Result object returned by UpdateQueryBuilder execution.
  */
diff --git a/node_modules/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts b/node_modules/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts
index d695803..4aabcf8 100644
--- a/node_modules/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts
+++ b/node_modules/typeorm/query-builder/transformer/PlainObjectToNewEntityTransformer.d.ts
@@ -1,5 +1,5 @@
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * Transforms plain old javascript object
  * Entity is constructed based on its entity metadata.
diff --git a/node_modules/typeorm/query-runner/QueryRunner.d.ts b/node_modules/typeorm/query-runner/QueryRunner.d.ts
index b5f269f..303e28b 100644
--- a/node_modules/typeorm/query-runner/QueryRunner.d.ts
+++ b/node_modules/typeorm/query-runner/QueryRunner.d.ts
@@ -1,21 +1,21 @@
 
-import { TableColumn } from "../schema-builder/table/TableColumn";
-import { Table } from "../schema-builder/table/Table";
-import { TableForeignKey } from "../schema-builder/table/TableForeignKey";
-import { TableIndex } from "../schema-builder/table/TableIndex";
-import { DataSource } from "../data-source/DataSource";
-import { ReadStream } from "../platform/PlatformTools";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { SqlInMemory } from "../driver/SqlInMemory";
-import { TableUnique } from "../schema-builder/table/TableUnique";
-import { View } from "../schema-builder/view/View";
-import { Broadcaster } from "../subscriber/Broadcaster";
-import { TableCheck } from "../schema-builder/table/TableCheck";
-import { IsolationLevel } from "../driver/types/IsolationLevel";
-import { TableExclusion } from "../schema-builder/table/TableExclusion";
-import { QueryResult } from "./QueryResult";
-import { ReplicationMode } from "../driver/types/ReplicationMode";
+import { TableColumn } from "typeorm/schema-builder/table/TableColumn";
+import { Table } from "typeorm/schema-builder/table/Table";
+import { TableForeignKey } from "typeorm/schema-builder/table/TableForeignKey";
+import { TableIndex } from "typeorm/schema-builder/table/TableIndex";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { ReadStream } from "typeorm/platform/PlatformTools";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { SqlInMemory } from "typeorm/driver/SqlInMemory";
+import { TableUnique } from "typeorm/schema-builder/table/TableUnique";
+import { View } from "typeorm/schema-builder/view/View";
+import { Broadcaster } from "typeorm/subscriber/Broadcaster";
+import { TableCheck } from "typeorm/schema-builder/table/TableCheck";
+import { IsolationLevel } from "typeorm/driver/types/IsolationLevel";
+import { TableExclusion } from "typeorm/schema-builder/table/TableExclusion";
+import { QueryResult } from "typeorm/query-runner/QueryResult";
+import { ReplicationMode } from "typeorm/driver/types/ReplicationMode";
 /**
  * Runs queries on a single database connection.
  */
diff --git a/node_modules/typeorm/repository/AbstractRepository.d.ts b/node_modules/typeorm/repository/AbstractRepository.d.ts
index 49b57c0..13f9c1d 100644
--- a/node_modules/typeorm/repository/AbstractRepository.d.ts
+++ b/node_modules/typeorm/repository/AbstractRepository.d.ts
@@ -1,9 +1,9 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { Repository } from "./Repository";
-import { TreeRepository } from "./TreeRepository";
-import { ObjectType } from "../common/ObjectType";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { Repository } from "typeorm/repository/Repository";
+import { TreeRepository } from "typeorm/repository/TreeRepository";
+import { ObjectType } from "typeorm/common/ObjectType";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
 /**
  * Provides abstract class for custom repositories that do not inherit from original orm Repository.
  * Contains all most-necessary methods to simplify code in the custom repository.
diff --git a/node_modules/typeorm/repository/BaseEntity.d.ts b/node_modules/typeorm/repository/BaseEntity.d.ts
index 6825e57..17910c2 100644
--- a/node_modules/typeorm/repository/BaseEntity.d.ts
+++ b/node_modules/typeorm/repository/BaseEntity.d.ts
@@ -1,20 +1,20 @@
-import { Repository } from "./Repository";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { DeepPartial } from "../common/DeepPartial";
-import { SaveOptions } from "./SaveOptions";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { RemoveOptions } from "./RemoveOptions";
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { DataSource } from "../data-source";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { ObjectId } from "../driver/mongodb/typings";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { UpsertOptions } from "./UpsertOptions";
-import { EntityTarget } from "../common/EntityTarget";
-import { PickKeysByType } from "../common/PickKeysByType";
+import { Repository } from "typeorm/repository/Repository";
+import { FindOptionsWhere } from "typeorm/find-options/FindOptionsWhere";
+import { DeepPartial } from "typeorm/common/DeepPartial";
+import { SaveOptions } from "typeorm/repository/SaveOptions";
+import { FindOneOptions } from "typeorm/find-options/FindOneOptions";
+import { RemoveOptions } from "typeorm/repository/RemoveOptions";
+import { FindManyOptions } from "typeorm/find-options/FindManyOptions";
+import { DataSource } from "typeorm/data-source";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { InsertResult } from "typeorm/query-builder/result/InsertResult";
+import { UpdateResult } from "typeorm/query-builder/result/UpdateResult";
+import { DeleteResult } from "typeorm/query-builder/result/DeleteResult";
+import { ObjectId } from "typeorm/driver/mongodb/typings";
+import { QueryDeepPartialEntity } from "typeorm/query-builder/QueryPartialEntity";
+import { UpsertOptions } from "typeorm/repository/UpsertOptions";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { PickKeysByType } from "typeorm/common/PickKeysByType";
 /**
  * Base abstract entity for all entities, used in ActiveRecord patterns.
  */
diff --git a/node_modules/typeorm/repository/MongoRepository.d.ts b/node_modules/typeorm/repository/MongoRepository.d.ts
index 6cb8b58..df30d9c 100644
--- a/node_modules/typeorm/repository/MongoRepository.d.ts
+++ b/node_modules/typeorm/repository/MongoRepository.d.ts
@@ -1,13 +1,13 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { Repository } from "./Repository";
-import { MongoFindManyOptions } from "../find-options/mongodb/MongoFindManyOptions";
-import { MongoEntityManager } from "../entity-manager/MongoEntityManager";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { MongoFindOneOptions } from "../find-options/mongodb/MongoFindOneOptions";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { CreateIndexesOptions, ObjectId, ReplaceOptions, AggregateOptions, AggregationCursor, AnyBulkWriteOperation, BulkWriteOptions, BulkWriteResult, Collection, CollStats, CollStatsOptions, CommandOperationOptions, CountOptions, DeleteOptions, DeleteResult, Document, Filter, FilterOperators, FindCursor, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, IndexDescription, InsertManyResult, InsertOneOptions, InsertOneResult, ListIndexesCursor, ListIndexesOptions, OrderedBulkOperation, UnorderedBulkOperation, UpdateFilter, UpdateOptions, UpdateResult } from "../driver/mongodb/typings";
-import { FindManyOptions } from "../find-options/FindManyOptions";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { Repository } from "typeorm/repository/Repository";
+import { MongoFindManyOptions } from "typeorm/find-options/mongodb/MongoFindManyOptions";
+import { MongoEntityManager } from "typeorm/entity-manager/MongoEntityManager";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { MongoFindOneOptions } from "typeorm/find-options/mongodb/MongoFindOneOptions";
+import { FindOneOptions } from "typeorm/find-options/FindOneOptions";
+import { CreateIndexesOptions, ObjectId, ReplaceOptions, AggregateOptions, AggregationCursor, AnyBulkWriteOperation, BulkWriteOptions, BulkWriteResult, Collection, CollStats, CollStatsOptions, CommandOperationOptions, CountOptions, DeleteOptions, DeleteResult, Document, Filter, FilterOperators, FindCursor, FindOneAndDeleteOptions, FindOneAndReplaceOptions, FindOneAndUpdateOptions, IndexDescription, InsertManyResult, InsertOneOptions, InsertOneResult, ListIndexesCursor, ListIndexesOptions, OrderedBulkOperation, UnorderedBulkOperation, UpdateFilter, UpdateOptions, UpdateResult, CountDocumentsOptions } from "typeorm/driver/mongodb/typings";
+import { FindManyOptions } from "typeorm/find-options/FindManyOptions";
 /**
  * Repository used to manage mongodb documents of a single entity type.
  */
@@ -111,6 +111,10 @@ export declare class MongoRepository<Entity extends ObjectLiteral> extends Repos
      * Count number of matching documents in the db to a query.
      */
     count(query?: ObjectLiteral, options?: CountOptions): Promise<number>;
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments(query?: ObjectLiteral, options?: CountDocumentsOptions): Promise<number>;
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/repository/MongoRepository.js b/node_modules/typeorm/repository/MongoRepository.js
index 0693674..9e90bb2 100644
--- a/node_modules/typeorm/repository/MongoRepository.js
+++ b/node_modules/typeorm/repository/MongoRepository.js
@@ -141,6 +141,12 @@ class MongoRepository extends Repository_1.Repository {
     count(query, options) {
         return this.manager.count(this.metadata.target, query || {}, options);
     }
+    /**
+     * Count number of matching documents in the db to a query.
+     */
+    countDocuments(query, options) {
+        return this.manager.countDocuments(this.metadata.target, query || {}, options);
+    }
     /**
      * Count number of matching documents in the db to a query.
      */
diff --git a/node_modules/typeorm/repository/MongoRepository.js.map b/node_modules/typeorm/repository/MongoRepository.js.map
index b093daa..3086cc2 100644
--- a/node_modules/typeorm/repository/MongoRepository.js.map
+++ b/node_modules/typeorm/repository/MongoRepository.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/repository/MongoRepository.ts"],"names":[],"mappings":"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","file":"MongoRepository.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { Repository } from \"./Repository\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TypeORMError } from \"../error/TypeORMError\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\n\nimport {\n    CreateIndexesOptions,\n    ObjectId,\n    ReplaceOptions,\n    //\n    AggregateOptions,\n    AggregationCursor,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    BulkWriteResult,\n    Collection,\n    CollStats,\n    CollStatsOptions,\n    CommandOperationOptions,\n    CountOptions,\n    DeleteOptions,\n    DeleteResult,\n    Document,\n    Filter,\n    FilterOperators,\n    FindCursor,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    FindOneAndUpdateOptions,\n    IndexDescription,\n    InsertManyResult,\n    InsertOneOptions,\n    InsertOneResult,\n    ListIndexesCursor,\n    ListIndexesOptions,\n    OrderedBulkOperation,\n    UnorderedBulkOperation,\n    UpdateFilter,\n    UpdateOptions,\n    UpdateResult,\n} from \"../driver/mongodb/typings\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\n\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nexport class MongoRepository<\n    Entity extends ObjectLiteral,\n> extends Repository<Entity> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: MongoEntityManager\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n    }\n\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    createQueryBuilder(\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(\n        options?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    findBy(where: any): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(where: any): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    findByIds(ids: any[], options?: any): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, options)\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne(\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy(where: any): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(where: any): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<T = any>(query?: Filter<Entity>): FindCursor<T> {\n        return this.manager.createCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor(query?: Filter<Entity>): FindCursor<Entity> {\n        return this.manager.createEntityCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<R = any>(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregate<R>(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregateEntity(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite(\n        operations: AnyBulkWriteOperation[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        return this.manager.bulkWrite(this.metadata.target, operations, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.count(this.metadata.target, query || {}, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.countBy(this.metadata.target, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex(\n        fieldOrSpec: string | any,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        return this.manager.createCollectionIndex(\n            this.metadata.target,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes(indexSpecs: IndexDescription[]): Promise<string[]> {\n        return this.manager.createCollectionIndexes(\n            this.metadata.target,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteMany(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteOne(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct(\n        key: string,\n        query: ObjectLiteral,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.distinct(\n            this.metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex(\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.dropCollectionIndex(\n            this.metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes(): Promise<any> {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete(\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndDelete(\n            this.metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace(\n        query: ObjectLiteral,\n        replacement: Object,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndReplace(\n            this.metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate(\n        query: ObjectLiteral,\n        update: Object,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndUpdate(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes(): Promise<any> {\n        return this.manager.collectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists(indexes: string | string[]): Promise<boolean> {\n        return this.manager.collectionIndexExists(\n            this.metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n        return this.manager.collectionIndexInformation(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n        return this.manager.initializeOrderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        return this.manager.initializeUnorderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany(\n        docs: ObjectLiteral[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult<Document>> {\n        return this.manager.insertMany(this.metadata.tableName, docs, options)\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne(\n        doc: ObjectLiteral,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        return this.manager.insertOne(this.metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped(): Promise<any> {\n        return this.manager.isCapped(this.metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n        return this.manager.listCollectionIndexes(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename(\n        newName: string,\n        options?: { dropTarget?: boolean },\n    ): Promise<Collection<Document>> {\n        return this.manager.rename(this.metadata.tableName, newName, options)\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne(\n        query: ObjectLiteral,\n        doc: ObjectLiteral,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.replaceOne(\n            this.metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats(options?: CollStatsOptions): Promise<CollStats> {\n        return this.manager.stats(this.metadata.tableName, options)\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateMany(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateOne(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/repository/MongoRepository.ts"],"names":[],"mappings":"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","file":"MongoRepository.js","sourcesContent":["import { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { Repository } from \"./Repository\"\nimport { MongoFindManyOptions } from \"../find-options/mongodb/MongoFindManyOptions\"\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { TypeORMError } from \"../error/TypeORMError\"\nimport { MongoFindOneOptions } from \"../find-options/mongodb/MongoFindOneOptions\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\n\nimport {\n    CreateIndexesOptions,\n    ObjectId,\n    ReplaceOptions,\n    //\n    AggregateOptions,\n    AggregationCursor,\n    AnyBulkWriteOperation,\n    BulkWriteOptions,\n    BulkWriteResult,\n    Collection,\n    CollStats,\n    CollStatsOptions,\n    CommandOperationOptions,\n    CountOptions,\n    DeleteOptions,\n    DeleteResult,\n    Document,\n    Filter,\n    FilterOperators,\n    FindCursor,\n    FindOneAndDeleteOptions,\n    FindOneAndReplaceOptions,\n    FindOneAndUpdateOptions,\n    IndexDescription,\n    InsertManyResult,\n    InsertOneOptions,\n    InsertOneResult,\n    ListIndexesCursor,\n    ListIndexesOptions,\n    OrderedBulkOperation,\n    UnorderedBulkOperation,\n    UpdateFilter,\n    UpdateOptions,\n    UpdateResult,\n    CountDocumentsOptions,\n} from \"../driver/mongodb/typings\"\nimport { FindManyOptions } from \"../find-options/FindManyOptions\"\n\n/**\n * Repository used to manage mongodb documents of a single entity type.\n */\nexport class MongoRepository<\n    Entity extends ObjectLiteral,\n> extends Repository<Entity> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: MongoEntityManager\n\n    // -------------------------------------------------------------------------\n    // Overridden Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Raw SQL query execution is not supported by MongoDB.\n     * Calling this method will return an error.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        throw new TypeORMError(`Queries aren't supported by MongoDB.`)\n    }\n\n    /**\n     * Using Query Builder with MongoDB is not supported yet.\n     * Calling this method will return an error.\n     */\n    createQueryBuilder(\n        alias: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        throw new TypeORMError(`Query Builder is not supported by MongoDB.`)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(\n        options?:\n            | FindManyOptions<Entity>\n            | Partial<Entity>\n            | FilterOperators<Entity>,\n    ): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    findBy(where: any): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: MongoFindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(where: any): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    findByIds(ids: any[], options?: any): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids, options)\n    }\n\n    /**\n     * Finds first entity that matches given find options.\n     */\n    async findOne(\n        options: MongoFindOneOptions<Entity>,\n    ): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given WHERE conditions.\n     */\n    async findOneBy(where: any): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entity that matches given id.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: string | number | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(where: any): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     */\n    createCursor<T = any>(query?: Filter<Entity>): FindCursor<T> {\n        return this.manager.createCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Creates a cursor for a query that can be used to iterate over results from MongoDB.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    createEntityCursor(query?: Filter<Entity>): FindCursor<Entity> {\n        return this.manager.createEntityCursor(this.metadata.target, query)\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     */\n    aggregate<R = any>(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregate<R>(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n\n    /**\n     * Execute an aggregation framework pipeline against the collection.\n     * This returns modified version of cursor that transforms each result into Entity model.\n     */\n    aggregateEntity(\n        pipeline: ObjectLiteral[],\n        options?: AggregateOptions,\n    ): AggregationCursor<Entity> {\n        return this.manager.aggregateEntity(\n            this.metadata.target,\n            pipeline,\n            options,\n        )\n    }\n    /**\n     * Perform a bulkWrite operation without a fluent API.\n     */\n    bulkWrite(\n        operations: AnyBulkWriteOperation[],\n        options?: BulkWriteOptions,\n    ): Promise<BulkWriteResult> {\n        return this.manager.bulkWrite(this.metadata.target, operations, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    count(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.count(this.metadata.target, query || {}, options)\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countDocuments(\n        query?: ObjectLiteral,\n        options?: CountDocumentsOptions,\n    ): Promise<number> {\n        return this.manager.countDocuments(\n            this.metadata.target,\n            query || {},\n            options,\n        )\n    }\n\n    /**\n     * Count number of matching documents in the db to a query.\n     */\n    countBy(query?: ObjectLiteral, options?: CountOptions): Promise<number> {\n        return this.manager.countBy(this.metadata.target, query, options)\n    }\n\n    /**\n     * Creates an index on the db and collection.\n     */\n    createCollectionIndex(\n        fieldOrSpec: string | any,\n        options?: CreateIndexesOptions,\n    ): Promise<string> {\n        return this.manager.createCollectionIndex(\n            this.metadata.target,\n            fieldOrSpec,\n            options,\n        )\n    }\n\n    /**\n     * Creates multiple indexes in the collection, this method is only supported for MongoDB 2.6 or higher.\n     * Earlier version of MongoDB will throw a command not supported error.\n     * Index specifications are defined at http://docs.mongodb.org/manual/reference/command/createIndexes/.\n     */\n    createCollectionIndexes(indexSpecs: IndexDescription[]): Promise<string[]> {\n        return this.manager.createCollectionIndexes(\n            this.metadata.target,\n            indexSpecs,\n        )\n    }\n\n    /**\n     * Delete multiple documents on MongoDB.\n     */\n    deleteMany(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteMany(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * Delete a document on MongoDB.\n     */\n    deleteOne(\n        query: ObjectLiteral,\n        options?: DeleteOptions,\n    ): Promise<DeleteResult> {\n        return this.manager.deleteOne(this.metadata.tableName, query, options)\n    }\n\n    /**\n     * The distinct command returns returns a list of distinct values for the given key across a collection.\n     */\n    distinct(\n        key: string,\n        query: ObjectLiteral,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.distinct(\n            this.metadata.tableName,\n            key,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Drops an index from this collection.\n     */\n    dropCollectionIndex(\n        indexName: string,\n        options?: CommandOperationOptions,\n    ): Promise<any> {\n        return this.manager.dropCollectionIndex(\n            this.metadata.tableName,\n            indexName,\n            options,\n        )\n    }\n\n    /**\n     * Drops all indexes from the collection.\n     */\n    dropCollectionIndexes(): Promise<any> {\n        return this.manager.dropCollectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Find a document and delete it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndDelete(\n        query: ObjectLiteral,\n        options?: FindOneAndDeleteOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndDelete(\n            this.metadata.tableName,\n            query,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and replace it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndReplace(\n        query: ObjectLiteral,\n        replacement: Object,\n        options?: FindOneAndReplaceOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndReplace(\n            this.metadata.tableName,\n            query,\n            replacement,\n            options,\n        )\n    }\n\n    /**\n     * Find a document and update it in one atomic operation, requires a write lock for the duration of the operation.\n     */\n    findOneAndUpdate(\n        query: ObjectLiteral,\n        update: Object,\n        options?: FindOneAndUpdateOptions,\n    ): Promise<Document> {\n        return this.manager.findOneAndUpdate(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexes(): Promise<any> {\n        return this.manager.collectionIndexes(this.metadata.tableName)\n    }\n\n    /**\n     * Retrieve all the indexes on the collection.\n     */\n    collectionIndexExists(indexes: string | string[]): Promise<boolean> {\n        return this.manager.collectionIndexExists(\n            this.metadata.tableName,\n            indexes,\n        )\n    }\n\n    /**\n     * Retrieves this collections index info.\n     */\n    collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n        return this.manager.collectionIndexInformation(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate an In order bulk write operation, operations will be serially executed in the order they are added, creating a new operation for each switch in types.\n     */\n    initializeOrderedBulkOp(options?: BulkWriteOptions): OrderedBulkOperation {\n        return this.manager.initializeOrderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Initiate a Out of order batch write operation. All operations will be buffered into insert/update/remove commands executed out of order.\n     */\n    initializeUnorderedBulkOp(\n        options?: BulkWriteOptions,\n    ): UnorderedBulkOperation {\n        return this.manager.initializeUnorderedBulkOp(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Inserts an array of documents into MongoDB.\n     */\n    insertMany(\n        docs: ObjectLiteral[],\n        options?: BulkWriteOptions,\n    ): Promise<InsertManyResult<Document>> {\n        return this.manager.insertMany(this.metadata.tableName, docs, options)\n    }\n\n    /**\n     * Inserts a single document into MongoDB.\n     */\n    insertOne(\n        doc: ObjectLiteral,\n        options?: InsertOneOptions,\n    ): Promise<InsertOneResult> {\n        return this.manager.insertOne(this.metadata.tableName, doc, options)\n    }\n\n    /**\n     * Returns if the collection is a capped collection.\n     */\n    isCapped(): Promise<any> {\n        return this.manager.isCapped(this.metadata.tableName)\n    }\n\n    /**\n     * Get the list of all indexes information for the collection.\n     */\n    listCollectionIndexes(options?: ListIndexesOptions): ListIndexesCursor {\n        return this.manager.listCollectionIndexes(\n            this.metadata.tableName,\n            options,\n        )\n    }\n\n    /**\n     * Reindex all indexes on the collection Warning: reIndex is a blocking operation (indexes are rebuilt in the foreground) and will be slow for large collections.\n     */\n    rename(\n        newName: string,\n        options?: { dropTarget?: boolean },\n    ): Promise<Collection<Document>> {\n        return this.manager.rename(this.metadata.tableName, newName, options)\n    }\n\n    /**\n     * Replace a document on MongoDB.\n     */\n    replaceOne(\n        query: ObjectLiteral,\n        doc: ObjectLiteral,\n        options?: ReplaceOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.replaceOne(\n            this.metadata.tableName,\n            query,\n            doc,\n            options,\n        )\n    }\n\n    /**\n     * Get all the collection statistics.\n     */\n    stats(options?: CollStatsOptions): Promise<CollStats> {\n        return this.manager.stats(this.metadata.tableName, options)\n    }\n\n    /**\n     * Update multiple documents on MongoDB.\n     */\n    updateMany(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateMany(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n\n    /**\n     * Update a single document on MongoDB.\n     */\n    updateOne(\n        query: ObjectLiteral,\n        update: UpdateFilter<Document>,\n        options?: UpdateOptions,\n    ): Promise<Document | UpdateResult> {\n        return this.manager.updateOne(\n            this.metadata.tableName,\n            query,\n            update,\n            options,\n        )\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/repository/Repository.d.ts b/node_modules/typeorm/repository/Repository.d.ts
index 16cd4b1..3a356e3 100644
--- a/node_modules/typeorm/repository/Repository.d.ts
+++ b/node_modules/typeorm/repository/Repository.d.ts
@@ -1,21 +1,21 @@
-import { FindManyOptions } from "../find-options/FindManyOptions";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { FindOneOptions } from "../find-options/FindOneOptions";
-import { DeepPartial } from "../common/DeepPartial";
-import { SaveOptions } from "./SaveOptions";
-import { RemoveOptions } from "./RemoveOptions";
-import { EntityManager } from "../entity-manager/EntityManager";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { DeleteResult } from "../query-builder/result/DeleteResult";
-import { UpdateResult } from "../query-builder/result/UpdateResult";
-import { InsertResult } from "../query-builder/result/InsertResult";
-import { QueryDeepPartialEntity } from "../query-builder/QueryPartialEntity";
-import { ObjectId } from "../driver/mongodb/typings";
-import { FindOptionsWhere } from "../find-options/FindOptionsWhere";
-import { UpsertOptions } from "./UpsertOptions";
-import { EntityTarget } from "../common/EntityTarget";
-import { PickKeysByType } from "../common/PickKeysByType";
+import { FindManyOptions } from "typeorm/find-options/FindManyOptions";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { FindOneOptions } from "typeorm/find-options/FindOneOptions";
+import { DeepPartial } from "typeorm/common/DeepPartial";
+import { SaveOptions } from "typeorm/repository/SaveOptions";
+import { RemoveOptions } from "typeorm/repository/RemoveOptions";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { DeleteResult } from "typeorm/query-builder/result/DeleteResult";
+import { UpdateResult } from "typeorm/query-builder/result/UpdateResult";
+import { InsertResult } from "typeorm/query-builder/result/InsertResult";
+import { QueryDeepPartialEntity } from "typeorm/query-builder/QueryPartialEntity";
+import { ObjectId } from "typeorm/driver/mongodb/typings";
+import { FindOptionsWhere } from "typeorm/find-options/FindOptionsWhere";
+import { UpsertOptions } from "typeorm/repository/UpsertOptions";
+import { EntityTarget } from "typeorm/common/EntityTarget";
+import { PickKeysByType } from "typeorm/common/PickKeysByType";
 /**
  * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.
  */
@@ -37,7 +37,7 @@ export declare class Repository<Entity extends ObjectLiteral> {
     /**
      * Entity metadata of the entity current repository manages.
      */
-    get metadata(): import("..").EntityMetadata;
+    get metadata(): import("typeorm").EntityMetadata;
     constructor(target: EntityTarget<Entity>, manager: EntityManager, queryRunner?: QueryRunner);
     /**
      * Creates a new query builder that can be used to build a SQL query.
@@ -308,5 +308,5 @@ export declare class Repository<Entity extends ObjectLiteral> {
     /**
      * Extends repository with provided functions.
      */
-    extend<CustomRepository>(custom: CustomRepository & ThisType<this & CustomRepository>): this & CustomRepository;
+    extend<CustomRepository>(customs: CustomRepository & ThisType<this & CustomRepository>): this & CustomRepository;
 }
diff --git a/node_modules/typeorm/repository/Repository.js b/node_modules/typeorm/repository/Repository.js
index f8b478f..25c2147 100644
--- a/node_modules/typeorm/repository/Repository.js
+++ b/node_modules/typeorm/repository/Repository.js
@@ -303,17 +303,21 @@ class Repository {
     /**
      * Extends repository with provided functions.
      */
-    extend(custom) {
+    extend(customs) {
         // return {
         //     ...this,
         //     ...custom
         // };
         const thisRepo = this.constructor;
         const { target, manager, queryRunner } = this;
-        const cls = new (class extends thisRepo {
-        })(target, manager, queryRunner);
-        Object.assign(cls, custom);
-        return cls;
+        const ChildClass = class extends thisRepo {
+            constructor(target, manager, queryRunner) {
+                super(target, manager, queryRunner);
+            }
+        };
+        for (const custom in customs)
+            ChildClass.prototype[custom] = customs[custom];
+        return new ChildClass(target, manager, queryRunner);
     }
 }
 exports.Repository = Repository;
diff --git a/node_modules/typeorm/repository/Repository.js.map b/node_modules/typeorm/repository/Repository.js.map
index fd77d29..f72d331 100644
--- a/node_modules/typeorm/repository/Repository.js.map
+++ b/node_modules/typeorm/repository/Repository.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity target that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    readonly target: EntityTarget<Entity>\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    get metadata() {\n        return this.manager.connection.getMetadata(this.target)\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        target: EntityTarget<Entity>,\n        manager: EntityManager,\n        queryRunner?: QueryRunner,\n    ) {\n        this.target = target\n        this.manager = manager\n        this.queryRunner = queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(\n            this.metadata.target as any,\n            alias || this.metadata.targetName,\n            queryRunner || this.queryRunner,\n        )\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity\n\n    /**\n     * Creates new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(\n        plainEntityLikeOrPlainEntityLikes?:\n            | DeepPartial<Entity>\n            | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        return this.manager.create<any>(\n            this.metadata.target as any,\n            plainEntityLikeOrPlainEntityLikes as any,\n        )\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        return this.manager.merge(\n            this.metadata.target as any,\n            mergeIntoEntity,\n            ...entityLikes,\n        )\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.save<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(\n        entityOrEntities: Entity | Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        return this.manager.remove(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.softRemove<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.recover<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.update(\n            this.metadata.target as any,\n            criteria as any,\n            partialEntity,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    upsert(\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        return this.manager.upsert(\n            this.metadata.target as any,\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target as any, criteria as any)\n    }\n\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.softDelete(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.restore(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Checks whether any entity exists that match given options.\n     */\n    exist(options?: FindManyOptions<Entity>): Promise<boolean> {\n        return this.manager.exists(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        return this.manager.countBy(this.metadata.target, where)\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.sum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.average(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.minimum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.maximum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find(options?: FindManyOptions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds(ids: any[]): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne(options: FindOneOptions<Entity>): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target)\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.increment(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.decrement(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Extends repository with provided functions.\n     */\n    extend<CustomRepository>(\n        custom: CustomRepository & ThisType<this & CustomRepository>,\n    ): this & CustomRepository {\n        // return {\n        //     ...this,\n        //     ...custom\n        // };\n        const thisRepo = this.constructor as new (...args: any[]) => typeof this\n        const { target, manager, queryRunner } = this\n        const cls = new (class extends thisRepo {})(\n            target,\n            manager,\n            queryRunner,\n        )\n        Object.assign(cls, custom)\n        return cls as any\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
+{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"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","file":"Repository.js","sourcesContent":["import { FindManyOptions } from \"../find-options/FindManyOptions\"\nimport { ObjectLiteral } from \"../common/ObjectLiteral\"\nimport { FindOneOptions } from \"../find-options/FindOneOptions\"\nimport { DeepPartial } from \"../common/DeepPartial\"\nimport { SaveOptions } from \"./SaveOptions\"\nimport { RemoveOptions } from \"./RemoveOptions\"\nimport { EntityManager } from \"../entity-manager/EntityManager\"\nimport { QueryRunner } from \"../query-runner/QueryRunner\"\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\"\nimport { DeleteResult } from \"../query-builder/result/DeleteResult\"\nimport { UpdateResult } from \"../query-builder/result/UpdateResult\"\nimport { InsertResult } from \"../query-builder/result/InsertResult\"\nimport { QueryDeepPartialEntity } from \"../query-builder/QueryPartialEntity\"\nimport { ObjectId } from \"../driver/mongodb/typings\"\nimport { FindOptionsWhere } from \"../find-options/FindOptionsWhere\"\nimport { UpsertOptions } from \"./UpsertOptions\"\nimport { EntityTarget } from \"../common/EntityTarget\"\nimport { PickKeysByType } from \"../common/PickKeysByType\"\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity target that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    readonly target: EntityTarget<Entity>\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    get metadata() {\n        return this.manager.connection.getMetadata(this.target)\n    }\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        target: EntityTarget<Entity>,\n        manager: EntityManager,\n        queryRunner?: QueryRunner,\n    ) {\n        this.target = target\n        this.manager = manager\n        this.queryRunner = queryRunner\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a SQL query.\n     */\n    createQueryBuilder(\n        alias?: string,\n        queryRunner?: QueryRunner,\n    ): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(\n            this.metadata.target as any,\n            alias || this.metadata.targetName,\n            queryRunner || this.queryRunner,\n        )\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity)\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity)\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity\n\n    /**\n     * Creates new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[]\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(\n        plainEntityLikeOrPlainEntityLikes?:\n            | DeepPartial<Entity>\n            | DeepPartial<Entity>[],\n    ): Entity | Entity[] {\n        return this.manager.create<any>(\n            this.metadata.target as any,\n            plainEntityLikeOrPlainEntityLikes as any,\n        )\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(\n        mergeIntoEntity: Entity,\n        ...entityLikes: DeepPartial<Entity>[]\n    ): Entity {\n        return this.manager.merge(\n            this.metadata.target as any,\n            mergeIntoEntity,\n            ...entityLikes,\n        )\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike)\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.save<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(\n        entityOrEntities: Entity | Entity[],\n        options?: RemoveOptions,\n    ): Promise<Entity | Entity[]> {\n        return this.manager.remove(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.softRemove<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options: SaveOptions & { reload: false },\n    ): Promise<T[]>\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entities: T[],\n        options?: SaveOptions,\n    ): Promise<(T & Entity)[]>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options: SaveOptions & { reload: false },\n    ): Promise<T>\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entity: T,\n        options?: SaveOptions,\n    ): Promise<T & Entity>\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<T extends DeepPartial<Entity>>(\n        entityOrEntities: T | T[],\n        options?: SaveOptions,\n    ): Promise<T | T[]> {\n        return this.manager.recover<Entity, T>(\n            this.metadata.target as any,\n            entityOrEntities as any,\n            options,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(\n        entity:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n    ): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity)\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n        partialEntity: QueryDeepPartialEntity<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.update(\n            this.metadata.target as any,\n            criteria as any,\n            partialEntity,\n        )\n    }\n\n    /**\n     * Inserts a given entity into the database, unless a unique constraint conflicts then updates the entity\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT ... ON CONFLICT DO UPDATE/ON DUPLICATE KEY UPDATE query.\n     */\n    upsert(\n        entityOrEntities:\n            | QueryDeepPartialEntity<Entity>\n            | QueryDeepPartialEntity<Entity>[],\n        conflictPathsOrOptions: string[] | UpsertOptions<Entity>,\n    ): Promise<InsertResult> {\n        return this.manager.upsert(\n            this.metadata.target as any,\n            entityOrEntities,\n            conflictPathsOrOptions,\n        )\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target as any, criteria as any)\n    }\n\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.softDelete(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(\n        criteria:\n            | string\n            | string[]\n            | number\n            | number[]\n            | Date\n            | Date[]\n            | ObjectId\n            | ObjectId[]\n            | FindOptionsWhere<Entity>,\n    ): Promise<UpdateResult> {\n        return this.manager.restore(\n            this.metadata.target as any,\n            criteria as any,\n        )\n    }\n\n    /**\n     * Checks whether any entity exists that match given options.\n     */\n    exist(options?: FindManyOptions<Entity>): Promise<boolean> {\n        return this.manager.exists(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given options.\n     * Useful for pagination.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target, options)\n    }\n\n    /**\n     * Counts entities that match given conditions.\n     * Useful for pagination.\n     */\n    countBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number> {\n        return this.manager.countBy(this.metadata.target, where)\n    }\n\n    /**\n     * Return the SUM of a column\n     */\n    sum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.sum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the AVG of a column\n     */\n    average(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.average(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MIN of a column\n     */\n    minimum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.minimum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Return the MAX of a column\n     */\n    maximum(\n        columnName: PickKeysByType<Entity, number>,\n        where?: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<number | null> {\n        return this.manager.maximum(this.metadata.target, columnName, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async find(options?: FindManyOptions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     */\n    async findBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity[]> {\n        return this.manager.findBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(\n        options?: FindManyOptions<Entity>,\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCount(this.metadata.target, options)\n    }\n\n    /**\n     * Finds entities that match given WHERE conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCountBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<[Entity[], number]> {\n        return this.manager.findAndCountBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds entities with ids.\n     * Optionally find options or conditions can be applied.\n     *\n     * @deprecated use `findBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findBy({\n     *     id: In([1, 2, 3])\n     * })\n     */\n    async findByIds(ids: any[]): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target, ids)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - returns null.\n     */\n    async findOne(options: FindOneOptions<Entity>): Promise<Entity | null> {\n        return this.manager.findOne(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - returns null.\n     */\n    async findOneBy(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity | null> {\n        return this.manager.findOneBy(this.metadata.target, where)\n    }\n\n    /**\n     * Finds first entity that matches given id.\n     * If entity was not found in the database - returns null.\n     *\n     * @deprecated use `findOneBy` method instead in conjunction with `In` operator, for example:\n     *\n     * .findOneBy({\n     *     id: 1 // where \"id\" is your primary column name\n     * })\n     */\n    async findOneById(\n        id: number | string | Date | ObjectId,\n    ): Promise<Entity | null> {\n        return this.manager.findOneById(this.metadata.target, id)\n    }\n\n    /**\n     * Finds first entity by a given find options.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneOrFail(options: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target, options)\n    }\n\n    /**\n     * Finds first entity that matches given where condition.\n     * If entity was not found in the database - rejects with error.\n     */\n    async findOneByOrFail(\n        where: FindOptionsWhere<Entity> | FindOptionsWhere<Entity>[],\n    ): Promise<Entity> {\n        return this.manager.findOneByOrFail(this.metadata.target, where)\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters)\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target)\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.increment(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(\n        conditions: FindOptionsWhere<Entity>,\n        propertyPath: string,\n        value: number | string,\n    ): Promise<UpdateResult> {\n        return this.manager.decrement(\n            this.metadata.target,\n            conditions,\n            propertyPath,\n            value,\n        )\n    }\n\n    /**\n     * Extends repository with provided functions.\n     */\n    extend<CustomRepository>(\n        customs: CustomRepository & ThisType<this & CustomRepository>,\n    ): this & CustomRepository {\n        // return {\n        //     ...this,\n        //     ...custom\n        // };\n        const thisRepo: any = this.constructor\n        const { target, manager, queryRunner } = this\n        const ChildClass = class extends thisRepo {\n            constructor(\n                target: EntityTarget<Entity>,\n                manager: EntityManager,\n                queryRunner?: QueryRunner,\n            ) {\n                super(target, manager, queryRunner)\n            }\n        }\n        for (const custom in customs)\n            ChildClass.prototype[custom] = customs[custom]\n        return new ChildClass(target, manager, queryRunner) as any\n    }\n}\n"],"sourceRoot":".."}
\ No newline at end of file
diff --git a/node_modules/typeorm/repository/TreeRepository.d.ts b/node_modules/typeorm/repository/TreeRepository.d.ts
index 1564efe..2323ba3 100644
--- a/node_modules/typeorm/repository/TreeRepository.d.ts
+++ b/node_modules/typeorm/repository/TreeRepository.d.ts
@@ -1,7 +1,7 @@
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { FindTreeOptions } from "../find-options/FindTreeOptions";
-import { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import { Repository } from "./Repository";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { FindTreeOptions } from "typeorm/find-options/FindTreeOptions";
+import { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import { Repository } from "typeorm/repository/Repository";
 /**
  * Repository with additional functions to work with trees.
  *
diff --git a/node_modules/typeorm/repository/UpsertOptions.d.ts b/node_modules/typeorm/repository/UpsertOptions.d.ts
index 3cad660..fd16707 100644
--- a/node_modules/typeorm/repository/UpsertOptions.d.ts
+++ b/node_modules/typeorm/repository/UpsertOptions.d.ts
@@ -1,5 +1,5 @@
-import { InsertOrUpdateOptions } from "../query-builder/InsertOrUpdateOptions";
-import { UpsertType } from "../driver/types/UpsertType";
+import { InsertOrUpdateOptions } from "typeorm/query-builder/InsertOrUpdateOptions";
+import { UpsertType } from "typeorm/driver/types/UpsertType";
 /**
  * Special options passed to Repository#upsert
  */
diff --git a/node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.d.ts b/node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.d.ts
index e1b3d01..3abcb0a 100644
--- a/node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.d.ts
+++ b/node_modules/typeorm/schema-builder/RdbmsSchemaBuilder.d.ts
@@ -1,10 +1,10 @@
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { DataSource } from "../data-source/DataSource";
-import { SchemaBuilder } from "./SchemaBuilder";
-import { SqlInMemory } from "../driver/SqlInMemory";
-import { TableColumnOptions } from "./options/TableColumnOptions";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { SchemaBuilder } from "typeorm/schema-builder/SchemaBuilder";
+import { SqlInMemory } from "typeorm/driver/SqlInMemory";
+import { TableColumnOptions } from "typeorm/schema-builder/options/TableColumnOptions";
 /**
  * Creates complete tables schemas in the database based on the entity metadatas.
  *
diff --git a/node_modules/typeorm/schema-builder/SchemaBuilder.d.ts b/node_modules/typeorm/schema-builder/SchemaBuilder.d.ts
index d705d14..28ab80e 100644
--- a/node_modules/typeorm/schema-builder/SchemaBuilder.d.ts
+++ b/node_modules/typeorm/schema-builder/SchemaBuilder.d.ts
@@ -1,4 +1,4 @@
-import { SqlInMemory } from "../driver/SqlInMemory";
+import { SqlInMemory } from "typeorm/driver/SqlInMemory";
 /**
  * Creates complete tables schemas in the database based on the entity metadatas.
  */
diff --git a/node_modules/typeorm/schema-builder/options/TableOptions.d.ts b/node_modules/typeorm/schema-builder/options/TableOptions.d.ts
index e3b2354..6c3f096 100644
--- a/node_modules/typeorm/schema-builder/options/TableOptions.d.ts
+++ b/node_modules/typeorm/schema-builder/options/TableOptions.d.ts
@@ -1,9 +1,9 @@
-import { TableColumnOptions } from "./TableColumnOptions";
-import { TableIndexOptions } from "./TableIndexOptions";
-import { TableForeignKeyOptions } from "./TableForeignKeyOptions";
-import { TableUniqueOptions } from "./TableUniqueOptions";
-import { TableCheckOptions } from "./TableCheckOptions";
-import { TableExclusionOptions } from "./TableExclusionOptions";
+import { TableColumnOptions } from "typeorm/schema-builder/options/TableColumnOptions";
+import { TableIndexOptions } from "typeorm/schema-builder/options/TableIndexOptions";
+import { TableForeignKeyOptions } from "typeorm/schema-builder/options/TableForeignKeyOptions";
+import { TableUniqueOptions } from "typeorm/schema-builder/options/TableUniqueOptions";
+import { TableCheckOptions } from "typeorm/schema-builder/options/TableCheckOptions";
+import { TableExclusionOptions } from "typeorm/schema-builder/options/TableExclusionOptions";
 /**
  * Table options.
  */
diff --git a/node_modules/typeorm/schema-builder/options/ViewOptions.d.ts b/node_modules/typeorm/schema-builder/options/ViewOptions.d.ts
index 6349c30..4b089c7 100644
--- a/node_modules/typeorm/schema-builder/options/ViewOptions.d.ts
+++ b/node_modules/typeorm/schema-builder/options/ViewOptions.d.ts
@@ -1,4 +1,4 @@
-import { DataSource, SelectQueryBuilder } from "../..";
+import { DataSource, SelectQueryBuilder } from "typeorm";
 /**
  * View options.
  */
diff --git a/node_modules/typeorm/schema-builder/table/Table.d.ts b/node_modules/typeorm/schema-builder/table/Table.d.ts
index 0b38f0a..43f8723 100644
--- a/node_modules/typeorm/schema-builder/table/Table.d.ts
+++ b/node_modules/typeorm/schema-builder/table/Table.d.ts
@@ -1,12 +1,12 @@
-import { TableColumn } from "./TableColumn";
-import { TableIndex } from "./TableIndex";
-import { TableForeignKey } from "./TableForeignKey";
-import { Driver } from "../../driver/Driver";
-import { TableOptions } from "../options/TableOptions";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { TableUnique } from "./TableUnique";
-import { TableCheck } from "./TableCheck";
-import { TableExclusion } from "./TableExclusion";
+import { TableColumn } from "typeorm/schema-builder/table/TableColumn";
+import { TableIndex } from "typeorm/schema-builder/table/TableIndex";
+import { TableForeignKey } from "typeorm/schema-builder/table/TableForeignKey";
+import { Driver } from "typeorm/driver/Driver";
+import { TableOptions } from "typeorm/schema-builder/options/TableOptions";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { TableUnique } from "typeorm/schema-builder/table/TableUnique";
+import { TableCheck } from "typeorm/schema-builder/table/TableCheck";
+import { TableExclusion } from "typeorm/schema-builder/table/TableExclusion";
 /**
  * Table in the database represented in this class.
  */
diff --git a/node_modules/typeorm/schema-builder/table/TableCheck.d.ts b/node_modules/typeorm/schema-builder/table/TableCheck.d.ts
index 14bb786..788fbfd 100644
--- a/node_modules/typeorm/schema-builder/table/TableCheck.d.ts
+++ b/node_modules/typeorm/schema-builder/table/TableCheck.d.ts
@@ -1,5 +1,5 @@
-import { TableCheckOptions } from "../options/TableCheckOptions";
-import { CheckMetadata } from "../../metadata/CheckMetadata";
+import { TableCheckOptions } from "typeorm/schema-builder/options/TableCheckOptions";
+import { CheckMetadata } from "typeorm/metadata/CheckMetadata";
 /**
  * Database's table check constraint stored in this class.
  */
diff --git a/node_modules/typeorm/schema-builder/table/TableColumn.d.ts b/node_modules/typeorm/schema-builder/table/TableColumn.d.ts
index 0eec9b3..c32f747 100644
--- a/node_modules/typeorm/schema-builder/table/TableColumn.d.ts
+++ b/node_modules/typeorm/schema-builder/table/TableColumn.d.ts
@@ -1,4 +1,4 @@
-import { TableColumnOptions } from "../options/TableColumnOptions";
+import { TableColumnOptions } from "typeorm/schema-builder/options/TableColumnOptions";
 /**
  * Table's columns in the database represented in this class.
  */
diff --git a/node_modules/typeorm/schema-builder/table/TableExclusion.d.ts b/node_modules/typeorm/schema-builder/table/TableExclusion.d.ts
index 51e7f6a..9fdea16 100644
--- a/node_modules/typeorm/schema-builder/table/TableExclusion.d.ts
+++ b/node_modules/typeorm/schema-builder/table/TableExclusion.d.ts
@@ -1,5 +1,5 @@
-import { TableExclusionOptions } from "../options/TableExclusionOptions";
-import { ExclusionMetadata } from "../../metadata/ExclusionMetadata";
+import { TableExclusionOptions } from "typeorm/schema-builder/options/TableExclusionOptions";
+import { ExclusionMetadata } from "typeorm/metadata/ExclusionMetadata";
 /**
  * Database's table exclusion constraint stored in this class.
  */
diff --git a/node_modules/typeorm/schema-builder/table/TableForeignKey.d.ts b/node_modules/typeorm/schema-builder/table/TableForeignKey.d.ts
index 9979786..2ffb5e2 100644
--- a/node_modules/typeorm/schema-builder/table/TableForeignKey.d.ts
+++ b/node_modules/typeorm/schema-builder/table/TableForeignKey.d.ts
@@ -1,6 +1,6 @@
-import { ForeignKeyMetadata } from "../../metadata/ForeignKeyMetadata";
-import { TableForeignKeyOptions } from "../options/TableForeignKeyOptions";
-import { Driver } from "../../driver/Driver";
+import { ForeignKeyMetadata } from "typeorm/metadata/ForeignKeyMetadata";
+import { TableForeignKeyOptions } from "typeorm/schema-builder/options/TableForeignKeyOptions";
+import { Driver } from "typeorm/driver/Driver";
 /**
  * Foreign key from the database stored in this class.
  */
diff --git a/node_modules/typeorm/schema-builder/table/TableIndex.d.ts b/node_modules/typeorm/schema-builder/table/TableIndex.d.ts
index 4cc4e3f..c0197df 100644
--- a/node_modules/typeorm/schema-builder/table/TableIndex.d.ts
+++ b/node_modules/typeorm/schema-builder/table/TableIndex.d.ts
@@ -1,5 +1,5 @@
-import { IndexMetadata } from "../../metadata/IndexMetadata";
-import { TableIndexOptions } from "../options/TableIndexOptions";
+import { IndexMetadata } from "typeorm/metadata/IndexMetadata";
+import { TableIndexOptions } from "typeorm/schema-builder/options/TableIndexOptions";
 /**
  * Database's table index stored in this class.
  */
diff --git a/node_modules/typeorm/schema-builder/table/TableUnique.d.ts b/node_modules/typeorm/schema-builder/table/TableUnique.d.ts
index a658eef..369a275 100644
--- a/node_modules/typeorm/schema-builder/table/TableUnique.d.ts
+++ b/node_modules/typeorm/schema-builder/table/TableUnique.d.ts
@@ -1,5 +1,5 @@
-import { TableUniqueOptions } from "../options/TableUniqueOptions";
-import { UniqueMetadata } from "../../metadata/UniqueMetadata";
+import { TableUniqueOptions } from "typeorm/schema-builder/options/TableUniqueOptions";
+import { UniqueMetadata } from "typeorm/metadata/UniqueMetadata";
 /**
  * Database's table unique constraint stored in this class.
  */
diff --git a/node_modules/typeorm/schema-builder/view/View.d.ts b/node_modules/typeorm/schema-builder/view/View.d.ts
index 7726301..02e3790 100644
--- a/node_modules/typeorm/schema-builder/view/View.d.ts
+++ b/node_modules/typeorm/schema-builder/view/View.d.ts
@@ -1,5 +1,5 @@
-import { DataSource, Driver, EntityMetadata, SelectQueryBuilder, TableIndex } from "../..";
-import { ViewOptions } from "../options/ViewOptions";
+import { DataSource, Driver, EntityMetadata, SelectQueryBuilder, TableIndex } from "typeorm";
+import { ViewOptions } from "typeorm/schema-builder/options/ViewOptions";
 /**
  * View in the database represented in this class.
  */
diff --git a/node_modules/typeorm/subscriber/Broadcaster.d.ts b/node_modules/typeorm/subscriber/Broadcaster.d.ts
index d6ea4e2..4d59620 100644
--- a/node_modules/typeorm/subscriber/Broadcaster.d.ts
+++ b/node_modules/typeorm/subscriber/Broadcaster.d.ts
@@ -1,10 +1,10 @@
-import { EntitySubscriberInterface } from "./EntitySubscriberInterface";
-import { ObjectLiteral } from "../common/ObjectLiteral";
-import { QueryRunner } from "../query-runner/QueryRunner";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { BroadcasterResult } from "./BroadcasterResult";
-import { ColumnMetadata } from "../metadata/ColumnMetadata";
-import { RelationMetadata } from "../metadata/RelationMetadata";
+import { EntitySubscriberInterface } from "typeorm/subscriber/EntitySubscriberInterface";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { BroadcasterResult } from "typeorm/subscriber/BroadcasterResult";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
 interface BroadcasterEvents {
     BeforeTransactionCommit: () => void;
     AfterTransactionCommit: () => void;
diff --git a/node_modules/typeorm/subscriber/EntitySubscriberInterface.d.ts b/node_modules/typeorm/subscriber/EntitySubscriberInterface.d.ts
index 2449b4c..040cba2 100644
--- a/node_modules/typeorm/subscriber/EntitySubscriberInterface.d.ts
+++ b/node_modules/typeorm/subscriber/EntitySubscriberInterface.d.ts
@@ -1,12 +1,12 @@
-import { TransactionCommitEvent } from "./event/TransactionCommitEvent";
-import { TransactionRollbackEvent } from "./event/TransactionRollbackEvent";
-import { TransactionStartEvent } from "./event/TransactionStartEvent";
-import { UpdateEvent } from "./event/UpdateEvent";
-import { RemoveEvent } from "./event/RemoveEvent";
-import { InsertEvent } from "./event/InsertEvent";
-import { LoadEvent } from "./event/LoadEvent";
-import { SoftRemoveEvent } from "./event/SoftRemoveEvent";
-import { RecoverEvent } from "./event/RecoverEvent";
+import { TransactionCommitEvent } from "typeorm/subscriber/event/TransactionCommitEvent";
+import { TransactionRollbackEvent } from "typeorm/subscriber/event/TransactionRollbackEvent";
+import { TransactionStartEvent } from "typeorm/subscriber/event/TransactionStartEvent";
+import { UpdateEvent } from "typeorm/subscriber/event/UpdateEvent";
+import { RemoveEvent } from "typeorm/subscriber/event/RemoveEvent";
+import { InsertEvent } from "typeorm/subscriber/event/InsertEvent";
+import { LoadEvent } from "typeorm/subscriber/event/LoadEvent";
+import { SoftRemoveEvent } from "typeorm/subscriber/event/SoftRemoveEvent";
+import { RecoverEvent } from "typeorm/subscriber/event/RecoverEvent";
 /**
  * Classes that implement this interface are subscribers that subscribe for the specific events in the ORM.
  */
diff --git a/node_modules/typeorm/subscriber/event/InsertEvent.d.ts b/node_modules/typeorm/subscriber/event/InsertEvent.d.ts
index 93ff38c..a5a37fb 100644
--- a/node_modules/typeorm/subscriber/event/InsertEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/InsertEvent.d.ts
@@ -1,7 +1,7 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
 /**
  * InsertEvent is an object that broadcaster sends to the entity subscriber when entity is inserted to the database.
  */
diff --git a/node_modules/typeorm/subscriber/event/LoadEvent.d.ts b/node_modules/typeorm/subscriber/event/LoadEvent.d.ts
index 3967696..19e660c 100644
--- a/node_modules/typeorm/subscriber/event/LoadEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/LoadEvent.d.ts
@@ -1,7 +1,7 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
 /**
  * LoadEvent is an object that broadcaster sends to the entity subscriber when an entity is loaded from the database.
  */
diff --git a/node_modules/typeorm/subscriber/event/RecoverEvent.d.ts b/node_modules/typeorm/subscriber/event/RecoverEvent.d.ts
index 0a2e2c3..c6a4f51 100644
--- a/node_modules/typeorm/subscriber/event/RecoverEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/RecoverEvent.d.ts
@@ -1,4 +1,4 @@
-import { RemoveEvent } from "./RemoveEvent";
+import { RemoveEvent } from "typeorm/subscriber/event/RemoveEvent";
 /**
  * RecoverEvent is an object that broadcaster sends to the entity subscriber when entity is being recovered in the database.
  */
diff --git a/node_modules/typeorm/subscriber/event/RemoveEvent.d.ts b/node_modules/typeorm/subscriber/event/RemoveEvent.d.ts
index 9b561ae..3dd2676 100644
--- a/node_modules/typeorm/subscriber/event/RemoveEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/RemoveEvent.d.ts
@@ -1,7 +1,7 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
 /**
  * RemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being removed to the database.
  */
diff --git a/node_modules/typeorm/subscriber/event/SoftRemoveEvent.d.ts b/node_modules/typeorm/subscriber/event/SoftRemoveEvent.d.ts
index 8c77e8f..ddc2927 100644
--- a/node_modules/typeorm/subscriber/event/SoftRemoveEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/SoftRemoveEvent.d.ts
@@ -1,4 +1,4 @@
-import { RemoveEvent } from "./RemoveEvent";
+import { RemoveEvent } from "typeorm/subscriber/event/RemoveEvent";
 /**
  * SoftRemoveEvent is an object that broadcaster sends to the entity subscriber when entity is being soft removed to the database.
  */
diff --git a/node_modules/typeorm/subscriber/event/TransactionCommitEvent.d.ts b/node_modules/typeorm/subscriber/event/TransactionCommitEvent.d.ts
index 4fb3fca..de333ff 100644
--- a/node_modules/typeorm/subscriber/event/TransactionCommitEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/TransactionCommitEvent.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * TransactionCommitEvent is an object that broadcaster sends to the entity subscriber when an transaction is committed.
  */
diff --git a/node_modules/typeorm/subscriber/event/TransactionRollbackEvent.d.ts b/node_modules/typeorm/subscriber/event/TransactionRollbackEvent.d.ts
index 263f620..80511b9 100644
--- a/node_modules/typeorm/subscriber/event/TransactionRollbackEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/TransactionRollbackEvent.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * TransactionRollbackEvent is an object that broadcaster sends to the entity subscriber on transaction rollback.
  */
diff --git a/node_modules/typeorm/subscriber/event/TransactionStartEvent.d.ts b/node_modules/typeorm/subscriber/event/TransactionStartEvent.d.ts
index 1833ee8..97847cf 100644
--- a/node_modules/typeorm/subscriber/event/TransactionStartEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/TransactionStartEvent.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { DataSource } from "../../data-source/DataSource";
-import { QueryRunner } from "../../query-runner/QueryRunner";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
 /**
  * TransactionStartEvent is an object that broadcaster sends to the entity subscriber before transaction is started.
  */
diff --git a/node_modules/typeorm/subscriber/event/UpdateEvent.d.ts b/node_modules/typeorm/subscriber/event/UpdateEvent.d.ts
index 80b2ffc..ffd9047 100644
--- a/node_modules/typeorm/subscriber/event/UpdateEvent.d.ts
+++ b/node_modules/typeorm/subscriber/event/UpdateEvent.d.ts
@@ -1,10 +1,10 @@
-import { ColumnMetadata } from "../../metadata/ColumnMetadata";
-import { RelationMetadata } from "../../metadata/RelationMetadata";
-import { EntityManager } from "../../entity-manager/EntityManager";
-import { QueryRunner } from "../../query-runner/QueryRunner";
-import { DataSource } from "../../data-source/DataSource";
-import { EntityMetadata } from "../../metadata/EntityMetadata";
-import { ObjectLiteral } from "../../common/ObjectLiteral";
+import { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import { RelationMetadata } from "typeorm/metadata/RelationMetadata";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { QueryRunner } from "typeorm/query-runner/QueryRunner";
+import { DataSource } from "typeorm/data-source/DataSource";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { ObjectLiteral } from "typeorm/common/ObjectLiteral";
 /**
  * UpdateEvent is an object that broadcaster sends to the entity subscriber when entity is being updated in the database.
  */
diff --git a/node_modules/typeorm/util/InstanceChecker.d.ts b/node_modules/typeorm/util/InstanceChecker.d.ts
index f5367e6..b893db2 100644
--- a/node_modules/typeorm/util/InstanceChecker.d.ts
+++ b/node_modules/typeorm/util/InstanceChecker.d.ts
@@ -1,32 +1,32 @@
-import type { MongoEntityManager } from "../entity-manager/MongoEntityManager";
-import type { SqljsEntityManager } from "../entity-manager/SqljsEntityManager";
-import type { EntitySchema } from "../entity-schema/EntitySchema";
-import type { FindOperator } from "../find-options/FindOperator";
-import type { EqualOperator } from "../find-options/EqualOperator";
-import type { Query } from "../driver/Query";
-import type { RdbmsSchemaBuilder } from "../schema-builder/RdbmsSchemaBuilder";
-import type { Subject } from "../persistence/Subject";
-import type { SelectQueryBuilder } from "../query-builder/SelectQueryBuilder";
-import type { UpdateQueryBuilder } from "../query-builder/UpdateQueryBuilder";
-import type { DeleteQueryBuilder } from "../query-builder/DeleteQueryBuilder";
-import type { SoftDeleteQueryBuilder } from "../query-builder/SoftDeleteQueryBuilder";
-import type { InsertQueryBuilder } from "../query-builder/InsertQueryBuilder";
-import type { RelationQueryBuilder } from "../query-builder/RelationQueryBuilder";
-import type { Brackets } from "../query-builder/Brackets";
-import type { Table } from "../schema-builder/table/Table";
-import type { TableCheck } from "../schema-builder/table/TableCheck";
-import type { TableColumn } from "../schema-builder/table/TableColumn";
-import type { TableExclusion } from "../schema-builder/table/TableExclusion";
-import type { TableForeignKey } from "../schema-builder/table/TableForeignKey";
-import type { TableIndex } from "../schema-builder/table/TableIndex";
-import type { TableUnique } from "../schema-builder/table/TableUnique";
-import type { View } from "../schema-builder/view/View";
-import type { NotBrackets } from "../query-builder/NotBrackets";
-import type { EntityMetadata } from "../metadata/EntityMetadata";
-import type { ColumnMetadata } from "../metadata/ColumnMetadata";
-import type { MssqlParameter } from "../driver/sqlserver/MssqlParameter";
-import { DataSource } from "../data-source";
-import { BaseEntity } from "../repository/BaseEntity";
+import type { MongoEntityManager } from "typeorm/entity-manager/MongoEntityManager";
+import type { SqljsEntityManager } from "typeorm/entity-manager/SqljsEntityManager";
+import type { EntitySchema } from "typeorm/entity-schema/EntitySchema";
+import type { FindOperator } from "typeorm/find-options/FindOperator";
+import type { EqualOperator } from "typeorm/find-options/EqualOperator";
+import type { Query } from "typeorm/driver/Query";
+import type { RdbmsSchemaBuilder } from "typeorm/schema-builder/RdbmsSchemaBuilder";
+import type { Subject } from "typeorm/persistence/Subject";
+import type { SelectQueryBuilder } from "typeorm/query-builder/SelectQueryBuilder";
+import type { UpdateQueryBuilder } from "typeorm/query-builder/UpdateQueryBuilder";
+import type { DeleteQueryBuilder } from "typeorm/query-builder/DeleteQueryBuilder";
+import type { SoftDeleteQueryBuilder } from "typeorm/query-builder/SoftDeleteQueryBuilder";
+import type { InsertQueryBuilder } from "typeorm/query-builder/InsertQueryBuilder";
+import type { RelationQueryBuilder } from "typeorm/query-builder/RelationQueryBuilder";
+import type { Brackets } from "typeorm/query-builder/Brackets";
+import type { Table } from "typeorm/schema-builder/table/Table";
+import type { TableCheck } from "typeorm/schema-builder/table/TableCheck";
+import type { TableColumn } from "typeorm/schema-builder/table/TableColumn";
+import type { TableExclusion } from "typeorm/schema-builder/table/TableExclusion";
+import type { TableForeignKey } from "typeorm/schema-builder/table/TableForeignKey";
+import type { TableIndex } from "typeorm/schema-builder/table/TableIndex";
+import type { TableUnique } from "typeorm/schema-builder/table/TableUnique";
+import type { View } from "typeorm/schema-builder/view/View";
+import type { NotBrackets } from "typeorm/query-builder/NotBrackets";
+import type { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import type { ColumnMetadata } from "typeorm/metadata/ColumnMetadata";
+import type { MssqlParameter } from "typeorm/driver/sqlserver/MssqlParameter";
+import { DataSource } from "typeorm/data-source";
+import { BaseEntity } from "typeorm/repository/BaseEntity";
 export declare class InstanceChecker {
     static isMssqlParameter(obj: unknown): obj is MssqlParameter;
     static isEntityMetadata(obj: unknown): obj is EntityMetadata;
diff --git a/node_modules/typeorm/util/TreeRepositoryUtils.d.ts b/node_modules/typeorm/util/TreeRepositoryUtils.d.ts
index f3110c6..395d809 100644
--- a/node_modules/typeorm/util/TreeRepositoryUtils.d.ts
+++ b/node_modules/typeorm/util/TreeRepositoryUtils.d.ts
@@ -1,6 +1,6 @@
-import { EntityManager } from "../entity-manager/EntityManager";
-import { EntityMetadata } from "../metadata/EntityMetadata";
-import { FindTreesOptions } from "../repository/FindTreesOptions";
+import { EntityManager } from "typeorm/entity-manager/EntityManager";
+import { EntityMetadata } from "typeorm/metadata/EntityMetadata";
+import { FindTreesOptions } from "typeorm/repository/FindTreesOptions";
 /**
  * Provides utilities for manipulating tree structures.
  *
