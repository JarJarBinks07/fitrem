var __defProp=Object.defineProperty;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});import{W as WebPlugin}from"./index-942249a9.js";const _LocalNotificationsWeb=class _LocalNotificationsWeb extends WebPlugin{constructor(){super(...arguments),this.pending=[],this.deliveredNotifications=[],this.hasNotificationSupport=()=>{if(!("Notification"in window)||!Notification.requestPermission)return!1;if(Notification.permission!=="granted")try{new Notification("")}catch(e){if(e.name=="TypeError")return!1}return!0}}async getDeliveredNotifications(){const deliveredSchemas=[];for(const notification of this.deliveredNotifications){const deliveredSchema={title:notification.title,id:parseInt(notification.tag),body:notification.body};deliveredSchemas.push(deliveredSchema)}return{notifications:deliveredSchemas}}async removeDeliveredNotifications(delivered){for(const toRemove of delivered.notifications){const found=this.deliveredNotifications.find(n=>n.tag===String(toRemove.id));found==null||found.close(),this.deliveredNotifications=this.deliveredNotifications.filter(()=>!found)}}async removeAllDeliveredNotifications(){for(const notification of this.deliveredNotifications)notification.close();this.deliveredNotifications=[]}async createChannel(){throw this.unimplemented("Not implemented on web.")}async deleteChannel(){throw this.unimplemented("Not implemented on web.")}async listChannels(){throw this.unimplemented("Not implemented on web.")}async schedule(options){if(!this.hasNotificationSupport())throw this.unavailable("Notifications not supported in this browser.");for(const notification of options.notifications)this.sendNotification(notification);return{notifications:options.notifications.map(notification=>({id:notification.id}))}}async getPending(){return{notifications:this.pending}}async registerActionTypes(){throw this.unimplemented("Not implemented on web.")}async cancel(pending){this.pending=this.pending.filter(notification=>!pending.notifications.find(n=>n.id===notification.id))}async areEnabled(){const{display}=await this.checkPermissions();return{value:display==="granted"}}async requestPermissions(){if(!this.hasNotificationSupport())throw this.unavailable("Notifications not supported in this browser.");return{display:this.transformNotificationPermission(await Notification.requestPermission())}}async checkPermissions(){if(!this.hasNotificationSupport())throw this.unavailable("Notifications not supported in this browser.");return{display:this.transformNotificationPermission(Notification.permission)}}transformNotificationPermission(permission){switch(permission){case"granted":return"granted";case"denied":return"denied";default:return"prompt"}}sendPending(){var _a;const toRemove=[],now=new Date().getTime();for(const notification of this.pending)!((_a=notification.schedule)===null||_a===void 0)&&_a.at&&notification.schedule.at.getTime()<=now&&(this.buildNotification(notification),toRemove.push(notification));this.pending=this.pending.filter(notification=>!toRemove.find(n=>n===notification))}sendNotification(notification){var _a;if(!((_a=notification.schedule)===null||_a===void 0)&&_a.at){const diff=notification.schedule.at.getTime()-new Date().getTime();this.pending.push(notification),setTimeout(()=>{this.sendPending()},diff);return}this.buildNotification(notification)}buildNotification(notification){const localNotification=new Notification(notification.title,{body:notification.body,tag:String(notification.id)});return localNotification.addEventListener("click",this.onClick.bind(this,notification),!1),localNotification.addEventListener("show",this.onShow.bind(this,notification),!1),localNotification.addEventListener("close",()=>{this.deliveredNotifications=this.deliveredNotifications.filter(()=>!this)},!1),this.deliveredNotifications.push(localNotification),localNotification}onClick(notification){const data={actionId:"tap",notification};this.notifyListeners("localNotificationActionPerformed",data)}onShow(notification){this.notifyListeners("localNotificationReceived",notification)}};__name(_LocalNotificationsWeb,"LocalNotificationsWeb");let LocalNotificationsWeb=_LocalNotificationsWeb;export{LocalNotificationsWeb};
